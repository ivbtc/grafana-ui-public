/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkgrafana"] = self["webpackChunkgrafana"] || []).push([["_yarn___virtual___welldone-software-why-did-you-render-virtual-33fce466b1_0_cache_welldone-so-72becc"],{

/***/ "./.yarn/__virtual__/@welldone-software-why-did-you-render-virtual-33fce466b1/0/cache/@welldone-software-why-did-you-render-npm-7.0.1-33d725f830-0bfc59f1f8.zip/node_modules/@welldone-software/why-did-you-render/dist/whyDidYouRender.js":
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("/**\n * @welldone-software/why-did-you-render 7.0.1\n * MIT Licensed\n * Generated by Vitali Zaidman <vzaidman@gmail.com> (https://github.com/vzaidman)\n * Generated at 2022-04-04\n */\n\n(function (global, factory) {\n   true ? module.exports = factory(__webpack_require__(\"./.yarn/cache/react-npm-18.2.0-1eae08fee2-88e38092da.zip/node_modules/react/index.js\"), __webpack_require__(\"./.yarn/cache/lodash-npm-4.17.21-6382451519-eb835a2e51.zip/node_modules/lodash/lodash.js\")) :\n  0;\n})(this, (function (React, lodash) { 'use strict';\n\n  function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }\n\n  function _interopNamespace(e) {\n    if (e && e.__esModule) return e;\n    var n = Object.create(null);\n    if (e) {\n      Object.keys(e).forEach(function (k) {\n        if (k !== 'default') {\n          var d = Object.getOwnPropertyDescriptor(e, k);\n          Object.defineProperty(n, k, d.get ? d : {\n            enumerable: true,\n            get: function () { return e[k]; }\n          });\n        }\n      });\n    }\n    n[\"default\"] = e;\n    return Object.freeze(n);\n  }\n\n  var React__default = /*#__PURE__*/_interopDefaultLegacy(React);\n  var React__namespace = /*#__PURE__*/_interopNamespace(React);\n\n  var wdyrStore = {\n    /* The React object we patch */\n    React: undefined,\n\n    /* Processed user options for WDYR */\n    options: undefined,\n\n    /* The original React.createElement function */\n    origCreateElement: undefined,\n\n    /* The original React.createFactory function */\n    origCreateFactory: undefined,\n\n    /* The original React.cloneElement function */\n    origCloneElement: undefined,\n\n    /* A weak map of all React elements to their WDYR patched react elements */\n    componentsMap: new WeakMap(),\n\n    /* A weak map of props to the owner element that passed them */\n    ownerDataMap: new WeakMap(),\n\n    /* An array of hooks tracked during one render */\n    hooksPerRender: []\n  };\n\n  function ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n\n    if (Object.getOwnPropertySymbols) {\n      var symbols = Object.getOwnPropertySymbols(object);\n      enumerableOnly && (symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      })), keys.push.apply(keys, symbols);\n    }\n\n    return keys;\n  }\n\n  function _objectSpread2(target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = null != arguments[i] ? arguments[i] : {};\n      i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n\n    return target;\n  }\n\n  function _typeof(obj) {\n    \"@babel/helpers - typeof\";\n\n    return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n      return typeof obj;\n    } : function (obj) {\n      return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    }, _typeof(obj);\n  }\n\n  function _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n      throw new TypeError(\"Cannot call a class as a function\");\n    }\n  }\n\n  function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  function _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    Object.defineProperty(Constructor, \"prototype\", {\n      writable: false\n    });\n    return Constructor;\n  }\n\n  function _defineProperty(obj, key, value) {\n    if (key in obj) {\n      Object.defineProperty(obj, key, {\n        value: value,\n        enumerable: true,\n        configurable: true,\n        writable: true\n      });\n    } else {\n      obj[key] = value;\n    }\n\n    return obj;\n  }\n\n  function _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n      throw new TypeError(\"Super expression must either be null or a function\");\n    }\n\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n      constructor: {\n        value: subClass,\n        writable: true,\n        configurable: true\n      }\n    });\n    Object.defineProperty(subClass, \"prototype\", {\n      writable: false\n    });\n    if (superClass) _setPrototypeOf(subClass, superClass);\n  }\n\n  function _getPrototypeOf(o) {\n    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n      return o.__proto__ || Object.getPrototypeOf(o);\n    };\n    return _getPrototypeOf(o);\n  }\n\n  function _setPrototypeOf(o, p) {\n    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n      o.__proto__ = p;\n      return o;\n    };\n\n    return _setPrototypeOf(o, p);\n  }\n\n  function _isNativeReflectConstruct() {\n    if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n    if (Reflect.construct.sham) return false;\n    if (typeof Proxy === \"function\") return true;\n\n    try {\n      Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  function _assertThisInitialized(self) {\n    if (self === void 0) {\n      throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n\n    return self;\n  }\n\n  function _possibleConstructorReturn(self, call) {\n    if (call && (typeof call === \"object\" || typeof call === \"function\")) {\n      return call;\n    } else if (call !== void 0) {\n      throw new TypeError(\"Derived constructors may only return object or undefined\");\n    }\n\n    return _assertThisInitialized(self);\n  }\n\n  function _createSuper(Derived) {\n    var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n    return function _createSuperInternal() {\n      var Super = _getPrototypeOf(Derived),\n          result;\n\n      if (hasNativeReflectConstruct) {\n        var NewTarget = _getPrototypeOf(this).constructor;\n\n        result = Reflect.construct(Super, arguments, NewTarget);\n      } else {\n        result = Super.apply(this, arguments);\n      }\n\n      return _possibleConstructorReturn(this, result);\n    };\n  }\n\n  function _superPropBase(object, property) {\n    while (!Object.prototype.hasOwnProperty.call(object, property)) {\n      object = _getPrototypeOf(object);\n      if (object === null) break;\n    }\n\n    return object;\n  }\n\n  function _get() {\n    if (typeof Reflect !== \"undefined\" && Reflect.get) {\n      _get = Reflect.get;\n    } else {\n      _get = function _get(target, property, receiver) {\n        var base = _superPropBase(target, property);\n\n        if (!base) return;\n        var desc = Object.getOwnPropertyDescriptor(base, property);\n\n        if (desc.get) {\n          return desc.get.call(arguments.length < 3 ? target : receiver);\n        }\n\n        return desc.value;\n      };\n    }\n\n    return _get.apply(this, arguments);\n  }\n\n  function _slicedToArray(arr, i) {\n    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n  }\n\n  function _toConsumableArray(arr) {\n    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n  }\n\n  function _arrayWithoutHoles(arr) {\n    if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n  }\n\n  function _arrayWithHoles(arr) {\n    if (Array.isArray(arr)) return arr;\n  }\n\n  function _iterableToArray(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n  }\n\n  function _iterableToArrayLimit(arr, i) {\n    var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n    if (_i == null) return;\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n\n    var _s, _e;\n\n    try {\n      for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  function _unsupportedIterableToArray(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(o);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n  }\n\n  function _arrayLikeToArray(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n\n    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n\n    return arr2;\n  }\n\n  function _nonIterableSpread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  function _nonIterableRest() {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  function _createForOfIteratorHelper(o, allowArrayLike) {\n    var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n\n    if (!it) {\n      if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n        if (it) o = it;\n        var i = 0;\n\n        var F = function () {};\n\n        return {\n          s: F,\n          n: function () {\n            if (i >= o.length) return {\n              done: true\n            };\n            return {\n              done: false,\n              value: o[i++]\n            };\n          },\n          e: function (e) {\n            throw e;\n          },\n          f: F\n        };\n      }\n\n      throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n    }\n\n    var normalCompletion = true,\n        didErr = false,\n        err;\n    return {\n      s: function () {\n        it = it.call(o);\n      },\n      n: function () {\n        var step = it.next();\n        normalCompletion = step.done;\n        return step;\n      },\n      e: function (e) {\n        didErr = true;\n        err = e;\n      },\n      f: function () {\n        try {\n          if (!normalCompletion && it.return != null) it.return();\n        } finally {\n          if (didErr) throw err;\n        }\n      }\n    };\n  }\n\n  var _diffTypesDescription;\n  var diffTypes = {\n    'different': 'different',\n    'deepEquals': 'deepEquals',\n    'date': 'date',\n    'regex': 'regex',\n    'reactElement': 'reactElement',\n    'function': 'function',\n    'same': 'same'\n  };\n  var diffTypesDescriptions = (_diffTypesDescription = {}, _defineProperty(_diffTypesDescription, diffTypes.different, 'different objects'), _defineProperty(_diffTypesDescription, diffTypes.deepEquals, 'different objects that are equal by value'), _defineProperty(_diffTypesDescription, diffTypes.date, 'different date objects with the same value'), _defineProperty(_diffTypesDescription, diffTypes.regex, 'different regular expressions with the same value'), _defineProperty(_diffTypesDescription, diffTypes.reactElement, 'different React elements (remember that the <jsx/> syntax always produces a *NEW* immutable React element so a component that receives <jsx/> as props always re-renders)'), _defineProperty(_diffTypesDescription, diffTypes[\"function\"], 'different functions with the same name'), _defineProperty(_diffTypesDescription, diffTypes.same, 'same objects by ref (===)'), _diffTypesDescription); // copied from packages/shared/ReactSymbols.js in https://github.com/facebook/react\n\n  var hasSymbol$1 = typeof Symbol === 'function' && Symbol[\"for\"];\n  var REACT_MEMO_TYPE = hasSymbol$1 ? Symbol[\"for\"]('react.memo') : 0xead3;\n  var REACT_FORWARD_REF_TYPE = hasSymbol$1 ? Symbol[\"for\"]('react.forward_ref') : 0xead0;\n  var REACT_VERSION = Number(React__default[\"default\"].version.split('.')[0]) || 0;\n  var REACT_STRICT_MODE = REACT_VERSION >= 18 ? 8 : 1;\n\n  var hasElementType = typeof Element !== 'undefined'; // copied from https://github.com/facebook/react/packages/shared/ReactSymbols.js\n\n  var hasSymbol = typeof Symbol === 'function' && Symbol[\"for\"];\n  var REACT_ELEMENT_TYPE = hasSymbol ? Symbol[\"for\"]('react.element') : 0xeac7;\n\n  var isReactElement = function isReactElement(object) {\n    return object.$$typeof === REACT_ELEMENT_TYPE;\n  }; // end\n\n\n  function trackDiff(a, b, diffsAccumulator, pathString, diffType) {\n    diffsAccumulator.push({\n      diffType: diffType,\n      pathString: pathString,\n      prevValue: a,\n      nextValue: b\n    });\n    return diffType !== diffTypes.different;\n  }\n\n  function isGetter(obj, prop) {\n    return !!Object.getOwnPropertyDescriptor(obj, prop)['get'];\n  }\n\n  var dependenciesMap = new WeakMap();\n\n  function accumulateDeepEqualDiffs(a, b, diffsAccumulator) {\n    var pathString = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '';\n\n    var _ref = arguments.length > 4 ? arguments[4] : undefined,\n        detailed = _ref.detailed;\n\n    if (a === b) {\n      if (detailed) {\n        trackDiff(a, b, diffsAccumulator, pathString, diffTypes.same);\n      }\n\n      return true;\n    }\n\n    if (!a || !b) {\n      return trackDiff(a, b, diffsAccumulator, pathString, diffTypes.different);\n    }\n\n    if (lodash.isArray(a) && lodash.isArray(b)) {\n      var arrayLength = a.length;\n\n      if (arrayLength !== b.length) {\n        return trackDiff(_toConsumableArray(a), _toConsumableArray(b), diffsAccumulator, pathString, diffTypes.different);\n      }\n\n      var arrayItemDiffs = [];\n      var numberOfDeepEqualsItems = 0;\n\n      for (var i = arrayLength; i--; i > 0) {\n        var diffEquals = accumulateDeepEqualDiffs(a[i], b[i], arrayItemDiffs, \"\".concat(pathString, \"[\").concat(i, \"]\"), {\n          detailed: detailed\n        });\n\n        if (diffEquals) {\n          numberOfDeepEqualsItems++;\n        }\n      }\n\n      if (detailed || numberOfDeepEqualsItems !== arrayLength) {\n        diffsAccumulator.push.apply(diffsAccumulator, arrayItemDiffs);\n      }\n\n      if (numberOfDeepEqualsItems === arrayLength) {\n        return trackDiff(_toConsumableArray(a), _toConsumableArray(b), diffsAccumulator, pathString, diffTypes.deepEquals);\n      }\n\n      return trackDiff(_toConsumableArray(a), _toConsumableArray(b), diffsAccumulator, pathString, diffTypes.different);\n    }\n\n    if (lodash.isSet(a) && lodash.isSet(b)) {\n      if (a.size !== b.size) {\n        return trackDiff(new Set(a), new Set(b), diffsAccumulator, pathString, diffTypes.different);\n      }\n\n      var _iterator = _createForOfIteratorHelper(a),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var valA = _step.value;\n\n          if (!b.has(valA)) {\n            return trackDiff(new Set(a), new Set(b), diffsAccumulator, pathString, diffTypes.different);\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      return trackDiff(new Set(a), new Set(b), diffsAccumulator, pathString, diffTypes.deepEquals);\n    }\n\n    if (lodash.isDate(a) && lodash.isDate(b)) {\n      return a.getTime() === b.getTime() ? trackDiff(new Date(a), new Date(b), diffsAccumulator, pathString, diffTypes.date) : trackDiff(new Date(a), new Date(b), diffsAccumulator, pathString, diffTypes.different);\n    }\n\n    if (lodash.isRegExp(a) && lodash.isRegExp(b)) {\n      return a.toString() === b.toString() ? trackDiff(a, b, diffsAccumulator, pathString, diffTypes.regex) : trackDiff(a, b, diffsAccumulator, pathString, diffTypes.different);\n    }\n\n    if (hasElementType && a instanceof Element && b instanceof Element) {\n      return trackDiff(a, b, diffsAccumulator, pathString, diffTypes.different);\n    }\n\n    if (isReactElement(a) && isReactElement(b)) {\n      if (a.type !== b.type) {\n        return trackDiff(a, b, diffsAccumulator, pathString, diffTypes.different);\n      }\n\n      var reactElementPropsAreDeepEqual = accumulateDeepEqualDiffs(a.props, b.props, [], \"\".concat(pathString, \".props\"), {\n        detailed: detailed\n      });\n      return reactElementPropsAreDeepEqual ? trackDiff(a, b, diffsAccumulator, pathString, diffTypes.reactElement) : trackDiff(a, b, diffsAccumulator, pathString, diffTypes.different);\n    }\n\n    if (lodash.isFunction(a) && lodash.isFunction(b)) {\n      if (a.name !== b.name) {\n        return trackDiff(a, b, diffsAccumulator, pathString, diffTypes.different);\n      }\n\n      var aDependenciesObj = dependenciesMap.get(a);\n      var bDependenciesObj = dependenciesMap.get(b);\n\n      if (aDependenciesObj && bDependenciesObj) {\n        var dependenciesAreDeepEqual = accumulateDeepEqualDiffs(aDependenciesObj.deps, bDependenciesObj.deps, diffsAccumulator, \"\".concat(pathString, \":parent-hook-\").concat(aDependenciesObj.hookName, \"-deps\"), {\n          detailed: detailed\n        });\n        return dependenciesAreDeepEqual ? trackDiff(a, b, diffsAccumulator, pathString, diffTypes[\"function\"]) : trackDiff(a, b, diffsAccumulator, pathString, diffTypes.different);\n      }\n\n      return trackDiff(a, b, diffsAccumulator, pathString, diffTypes[\"function\"]);\n    }\n\n    if (_typeof(a) === 'object' && _typeof(b) === 'object' && Object.getPrototypeOf(a) === Object.getPrototypeOf(b)) {\n      var aKeys = Object.getOwnPropertyNames(a);\n      var bKeys = Object.getOwnPropertyNames(b);\n      var allKeys = lodash.uniq([].concat(_toConsumableArray(aKeys), _toConsumableArray(bKeys)));\n      var clonedA = lodash.isPlainObject(a) ? _objectSpread2({}, a) : a;\n      var clonedB = lodash.isPlainObject(b) ? _objectSpread2({}, b) : b;\n\n      if (allKeys.length !== aKeys.length || allKeys.length !== bKeys.length) {\n        return trackDiff(clonedA, clonedB, diffsAccumulator, pathString, diffTypes.different);\n      }\n\n      var relevantKeys = allKeys.filter(function (key) {\n        // do not compare the stack as it differ even though the errors are identical.\n        if (key === 'stack' && lodash.isError(a)) {\n          return false;\n        } // getters checking is causing too much problems because of how it's used in js.\n        // not only getters can throw errors, they also cause side effects in many cases.\n\n\n        if (isGetter(a, key)) {\n          return false;\n        }\n\n        return true;\n      });\n      var keysLength = relevantKeys.length;\n\n      for (var _i = keysLength; _i--; _i > 0) {\n        if (!lodash.has(b, relevantKeys[_i])) {\n          return trackDiff(clonedA, clonedB, diffsAccumulator, pathString, diffTypes.different);\n        }\n      }\n\n      var objectValuesDiffs = [];\n      var numberOfDeepEqualsObjectValues = 0;\n\n      for (var _i2 = keysLength; _i2--; _i2 > 0) {\n        var key = relevantKeys[_i2];\n        var deepEquals = accumulateDeepEqualDiffs(a[key], b[key], objectValuesDiffs, \"\".concat(pathString, \".\").concat(key), {\n          detailed: detailed\n        });\n\n        if (deepEquals) {\n          numberOfDeepEqualsObjectValues++;\n        }\n      }\n\n      if (detailed || numberOfDeepEqualsObjectValues !== keysLength) {\n        diffsAccumulator.push.apply(diffsAccumulator, objectValuesDiffs);\n      }\n\n      if (numberOfDeepEqualsObjectValues === keysLength) {\n        return trackDiff(clonedA, clonedB, diffsAccumulator, pathString, diffTypes.deepEquals);\n      }\n\n      return trackDiff(clonedA, clonedB, diffsAccumulator, pathString, diffTypes.different);\n    }\n\n    return trackDiff(a, b, diffsAccumulator, pathString, diffTypes.different);\n  }\n\n  function calculateDeepEqualDiffs(a, b, initialPathString) {\n    var _ref2 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {},\n        _ref2$detailed = _ref2.detailed,\n        detailed = _ref2$detailed === void 0 ? false : _ref2$detailed;\n\n    try {\n      var diffs = [];\n      accumulateDeepEqualDiffs(a, b, diffs, initialPathString, {\n        detailed: detailed\n      });\n      return diffs;\n    } catch (error) {\n      if (error.message && error.message.match(/stack|recursion/i) || error.number === -2146828260) {\n        // warn on circular references, don't crash.\n        // browsers throw different errors name and messages:\n        // chrome/safari: \"RangeError\", \"Maximum call stack size exceeded\"\n        // firefox: \"InternalError\", too much recursion\"\n        // edge: \"Error\", \"Out of stack space\"\n        // eslint-disable-next-line no-console\n        console.warn('Warning: why-did-you-render couldn\\'t handle circular references in props.', error.name, error.message);\n        return false;\n      }\n\n      throw error;\n    }\n  }\n\n  function printDiff(value1, value2, _ref) {\n    var pathString = _ref.pathString,\n        consoleLog = _ref.consoleLog;\n    var diffs = calculateDeepEqualDiffs(value1, value2, pathString, {\n      detailed: true\n    });\n    var keysLength = Math.max.apply(Math, _toConsumableArray(diffs.map(function (diff) {\n      return diff.pathString.length;\n    }))) + 2;\n    Object.entries(lodash.groupBy(lodash.sortBy(diffs, 'pathString'), 'diffType')).forEach(function (_ref2) {\n      var _ref3 = _slicedToArray(_ref2, 2),\n          diffType = _ref3[0],\n          diffs = _ref3[1];\n\n      consoleLog(\"%c\".concat(diffTypesDescriptions[diffType], \":\"), 'text-decoration: underline; color: blue;');\n      diffs.forEach(function (diff) {\n        consoleLog(\"\".concat(diff.pathString, \":\").padEnd(keysLength, ' '), diff.prevValue);\n      });\n    });\n  }\n\n  var moreInfoUrl = 'http://bit.ly/wdyr02';\n  var moreInfoHooksUrl = 'http://bit.ly/wdyr3';\n  var inHotReload = false;\n\n  function shouldLog(reason, Component) {\n    if (inHotReload) {\n      return false;\n    }\n\n    if (wdyrStore.options.logOnDifferentValues) {\n      return true;\n    }\n\n    if (Component.whyDidYouRender && Component.whyDidYouRender.logOnDifferentValues) {\n      return true;\n    }\n\n    var hasDifferentValues = reason.propsDifferences && reason.propsDifferences.some(function (diff) {\n      return diff.diffType === diffTypes.different;\n    }) || reason.stateDifferences && reason.stateDifferences.some(function (diff) {\n      return diff.diffType === diffTypes.different;\n    }) || reason.hookDifferences && reason.hookDifferences.some(function (diff) {\n      return diff.diffType === diffTypes.different;\n    });\n    return !hasDifferentValues;\n  }\n\n  function logDifference(_ref) {\n    var Component = _ref.Component,\n        displayName = _ref.displayName,\n        hookName = _ref.hookName,\n        prefixMessage = _ref.prefixMessage,\n        diffObjType = _ref.diffObjType,\n        differences = _ref.differences,\n        values = _ref.values;\n\n    if (differences && differences.length > 0) {\n      wdyrStore.options.consoleLog(_defineProperty({}, displayName, Component), \"\".concat(prefixMessage, \" of \").concat(diffObjType, \" changes:\"));\n      differences.forEach(function (_ref2) {\n        var pathString = _ref2.pathString,\n            diffType = _ref2.diffType,\n            prevValue = _ref2.prevValue,\n            nextValue = _ref2.nextValue;\n\n        function diffFn() {\n          printDiff(prevValue, nextValue, {\n            pathString: pathString,\n            consoleLog: wdyrStore.options.consoleLog\n          });\n        }\n\n        wdyrStore.options.consoleGroup(\"%c\".concat(diffObjType === 'hook' ? \"[hook \".concat(hookName, \" result]\") : \"\".concat(diffObjType, \".\"), \"%c\").concat(pathString, \"%c\"), \"color:\".concat(wdyrStore.options.diffNameColor, \";\"), \"color:\".concat(wdyrStore.options.diffPathColor, \";\"), 'color:default;');\n        wdyrStore.options.consoleLog(\"\".concat(diffTypesDescriptions[diffType], \". (more info at \").concat(hookName ? moreInfoHooksUrl : moreInfoUrl, \")\"));\n        wdyrStore.options.consoleLog(_defineProperty({}, \"prev \".concat(pathString), prevValue), '!==', _defineProperty({}, \"next \".concat(pathString), nextValue));\n\n        if (diffType === diffTypes.deepEquals) {\n          wdyrStore.options.consoleLog({\n            'For detailed diff, right click the following fn, save as global, and run: ': diffFn\n          });\n        }\n\n        wdyrStore.options.consoleGroupEnd();\n      });\n    } else if (differences) {\n      wdyrStore.options.consoleLog(_defineProperty({}, displayName, Component), \"\".concat(prefixMessage, \" the \").concat(diffObjType, \" object itself changed but its values are all equal.\"), diffObjType === 'props' ? 'This could have been avoided by making the component pure, or by preventing its father from re-rendering.' : 'This usually means this component called setState when no changes in its state actually occurred.', \"More info at \".concat(moreInfoUrl));\n      wdyrStore.options.consoleLog(\"prev \".concat(diffObjType, \":\"), values.prev, ' !== ', values.next, \":next \".concat(diffObjType));\n    }\n  }\n\n  function defaultNotifier(updateInfo) {\n    var Component = updateInfo.Component,\n        displayName = updateInfo.displayName,\n        hookName = updateInfo.hookName,\n        prevProps = updateInfo.prevProps,\n        prevState = updateInfo.prevState,\n        prevHook = updateInfo.prevHook,\n        nextProps = updateInfo.nextProps,\n        nextState = updateInfo.nextState,\n        nextHook = updateInfo.nextHook,\n        reason = updateInfo.reason;\n\n    if (!shouldLog(reason, Component, wdyrStore.options)) {\n      return;\n    }\n\n    wdyrStore.options.consoleGroup(\"%c\".concat(displayName), \"color: \".concat(wdyrStore.options.titleColor, \";\"));\n    var prefixMessage = 'Re-rendered because';\n\n    if (reason.propsDifferences) {\n      logDifference({\n        Component: Component,\n        displayName: displayName,\n        prefixMessage: prefixMessage,\n        diffObjType: 'props',\n        differences: reason.propsDifferences,\n        values: {\n          prev: prevProps,\n          next: nextProps\n        }\n      });\n      prefixMessage = 'And because';\n    }\n\n    if (reason.stateDifferences) {\n      logDifference({\n        Component: Component,\n        displayName: displayName,\n        prefixMessage: prefixMessage,\n        diffObjType: 'state',\n        differences: reason.stateDifferences,\n        values: {\n          prev: prevState,\n          next: nextState\n        }\n      });\n    }\n\n    if (reason.hookDifferences) {\n      logDifference({\n        Component: Component,\n        displayName: displayName,\n        prefixMessage: prefixMessage,\n        diffObjType: 'hook',\n        differences: reason.hookDifferences,\n        values: {\n          prev: prevHook,\n          next: nextHook\n        },\n        hookName: hookName\n      });\n    }\n\n    if (reason.propsDifferences && reason.ownerDifferences) {\n      var prevOwnerData = wdyrStore.ownerDataMap.get(prevProps);\n      var nextOwnerData = wdyrStore.ownerDataMap.get(nextProps);\n      wdyrStore.options.consoleGroup(\"Rendered by \".concat(nextOwnerData.displayName));\n      var _prefixMessage = 'Re-rendered because';\n\n      if (reason.ownerDifferences.propsDifferences) {\n        logDifference({\n          Component: nextOwnerData.Component,\n          displayName: nextOwnerData.displayName,\n          prefixMessage: _prefixMessage,\n          diffObjType: 'props',\n          differences: reason.ownerDifferences.propsDifferences,\n          values: {\n            prev: prevOwnerData.props,\n            next: nextOwnerData.props\n          }\n        });\n        _prefixMessage = 'And because';\n      }\n\n      if (reason.ownerDifferences.stateDifferences) {\n        logDifference({\n          Component: nextOwnerData.Component,\n          displayName: nextOwnerData.displayName,\n          prefixMessage: _prefixMessage,\n          diffObjType: 'state',\n          differences: reason.ownerDifferences.stateDifferences,\n          values: {\n            prev: prevOwnerData.state,\n            next: nextOwnerData.state\n          }\n        });\n      }\n\n      if (reason.ownerDifferences.hookDifferences) {\n        reason.ownerDifferences.hookDifferences.forEach(function (_ref3, i) {\n          var hookName = _ref3.hookName,\n              differences = _ref3.differences;\n          return logDifference({\n            Component: nextOwnerData.Component,\n            displayName: nextOwnerData.displayName,\n            prefixMessage: _prefixMessage,\n            diffObjType: 'hook',\n            differences: differences,\n            values: {\n              prev: prevOwnerData.hooks[i].result,\n              next: nextOwnerData.hooks[i].result\n            },\n            hookName: hookName\n          });\n        });\n      }\n\n      wdyrStore.options.consoleGroupEnd();\n    }\n\n    if (!reason.propsDifferences && !reason.stateDifferences && !reason.hookDifferences) {\n      wdyrStore.options.consoleLog(_defineProperty({}, displayName, Component), 'Re-rendered although props and state objects are the same.', 'This usually means there was a call to this.forceUpdate() inside the component.', \"more info at \".concat(moreInfoUrl));\n    }\n\n    wdyrStore.options.consoleGroupEnd();\n  }\n  function createDefaultNotifier(hotReloadBufferMs) {\n    if (hotReloadBufferMs) {\n      if (false) {}\n    }\n\n    return defaultNotifier;\n  }\n\n  var emptyFn = function emptyFn() {};\n\n  function normalizeOptions() {\n    var userOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var consoleGroup = console.group;\n    var consoleGroupEnd = console.groupEnd;\n\n    if (userOptions.collapseGroups) {\n      consoleGroup = console.groupCollapsed;\n    } else if (userOptions.onlyLogs) {\n      consoleGroup = console.log;\n      consoleGroupEnd = emptyFn;\n    }\n\n    var notifier = userOptions.notifier || createDefaultNotifier('hotReloadBufferMs' in userOptions ? userOptions.hotReloadBufferMs : 500);\n    return _objectSpread2({\n      include: null,\n      exclude: null,\n      notifier: notifier,\n      onlyLogs: false,\n      consoleLog: console.log,\n      consoleGroup: consoleGroup,\n      consoleGroupEnd: consoleGroupEnd,\n      logOnDifferentValues: false,\n      logOwnerReasons: true,\n      trackHooks: true,\n      titleColor: '#058',\n      diffNameColor: 'blue',\n      diffPathColor: 'red',\n      trackExtraHooks: [],\n      trackAllPureComponents: false\n    }, userOptions);\n  }\n\n  function getDisplayName(type) {\n    return type.displayName || type.name || type.type && getDisplayName(type.type) || type.render && getDisplayName(type.render) || (lodash.isString(type) ? type : 'Unknown');\n  }\n\n  function getDefaultProps(type) {\n    return type.defaultProps || type.type && getDefaultProps(type.type) || type.render && getDefaultProps(type.render) || {};\n  }\n\n  var emptyObject = {};\n  function findObjectsDifferences(userPrevObj, userNextObj) {\n    var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n        _ref$shallow = _ref.shallow,\n        shallow = _ref$shallow === void 0 ? true : _ref$shallow;\n\n    if (userPrevObj === userNextObj) {\n      return false;\n    }\n\n    if (!shallow) {\n      return calculateDeepEqualDiffs(userPrevObj, userNextObj);\n    }\n\n    var prevObj = userPrevObj || emptyObject;\n    var nextObj = userNextObj || emptyObject;\n    var keysOfBothObjects = Object.keys(_objectSpread2(_objectSpread2({}, prevObj), nextObj));\n    return lodash.reduce(keysOfBothObjects, function (result, key) {\n      var deepEqualDiffs = calculateDeepEqualDiffs(prevObj[key], nextObj[key], key);\n\n      if (deepEqualDiffs) {\n        result = [].concat(_toConsumableArray(result), _toConsumableArray(deepEqualDiffs));\n      }\n\n      return result;\n    }, []);\n  }\n\n  function getOwnerDifferences(_ref) {\n    var prevOwnerData = _ref.prevOwnerData,\n        nextOwnerData = _ref.nextOwnerData;\n\n    if (!prevOwnerData || !nextOwnerData) {\n      return false;\n    } // in strict mode prevOwnerData might be twice as lengthy because of double renders\n\n\n    var prevOwnerDataHooks = prevOwnerData.hooks.length === nextOwnerData.hooks.length * 2 ? prevOwnerData.hooks.slice(prevOwnerData.hooks.length / 2) : prevOwnerData.hooks;\n    var hookDifferences = prevOwnerDataHooks.map(function (_ref2, i) {\n      var hookName = _ref2.hookName,\n          result = _ref2.result;\n      return {\n        hookName: hookName,\n        differences: findObjectsDifferences(result, nextOwnerData.hooks[i].result, {\n          shallow: false\n        })\n      };\n    });\n    return {\n      propsDifferences: findObjectsDifferences(prevOwnerData.props, nextOwnerData.props),\n      stateDifferences: findObjectsDifferences(prevOwnerData.state, nextOwnerData.state),\n      hookDifferences: hookDifferences.length > 0 ? hookDifferences : false\n    };\n  }\n\n  function getUpdateReason(prevProps, prevState, prevHook, nextProps, nextState, nextHook) {\n    var prevOwnerData = wdyrStore.ownerDataMap.get(prevProps);\n    var nextOwnerData = wdyrStore.ownerDataMap.get(nextProps);\n    return {\n      propsDifferences: findObjectsDifferences(prevProps, nextProps),\n      stateDifferences: findObjectsDifferences(prevState, nextState),\n      hookDifferences: findObjectsDifferences(prevHook, nextHook, {\n        shallow: false\n      }),\n      ownerDifferences: getOwnerDifferences({\n        prevOwnerData: prevOwnerData,\n        nextOwnerData: nextOwnerData\n      })\n    };\n  }\n\n  function getUpdateInfo(_ref3) {\n    var Component = _ref3.Component,\n        displayName = _ref3.displayName,\n        hookName = _ref3.hookName,\n        prevProps = _ref3.prevProps,\n        prevState = _ref3.prevState,\n        prevHook = _ref3.prevHook,\n        nextProps = _ref3.nextProps,\n        nextState = _ref3.nextState,\n        nextHook = _ref3.nextHook;\n    return {\n      Component: Component,\n      displayName: displayName,\n      hookName: hookName,\n      prevProps: prevProps,\n      prevState: prevState,\n      prevHook: prevHook,\n      nextProps: nextProps,\n      nextState: nextState,\n      nextHook: nextHook,\n      reason: getUpdateReason(prevProps, prevState, prevHook, nextProps, nextState, nextHook)\n    };\n  }\n\n  // copied from https://github.com/facebook/react/blob/master/packages/react-reconciler/src/ReactTypeOfMode.js\n  // notice: this is only used for class components. functional components doesn't render twice inside strict mode\n\n  function checkIfInsideAStrictModeTree(reactComponentInstance) {\n    var reactInternalFiber = reactComponentInstance && (reactComponentInstance._reactInternalFiber || reactComponentInstance._reactInternals);\n\n    while (reactInternalFiber) {\n      if (reactInternalFiber.mode & REACT_STRICT_MODE) {\n        return true;\n      }\n\n      reactInternalFiber = reactInternalFiber[\"return\"];\n    }\n\n    return false;\n  }\n  function isReactClassComponent(Component) {\n    return Component.prototype && !!Component.prototype.isReactComponent;\n  }\n  function isMemoComponent(Component) {\n    return Component.$$typeof === REACT_MEMO_TYPE;\n  }\n  function isForwardRefComponent(Component) {\n    return Component.$$typeof === REACT_FORWARD_REF_TYPE;\n  }\n\n  function shouldInclude(displayName) {\n    return wdyrStore.options.include && wdyrStore.options.include.length > 0 && wdyrStore.options.include.some(function (regex) {\n      return regex.test(displayName);\n    });\n  }\n\n  function shouldExclude(displayName) {\n    return wdyrStore.options.exclude && wdyrStore.options.exclude.length > 0 && wdyrStore.options.exclude.some(function (regex) {\n      return regex.test(displayName);\n    });\n  }\n\n  function shouldTrack(Component, _ref) {\n    var isHookChange = _ref.isHookChange;\n    var displayName = getDisplayName(Component);\n\n    if (shouldExclude(displayName)) {\n      return false;\n    }\n\n    if (Component.whyDidYouRender === false) {\n      return false;\n    }\n\n    if (isHookChange && Component.whyDidYouRender && Component.whyDidYouRender.trackHooks === false) {\n      return false;\n    }\n\n    return !!(Component.whyDidYouRender || wdyrStore.options.trackAllPureComponents && (Component && Component.prototype instanceof wdyrStore.React.PureComponent || isMemoComponent(Component)) || shouldInclude(displayName));\n  }\n\n  function patchClassComponent(ClassComponent, _ref) {\n    var displayName = _ref.displayName,\n        defaultProps = _ref.defaultProps;\n\n    var WDYRPatchedClassComponent = /*#__PURE__*/function (_ClassComponent) {\n      _inherits(WDYRPatchedClassComponent, _ClassComponent);\n\n      var _super = _createSuper(WDYRPatchedClassComponent);\n\n      function WDYRPatchedClassComponent(props, context) {\n        var _thisSuper, _this;\n\n        _classCallCheck(this, WDYRPatchedClassComponent);\n\n        _this = _super.call(this, props, context);\n        _this._WDYR = {\n          renderNumber: 0\n        };\n\n        var origRender = _get((_thisSuper = _assertThisInitialized(_this), _getPrototypeOf(WDYRPatchedClassComponent.prototype)), \"render\", _thisSuper) || _this.render; // this probably means that render is an arrow function or this.render.bind(this) was called on the original class\n\n\n        var renderIsABindedFunction = origRender !== ClassComponent.prototype.render;\n\n        if (renderIsABindedFunction) {\n          _this.render = function () {\n            WDYRPatchedClassComponent.prototype.render.apply(_assertThisInitialized(_this));\n            return origRender();\n          };\n        }\n\n        return _this;\n      }\n\n      _createClass(WDYRPatchedClassComponent, [{\n        key: \"render\",\n        value: function render() {\n          this._WDYR.renderNumber++;\n\n          if (!('isStrictMode' in this._WDYR)) {\n            this._WDYR.isStrictMode = checkIfInsideAStrictModeTree(this);\n          } // in strict mode- ignore every other render\n\n\n          if (!(this._WDYR.isStrictMode && this._WDYR.renderNumber % 2 === 1)) {\n            if (this._WDYR.prevProps) {\n              var updateInfo = getUpdateInfo({\n                Component: ClassComponent,\n                displayName: displayName,\n                prevProps: this._WDYR.prevProps,\n                prevState: this._WDYR.prevState,\n                nextProps: this.props,\n                nextState: this.state\n              });\n              wdyrStore.options.notifier(updateInfo);\n            }\n\n            this._WDYR.prevProps = this.props;\n            this._WDYR.prevState = this.state;\n          }\n\n          return _get(_getPrototypeOf(WDYRPatchedClassComponent.prototype), \"render\", this) ? _get(_getPrototypeOf(WDYRPatchedClassComponent.prototype), \"render\", this).call(this) : null;\n        }\n      }]);\n\n      return WDYRPatchedClassComponent;\n    }(ClassComponent);\n\n    try {\n      WDYRPatchedClassComponent.displayName = displayName;\n    } catch (e) {// not crucial if displayName couldn't be set\n    }\n\n    WDYRPatchedClassComponent.defaultProps = defaultProps;\n    lodash.defaults(WDYRPatchedClassComponent, ClassComponent);\n    return WDYRPatchedClassComponent;\n  }\n\n  var getFunctionalComponentFromStringComponent = function getFunctionalComponentFromStringComponent(componentTypeStr) {\n    return function (props) {\n      return wdyrStore.React.createElement(componentTypeStr, props);\n    };\n  };\n\n  function patchFunctionalOrStrComponent(FunctionalOrStringComponent, _ref) {\n    var isPure = _ref.isPure,\n        displayName = _ref.displayName,\n        defaultProps = _ref.defaultProps;\n    var FunctionalComponent = typeof FunctionalOrStringComponent === 'string' ? getFunctionalComponentFromStringComponent(FunctionalOrStringComponent) : FunctionalOrStringComponent;\n\n    function WDYRFunctionalComponent() {\n      var nextProps = arguments[0];\n      var ref = wdyrStore.React.useRef();\n      var prevProps = ref.current;\n      ref.current = nextProps;\n\n      if (prevProps) {\n        var updateInfo = getUpdateInfo({\n          Component: FunctionalComponent,\n          displayName: displayName,\n          prevProps: prevProps,\n          nextProps: nextProps\n        });\n        var notifiedByHooks = !updateInfo.reason.propsDifferences || isPure && updateInfo.reason.propsDifferences.length === 0;\n\n        if (!notifiedByHooks) {\n          wdyrStore.options.notifier(updateInfo);\n        }\n      }\n\n      return FunctionalComponent.apply(void 0, arguments);\n    }\n\n    try {\n      WDYRFunctionalComponent.displayName = displayName;\n    } catch (e) {// not crucial if displayName couldn't be set\n    }\n\n    WDYRFunctionalComponent.defaultProps = defaultProps;\n    WDYRFunctionalComponent.ComponentForHooksTracking = FunctionalComponent;\n    lodash.defaults(WDYRFunctionalComponent, FunctionalComponent);\n    return WDYRFunctionalComponent;\n  }\n\n  function patchMemoComponent(MemoComponent, _ref) {\n    var displayName = _ref.displayName,\n        defaultProps = _ref.defaultProps;\n    var InnerMemoComponent = MemoComponent.type;\n    var isInnerMemoComponentAClassComponent = isReactClassComponent(InnerMemoComponent);\n    var isInnerMemoComponentForwardRefs = isForwardRefComponent(InnerMemoComponent);\n    var isInnerMemoComponentAnotherMemoComponent = isMemoComponent(InnerMemoComponent);\n    var WrappedFunctionalComponent = isInnerMemoComponentForwardRefs ? InnerMemoComponent.render : InnerMemoComponent;\n    var PatchedInnerComponent = isInnerMemoComponentAClassComponent ? patchClassComponent(WrappedFunctionalComponent, {\n      displayName: displayName,\n      defaultProps: defaultProps\n    }) : isInnerMemoComponentAnotherMemoComponent ? patchMemoComponent(WrappedFunctionalComponent, {\n      displayName: displayName,\n      defaultProps: defaultProps\n    }) : patchFunctionalOrStrComponent(WrappedFunctionalComponent, {\n      displayName: displayName,\n      isPure: true\n    });\n\n    try {\n      PatchedInnerComponent.displayName = getDisplayName(WrappedFunctionalComponent);\n    } catch (e) {// not crucial if displayName couldn't be set\n    }\n\n    PatchedInnerComponent.ComponentForHooksTracking = MemoComponent;\n    lodash.defaults(PatchedInnerComponent, WrappedFunctionalComponent);\n    var WDYRMemoizedFunctionalComponent = wdyrStore.React.memo(isInnerMemoComponentForwardRefs ? wdyrStore.React.forwardRef(PatchedInnerComponent) : PatchedInnerComponent, MemoComponent.compare);\n\n    try {\n      WDYRMemoizedFunctionalComponent.displayName = displayName;\n    } catch (e) {// not crucial if displayName couldn't be set\n    }\n\n    WDYRMemoizedFunctionalComponent.defaultProps = defaultProps;\n    lodash.defaults(WDYRMemoizedFunctionalComponent, MemoComponent);\n    return WDYRMemoizedFunctionalComponent;\n  }\n\n  function patchForwardRefComponent(ForwardRefComponent, _ref) {\n    var displayName = _ref.displayName,\n        defaultProps = _ref.defaultProps;\n    var InnerForwardRefComponent = ForwardRefComponent.render;\n    var isInnerComponentMemoized = isMemoComponent(InnerForwardRefComponent);\n    var WrappedFunctionalComponent = isInnerComponentMemoized ? InnerForwardRefComponent.type : InnerForwardRefComponent;\n    var WDYRWrappedByReactForwardRefFunctionalComponent = patchFunctionalOrStrComponent(WrappedFunctionalComponent, {\n      isPure: isInnerComponentMemoized,\n      displayName: displayName\n    });\n    WDYRWrappedByReactForwardRefFunctionalComponent.displayName = getDisplayName(WrappedFunctionalComponent);\n    WDYRWrappedByReactForwardRefFunctionalComponent.ComponentForHooksTracking = WrappedFunctionalComponent;\n    lodash.defaults(WDYRWrappedByReactForwardRefFunctionalComponent, WrappedFunctionalComponent);\n    var WDYRForwardRefFunctionalComponent = wdyrStore.React.forwardRef(isInnerComponentMemoized ? wdyrStore.React.memo(WDYRWrappedByReactForwardRefFunctionalComponent, InnerForwardRefComponent.compare) : WDYRWrappedByReactForwardRefFunctionalComponent);\n\n    try {\n      WDYRForwardRefFunctionalComponent.displayName = displayName;\n    } catch (e) {// not crucial if displayName couldn't be set\n    }\n\n    WDYRForwardRefFunctionalComponent.defaultProps = defaultProps;\n    lodash.defaults(WDYRForwardRefFunctionalComponent, ForwardRefComponent);\n    return WDYRForwardRefFunctionalComponent;\n  }\n\n  var initialHookValue = Symbol('initial-hook-value');\n\n  function trackHookChanges(hookName, _ref, hookResult) {\n    var hookPath = _ref.path;\n    var nextHook = hookPath ? lodash.get(hookResult, hookPath) : hookResult;\n    var renderNumberForTheHook = wdyrStore.React.useRef(true); // TODO: improve\n\n    var isSecondCycleOfRenders = wdyrStore.hooksPerRender[0] && wdyrStore.hooksPerRender[0].renderNumberForTheHook !== renderNumberForTheHook.current;\n\n    if (isSecondCycleOfRenders) {\n      wdyrStore.hooksPerRender = [];\n    }\n\n    wdyrStore.hooksPerRender.push({\n      hookName: hookName,\n      result: nextHook,\n      renderNumberForTheHook: renderNumberForTheHook.current\n    });\n    renderNumberForTheHook.current++;\n    var ComponentHookDispatchedFromInstance = wdyrStore.React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED && wdyrStore.React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner.current;\n    var prevHookRef = wdyrStore.React.useRef(initialHookValue);\n\n    if (!ComponentHookDispatchedFromInstance) {\n      return hookResult;\n    }\n\n    var Component = ComponentHookDispatchedFromInstance.type.ComponentForHooksTracking || ComponentHookDispatchedFromInstance.type;\n    var displayName = getDisplayName(Component);\n    var isShouldTrack = shouldTrack(Component, {\n      isHookChange: true\n    });\n\n    if (!isShouldTrack) {\n      return hookResult;\n    }\n\n    var newPrevHookRef = prevHookRef.current;\n    prevHookRef.current = hookResult;\n\n    if (newPrevHookRef !== initialHookValue) {\n      var notification = getUpdateInfo({\n        Component: Component,\n        displayName: displayName,\n        hookName: hookName,\n        prevHook: hookPath ? lodash.get(newPrevHookRef, hookPath) : newPrevHookRef,\n        nextHook: nextHook\n      });\n\n      if (notification.reason.hookDifferences) {\n        wdyrStore.options.notifier(notification);\n      }\n    }\n\n    return hookResult;\n  }\n\n  function createPatchedComponent(Component, _ref2) {\n    var displayName = _ref2.displayName,\n        defaultProps = _ref2.defaultProps;\n\n    if (isMemoComponent(Component)) {\n      return patchMemoComponent(Component, {\n        displayName: displayName,\n        defaultProps: defaultProps\n      });\n    }\n\n    if (isForwardRefComponent(Component)) {\n      return patchForwardRefComponent(Component, {\n        displayName: displayName,\n        defaultProps: defaultProps\n      });\n    }\n\n    if (isReactClassComponent(Component)) {\n      return patchClassComponent(Component, {\n        displayName: displayName,\n        defaultProps: defaultProps\n      });\n    }\n\n    return patchFunctionalOrStrComponent(Component, {\n      displayName: displayName,\n      defaultProps: defaultProps,\n      isPure: false\n    });\n  }\n\n  function getPatchedComponent(Component, _ref3) {\n    var displayName = _ref3.displayName,\n        defaultProps = _ref3.defaultProps;\n\n    if (wdyrStore.componentsMap.has(Component)) {\n      return wdyrStore.componentsMap.get(Component);\n    }\n\n    var WDYRPatchedComponent = createPatchedComponent(Component, {\n      displayName: displayName,\n      defaultProps: defaultProps\n    });\n    wdyrStore.componentsMap.set(Component, WDYRPatchedComponent);\n    return WDYRPatchedComponent;\n  }\n\n  function getIsSupportedComponentType(Comp) {\n    if (!Comp) {\n      return false;\n    }\n\n    if (isMemoComponent(Comp)) {\n      return getIsSupportedComponentType(Comp.type);\n    }\n\n    if (isForwardRefComponent(Comp)) {\n      return getIsSupportedComponentType(Comp.render);\n    }\n\n    if (typeof Comp === 'function') {\n      return true;\n    }\n  }\n\n  var hooksConfig = {\n    useState: {\n      path: '0'\n    },\n    useReducer: {\n      path: '0'\n    },\n    useContext: undefined,\n    useMemo: {\n      dependenciesPath: '1',\n      dontReport: true\n    },\n    useCallback: {\n      dependenciesPath: '1',\n      dontReport: true\n    }\n  };\n  function storeOwnerData(element) {\n    var OwnerInstance = wdyrStore.React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner.current;\n\n    if (OwnerInstance) {\n      var Component = OwnerInstance.type.ComponentForHooksTracking || OwnerInstance.type;\n      var displayName = getDisplayName(Component);\n      var additionalOwnerData = {};\n\n      if (wdyrStore.options.getAdditionalOwnerData) {\n        additionalOwnerData = wdyrStore.options.getAdditionalOwnerData(element);\n      }\n\n      wdyrStore.ownerDataMap.set(element.props, {\n        Component: Component,\n        displayName: displayName,\n        props: OwnerInstance.pendingProps,\n        state: OwnerInstance.stateNode ? OwnerInstance.stateNode.state : null,\n        hooks: wdyrStore.hooksPerRender,\n        additionalOwnerData: additionalOwnerData\n      });\n    }\n  }\n\n  function resetHooksPerRenderIfNeeded() {\n    // Intercept assignments to ReactCurrentOwner.current to reset hooksPerRender\n    var currentOwner = null;\n\n    if (wdyrStore.React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED) {\n      Object.defineProperty(wdyrStore.React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner, 'current', {\n        get: function get() {\n          return currentOwner;\n        },\n        set: function set(value) {\n          currentOwner = value;\n          wdyrStore.hooksPerRender = [];\n        }\n      });\n    }\n  }\n\n  function trackHooksIfNeeded() {\n    var hooksSupported = !!wdyrStore.React.useState;\n\n    if (wdyrStore.options.trackHooks && hooksSupported) {\n      var nativeHooks = Object.entries(hooksConfig).map(function (_ref4) {\n        var _ref5 = _slicedToArray(_ref4, 2),\n            hookName = _ref5[0],\n            hookTrackingConfig = _ref5[1];\n\n        return [wdyrStore.React, hookName, hookTrackingConfig];\n      });\n      var hooksToTrack = [].concat(_toConsumableArray(nativeHooks), _toConsumableArray(wdyrStore.options.trackExtraHooks));\n      hooksToTrack.forEach(function (_ref6) {\n        var _ref7 = _slicedToArray(_ref6, 3),\n            hookParent = _ref7[0],\n            hookName = _ref7[1],\n            _ref7$ = _ref7[2],\n            hookTrackingConfig = _ref7$ === void 0 ? {} : _ref7$;\n\n        var originalHook = hookParent[hookName];\n        var newHookName = hookName[0].toUpperCase() + hookName.slice(1);\n\n        var newHook = function newHook() {\n          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n            args[_key] = arguments[_key];\n          }\n\n          var hookResult = originalHook.call.apply(originalHook, [this].concat(args));\n          var dependenciesPath = hookTrackingConfig.dependenciesPath,\n              dontReport = hookTrackingConfig.dontReport;\n\n          if (dependenciesPath && lodash.isFunction(hookResult)) {\n            dependenciesMap.set(hookResult, {\n              hookName: hookName,\n              deps: lodash.get(args, dependenciesPath)\n            });\n          }\n\n          if (!dontReport) {\n            trackHookChanges(hookName, hookTrackingConfig, hookResult);\n          }\n\n          return hookResult;\n        };\n\n        Object.defineProperty(newHook, 'name', {\n          value: newHookName,\n          writable: false\n        });\n        Object.assign(newHook, {\n          originalHook: originalHook\n        });\n        hookParent[hookName] = newHook;\n      });\n    }\n  }\n\n  function getWDYRType(origType) {\n    var isShouldTrack = getIsSupportedComponentType(origType) && shouldTrack(origType, {\n      isHookChange: false\n    });\n\n    if (!isShouldTrack) {\n      return null;\n    }\n\n    var displayName = origType && origType.whyDidYouRender && origType.whyDidYouRender.customName || getDisplayName(origType);\n    var defaultProps = getDefaultProps(origType);\n    var WDYRPatchedComponent = getPatchedComponent(origType, {\n      displayName: displayName,\n      defaultProps: defaultProps\n    });\n    return WDYRPatchedComponent;\n  }\n  function whyDidYouRender(React, userOptions) {\n    if (React.isWDYR) {\n      return;\n    }\n\n    Object.assign(wdyrStore, {\n      React: React,\n      options: normalizeOptions(userOptions),\n      origCreateElement: React.createElement,\n      origCreateFactory: React.createFactory,\n      origCloneElement: React.cloneElement,\n      componentsMap: new WeakMap()\n    });\n    resetHooksPerRenderIfNeeded();\n\n    React.createElement = function (origType) {\n      var WDYRType = getWDYRType(origType);\n\n      for (var _len2 = arguments.length, rest = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        rest[_key2 - 1] = arguments[_key2];\n      }\n\n      if (WDYRType) {\n        try {\n          var element = wdyrStore.origCreateElement.apply(React, [WDYRType].concat(rest));\n\n          if (wdyrStore.options.logOwnerReasons) {\n            storeOwnerData(element);\n          }\n\n          return element;\n        } catch (e) {\n          wdyrStore.options.consoleLog('whyDidYouRender error. Please file a bug at https://github.com/welldone-software/why-did-you-render/issues.', {\n            errorInfo: {\n              error: e,\n              componentNameOrComponent: origType,\n              rest: rest,\n              options: wdyrStore.options\n            }\n          });\n        }\n      }\n\n      return wdyrStore.origCreateElement.apply(React, [origType].concat(rest));\n    };\n\n    Object.assign(React.createElement, wdyrStore.origCreateElement);\n\n    React.createFactory = function (type) {\n      var factory = React.createElement.bind(null, type);\n      factory.type = type;\n      return factory;\n    };\n\n    Object.assign(React.createFactory, wdyrStore.origCreateFactory);\n\n    React.cloneElement = function () {\n      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        args[_key3] = arguments[_key3];\n      }\n\n      var element = wdyrStore.origCloneElement.apply(React, args);\n\n      if (wdyrStore.options.logOwnerReasons) {\n        storeOwnerData(element);\n      }\n\n      return element;\n    };\n\n    Object.assign(React.cloneElement, wdyrStore.origCloneElement);\n    trackHooksIfNeeded();\n    React.isWDYR = true;\n\n    React.__REVERT_WHY_DID_YOU_RENDER__ = function () {\n      Object.assign(React, {\n        createElement: wdyrStore.origCreateElement,\n        createFactory: wdyrStore.origCreateFactory,\n        cloneElement: wdyrStore.origCloneElement\n      });\n      wdyrStore.componentsMap = null;\n      var hooksToRevert = [].concat(_toConsumableArray(Object.keys(hooksConfig).map(function (hookName) {\n        return [React, hookName];\n      })), _toConsumableArray(wdyrStore.options.trackExtraHooks));\n      hooksToRevert.forEach(function (_ref8) {\n        var _ref9 = _slicedToArray(_ref8, 2),\n            hookParent = _ref9[0],\n            hookName = _ref9[1];\n\n        if (hookParent[hookName].originalHook) {\n          hookParent[hookName] = hookParent[hookName].originalHook;\n        }\n      });\n      delete React.__REVERT_WHY_DID_YOU_RENDER__;\n      delete React.isWDYR;\n    };\n\n    return React;\n  }\n\n  whyDidYouRender.defaultNotifier = defaultNotifier;\n  whyDidYouRender.wdyrStore = wdyrStore;\n  whyDidYouRender.storeOwnerData = storeOwnerData;\n  whyDidYouRender.getWDYRType = getWDYRType;\n  Object.assign(whyDidYouRender, React__namespace);\n\n  return whyDidYouRender;\n\n}));\n//# sourceMappingURL=whyDidYouRender.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./.yarn/__virtual__/@welldone-software-why-did-you-render-virtual-33fce466b1/0/cache/@welldone-software-why-did-you-render-npm-7.0.1-33d725f830-0bfc59f1f8.zip/node_modules/@welldone-software/why-did-you-render/dist/whyDidYouRender.js\n");

/***/ })

}]);