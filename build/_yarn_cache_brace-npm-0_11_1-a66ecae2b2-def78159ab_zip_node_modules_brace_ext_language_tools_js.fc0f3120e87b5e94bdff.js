/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkgrafana"] = self["webpackChunkgrafana"] || []).push([["_yarn_cache_brace-npm-0_11_1-a66ecae2b2-def78159ab_zip_node_modules_brace_ext_language_tools_js"],{

/***/ "./.yarn/cache/brace-npm-0.11.1-a66ecae2b2-def78159ab.zip/node_modules/brace/ext/language_tools.js":
/***/ (() => {

eval("ace.define(\"ace/snippets\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/lib/event_emitter\",\"ace/lib/lang\",\"ace/range\",\"ace/anchor\",\"ace/keyboard/hash_handler\",\"ace/tokenizer\",\"ace/lib/dom\",\"ace/editor\"], function(acequire, exports, module) {\n\"use strict\";\nvar oop = acequire(\"./lib/oop\");\nvar EventEmitter = acequire(\"./lib/event_emitter\").EventEmitter;\nvar lang = acequire(\"./lib/lang\");\nvar Range = acequire(\"./range\").Range;\nvar Anchor = acequire(\"./anchor\").Anchor;\nvar HashHandler = acequire(\"./keyboard/hash_handler\").HashHandler;\nvar Tokenizer = acequire(\"./tokenizer\").Tokenizer;\nvar comparePoints = Range.comparePoints;\n\nvar SnippetManager = function() {\n    this.snippetMap = {};\n    this.snippetNameMap = {};\n};\n\n(function() {\n    oop.implement(this, EventEmitter);\n    \n    this.getTokenizer = function() {\n        function TabstopToken(str, _, stack) {\n            str = str.substr(1);\n            if (/^\\d+$/.test(str) && !stack.inFormatString)\n                return [{tabstopId: parseInt(str, 10)}];\n            return [{text: str}];\n        }\n        function escape(ch) {\n            return \"(?:[^\\\\\\\\\" + ch + \"]|\\\\\\\\.)\";\n        }\n        SnippetManager.$tokenizer = new Tokenizer({\n            start: [\n                {regex: /:/, onMatch: function(val, state, stack) {\n                    if (stack.length && stack[0].expectIf) {\n                        stack[0].expectIf = false;\n                        stack[0].elseBranch = stack[0];\n                        return [stack[0]];\n                    }\n                    return \":\";\n                }},\n                {regex: /\\\\./, onMatch: function(val, state, stack) {\n                    var ch = val[1];\n                    if (ch == \"}\" && stack.length) {\n                        val = ch;\n                    }else if (\"`$\\\\\".indexOf(ch) != -1) {\n                        val = ch;\n                    } else if (stack.inFormatString) {\n                        if (ch == \"n\")\n                            val = \"\\n\";\n                        else if (ch == \"t\")\n                            val = \"\\n\";\n                        else if (\"ulULE\".indexOf(ch) != -1) {\n                            val = {changeCase: ch, local: ch > \"a\"};\n                        }\n                    }\n\n                    return [val];\n                }},\n                {regex: /}/, onMatch: function(val, state, stack) {\n                    return [stack.length ? stack.shift() : val];\n                }},\n                {regex: /\\$(?:\\d+|\\w+)/, onMatch: TabstopToken},\n                {regex: /\\$\\{[\\dA-Z_a-z]+/, onMatch: function(str, state, stack) {\n                    var t = TabstopToken(str.substr(1), state, stack);\n                    stack.unshift(t[0]);\n                    return t;\n                }, next: \"snippetVar\"},\n                {regex: /\\n/, token: \"newline\", merge: false}\n            ],\n            snippetVar: [\n                {regex: \"\\\\|\" + escape(\"\\\\|\") + \"*\\\\|\", onMatch: function(val, state, stack) {\n                    stack[0].choices = val.slice(1, -1).split(\",\");\n                }, next: \"start\"},\n                {regex: \"/(\" + escape(\"/\") + \"+)/(?:(\" + escape(\"/\") + \"*)/)(\\\\w*):?\",\n                 onMatch: function(val, state, stack) {\n                    var ts = stack[0];\n                    ts.fmtString = val;\n\n                    val = this.splitRegex.exec(val);\n                    ts.guard = val[1];\n                    ts.fmt = val[2];\n                    ts.flag = val[3];\n                    return \"\";\n                }, next: \"start\"},\n                {regex: \"`\" + escape(\"`\") + \"*`\", onMatch: function(val, state, stack) {\n                    stack[0].code = val.splice(1, -1);\n                    return \"\";\n                }, next: \"start\"},\n                {regex: \"\\\\?\", onMatch: function(val, state, stack) {\n                    if (stack[0])\n                        stack[0].expectIf = true;\n                }, next: \"start\"},\n                {regex: \"([^:}\\\\\\\\]|\\\\\\\\.)*:?\", token: \"\", next: \"start\"}\n            ],\n            formatString: [\n                {regex: \"/(\" + escape(\"/\") + \"+)/\", token: \"regex\"},\n                {regex: \"\", onMatch: function(val, state, stack) {\n                    stack.inFormatString = true;\n                }, next: \"start\"}\n            ]\n        });\n        SnippetManager.prototype.getTokenizer = function() {\n            return SnippetManager.$tokenizer;\n        };\n        return SnippetManager.$tokenizer;\n    };\n\n    this.tokenizeTmSnippet = function(str, startState) {\n        return this.getTokenizer().getLineTokens(str, startState).tokens.map(function(x) {\n            return x.value || x;\n        });\n    };\n\n    this.$getDefaultValue = function(editor, name) {\n        if (/^[A-Z]\\d+$/.test(name)) {\n            var i = name.substr(1);\n            return (this.variables[name[0] + \"__\"] || {})[i];\n        }\n        if (/^\\d+$/.test(name)) {\n            return (this.variables.__ || {})[name];\n        }\n        name = name.replace(/^TM_/, \"\");\n\n        if (!editor)\n            return;\n        var s = editor.session;\n        switch(name) {\n            case \"CURRENT_WORD\":\n                var r = s.getWordRange();\n            case \"SELECTION\":\n            case \"SELECTED_TEXT\":\n                return s.getTextRange(r);\n            case \"CURRENT_LINE\":\n                return s.getLine(editor.getCursorPosition().row);\n            case \"PREV_LINE\": // not possible in textmate\n                return s.getLine(editor.getCursorPosition().row - 1);\n            case \"LINE_INDEX\":\n                return editor.getCursorPosition().column;\n            case \"LINE_NUMBER\":\n                return editor.getCursorPosition().row + 1;\n            case \"SOFT_TABS\":\n                return s.getUseSoftTabs() ? \"YES\" : \"NO\";\n            case \"TAB_SIZE\":\n                return s.getTabSize();\n            case \"FILENAME\":\n            case \"FILEPATH\":\n                return \"\";\n            case \"FULLNAME\":\n                return \"Ace\";\n        }\n    };\n    this.variables = {};\n    this.getVariableValue = function(editor, varName) {\n        if (this.variables.hasOwnProperty(varName))\n            return this.variables[varName](editor, varName) || \"\";\n        return this.$getDefaultValue(editor, varName) || \"\";\n    };\n    this.tmStrFormat = function(str, ch, editor) {\n        var flag = ch.flag || \"\";\n        var re = ch.guard;\n        re = new RegExp(re, flag.replace(/[^gi]/, \"\"));\n        var fmtTokens = this.tokenizeTmSnippet(ch.fmt, \"formatString\");\n        var _self = this;\n        var formatted = str.replace(re, function() {\n            _self.variables.__ = arguments;\n            var fmtParts = _self.resolveVariables(fmtTokens, editor);\n            var gChangeCase = \"E\";\n            for (var i  = 0; i < fmtParts.length; i++) {\n                var ch = fmtParts[i];\n                if (typeof ch == \"object\") {\n                    fmtParts[i] = \"\";\n                    if (ch.changeCase && ch.local) {\n                        var next = fmtParts[i + 1];\n                        if (next && typeof next == \"string\") {\n                            if (ch.changeCase == \"u\")\n                                fmtParts[i] = next[0].toUpperCase();\n                            else\n                                fmtParts[i] = next[0].toLowerCase();\n                            fmtParts[i + 1] = next.substr(1);\n                        }\n                    } else if (ch.changeCase) {\n                        gChangeCase = ch.changeCase;\n                    }\n                } else if (gChangeCase == \"U\") {\n                    fmtParts[i] = ch.toUpperCase();\n                } else if (gChangeCase == \"L\") {\n                    fmtParts[i] = ch.toLowerCase();\n                }\n            }\n            return fmtParts.join(\"\");\n        });\n        this.variables.__ = null;\n        return formatted;\n    };\n\n    this.resolveVariables = function(snippet, editor) {\n        var result = [];\n        for (var i = 0; i < snippet.length; i++) {\n            var ch = snippet[i];\n            if (typeof ch == \"string\") {\n                result.push(ch);\n            } else if (typeof ch != \"object\") {\n                continue;\n            } else if (ch.skip) {\n                gotoNext(ch);\n            } else if (ch.processed < i) {\n                continue;\n            } else if (ch.text) {\n                var value = this.getVariableValue(editor, ch.text);\n                if (value && ch.fmtString)\n                    value = this.tmStrFormat(value, ch);\n                ch.processed = i;\n                if (ch.expectIf == null) {\n                    if (value) {\n                        result.push(value);\n                        gotoNext(ch);\n                    }\n                } else {\n                    if (value) {\n                        ch.skip = ch.elseBranch;\n                    } else\n                        gotoNext(ch);\n                }\n            } else if (ch.tabstopId != null) {\n                result.push(ch);\n            } else if (ch.changeCase != null) {\n                result.push(ch);\n            }\n        }\n        function gotoNext(ch) {\n            var i1 = snippet.indexOf(ch, i + 1);\n            if (i1 != -1)\n                i = i1;\n        }\n        return result;\n    };\n\n    this.insertSnippetForSelection = function(editor, snippetText) {\n        var cursor = editor.getCursorPosition();\n        var line = editor.session.getLine(cursor.row);\n        var tabString = editor.session.getTabString();\n        var indentString = line.match(/^\\s*/)[0];\n        \n        if (cursor.column < indentString.length)\n            indentString = indentString.slice(0, cursor.column);\n\n        snippetText = snippetText.replace(/\\r/g, \"\");\n        var tokens = this.tokenizeTmSnippet(snippetText);\n        tokens = this.resolveVariables(tokens, editor);\n        tokens = tokens.map(function(x) {\n            if (x == \"\\n\")\n                return x + indentString;\n            if (typeof x == \"string\")\n                return x.replace(/\\t/g, tabString);\n            return x;\n        });\n        var tabstops = [];\n        tokens.forEach(function(p, i) {\n            if (typeof p != \"object\")\n                return;\n            var id = p.tabstopId;\n            var ts = tabstops[id];\n            if (!ts) {\n                ts = tabstops[id] = [];\n                ts.index = id;\n                ts.value = \"\";\n            }\n            if (ts.indexOf(p) !== -1)\n                return;\n            ts.push(p);\n            var i1 = tokens.indexOf(p, i + 1);\n            if (i1 === -1)\n                return;\n\n            var value = tokens.slice(i + 1, i1);\n            var isNested = value.some(function(t) {return typeof t === \"object\";});\n            if (isNested && !ts.value) {\n                ts.value = value;\n            } else if (value.length && (!ts.value || typeof ts.value !== \"string\")) {\n                ts.value = value.join(\"\");\n            }\n        });\n        tabstops.forEach(function(ts) {ts.length = 0;});\n        var expanding = {};\n        function copyValue(val) {\n            var copy = [];\n            for (var i = 0; i < val.length; i++) {\n                var p = val[i];\n                if (typeof p == \"object\") {\n                    if (expanding[p.tabstopId])\n                        continue;\n                    var j = val.lastIndexOf(p, i - 1);\n                    p = copy[j] || {tabstopId: p.tabstopId};\n                }\n                copy[i] = p;\n            }\n            return copy;\n        }\n        for (var i = 0; i < tokens.length; i++) {\n            var p = tokens[i];\n            if (typeof p != \"object\")\n                continue;\n            var id = p.tabstopId;\n            var i1 = tokens.indexOf(p, i + 1);\n            if (expanding[id]) {\n                if (expanding[id] === p)\n                    expanding[id] = null;\n                continue;\n            }\n            \n            var ts = tabstops[id];\n            var arg = typeof ts.value == \"string\" ? [ts.value] : copyValue(ts.value);\n            arg.unshift(i + 1, Math.max(0, i1 - i));\n            arg.push(p);\n            expanding[id] = p;\n            tokens.splice.apply(tokens, arg);\n\n            if (ts.indexOf(p) === -1)\n                ts.push(p);\n        }\n        var row = 0, column = 0;\n        var text = \"\";\n        tokens.forEach(function(t) {\n            if (typeof t === \"string\") {\n                var lines = t.split(\"\\n\");\n                if (lines.length > 1){\n                    column = lines[lines.length - 1].length;\n                    row += lines.length - 1;\n                } else\n                    column += t.length;\n                text += t;\n            } else {\n                if (!t.start)\n                    t.start = {row: row, column: column};\n                else\n                    t.end = {row: row, column: column};\n            }\n        });\n        var range = editor.getSelectionRange();\n        var end = editor.session.replace(range, text);\n\n        var tabstopManager = new TabstopManager(editor);\n        var selectionId = editor.inVirtualSelectionMode && editor.selection.index;\n        tabstopManager.addTabstops(tabstops, range.start, end, selectionId);\n    };\n    \n    this.insertSnippet = function(editor, snippetText) {\n        var self = this;\n        if (editor.inVirtualSelectionMode)\n            return self.insertSnippetForSelection(editor, snippetText);\n        \n        editor.forEachSelection(function() {\n            self.insertSnippetForSelection(editor, snippetText);\n        }, null, {keepOrder: true});\n        \n        if (editor.tabstopManager)\n            editor.tabstopManager.tabNext();\n    };\n\n    this.$getScope = function(editor) {\n        var scope = editor.session.$mode.$id || \"\";\n        scope = scope.split(\"/\").pop();\n        if (scope === \"html\" || scope === \"php\") {\n            if (scope === \"php\" && !editor.session.$mode.inlinePhp) \n                scope = \"html\";\n            var c = editor.getCursorPosition();\n            var state = editor.session.getState(c.row);\n            if (typeof state === \"object\") {\n                state = state[0];\n            }\n            if (state.substring) {\n                if (state.substring(0, 3) == \"js-\")\n                    scope = \"javascript\";\n                else if (state.substring(0, 4) == \"css-\")\n                    scope = \"css\";\n                else if (state.substring(0, 4) == \"php-\")\n                    scope = \"php\";\n            }\n        }\n        \n        return scope;\n    };\n\n    this.getActiveScopes = function(editor) {\n        var scope = this.$getScope(editor);\n        var scopes = [scope];\n        var snippetMap = this.snippetMap;\n        if (snippetMap[scope] && snippetMap[scope].includeScopes) {\n            scopes.push.apply(scopes, snippetMap[scope].includeScopes);\n        }\n        scopes.push(\"_\");\n        return scopes;\n    };\n\n    this.expandWithTab = function(editor, options) {\n        var self = this;\n        var result = editor.forEachSelection(function() {\n            return self.expandSnippetForSelection(editor, options);\n        }, null, {keepOrder: true});\n        if (result && editor.tabstopManager)\n            editor.tabstopManager.tabNext();\n        return result;\n    };\n    \n    this.expandSnippetForSelection = function(editor, options) {\n        var cursor = editor.getCursorPosition();\n        var line = editor.session.getLine(cursor.row);\n        var before = line.substring(0, cursor.column);\n        var after = line.substr(cursor.column);\n\n        var snippetMap = this.snippetMap;\n        var snippet;\n        this.getActiveScopes(editor).some(function(scope) {\n            var snippets = snippetMap[scope];\n            if (snippets)\n                snippet = this.findMatchingSnippet(snippets, before, after);\n            return !!snippet;\n        }, this);\n        if (!snippet)\n            return false;\n        if (options && options.dryRun)\n            return true;\n        editor.session.doc.removeInLine(cursor.row,\n            cursor.column - snippet.replaceBefore.length,\n            cursor.column + snippet.replaceAfter.length\n        );\n\n        this.variables.M__ = snippet.matchBefore;\n        this.variables.T__ = snippet.matchAfter;\n        this.insertSnippetForSelection(editor, snippet.content);\n\n        this.variables.M__ = this.variables.T__ = null;\n        return true;\n    };\n\n    this.findMatchingSnippet = function(snippetList, before, after) {\n        for (var i = snippetList.length; i--;) {\n            var s = snippetList[i];\n            if (s.startRe && !s.startRe.test(before))\n                continue;\n            if (s.endRe && !s.endRe.test(after))\n                continue;\n            if (!s.startRe && !s.endRe)\n                continue;\n\n            s.matchBefore = s.startRe ? s.startRe.exec(before) : [\"\"];\n            s.matchAfter = s.endRe ? s.endRe.exec(after) : [\"\"];\n            s.replaceBefore = s.triggerRe ? s.triggerRe.exec(before)[0] : \"\";\n            s.replaceAfter = s.endTriggerRe ? s.endTriggerRe.exec(after)[0] : \"\";\n            return s;\n        }\n    };\n\n    this.snippetMap = {};\n    this.snippetNameMap = {};\n    this.register = function(snippets, scope) {\n        var snippetMap = this.snippetMap;\n        var snippetNameMap = this.snippetNameMap;\n        var self = this;\n        \n        if (!snippets) \n            snippets = [];\n        \n        function wrapRegexp(src) {\n            if (src && !/^\\^?\\(.*\\)\\$?$|^\\\\b$/.test(src))\n                src = \"(?:\" + src + \")\";\n\n            return src || \"\";\n        }\n        function guardedRegexp(re, guard, opening) {\n            re = wrapRegexp(re);\n            guard = wrapRegexp(guard);\n            if (opening) {\n                re = guard + re;\n                if (re && re[re.length - 1] != \"$\")\n                    re = re + \"$\";\n            } else {\n                re = re + guard;\n                if (re && re[0] != \"^\")\n                    re = \"^\" + re;\n            }\n            return new RegExp(re);\n        }\n\n        function addSnippet(s) {\n            if (!s.scope)\n                s.scope = scope || \"_\";\n            scope = s.scope;\n            if (!snippetMap[scope]) {\n                snippetMap[scope] = [];\n                snippetNameMap[scope] = {};\n            }\n\n            var map = snippetNameMap[scope];\n            if (s.name) {\n                var old = map[s.name];\n                if (old)\n                    self.unregister(old);\n                map[s.name] = s;\n            }\n            snippetMap[scope].push(s);\n\n            if (s.tabTrigger && !s.trigger) {\n                if (!s.guard && /^\\w/.test(s.tabTrigger))\n                    s.guard = \"\\\\b\";\n                s.trigger = lang.escapeRegExp(s.tabTrigger);\n            }\n            \n            if (!s.trigger && !s.guard && !s.endTrigger && !s.endGuard)\n                return;\n            \n            s.startRe = guardedRegexp(s.trigger, s.guard, true);\n            s.triggerRe = new RegExp(s.trigger, \"\", true);\n\n            s.endRe = guardedRegexp(s.endTrigger, s.endGuard, true);\n            s.endTriggerRe = new RegExp(s.endTrigger, \"\", true);\n        }\n\n        if (snippets && snippets.content)\n            addSnippet(snippets);\n        else if (Array.isArray(snippets))\n            snippets.forEach(addSnippet);\n        \n        this._signal(\"registerSnippets\", {scope: scope});\n    };\n    this.unregister = function(snippets, scope) {\n        var snippetMap = this.snippetMap;\n        var snippetNameMap = this.snippetNameMap;\n\n        function removeSnippet(s) {\n            var nameMap = snippetNameMap[s.scope||scope];\n            if (nameMap && nameMap[s.name]) {\n                delete nameMap[s.name];\n                var map = snippetMap[s.scope||scope];\n                var i = map && map.indexOf(s);\n                if (i >= 0)\n                    map.splice(i, 1);\n            }\n        }\n        if (snippets.content)\n            removeSnippet(snippets);\n        else if (Array.isArray(snippets))\n            snippets.forEach(removeSnippet);\n    };\n    this.parseSnippetFile = function(str) {\n        str = str.replace(/\\r/g, \"\");\n        var list = [], snippet = {};\n        var re = /^#.*|^({[\\s\\S]*})\\s*$|^(\\S+) (.*)$|^((?:\\n*\\t.*)+)/gm;\n        var m;\n        while (m = re.exec(str)) {\n            if (m[1]) {\n                try {\n                    snippet = JSON.parse(m[1]);\n                    list.push(snippet);\n                } catch (e) {}\n            } if (m[4]) {\n                snippet.content = m[4].replace(/^\\t/gm, \"\");\n                list.push(snippet);\n                snippet = {};\n            } else {\n                var key = m[2], val = m[3];\n                if (key == \"regex\") {\n                    var guardRe = /\\/((?:[^\\/\\\\]|\\\\.)*)|$/g;\n                    snippet.guard = guardRe.exec(val)[1];\n                    snippet.trigger = guardRe.exec(val)[1];\n                    snippet.endTrigger = guardRe.exec(val)[1];\n                    snippet.endGuard = guardRe.exec(val)[1];\n                } else if (key == \"snippet\") {\n                    snippet.tabTrigger = val.match(/^\\S*/)[0];\n                    if (!snippet.name)\n                        snippet.name = val;\n                } else {\n                    snippet[key] = val;\n                }\n            }\n        }\n        return list;\n    };\n    this.getSnippetByName = function(name, editor) {\n        var snippetMap = this.snippetNameMap;\n        var snippet;\n        this.getActiveScopes(editor).some(function(scope) {\n            var snippets = snippetMap[scope];\n            if (snippets)\n                snippet = snippets[name];\n            return !!snippet;\n        }, this);\n        return snippet;\n    };\n\n}).call(SnippetManager.prototype);\n\n\nvar TabstopManager = function(editor) {\n    if (editor.tabstopManager)\n        return editor.tabstopManager;\n    editor.tabstopManager = this;\n    this.$onChange = this.onChange.bind(this);\n    this.$onChangeSelection = lang.delayedCall(this.onChangeSelection.bind(this)).schedule;\n    this.$onChangeSession = this.onChangeSession.bind(this);\n    this.$onAfterExec = this.onAfterExec.bind(this);\n    this.attach(editor);\n};\n(function() {\n    this.attach = function(editor) {\n        this.index = 0;\n        this.ranges = [];\n        this.tabstops = [];\n        this.$openTabstops = null;\n        this.selectedTabstop = null;\n\n        this.editor = editor;\n        this.editor.on(\"change\", this.$onChange);\n        this.editor.on(\"changeSelection\", this.$onChangeSelection);\n        this.editor.on(\"changeSession\", this.$onChangeSession);\n        this.editor.commands.on(\"afterExec\", this.$onAfterExec);\n        this.editor.keyBinding.addKeyboardHandler(this.keyboardHandler);\n    };\n    this.detach = function() {\n        this.tabstops.forEach(this.removeTabstopMarkers, this);\n        this.ranges = null;\n        this.tabstops = null;\n        this.selectedTabstop = null;\n        this.editor.removeListener(\"change\", this.$onChange);\n        this.editor.removeListener(\"changeSelection\", this.$onChangeSelection);\n        this.editor.removeListener(\"changeSession\", this.$onChangeSession);\n        this.editor.commands.removeListener(\"afterExec\", this.$onAfterExec);\n        this.editor.keyBinding.removeKeyboardHandler(this.keyboardHandler);\n        this.editor.tabstopManager = null;\n        this.editor = null;\n    };\n\n    this.onChange = function(delta) {\n        var changeRange = delta;\n        var isRemove = delta.action[0] == \"r\";\n        var start = delta.start;\n        var end = delta.end;\n        var startRow = start.row;\n        var endRow = end.row;\n        var lineDif = endRow - startRow;\n        var colDiff = end.column - start.column;\n\n        if (isRemove) {\n            lineDif = -lineDif;\n            colDiff = -colDiff;\n        }\n        if (!this.$inChange && isRemove) {\n            var ts = this.selectedTabstop;\n            var changedOutside = ts && !ts.some(function(r) {\n                return comparePoints(r.start, start) <= 0 && comparePoints(r.end, end) >= 0;\n            });\n            if (changedOutside)\n                return this.detach();\n        }\n        var ranges = this.ranges;\n        for (var i = 0; i < ranges.length; i++) {\n            var r = ranges[i];\n            if (r.end.row < start.row)\n                continue;\n\n            if (isRemove && comparePoints(start, r.start) < 0 && comparePoints(end, r.end) > 0) {\n                this.removeRange(r);\n                i--;\n                continue;\n            }\n\n            if (r.start.row == startRow && r.start.column > start.column)\n                r.start.column += colDiff;\n            if (r.end.row == startRow && r.end.column >= start.column)\n                r.end.column += colDiff;\n            if (r.start.row >= startRow)\n                r.start.row += lineDif;\n            if (r.end.row >= startRow)\n                r.end.row += lineDif;\n\n            if (comparePoints(r.start, r.end) > 0)\n                this.removeRange(r);\n        }\n        if (!ranges.length)\n            this.detach();\n    };\n    this.updateLinkedFields = function() {\n        var ts = this.selectedTabstop;\n        if (!ts || !ts.hasLinkedRanges)\n            return;\n        this.$inChange = true;\n        var session = this.editor.session;\n        var text = session.getTextRange(ts.firstNonLinked);\n        for (var i = ts.length; i--;) {\n            var range = ts[i];\n            if (!range.linked)\n                continue;\n            var fmt = exports.snippetManager.tmStrFormat(text, range.original);\n            session.replace(range, fmt);\n        }\n        this.$inChange = false;\n    };\n    this.onAfterExec = function(e) {\n        if (e.command && !e.command.readOnly)\n            this.updateLinkedFields();\n    };\n    this.onChangeSelection = function() {\n        if (!this.editor)\n            return;\n        var lead = this.editor.selection.lead;\n        var anchor = this.editor.selection.anchor;\n        var isEmpty = this.editor.selection.isEmpty();\n        for (var i = this.ranges.length; i--;) {\n            if (this.ranges[i].linked)\n                continue;\n            var containsLead = this.ranges[i].contains(lead.row, lead.column);\n            var containsAnchor = isEmpty || this.ranges[i].contains(anchor.row, anchor.column);\n            if (containsLead && containsAnchor)\n                return;\n        }\n        this.detach();\n    };\n    this.onChangeSession = function() {\n        this.detach();\n    };\n    this.tabNext = function(dir) {\n        var max = this.tabstops.length;\n        var index = this.index + (dir || 1);\n        index = Math.min(Math.max(index, 1), max);\n        if (index == max)\n            index = 0;\n        this.selectTabstop(index);\n        if (index === 0)\n            this.detach();\n    };\n    this.selectTabstop = function(index) {\n        this.$openTabstops = null;\n        var ts = this.tabstops[this.index];\n        if (ts)\n            this.addTabstopMarkers(ts);\n        this.index = index;\n        ts = this.tabstops[this.index];\n        if (!ts || !ts.length)\n            return;\n        \n        this.selectedTabstop = ts;\n        if (!this.editor.inVirtualSelectionMode) {        \n            var sel = this.editor.multiSelect;\n            sel.toSingleRange(ts.firstNonLinked.clone());\n            for (var i = ts.length; i--;) {\n                if (ts.hasLinkedRanges && ts[i].linked)\n                    continue;\n                sel.addRange(ts[i].clone(), true);\n            }\n            if (sel.ranges[0])\n                sel.addRange(sel.ranges[0].clone());\n        } else {\n            this.editor.selection.setRange(ts.firstNonLinked);\n        }\n        \n        this.editor.keyBinding.addKeyboardHandler(this.keyboardHandler);\n    };\n    this.addTabstops = function(tabstops, start, end) {\n        if (!this.$openTabstops)\n            this.$openTabstops = [];\n        if (!tabstops[0]) {\n            var p = Range.fromPoints(end, end);\n            moveRelative(p.start, start);\n            moveRelative(p.end, start);\n            tabstops[0] = [p];\n            tabstops[0].index = 0;\n        }\n\n        var i = this.index;\n        var arg = [i + 1, 0];\n        var ranges = this.ranges;\n        tabstops.forEach(function(ts, index) {\n            var dest = this.$openTabstops[index] || ts;\n                \n            for (var i = ts.length; i--;) {\n                var p = ts[i];\n                var range = Range.fromPoints(p.start, p.end || p.start);\n                movePoint(range.start, start);\n                movePoint(range.end, start);\n                range.original = p;\n                range.tabstop = dest;\n                ranges.push(range);\n                if (dest != ts)\n                    dest.unshift(range);\n                else\n                    dest[i] = range;\n                if (p.fmtString) {\n                    range.linked = true;\n                    dest.hasLinkedRanges = true;\n                } else if (!dest.firstNonLinked)\n                    dest.firstNonLinked = range;\n            }\n            if (!dest.firstNonLinked)\n                dest.hasLinkedRanges = false;\n            if (dest === ts) {\n                arg.push(dest);\n                this.$openTabstops[index] = dest;\n            }\n            this.addTabstopMarkers(dest);\n        }, this);\n        \n        if (arg.length > 2) {\n            if (this.tabstops.length)\n                arg.push(arg.splice(2, 1)[0]);\n            this.tabstops.splice.apply(this.tabstops, arg);\n        }\n    };\n\n    this.addTabstopMarkers = function(ts) {\n        var session = this.editor.session;\n        ts.forEach(function(range) {\n            if  (!range.markerId)\n                range.markerId = session.addMarker(range, \"ace_snippet-marker\", \"text\");\n        });\n    };\n    this.removeTabstopMarkers = function(ts) {\n        var session = this.editor.session;\n        ts.forEach(function(range) {\n            session.removeMarker(range.markerId);\n            range.markerId = null;\n        });\n    };\n    this.removeRange = function(range) {\n        var i = range.tabstop.indexOf(range);\n        range.tabstop.splice(i, 1);\n        i = this.ranges.indexOf(range);\n        this.ranges.splice(i, 1);\n        this.editor.session.removeMarker(range.markerId);\n        if (!range.tabstop.length) {\n            i = this.tabstops.indexOf(range.tabstop);\n            if (i != -1)\n                this.tabstops.splice(i, 1);\n            if (!this.tabstops.length)\n                this.detach();\n        }\n    };\n\n    this.keyboardHandler = new HashHandler();\n    this.keyboardHandler.bindKeys({\n        \"Tab\": function(ed) {\n            if (exports.snippetManager && exports.snippetManager.expandWithTab(ed)) {\n                return;\n            }\n\n            ed.tabstopManager.tabNext(1);\n        },\n        \"Shift-Tab\": function(ed) {\n            ed.tabstopManager.tabNext(-1);\n        },\n        \"Esc\": function(ed) {\n            ed.tabstopManager.detach();\n        },\n        \"Return\": function(ed) {\n            return false;\n        }\n    });\n}).call(TabstopManager.prototype);\n\n\n\nvar changeTracker = {};\nchangeTracker.onChange = Anchor.prototype.onChange;\nchangeTracker.setPosition = function(row, column) {\n    this.pos.row = row;\n    this.pos.column = column;\n};\nchangeTracker.update = function(pos, delta, $insertRight) {\n    this.$insertRight = $insertRight;\n    this.pos = pos; \n    this.onChange(delta);\n};\n\nvar movePoint = function(point, diff) {\n    if (point.row == 0)\n        point.column += diff.column;\n    point.row += diff.row;\n};\n\nvar moveRelative = function(point, start) {\n    if (point.row == start.row)\n        point.column -= start.column;\n    point.row -= start.row;\n};\n\n\nacequire(\"./lib/dom\").importCssString(\"\\\n.ace_snippet-marker {\\\n    -moz-box-sizing: border-box;\\\n    box-sizing: border-box;\\\n    background: rgba(194, 193, 208, 0.09);\\\n    border: 1px dotted rgba(211, 208, 235, 0.62);\\\n    position: absolute;\\\n}\");\n\nexports.snippetManager = new SnippetManager();\n\n\nvar Editor = acequire(\"./editor\").Editor;\n(function() {\n    this.insertSnippet = function(content, options) {\n        return exports.snippetManager.insertSnippet(this, content, options);\n    };\n    this.expandSnippet = function(options) {\n        return exports.snippetManager.expandWithTab(this, options);\n    };\n}).call(Editor.prototype);\n\n});\n\nace.define(\"ace/autocomplete/popup\",[\"require\",\"exports\",\"module\",\"ace/virtual_renderer\",\"ace/editor\",\"ace/range\",\"ace/lib/event\",\"ace/lib/lang\",\"ace/lib/dom\"], function(acequire, exports, module) {\n\"use strict\";\n\nvar Renderer = acequire(\"../virtual_renderer\").VirtualRenderer;\nvar Editor = acequire(\"../editor\").Editor;\nvar Range = acequire(\"../range\").Range;\nvar event = acequire(\"../lib/event\");\nvar lang = acequire(\"../lib/lang\");\nvar dom = acequire(\"../lib/dom\");\n\nvar $singleLineEditor = function(el) {\n    var renderer = new Renderer(el);\n\n    renderer.$maxLines = 4;\n\n    var editor = new Editor(renderer);\n\n    editor.setHighlightActiveLine(false);\n    editor.setShowPrintMargin(false);\n    editor.renderer.setShowGutter(false);\n    editor.renderer.setHighlightGutterLine(false);\n\n    editor.$mouseHandler.$focusWaitTimout = 0;\n    editor.$highlightTagPending = true;\n\n    return editor;\n};\n\nvar AcePopup = function(parentNode) {\n    var el = dom.createElement(\"div\");\n    var popup = new $singleLineEditor(el);\n\n    if (parentNode)\n        parentNode.appendChild(el);\n    el.style.display = \"none\";\n    popup.renderer.content.style.cursor = \"default\";\n    popup.renderer.setStyle(\"ace_autocomplete\");\n\n    popup.setOption(\"displayIndentGuides\", false);\n    popup.setOption(\"dragDelay\", 150);\n\n    var noop = function(){};\n\n    popup.focus = noop;\n    popup.$isFocused = true;\n\n    popup.renderer.$cursorLayer.restartTimer = noop;\n    popup.renderer.$cursorLayer.element.style.opacity = 0;\n\n    popup.renderer.$maxLines = 8;\n    popup.renderer.$keepTextAreaAtCursor = false;\n\n    popup.setHighlightActiveLine(false);\n    popup.session.highlight(\"\");\n    popup.session.$searchHighlight.clazz = \"ace_highlight-marker\";\n\n    popup.on(\"mousedown\", function(e) {\n        var pos = e.getDocumentPosition();\n        popup.selection.moveToPosition(pos);\n        selectionMarker.start.row = selectionMarker.end.row = pos.row;\n        e.stop();\n    });\n\n    var lastMouseEvent;\n    var hoverMarker = new Range(-1,0,-1,Infinity);\n    var selectionMarker = new Range(-1,0,-1,Infinity);\n    selectionMarker.id = popup.session.addMarker(selectionMarker, \"ace_active-line\", \"fullLine\");\n    popup.setSelectOnHover = function(val) {\n        if (!val) {\n            hoverMarker.id = popup.session.addMarker(hoverMarker, \"ace_line-hover\", \"fullLine\");\n        } else if (hoverMarker.id) {\n            popup.session.removeMarker(hoverMarker.id);\n            hoverMarker.id = null;\n        }\n    };\n    popup.setSelectOnHover(false);\n    popup.on(\"mousemove\", function(e) {\n        if (!lastMouseEvent) {\n            lastMouseEvent = e;\n            return;\n        }\n        if (lastMouseEvent.x == e.x && lastMouseEvent.y == e.y) {\n            return;\n        }\n        lastMouseEvent = e;\n        lastMouseEvent.scrollTop = popup.renderer.scrollTop;\n        var row = lastMouseEvent.getDocumentPosition().row;\n        if (hoverMarker.start.row != row) {\n            if (!hoverMarker.id)\n                popup.setRow(row);\n            setHoverMarker(row);\n        }\n    });\n    popup.renderer.on(\"beforeRender\", function() {\n        if (lastMouseEvent && hoverMarker.start.row != -1) {\n            lastMouseEvent.$pos = null;\n            var row = lastMouseEvent.getDocumentPosition().row;\n            if (!hoverMarker.id)\n                popup.setRow(row);\n            setHoverMarker(row, true);\n        }\n    });\n    popup.renderer.on(\"afterRender\", function() {\n        var row = popup.getRow();\n        var t = popup.renderer.$textLayer;\n        var selected = t.element.childNodes[row - t.config.firstRow];\n        if (selected == t.selectedNode)\n            return;\n        if (t.selectedNode)\n            dom.removeCssClass(t.selectedNode, \"ace_selected\");\n        t.selectedNode = selected;\n        if (selected)\n            dom.addCssClass(selected, \"ace_selected\");\n    });\n    var hideHoverMarker = function() { setHoverMarker(-1); };\n    var setHoverMarker = function(row, suppressRedraw) {\n        if (row !== hoverMarker.start.row) {\n            hoverMarker.start.row = hoverMarker.end.row = row;\n            if (!suppressRedraw)\n                popup.session._emit(\"changeBackMarker\");\n            popup._emit(\"changeHoverMarker\");\n        }\n    };\n    popup.getHoveredRow = function() {\n        return hoverMarker.start.row;\n    };\n\n    event.addListener(popup.container, \"mouseout\", hideHoverMarker);\n    popup.on(\"hide\", hideHoverMarker);\n    popup.on(\"changeSelection\", hideHoverMarker);\n\n    popup.session.doc.getLength = function() {\n        return popup.data.length;\n    };\n    popup.session.doc.getLine = function(i) {\n        var data = popup.data[i];\n        if (typeof data == \"string\")\n            return data;\n        return (data && data.value) || \"\";\n    };\n\n    var bgTokenizer = popup.session.bgTokenizer;\n    bgTokenizer.$tokenizeRow = function(row) {\n        var data = popup.data[row];\n        var tokens = [];\n        if (!data)\n            return tokens;\n        if (typeof data == \"string\")\n            data = {value: data};\n        if (!data.caption)\n            data.caption = data.value || data.name;\n\n        var last = -1;\n        var flag, c;\n        for (var i = 0; i < data.caption.length; i++) {\n            c = data.caption[i];\n            flag = data.matchMask & (1 << i) ? 1 : 0;\n            if (last !== flag) {\n                tokens.push({type: data.className || \"\" + ( flag ? \"completion-highlight\" : \"\"), value: c});\n                last = flag;\n            } else {\n                tokens[tokens.length - 1].value += c;\n            }\n        }\n\n        if (data.meta) {\n            var maxW = popup.renderer.$size.scrollerWidth / popup.renderer.layerConfig.characterWidth;\n            var metaData = data.meta;\n            if (metaData.length + data.caption.length > maxW - 2) {\n                metaData = metaData.substr(0, maxW - data.caption.length - 3) + \"\\u2026\";\n            }\n            tokens.push({type: \"rightAlignedText\", value: metaData});\n        }\n        return tokens;\n    };\n    bgTokenizer.$updateOnChange = noop;\n    bgTokenizer.start = noop;\n\n    popup.session.$computeWidth = function() {\n        return this.screenWidth = 0;\n    };\n\n    popup.$blockScrolling = Infinity;\n    popup.isOpen = false;\n    popup.isTopdown = false;\n    popup.autoSelect = true;\n\n    popup.data = [];\n    popup.setData = function(list) {\n        popup.setValue(lang.stringRepeat(\"\\n\", list.length), -1);\n        popup.data = list || [];\n        popup.setRow(0);\n    };\n    popup.getData = function(row) {\n        return popup.data[row];\n    };\n\n    popup.getRow = function() {\n        return selectionMarker.start.row;\n    };\n    popup.setRow = function(line) {\n        line = Math.max(this.autoSelect ? 0 : -1, Math.min(this.data.length, line));\n        if (selectionMarker.start.row != line) {\n            popup.selection.clearSelection();\n            selectionMarker.start.row = selectionMarker.end.row = line || 0;\n            popup.session._emit(\"changeBackMarker\");\n            popup.moveCursorTo(line || 0, 0);\n            if (popup.isOpen)\n                popup._signal(\"select\");\n        }\n    };\n\n    popup.on(\"changeSelection\", function() {\n        if (popup.isOpen)\n            popup.setRow(popup.selection.lead.row);\n        popup.renderer.scrollCursorIntoView();\n    });\n\n    popup.hide = function() {\n        this.container.style.display = \"none\";\n        this._signal(\"hide\");\n        popup.isOpen = false;\n    };\n    popup.show = function(pos, lineHeight, topdownOnly) {\n        var el = this.container;\n        var screenHeight = window.innerHeight;\n        var screenWidth = window.innerWidth;\n        var renderer = this.renderer;\n        var maxH = renderer.$maxLines * lineHeight * 1.4;\n        var top = pos.top + this.$borderSize;\n        var allowTopdown = top > screenHeight / 2 && !topdownOnly;\n        if (allowTopdown && top + lineHeight + maxH > screenHeight) {\n            renderer.$maxPixelHeight = top - 2 * this.$borderSize;\n            el.style.top = \"\";\n            el.style.bottom = screenHeight - top + \"px\";\n            popup.isTopdown = false;\n        } else {\n            top += lineHeight;\n            renderer.$maxPixelHeight = screenHeight - top - 0.2 * lineHeight;\n            el.style.top = top + \"px\";\n            el.style.bottom = \"\";\n            popup.isTopdown = true;\n        }\n\n        el.style.display = \"\";\n        this.renderer.$textLayer.checkForSizeChanges();\n\n        var left = pos.left;\n        if (left + el.offsetWidth > screenWidth)\n            left = screenWidth - el.offsetWidth;\n\n        el.style.left = left + \"px\";\n\n        this._signal(\"show\");\n        lastMouseEvent = null;\n        popup.isOpen = true;\n    };\n\n    popup.getTextLeftOffset = function() {\n        return this.$borderSize + this.renderer.$padding + this.$imageSize;\n    };\n\n    popup.$imageSize = 0;\n    popup.$borderSize = 1;\n\n    return popup;\n};\n\ndom.importCssString(\"\\\n.ace_editor.ace_autocomplete .ace_marker-layer .ace_active-line {\\\n    background-color: #CAD6FA;\\\n    z-index: 1;\\\n}\\\n.ace_editor.ace_autocomplete .ace_line-hover {\\\n    border: 1px solid #abbffe;\\\n    margin-top: -1px;\\\n    background: rgba(233,233,253,0.4);\\\n}\\\n.ace_editor.ace_autocomplete .ace_line-hover {\\\n    position: absolute;\\\n    z-index: 2;\\\n}\\\n.ace_editor.ace_autocomplete .ace_scroller {\\\n   background: none;\\\n   border: none;\\\n   box-shadow: none;\\\n}\\\n.ace_rightAlignedText {\\\n    color: gray;\\\n    display: inline-block;\\\n    position: absolute;\\\n    right: 4px;\\\n    text-align: right;\\\n    z-index: -1;\\\n}\\\n.ace_editor.ace_autocomplete .ace_completion-highlight{\\\n    color: #000;\\\n    text-shadow: 0 0 0.01em;\\\n}\\\n.ace_editor.ace_autocomplete {\\\n    width: 280px;\\\n    z-index: 200000;\\\n    background: #fbfbfb;\\\n    color: #444;\\\n    border: 1px lightgray solid;\\\n    position: fixed;\\\n    box-shadow: 2px 3px 5px rgba(0,0,0,.2);\\\n    line-height: 1.4;\\\n}\");\n\nexports.AcePopup = AcePopup;\n\n});\n\nace.define(\"ace/autocomplete/util\",[\"require\",\"exports\",\"module\"], function(acequire, exports, module) {\n\"use strict\";\n\nexports.parForEach = function(array, fn, callback) {\n    var completed = 0;\n    var arLength = array.length;\n    if (arLength === 0)\n        callback();\n    for (var i = 0; i < arLength; i++) {\n        fn(array[i], function(result, err) {\n            completed++;\n            if (completed === arLength)\n                callback(result, err);\n        });\n    }\n};\n\nvar ID_REGEX = /[a-zA-Z_0-9\\$\\-\\u00A2-\\uFFFF]/;\n\nexports.retrievePrecedingIdentifier = function(text, pos, regex) {\n    regex = regex || ID_REGEX;\n    var buf = [];\n    for (var i = pos-1; i >= 0; i--) {\n        if (regex.test(text[i]))\n            buf.push(text[i]);\n        else\n            break;\n    }\n    return buf.reverse().join(\"\");\n};\n\nexports.retrieveFollowingIdentifier = function(text, pos, regex) {\n    regex = regex || ID_REGEX;\n    var buf = [];\n    for (var i = pos; i < text.length; i++) {\n        if (regex.test(text[i]))\n            buf.push(text[i]);\n        else\n            break;\n    }\n    return buf;\n};\n\nexports.getCompletionPrefix = function (editor) {\n    var pos = editor.getCursorPosition();\n    var line = editor.session.getLine(pos.row);\n    var prefix;\n    editor.completers.forEach(function(completer) {\n        if (completer.identifierRegexps) {\n            completer.identifierRegexps.forEach(function(identifierRegex) {\n                if (!prefix && identifierRegex)\n                    prefix = this.retrievePrecedingIdentifier(line, pos.column, identifierRegex);\n            }.bind(this));\n        }\n    }.bind(this));\n    return prefix || this.retrievePrecedingIdentifier(line, pos.column);\n};\n\n});\n\nace.define(\"ace/autocomplete\",[\"require\",\"exports\",\"module\",\"ace/keyboard/hash_handler\",\"ace/autocomplete/popup\",\"ace/autocomplete/util\",\"ace/lib/event\",\"ace/lib/lang\",\"ace/lib/dom\",\"ace/snippets\"], function(acequire, exports, module) {\n\"use strict\";\n\nvar HashHandler = acequire(\"./keyboard/hash_handler\").HashHandler;\nvar AcePopup = acequire(\"./autocomplete/popup\").AcePopup;\nvar util = acequire(\"./autocomplete/util\");\nvar event = acequire(\"./lib/event\");\nvar lang = acequire(\"./lib/lang\");\nvar dom = acequire(\"./lib/dom\");\nvar snippetManager = acequire(\"./snippets\").snippetManager;\n\nvar Autocomplete = function() {\n    this.autoInsert = false;\n    this.autoSelect = true;\n    this.exactMatch = false;\n    this.gatherCompletionsId = 0;\n    this.keyboardHandler = new HashHandler();\n    this.keyboardHandler.bindKeys(this.commands);\n\n    this.blurListener = this.blurListener.bind(this);\n    this.changeListener = this.changeListener.bind(this);\n    this.mousedownListener = this.mousedownListener.bind(this);\n    this.mousewheelListener = this.mousewheelListener.bind(this);\n\n    this.changeTimer = lang.delayedCall(function() {\n        this.updateCompletions(true);\n    }.bind(this));\n\n    this.tooltipTimer = lang.delayedCall(this.updateDocTooltip.bind(this), 50);\n};\n\n(function() {\n\n    this.$init = function() {\n        this.popup = new AcePopup(document.body || document.documentElement);\n        this.popup.on(\"click\", function(e) {\n            this.insertMatch();\n            e.stop();\n        }.bind(this));\n        this.popup.focus = this.editor.focus.bind(this.editor);\n        this.popup.on(\"show\", this.tooltipTimer.bind(null, null));\n        this.popup.on(\"select\", this.tooltipTimer.bind(null, null));\n        this.popup.on(\"changeHoverMarker\", this.tooltipTimer.bind(null, null));\n        return this.popup;\n    };\n\n    this.getPopup = function() {\n        return this.popup || this.$init();\n    };\n\n    this.openPopup = function(editor, prefix, keepPopupPosition) {\n        if (!this.popup)\n            this.$init();\n\n\tthis.popup.autoSelect = this.autoSelect;\n\n        this.popup.setData(this.completions.filtered);\n\n        editor.keyBinding.addKeyboardHandler(this.keyboardHandler);\n        \n        var renderer = editor.renderer;\n        this.popup.setRow(this.autoSelect ? 0 : -1);\n        if (!keepPopupPosition) {\n            this.popup.setTheme(editor.getTheme());\n            this.popup.setFontSize(editor.getFontSize());\n\n            var lineHeight = renderer.layerConfig.lineHeight;\n\n            var pos = renderer.$cursorLayer.getPixelPosition(this.base, true);\n            pos.left -= this.popup.getTextLeftOffset();\n\n            var rect = editor.container.getBoundingClientRect();\n            pos.top += rect.top - renderer.layerConfig.offset;\n            pos.left += rect.left - editor.renderer.scrollLeft;\n            pos.left += renderer.gutterWidth;\n\n            this.popup.show(pos, lineHeight);\n        } else if (keepPopupPosition && !prefix) {\n            this.detach();\n        }\n    };\n\n    this.detach = function() {\n        this.editor.keyBinding.removeKeyboardHandler(this.keyboardHandler);\n        this.editor.off(\"changeSelection\", this.changeListener);\n        this.editor.off(\"blur\", this.blurListener);\n        this.editor.off(\"mousedown\", this.mousedownListener);\n        this.editor.off(\"mousewheel\", this.mousewheelListener);\n        this.changeTimer.cancel();\n        this.hideDocTooltip();\n\n        this.gatherCompletionsId += 1;\n        if (this.popup && this.popup.isOpen)\n            this.popup.hide();\n\n        if (this.base)\n            this.base.detach();\n        this.activated = false;\n        this.completions = this.base = null;\n    };\n\n    this.changeListener = function(e) {\n        var cursor = this.editor.selection.lead;\n        if (cursor.row != this.base.row || cursor.column < this.base.column) {\n            this.detach();\n        }\n        if (this.activated)\n            this.changeTimer.schedule();\n        else\n            this.detach();\n    };\n\n    this.blurListener = function(e) {\n        var el = document.activeElement;\n        var text = this.editor.textInput.getElement();\n        var fromTooltip = e.relatedTarget && this.tooltipNode && this.tooltipNode.contains(e.relatedTarget);\n        var container = this.popup && this.popup.container;\n        if (el != text && el.parentNode != container && !fromTooltip\n            && el != this.tooltipNode && e.relatedTarget != text\n        ) {\n            this.detach();\n        }\n    };\n\n    this.mousedownListener = function(e) {\n        this.detach();\n    };\n\n    this.mousewheelListener = function(e) {\n        this.detach();\n    };\n\n    this.goTo = function(where) {\n        var row = this.popup.getRow();\n        var max = this.popup.session.getLength() - 1;\n\n        switch(where) {\n            case \"up\": row = row <= 0 ? max : row - 1; break;\n            case \"down\": row = row >= max ? -1 : row + 1; break;\n            case \"start\": row = 0; break;\n            case \"end\": row = max; break;\n        }\n\n        this.popup.setRow(row);\n    };\n\n    this.insertMatch = function(data, options) {\n        if (!data)\n            data = this.popup.getData(this.popup.getRow());\n        if (!data)\n            return false;\n\n        if (data.completer && data.completer.insertMatch) {\n            data.completer.insertMatch(this.editor, data);\n        } else {\n            if (this.completions.filterText) {\n                var ranges = this.editor.selection.getAllRanges();\n                for (var i = 0, range; range = ranges[i]; i++) {\n                    range.start.column -= this.completions.filterText.length;\n                    this.editor.session.remove(range);\n                }\n            }\n            if (data.snippet)\n                snippetManager.insertSnippet(this.editor, data.snippet);\n            else\n                this.editor.execCommand(\"insertstring\", data.value || data);\n        }\n        this.detach();\n    };\n\n\n    this.commands = {\n        \"Up\": function(editor) { editor.completer.goTo(\"up\"); },\n        \"Down\": function(editor) { editor.completer.goTo(\"down\"); },\n        \"Ctrl-Up|Ctrl-Home\": function(editor) { editor.completer.goTo(\"start\"); },\n        \"Ctrl-Down|Ctrl-End\": function(editor) { editor.completer.goTo(\"end\"); },\n\n        \"Esc\": function(editor) { editor.completer.detach(); },\n        \"Return\": function(editor) { return editor.completer.insertMatch(); },\n        \"Shift-Return\": function(editor) { editor.completer.insertMatch(null, {deleteSuffix: true}); },\n        \"Tab\": function(editor) {\n            var result = editor.completer.insertMatch();\n            if (!result && !editor.tabstopManager)\n                editor.completer.goTo(\"down\");\n            else\n                return result;\n        },\n\n        \"PageUp\": function(editor) { editor.completer.popup.gotoPageUp(); },\n        \"PageDown\": function(editor) { editor.completer.popup.gotoPageDown(); }\n    };\n\n    this.gatherCompletions = function(editor, callback) {\n        var session = editor.getSession();\n        var pos = editor.getCursorPosition();\n\n        var prefix = util.getCompletionPrefix(editor);\n\n        this.base = session.doc.createAnchor(pos.row, pos.column - prefix.length);\n        this.base.$insertRight = true;\n\n        var matches = [];\n        var total = editor.completers.length;\n        editor.completers.forEach(function(completer, i) {\n            completer.getCompletions(editor, session, pos, prefix, function(err, results) {\n                if (!err && results)\n                    matches = matches.concat(results);\n                callback(null, {\n                    prefix: util.getCompletionPrefix(editor),\n                    matches: matches,\n                    finished: (--total === 0)\n                });\n            });\n        });\n        return true;\n    };\n\n    this.showPopup = function(editor) {\n        if (this.editor)\n            this.detach();\n\n        this.activated = true;\n\n        this.editor = editor;\n        if (editor.completer != this) {\n            if (editor.completer)\n                editor.completer.detach();\n            editor.completer = this;\n        }\n\n        editor.on(\"changeSelection\", this.changeListener);\n        editor.on(\"blur\", this.blurListener);\n        editor.on(\"mousedown\", this.mousedownListener);\n        editor.on(\"mousewheel\", this.mousewheelListener);\n\n        this.updateCompletions();\n    };\n\n    this.updateCompletions = function(keepPopupPosition) {\n        if (keepPopupPosition && this.base && this.completions) {\n            var pos = this.editor.getCursorPosition();\n            var prefix = this.editor.session.getTextRange({start: this.base, end: pos});\n            if (prefix == this.completions.filterText)\n                return;\n            this.completions.setFilter(prefix);\n            if (!this.completions.filtered.length)\n                return this.detach();\n            if (this.completions.filtered.length == 1\n            && this.completions.filtered[0].value == prefix\n            && !this.completions.filtered[0].snippet)\n                return this.detach();\n            this.openPopup(this.editor, prefix, keepPopupPosition);\n            return;\n        }\n        var _id = this.gatherCompletionsId;\n        this.gatherCompletions(this.editor, function(err, results) {\n            var detachIfFinished = function() {\n                if (!results.finished) return;\n                return this.detach();\n            }.bind(this);\n\n            var prefix = results.prefix;\n            var matches = results && results.matches;\n\n            if (!matches || !matches.length)\n                return detachIfFinished();\n            if (prefix.indexOf(results.prefix) !== 0 || _id != this.gatherCompletionsId)\n                return;\n\n            this.completions = new FilteredList(matches);\n\n            if (this.exactMatch)\n                this.completions.exactMatch = true;\n\n            this.completions.setFilter(prefix);\n            var filtered = this.completions.filtered;\n            if (!filtered.length)\n                return detachIfFinished();\n            if (filtered.length == 1 && filtered[0].value == prefix && !filtered[0].snippet)\n                return detachIfFinished();\n            if (this.autoInsert && filtered.length == 1 && results.finished)\n                return this.insertMatch(filtered[0]);\n\n            this.openPopup(this.editor, prefix, keepPopupPosition);\n        }.bind(this));\n    };\n\n    this.cancelContextMenu = function() {\n        this.editor.$mouseHandler.cancelContextMenu();\n    };\n\n    this.updateDocTooltip = function() {\n        var popup = this.popup;\n        var all = popup.data;\n        var selected = all && (all[popup.getHoveredRow()] || all[popup.getRow()]);\n        var doc = null;\n        if (!selected || !this.editor || !this.popup.isOpen)\n            return this.hideDocTooltip();\n        this.editor.completers.some(function(completer) {\n            if (completer.getDocTooltip)\n                doc = completer.getDocTooltip(selected);\n            return doc;\n        });\n        if (!doc)\n            doc = selected;\n\n        if (typeof doc == \"string\")\n            doc = {docText: doc};\n        if (!doc || !(doc.docHTML || doc.docText))\n            return this.hideDocTooltip();\n        this.showDocTooltip(doc);\n    };\n\n    this.showDocTooltip = function(item) {\n        if (!this.tooltipNode) {\n            this.tooltipNode = dom.createElement(\"div\");\n            this.tooltipNode.className = \"ace_tooltip ace_doc-tooltip\";\n            this.tooltipNode.style.margin = 0;\n            this.tooltipNode.style.pointerEvents = \"auto\";\n            this.tooltipNode.tabIndex = -1;\n            this.tooltipNode.onblur = this.blurListener.bind(this);\n            this.tooltipNode.onclick = this.onTooltipClick.bind(this);\n        }\n\n        var tooltipNode = this.tooltipNode;\n        if (item.docHTML) {\n            tooltipNode.innerHTML = item.docHTML;\n        } else if (item.docText) {\n            tooltipNode.textContent = item.docText;\n        }\n\n        if (!tooltipNode.parentNode)\n            document.body.appendChild(tooltipNode);\n        var popup = this.popup;\n        var rect = popup.container.getBoundingClientRect();\n        tooltipNode.style.top = popup.container.style.top;\n        tooltipNode.style.bottom = popup.container.style.bottom;\n\n        if (window.innerWidth - rect.right < 320) {\n            tooltipNode.style.right = window.innerWidth - rect.left + \"px\";\n            tooltipNode.style.left = \"\";\n        } else {\n            tooltipNode.style.left = (rect.right + 1) + \"px\";\n            tooltipNode.style.right = \"\";\n        }\n        tooltipNode.style.display = \"block\";\n    };\n\n    this.hideDocTooltip = function() {\n        this.tooltipTimer.cancel();\n        if (!this.tooltipNode) return;\n        var el = this.tooltipNode;\n        if (!this.editor.isFocused() && document.activeElement == el)\n            this.editor.focus();\n        this.tooltipNode = null;\n        if (el.parentNode)\n            el.parentNode.removeChild(el);\n    };\n\n    this.onTooltipClick = function(e) {\n        var a = e.target;\n        while (a && a != this.tooltipNode) {\n            if (a.nodeName == \"A\" && a.href) {\n                a.rel = \"noreferrer\";\n                a.target = \"_blank\";\n                break;\n            }\n            a = a.parentNode;\n        }\n    };\n\n}).call(Autocomplete.prototype);\n\nAutocomplete.startCommand = {\n    name: \"startAutocomplete\",\n    exec: function(editor) {\n        if (!editor.completer)\n            editor.completer = new Autocomplete();\n        editor.completer.autoInsert = false;\n        editor.completer.autoSelect = true;\n        editor.completer.showPopup(editor);\n        editor.completer.cancelContextMenu();\n    },\n    bindKey: \"Ctrl-Space|Ctrl-Shift-Space|Alt-Space\"\n};\n\nvar FilteredList = function(array, filterText) {\n    this.all = array;\n    this.filtered = array;\n    this.filterText = filterText || \"\";\n    this.exactMatch = false;\n};\n(function(){\n    this.setFilter = function(str) {\n        if (str.length > this.filterText && str.lastIndexOf(this.filterText, 0) === 0)\n            var matches = this.filtered;\n        else\n            var matches = this.all;\n\n        this.filterText = str;\n        matches = this.filterCompletions(matches, this.filterText);\n        matches = matches.sort(function(a, b) {\n            return b.exactMatch - a.exactMatch || b.score - a.score;\n        });\n        var prev = null;\n        matches = matches.filter(function(item){\n            var caption = item.snippet || item.caption || item.value;\n            if (caption === prev) return false;\n            prev = caption;\n            return true;\n        });\n\n        this.filtered = matches;\n    };\n    this.filterCompletions = function(items, needle) {\n        var results = [];\n        var upper = needle.toUpperCase();\n        var lower = needle.toLowerCase();\n        loop: for (var i = 0, item; item = items[i]; i++) {\n            var caption = item.value || item.caption || item.snippet;\n            if (!caption) continue;\n            var lastIndex = -1;\n            var matchMask = 0;\n            var penalty = 0;\n            var index, distance;\n\n            if (this.exactMatch) {\n                if (needle !== caption.substr(0, needle.length))\n                    continue loop;\n            }else{\n                for (var j = 0; j < needle.length; j++) {\n                    var i1 = caption.indexOf(lower[j], lastIndex + 1);\n                    var i2 = caption.indexOf(upper[j], lastIndex + 1);\n                    index = (i1 >= 0) ? ((i2 < 0 || i1 < i2) ? i1 : i2) : i2;\n                    if (index < 0)\n                        continue loop;\n                    distance = index - lastIndex - 1;\n                    if (distance > 0) {\n                        if (lastIndex === -1)\n                            penalty += 10;\n                        penalty += distance;\n                    }\n                    matchMask = matchMask | (1 << index);\n                    lastIndex = index;\n                }\n            }\n            item.matchMask = matchMask;\n            item.exactMatch = penalty ? 0 : 1;\n            item.score = (item.score || 0) - penalty;\n            results.push(item);\n        }\n        return results;\n    };\n}).call(FilteredList.prototype);\n\nexports.Autocomplete = Autocomplete;\nexports.FilteredList = FilteredList;\n\n});\n\nace.define(\"ace/autocomplete/text_completer\",[\"require\",\"exports\",\"module\",\"ace/range\"], function(acequire, exports, module) {\n    var Range = acequire(\"../range\").Range;\n    \n    var splitRegex = /[^a-zA-Z_0-9\\$\\-\\u00C0-\\u1FFF\\u2C00-\\uD7FF\\w]+/;\n\n    function getWordIndex(doc, pos) {\n        var textBefore = doc.getTextRange(Range.fromPoints({row: 0, column:0}, pos));\n        return textBefore.split(splitRegex).length - 1;\n    }\n    function wordDistance(doc, pos) {\n        var prefixPos = getWordIndex(doc, pos);\n        var words = doc.getValue().split(splitRegex);\n        var wordScores = Object.create(null);\n        \n        var currentWord = words[prefixPos];\n\n        words.forEach(function(word, idx) {\n            if (!word || word === currentWord) return;\n\n            var distance = Math.abs(prefixPos - idx);\n            var score = words.length - distance;\n            if (wordScores[word]) {\n                wordScores[word] = Math.max(score, wordScores[word]);\n            } else {\n                wordScores[word] = score;\n            }\n        });\n        return wordScores;\n    }\n\n    exports.getCompletions = function(editor, session, pos, prefix, callback) {\n        var wordScore = wordDistance(session, pos, prefix);\n        var wordList = Object.keys(wordScore);\n        callback(null, wordList.map(function(word) {\n            return {\n                caption: word,\n                value: word,\n                score: wordScore[word],\n                meta: \"local\"\n            };\n        }));\n    };\n});\n\nace.define(\"ace/ext/language_tools\",[\"require\",\"exports\",\"module\",\"ace/snippets\",\"ace/autocomplete\",\"ace/config\",\"ace/lib/lang\",\"ace/autocomplete/util\",\"ace/autocomplete/text_completer\",\"ace/editor\",\"ace/config\"], function(acequire, exports, module) {\n\"use strict\";\n\nvar snippetManager = acequire(\"../snippets\").snippetManager;\nvar Autocomplete = acequire(\"../autocomplete\").Autocomplete;\nvar config = acequire(\"../config\");\nvar lang = acequire(\"../lib/lang\");\nvar util = acequire(\"../autocomplete/util\");\n\nvar textCompleter = acequire(\"../autocomplete/text_completer\");\nvar keyWordCompleter = {\n    getCompletions: function(editor, session, pos, prefix, callback) {\n        if (session.$mode.completer) {\n            return session.$mode.completer.getCompletions(editor, session, pos, prefix, callback);\n        }\n        var state = editor.session.getState(pos.row);\n        var completions = session.$mode.getCompletions(state, session, pos, prefix);\n        callback(null, completions);\n    }\n};\n\nvar snippetCompleter = {\n    getCompletions: function(editor, session, pos, prefix, callback) {\n        var snippetMap = snippetManager.snippetMap;\n        var completions = [];\n        snippetManager.getActiveScopes(editor).forEach(function(scope) {\n            var snippets = snippetMap[scope] || [];\n            for (var i = snippets.length; i--;) {\n                var s = snippets[i];\n                var caption = s.name || s.tabTrigger;\n                if (!caption)\n                    continue;\n                completions.push({\n                    caption: caption,\n                    snippet: s.content,\n                    meta: s.tabTrigger && !s.name ? s.tabTrigger + \"\\u21E5 \" : \"snippet\",\n                    type: \"snippet\"\n                });\n            }\n        }, this);\n        callback(null, completions);\n    },\n    getDocTooltip: function(item) {\n        if (item.type == \"snippet\" && !item.docHTML) {\n            item.docHTML = [\n                \"<b>\", lang.escapeHTML(item.caption), \"</b>\", \"<hr></hr>\",\n                lang.escapeHTML(item.snippet)\n            ].join(\"\");\n        }\n    }\n};\n\nvar completers = [snippetCompleter, textCompleter, keyWordCompleter];\nexports.setCompleters = function(val) {\n    completers.length = 0;\n    if (val) completers.push.apply(completers, val);\n};\nexports.addCompleter = function(completer) {\n    completers.push(completer);\n};\nexports.textCompleter = textCompleter;\nexports.keyWordCompleter = keyWordCompleter;\nexports.snippetCompleter = snippetCompleter;\n\nvar expandSnippet = {\n    name: \"expandSnippet\",\n    exec: function(editor) {\n        return snippetManager.expandWithTab(editor);\n    },\n    bindKey: \"Tab\"\n};\n\nvar onChangeMode = function(e, editor) {\n    loadSnippetsForMode(editor.session.$mode);\n};\n\nvar loadSnippetsForMode = function(mode) {\n    var id = mode.$id;\n    if (!snippetManager.files)\n        snippetManager.files = {};\n    loadSnippetFile(id);\n    if (mode.modes)\n        mode.modes.forEach(loadSnippetsForMode);\n};\n\nvar loadSnippetFile = function(id) {\n    if (!id || snippetManager.files[id])\n        return;\n    var snippetFilePath = id.replace(\"mode\", \"snippets\");\n    snippetManager.files[id] = {};\n    config.loadModule(snippetFilePath, function(m) {\n        if (m) {\n            snippetManager.files[id] = m;\n            if (!m.snippets && m.snippetText)\n                m.snippets = snippetManager.parseSnippetFile(m.snippetText);\n            snippetManager.register(m.snippets || [], m.scope);\n            if (m.includeScopes) {\n                snippetManager.snippetMap[m.scope].includeScopes = m.includeScopes;\n                m.includeScopes.forEach(function(x) {\n                    loadSnippetFile(\"ace/mode/\" + x);\n                });\n            }\n        }\n    });\n};\n\nvar doLiveAutocomplete = function(e) {\n    var editor = e.editor;\n    var hasCompleter = editor.completer && editor.completer.activated;\n    if (e.command.name === \"backspace\") {\n        if (hasCompleter && !util.getCompletionPrefix(editor))\n            editor.completer.detach();\n    }\n    else if (e.command.name === \"insertstring\") {\n        var prefix = util.getCompletionPrefix(editor);\n        if (prefix && !hasCompleter) {\n            if (!editor.completer) {\n                editor.completer = new Autocomplete();\n            }\n            editor.completer.autoInsert = false;\n            editor.completer.showPopup(editor);\n        }\n    }\n};\n\nvar Editor = acequire(\"../editor\").Editor;\nacequire(\"../config\").defineOptions(Editor.prototype, \"editor\", {\n    enableBasicAutocompletion: {\n        set: function(val) {\n            if (val) {\n                if (!this.completers)\n                    this.completers = Array.isArray(val)? val: completers;\n                this.commands.addCommand(Autocomplete.startCommand);\n            } else {\n                this.commands.removeCommand(Autocomplete.startCommand);\n            }\n        },\n        value: false\n    },\n    enableLiveAutocompletion: {\n        set: function(val) {\n            if (val) {\n                if (!this.completers)\n                    this.completers = Array.isArray(val)? val: completers;\n                this.commands.on('afterExec', doLiveAutocomplete);\n            } else {\n                this.commands.removeListener('afterExec', doLiveAutocomplete);\n            }\n        },\n        value: false\n    },\n    enableSnippets: {\n        set: function(val) {\n            if (val) {\n                this.commands.addCommand(expandSnippet);\n                this.on(\"changeMode\", onChangeMode);\n                onChangeMode(null, this);\n            } else {\n                this.commands.removeCommand(expandSnippet);\n                this.off(\"changeMode\", onChangeMode);\n            }\n        },\n        value: false\n    }\n});\n});\n                (function() {\n                    ace.acequire([\"ace/ext/language_tools\"], function() {});\n                })();\n            //# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi8ueWFybi9jYWNoZS9icmFjZS1ucG0tMC4xMS4xLWE2NmVjYWUyYjItZGVmNzgxNTlhYi56aXAvbm9kZV9tb2R1bGVzL2JyYWNlL2V4dC9sYW5ndWFnZV90b29scy5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5Qiw2QkFBNkI7QUFDdEQscUJBQXFCLFVBQVU7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQixpQkFBaUI7QUFDakI7QUFDQSxnQ0FBZ0M7QUFDaEM7QUFDQSxxQkFBcUI7QUFDckI7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1DQUFtQztBQUNuQztBQUNBOztBQUVBO0FBQ0Esa0JBQWtCO0FBQ2xCLGlCQUFpQixTQUFTO0FBQzFCO0FBQ0Esa0JBQWtCO0FBQ2xCLGlCQUFpQiw4Q0FBOEM7QUFDL0QsaUJBQWlCLFlBQVk7QUFDN0I7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLHFCQUFxQjtBQUN0QyxpQkFBaUI7QUFDakI7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBLGlCQUFpQixnQkFBZ0I7QUFDakMsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLGdCQUFnQjtBQUNqQyxpQkFBaUI7QUFDakI7QUFDQTtBQUNBLGlCQUFpQixnQkFBZ0I7QUFDakMsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQSxpQkFBaUIsZ0JBQWdCO0FBQ2pDLGlCQUFpQixhQUFhO0FBQzlCO0FBQ0E7QUFDQSxpQkFBaUIsa0RBQWtEO0FBQ25FLGlCQUFpQjtBQUNqQjtBQUNBLGlC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O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSx5Q0FBeUMsSUFBSTtBQUM3QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMENBQTBDLGFBQWE7QUFDdkQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCLFFBQVE7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTs7QUFFQSxDQUFDOzs7QUFHRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsbUJBQW1CO0FBQzNDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0MsSUFBSTtBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5Q0FBeUMsSUFBSTtBQUM3QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQ0FBb0MsSUFBSTtBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtB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Q0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsUUFBUTtBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0IsaUJBQWlCO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBLENBQUM7O0FBRUQ7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsdURBQXVEO0FBQ3ZELDBEQUEwRDtBQUMxRCxtQ0FBbUM7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QTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxDQUFDOztBQUVEO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBDQUEwQyxJQUFJO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBLFNBQVM7QUFDVDtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsQ0FBQztBQUNELENBQUM7QUFDRDtBQUNBLDBFQUEwRTtBQUMxRSxpQkFBaUI7QUFDakIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ncmFmYW5hLy4vLnlhcm4vY2FjaGUvYnJhY2UtbnBtLTAuMTEuMS1hNjZlY2FlMmIyLWRlZjc4MTU5YWIuemlwL25vZGVfbW9kdWxlcy9icmFjZS9leHQvbGFuZ3VhZ2VfdG9vbHMuanM/ODRjOSJdLCJzb3VyY2VzQ29udGVudCI6WyJhY2UuZGVmaW5lKFwiYWNlL3NuaXBwZXRzXCIsW1wicmVxdWlyZVwiLFwiZXhwb3J0c1wiLFwibW9kdWxlXCIsXCJhY2UvbGliL29vcFwiLFwiYWNlL2xpYi9ldmVudF9lbWl0dGVyXCIsXCJhY2UvbGliL2xhbmdcIixcImFjZS9yYW5nZVwiLFwiYWNlL2FuY2hvclwiLFwiYWNlL2tleWJvYXJkL2hhc2hfaGFuZGxlclwiLFwiYWNlL3Rva2VuaXplclwiLFwiYWNlL2xpYi9kb21cIixcImFjZS9lZGl0b3JcIl0sIGZ1bmN0aW9uKGFjZXF1aXJlLCBleHBvcnRzLCBtb2R1bGUpIHtcblwidXNlIHN0cmljdFwiO1xudmFyIG9vcCA9IGFjZXF1aXJlKFwiLi9saWIvb29wXCIpO1xudmFyIEV2ZW50RW1pdHRlciA9IGFjZXF1aXJlKFwiLi9saWIvZXZlbnRfZW1pdHRlclwiKS5FdmVudEVtaXR0ZXI7XG52YXIgbGFuZyA9IGFjZXF1aXJlKFwiLi9saWIvbGFuZ1wiKTtcbnZhciBSYW5nZSA9IGFjZXF1aXJlKFwiLi9yYW5nZVwiKS5SYW5nZTtcbnZhciBBbmNob3IgPSBhY2VxdWlyZShcIi4vYW5jaG9yXCIpLkFuY2hvcjtcbnZhciBIYXNoSGFuZGxlciA9IGFjZXF1aXJlKFwiLi9rZXlib2FyZC9oYXNoX2hhbmRsZXJcIikuSGFzaEhhbmRsZXI7XG52YXIgVG9rZW5pemVyID0gYWNlcXVpcmUoXCIuL3Rva2VuaXplclwiKS5Ub2tlbml6ZXI7XG52YXIgY29tcGFyZVBvaW50cyA9IFJhbmdlLmNvbXBhcmVQb2ludHM7XG5cbnZhciBTbmlwcGV0TWFuYWdlciA9IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuc25pcHBldE1hcCA9IHt9O1xuICAgIHRoaXMuc25pcHBldE5hbWVNYXAgPSB7fTtcbn07XG5cbihmdW5jdGlvbigpIHtcbiAgICBvb3AuaW1wbGVtZW50KHRoaXMsIEV2ZW50RW1pdHRlcik7XG4gICAgXG4gICAgdGhpcy5nZXRUb2tlbml6ZXIgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgZnVuY3Rpb24gVGFic3RvcFRva2VuKHN0ciwgXywgc3RhY2spIHtcbiAgICAgICAgICAgIHN0ciA9IHN0ci5zdWJzdHIoMSk7XG4gICAgICAgICAgICBpZiAoL15cXGQrJC8udGVzdChzdHIpICYmICFzdGFjay5pbkZvcm1hdFN0cmluZylcbiAgICAgICAgICAgICAgICByZXR1cm4gW3t0YWJzdG9wSWQ6IHBhcnNlSW50KHN0ciwgMTApfV07XG4gICAgICAgICAgICByZXR1cm4gW3t0ZXh0OiBzdHJ9XTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBlc2NhcGUoY2gpIHtcbiAgICAgICAgICAgIHJldHVybiBcIig/OlteXFxcXFxcXFxcIiArIGNoICsgXCJdfFxcXFxcXFxcLilcIjtcbiAgICAgICAgfVxuICAgICAgICBTbmlwcGV0TWFuYWdlci4kdG9rZW5pemVyID0gbmV3IFRva2VuaXplcih7XG4gICAgICAgICAgICBzdGFydDogW1xuICAgICAgICAgICAgICAgIHtyZWdleDogLzovLCBvbk1hdGNoOiBmdW5jdGlvbih2YWwsIHN0YXRlLCBzdGFjaykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoc3RhY2subGVuZ3RoICYmIHN0YWNrWzBdLmV4cGVjdElmKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdGFja1swXS5leHBlY3RJZiA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RhY2tbMF0uZWxzZUJyYW5jaCA9IHN0YWNrWzBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtzdGFja1swXV07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiOlwiO1xuICAgICAgICAgICAgICAgIH19LFxuICAgICAgICAgICAgICAgIHtyZWdleDogL1xcXFwuLywgb25NYXRjaDogZnVuY3Rpb24odmFsLCBzdGF0ZSwgc3RhY2spIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNoID0gdmFsWzFdO1xuICAgICAgICAgICAgICAgICAgICBpZiAoY2ggPT0gXCJ9XCIgJiYgc3RhY2subGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWwgPSBjaDtcbiAgICAgICAgICAgICAgICAgICAgfWVsc2UgaWYgKFwiYCRcXFxcXCIuaW5kZXhPZihjaCkgIT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbCA9IGNoO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHN0YWNrLmluRm9ybWF0U3RyaW5nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2ggPT0gXCJuXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsID0gXCJcXG5cIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKGNoID09IFwidFwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbCA9IFwiXFxuXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChcInVsVUxFXCIuaW5kZXhPZihjaCkgIT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWwgPSB7Y2hhbmdlQ2FzZTogY2gsIGxvY2FsOiBjaCA+IFwiYVwifTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbdmFsXTtcbiAgICAgICAgICAgICAgICB9fSxcbiAgICAgICAgICAgICAgICB7cmVnZXg6IC99Lywgb25NYXRjaDogZnVuY3Rpb24odmFsLCBzdGF0ZSwgc3RhY2spIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtzdGFjay5sZW5ndGggPyBzdGFjay5zaGlmdCgpIDogdmFsXTtcbiAgICAgICAgICAgICAgICB9fSxcbiAgICAgICAgICAgICAgICB7cmVnZXg6IC9cXCQoPzpcXGQrfFxcdyspLywgb25NYXRjaDogVGFic3RvcFRva2VufSxcbiAgICAgICAgICAgICAgICB7cmVnZXg6IC9cXCRcXHtbXFxkQS1aX2Etel0rLywgb25NYXRjaDogZnVuY3Rpb24oc3RyLCBzdGF0ZSwgc3RhY2spIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHQgPSBUYWJzdG9wVG9rZW4oc3RyLnN1YnN0cigxKSwgc3RhdGUsIHN0YWNrKTtcbiAgICAgICAgICAgICAgICAgICAgc3RhY2sudW5zaGlmdCh0WzBdKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHQ7XG4gICAgICAgICAgICAgICAgfSwgbmV4dDogXCJzbmlwcGV0VmFyXCJ9LFxuICAgICAgICAgICAgICAgIHtyZWdleDogL1xcbi8sIHRva2VuOiBcIm5ld2xpbmVcIiwgbWVyZ2U6IGZhbHNlfVxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIHNuaXBwZXRWYXI6IFtcbiAgICAgICAgICAgICAgICB7cmVnZXg6IFwiXFxcXHxcIiArIGVzY2FwZShcIlxcXFx8XCIpICsgXCIqXFxcXHxcIiwgb25NYXRjaDogZnVuY3Rpb24odmFsLCBzdGF0ZSwgc3RhY2spIHtcbiAgICAgICAgICAgICAgICAgICAgc3RhY2tbMF0uY2hvaWNlcyA9IHZhbC5zbGljZSgxLCAtMSkuc3BsaXQoXCIsXCIpO1xuICAgICAgICAgICAgICAgIH0sIG5leHQ6IFwic3RhcnRcIn0sXG4gICAgICAgICAgICAgICAge3JlZ2V4OiBcIi8oXCIgKyBlc2NhcGUoXCIvXCIpICsgXCIrKS8oPzooXCIgKyBlc2NhcGUoXCIvXCIpICsgXCIqKS8pKFxcXFx3Kik6P1wiLFxuICAgICAgICAgICAgICAgICBvbk1hdGNoOiBmdW5jdGlvbih2YWwsIHN0YXRlLCBzdGFjaykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdHMgPSBzdGFja1swXTtcbiAgICAgICAgICAgICAgICAgICAgdHMuZm10U3RyaW5nID0gdmFsO1xuXG4gICAgICAgICAgICAgICAgICAgIHZhbCA9IHRoaXMuc3BsaXRSZWdleC5leGVjKHZhbCk7XG4gICAgICAgICAgICAgICAgICAgIHRzLmd1YXJkID0gdmFsWzFdO1xuICAgICAgICAgICAgICAgICAgICB0cy5mbXQgPSB2YWxbMl07XG4gICAgICAgICAgICAgICAgICAgIHRzLmZsYWcgPSB2YWxbM107XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBcIlwiO1xuICAgICAgICAgICAgICAgIH0sIG5leHQ6IFwic3RhcnRcIn0sXG4gICAgICAgICAgICAgICAge3JlZ2V4OiBcImBcIiArIGVzY2FwZShcImBcIikgKyBcIipgXCIsIG9uTWF0Y2g6IGZ1bmN0aW9uKHZhbCwgc3RhdGUsIHN0YWNrKSB7XG4gICAgICAgICAgICAgICAgICAgIHN0YWNrWzBdLmNvZGUgPSB2YWwuc3BsaWNlKDEsIC0xKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiXCI7XG4gICAgICAgICAgICAgICAgfSwgbmV4dDogXCJzdGFydFwifSxcbiAgICAgICAgICAgICAgICB7cmVnZXg6IFwiXFxcXD9cIiwgb25NYXRjaDogZnVuY3Rpb24odmFsLCBzdGF0ZSwgc3RhY2spIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHN0YWNrWzBdKVxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhY2tbMF0uZXhwZWN0SWYgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH0sIG5leHQ6IFwic3RhcnRcIn0sXG4gICAgICAgICAgICAgICAge3JlZ2V4OiBcIihbXjp9XFxcXFxcXFxdfFxcXFxcXFxcLikqOj9cIiwgdG9rZW46IFwiXCIsIG5leHQ6IFwic3RhcnRcIn1cbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBmb3JtYXRTdHJpbmc6IFtcbiAgICAgICAgICAgICAgICB7cmVnZXg6IFwiLyhcIiArIGVzY2FwZShcIi9cIikgKyBcIispL1wiLCB0b2tlbjogXCJyZWdleFwifSxcbiAgICAgICAgICAgICAgICB7cmVnZXg6IFwiXCIsIG9uTWF0Y2g6IGZ1bmN0aW9uKHZhbCwgc3RhdGUsIHN0YWNrKSB7XG4gICAgICAgICAgICAgICAgICAgIHN0YWNrLmluRm9ybWF0U3RyaW5nID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9LCBuZXh0OiBcInN0YXJ0XCJ9XG4gICAgICAgICAgICBdXG4gICAgICAgIH0pO1xuICAgICAgICBTbmlwcGV0TWFuYWdlci5wcm90b3R5cGUuZ2V0VG9rZW5pemVyID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gU25pcHBldE1hbmFnZXIuJHRva2VuaXplcjtcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIFNuaXBwZXRNYW5hZ2VyLiR0b2tlbml6ZXI7XG4gICAgfTtcblxuICAgIHRoaXMudG9rZW5pemVUbVNuaXBwZXQgPSBmdW5jdGlvbihzdHIsIHN0YXJ0U3RhdGUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0VG9rZW5pemVyKCkuZ2V0TGluZVRva2VucyhzdHIsIHN0YXJ0U3RhdGUpLnRva2Vucy5tYXAoZnVuY3Rpb24oeCkge1xuICAgICAgICAgICAgcmV0dXJuIHgudmFsdWUgfHwgeDtcbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIHRoaXMuJGdldERlZmF1bHRWYWx1ZSA9IGZ1bmN0aW9uKGVkaXRvciwgbmFtZSkge1xuICAgICAgICBpZiAoL15bQS1aXVxcZCskLy50ZXN0KG5hbWUpKSB7XG4gICAgICAgICAgICB2YXIgaSA9IG5hbWUuc3Vic3RyKDEpO1xuICAgICAgICAgICAgcmV0dXJuICh0aGlzLnZhcmlhYmxlc1tuYW1lWzBdICsgXCJfX1wiXSB8fCB7fSlbaV07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKC9eXFxkKyQvLnRlc3QobmFtZSkpIHtcbiAgICAgICAgICAgIHJldHVybiAodGhpcy52YXJpYWJsZXMuX18gfHwge30pW25hbWVdO1xuICAgICAgICB9XG4gICAgICAgIG5hbWUgPSBuYW1lLnJlcGxhY2UoL15UTV8vLCBcIlwiKTtcblxuICAgICAgICBpZiAoIWVkaXRvcilcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgdmFyIHMgPSBlZGl0b3Iuc2Vzc2lvbjtcbiAgICAgICAgc3dpdGNoKG5hbWUpIHtcbiAgICAgICAgICAgIGNhc2UgXCJDVVJSRU5UX1dPUkRcIjpcbiAgICAgICAgICAgICAgICB2YXIgciA9IHMuZ2V0V29yZFJhbmdlKCk7XG4gICAgICAgICAgICBjYXNlIFwiU0VMRUNUSU9OXCI6XG4gICAgICAgICAgICBjYXNlIFwiU0VMRUNURURfVEVYVFwiOlxuICAgICAgICAgICAgICAgIHJldHVybiBzLmdldFRleHRSYW5nZShyKTtcbiAgICAgICAgICAgIGNhc2UgXCJDVVJSRU5UX0xJTkVcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gcy5nZXRMaW5lKGVkaXRvci5nZXRDdXJzb3JQb3NpdGlvbigpLnJvdyk7XG4gICAgICAgICAgICBjYXNlIFwiUFJFVl9MSU5FXCI6IC8vIG5vdCBwb3NzaWJsZSBpbiB0ZXh0bWF0ZVxuICAgICAgICAgICAgICAgIHJldHVybiBzLmdldExpbmUoZWRpdG9yLmdldEN1cnNvclBvc2l0aW9uKCkucm93IC0gMSk7XG4gICAgICAgICAgICBjYXNlIFwiTElORV9JTkRFWFwiOlxuICAgICAgICAgICAgICAgIHJldHVybiBlZGl0b3IuZ2V0Q3Vyc29yUG9zaXRpb24oKS5jb2x1bW47XG4gICAgICAgICAgICBjYXNlIFwiTElORV9OVU1CRVJcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gZWRpdG9yLmdldEN1cnNvclBvc2l0aW9uKCkucm93ICsgMTtcbiAgICAgICAgICAgIGNhc2UgXCJTT0ZUX1RBQlNcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gcy5nZXRVc2VTb2Z0VGFicygpID8gXCJZRVNcIiA6IFwiTk9cIjtcbiAgICAgICAgICAgIGNhc2UgXCJUQUJfU0laRVwiOlxuICAgICAgICAgICAgICAgIHJldHVybiBzLmdldFRhYlNpemUoKTtcbiAgICAgICAgICAgIGNhc2UgXCJGSUxFTkFNRVwiOlxuICAgICAgICAgICAgY2FzZSBcIkZJTEVQQVRIXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiXCI7XG4gICAgICAgICAgICBjYXNlIFwiRlVMTE5BTUVcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJBY2VcIjtcbiAgICAgICAgfVxuICAgIH07XG4gICAgdGhpcy52YXJpYWJsZXMgPSB7fTtcbiAgICB0aGlzLmdldFZhcmlhYmxlVmFsdWUgPSBmdW5jdGlvbihlZGl0b3IsIHZhck5hbWUpIHtcbiAgICAgICAgaWYgKHRoaXMudmFyaWFibGVzLmhhc093blByb3BlcnR5KHZhck5hbWUpKVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMudmFyaWFibGVzW3Zhck5hbWVdKGVkaXRvciwgdmFyTmFtZSkgfHwgXCJcIjtcbiAgICAgICAgcmV0dXJuIHRoaXMuJGdldERlZmF1bHRWYWx1ZShlZGl0b3IsIHZhck5hbWUpIHx8IFwiXCI7XG4gICAgfTtcbiAgICB0aGlzLnRtU3RyRm9ybWF0ID0gZnVuY3Rpb24oc3RyLCBjaCwgZWRpdG9yKSB7XG4gICAgICAgIHZhciBmbGFnID0gY2guZmxhZyB8fCBcIlwiO1xuICAgICAgICB2YXIgcmUgPSBjaC5ndWFyZDtcbiAgICAgICAgcmUgPSBuZXcgUmVnRXhwKHJlLCBmbGFnLnJlcGxhY2UoL1teZ2ldLywgXCJcIikpO1xuICAgICAgICB2YXIgZm10VG9rZW5zID0gdGhpcy50b2tlbml6ZVRtU25pcHBldChjaC5mbXQsIFwiZm9ybWF0U3RyaW5nXCIpO1xuICAgICAgICB2YXIgX3NlbGYgPSB0aGlzO1xuICAgICAgICB2YXIgZm9ybWF0dGVkID0gc3RyLnJlcGxhY2UocmUsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgX3NlbGYudmFyaWFibGVzLl9fID0gYXJndW1lbnRzO1xuICAgICAgICAgICAgdmFyIGZtdFBhcnRzID0gX3NlbGYucmVzb2x2ZVZhcmlhYmxlcyhmbXRUb2tlbnMsIGVkaXRvcik7XG4gICAgICAgICAgICB2YXIgZ0NoYW5nZUNhc2UgPSBcIkVcIjtcbiAgICAgICAgICAgIGZvciAodmFyIGkgID0gMDsgaSA8IGZtdFBhcnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIGNoID0gZm10UGFydHNbaV07XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBjaCA9PSBcIm9iamVjdFwiKSB7XG4gICAgICAgICAgICAgICAgICAgIGZtdFBhcnRzW2ldID0gXCJcIjtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNoLmNoYW5nZUNhc2UgJiYgY2gubG9jYWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBuZXh0ID0gZm10UGFydHNbaSArIDFdO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5leHQgJiYgdHlwZW9mIG5leHQgPT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjaC5jaGFuZ2VDYXNlID09IFwidVwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmbXRQYXJ0c1tpXSA9IG5leHRbMF0udG9VcHBlckNhc2UoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZtdFBhcnRzW2ldID0gbmV4dFswXS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZtdFBhcnRzW2kgKyAxXSA9IG5leHQuc3Vic3RyKDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGNoLmNoYW5nZUNhc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdDaGFuZ2VDYXNlID0gY2guY2hhbmdlQ2FzZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZ0NoYW5nZUNhc2UgPT0gXCJVXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgZm10UGFydHNbaV0gPSBjaC50b1VwcGVyQ2FzZSgpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZ0NoYW5nZUNhc2UgPT0gXCJMXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgZm10UGFydHNbaV0gPSBjaC50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBmbXRQYXJ0cy5qb2luKFwiXCIpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy52YXJpYWJsZXMuX18gPSBudWxsO1xuICAgICAgICByZXR1cm4gZm9ybWF0dGVkO1xuICAgIH07XG5cbiAgICB0aGlzLnJlc29sdmVWYXJpYWJsZXMgPSBmdW5jdGlvbihzbmlwcGV0LCBlZGl0b3IpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNuaXBwZXQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBjaCA9IHNuaXBwZXRbaV07XG4gICAgICAgICAgICBpZiAodHlwZW9mIGNoID09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQucHVzaChjaCk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBjaCAhPSBcIm9iamVjdFwiKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGNoLnNraXApIHtcbiAgICAgICAgICAgICAgICBnb3RvTmV4dChjaCk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGNoLnByb2Nlc3NlZCA8IGkpIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoY2gudGV4dCkge1xuICAgICAgICAgICAgICAgIHZhciB2YWx1ZSA9IHRoaXMuZ2V0VmFyaWFibGVWYWx1ZShlZGl0b3IsIGNoLnRleHQpO1xuICAgICAgICAgICAgICAgIGlmICh2YWx1ZSAmJiBjaC5mbXRTdHJpbmcpXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gdGhpcy50bVN0ckZvcm1hdCh2YWx1ZSwgY2gpO1xuICAgICAgICAgICAgICAgIGNoLnByb2Nlc3NlZCA9IGk7XG4gICAgICAgICAgICAgICAgaWYgKGNoLmV4cGVjdElmID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaCh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBnb3RvTmV4dChjaCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoLnNraXAgPSBjaC5lbHNlQnJhbmNoO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgIGdvdG9OZXh0KGNoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGNoLnRhYnN0b3BJZCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goY2gpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChjaC5jaGFuZ2VDYXNlICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQucHVzaChjaCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gZ290b05leHQoY2gpIHtcbiAgICAgICAgICAgIHZhciBpMSA9IHNuaXBwZXQuaW5kZXhPZihjaCwgaSArIDEpO1xuICAgICAgICAgICAgaWYgKGkxICE9IC0xKVxuICAgICAgICAgICAgICAgIGkgPSBpMTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG5cbiAgICB0aGlzLmluc2VydFNuaXBwZXRGb3JTZWxlY3Rpb24gPSBmdW5jdGlvbihlZGl0b3IsIHNuaXBwZXRUZXh0KSB7XG4gICAgICAgIHZhciBjdXJzb3IgPSBlZGl0b3IuZ2V0Q3Vyc29yUG9zaXRpb24oKTtcbiAgICAgICAgdmFyIGxpbmUgPSBlZGl0b3Iuc2Vzc2lvbi5nZXRMaW5lKGN1cnNvci5yb3cpO1xuICAgICAgICB2YXIgdGFiU3RyaW5nID0gZWRpdG9yLnNlc3Npb24uZ2V0VGFiU3RyaW5nKCk7XG4gICAgICAgIHZhciBpbmRlbnRTdHJpbmcgPSBsaW5lLm1hdGNoKC9eXFxzKi8pWzBdO1xuICAgICAgICBcbiAgICAgICAgaWYgKGN1cnNvci5jb2x1bW4gPCBpbmRlbnRTdHJpbmcubGVuZ3RoKVxuICAgICAgICAgICAgaW5kZW50U3RyaW5nID0gaW5kZW50U3RyaW5nLnNsaWNlKDAsIGN1cnNvci5jb2x1bW4pO1xuXG4gICAgICAgIHNuaXBwZXRUZXh0ID0gc25pcHBldFRleHQucmVwbGFjZSgvXFxyL2csIFwiXCIpO1xuICAgICAgICB2YXIgdG9rZW5zID0gdGhpcy50b2tlbml6ZVRtU25pcHBldChzbmlwcGV0VGV4dCk7XG4gICAgICAgIHRva2VucyA9IHRoaXMucmVzb2x2ZVZhcmlhYmxlcyh0b2tlbnMsIGVkaXRvcik7XG4gICAgICAgIHRva2VucyA9IHRva2Vucy5tYXAoZnVuY3Rpb24oeCkge1xuICAgICAgICAgICAgaWYgKHggPT0gXCJcXG5cIilcbiAgICAgICAgICAgICAgICByZXR1cm4geCArIGluZGVudFN0cmluZztcbiAgICAgICAgICAgIGlmICh0eXBlb2YgeCA9PSBcInN0cmluZ1wiKVxuICAgICAgICAgICAgICAgIHJldHVybiB4LnJlcGxhY2UoL1xcdC9nLCB0YWJTdHJpbmcpO1xuICAgICAgICAgICAgcmV0dXJuIHg7XG4gICAgICAgIH0pO1xuICAgICAgICB2YXIgdGFic3RvcHMgPSBbXTtcbiAgICAgICAgdG9rZW5zLmZvckVhY2goZnVuY3Rpb24ocCwgaSkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBwICE9IFwib2JqZWN0XCIpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgdmFyIGlkID0gcC50YWJzdG9wSWQ7XG4gICAgICAgICAgICB2YXIgdHMgPSB0YWJzdG9wc1tpZF07XG4gICAgICAgICAgICBpZiAoIXRzKSB7XG4gICAgICAgICAgICAgICAgdHMgPSB0YWJzdG9wc1tpZF0gPSBbXTtcbiAgICAgICAgICAgICAgICB0cy5pbmRleCA9IGlkO1xuICAgICAgICAgICAgICAgIHRzLnZhbHVlID0gXCJcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0cy5pbmRleE9mKHApICE9PSAtMSlcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB0cy5wdXNoKHApO1xuICAgICAgICAgICAgdmFyIGkxID0gdG9rZW5zLmluZGV4T2YocCwgaSArIDEpO1xuICAgICAgICAgICAgaWYgKGkxID09PSAtMSlcbiAgICAgICAgICAgICAgICByZXR1cm47XG5cbiAgICAgICAgICAgIHZhciB2YWx1ZSA9IHRva2Vucy5zbGljZShpICsgMSwgaTEpO1xuICAgICAgICAgICAgdmFyIGlzTmVzdGVkID0gdmFsdWUuc29tZShmdW5jdGlvbih0KSB7cmV0dXJuIHR5cGVvZiB0ID09PSBcIm9iamVjdFwiO30pO1xuICAgICAgICAgICAgaWYgKGlzTmVzdGVkICYmICF0cy52YWx1ZSkge1xuICAgICAgICAgICAgICAgIHRzLnZhbHVlID0gdmFsdWU7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHZhbHVlLmxlbmd0aCAmJiAoIXRzLnZhbHVlIHx8IHR5cGVvZiB0cy52YWx1ZSAhPT0gXCJzdHJpbmdcIikpIHtcbiAgICAgICAgICAgICAgICB0cy52YWx1ZSA9IHZhbHVlLmpvaW4oXCJcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICB0YWJzdG9wcy5mb3JFYWNoKGZ1bmN0aW9uKHRzKSB7dHMubGVuZ3RoID0gMDt9KTtcbiAgICAgICAgdmFyIGV4cGFuZGluZyA9IHt9O1xuICAgICAgICBmdW5jdGlvbiBjb3B5VmFsdWUodmFsKSB7XG4gICAgICAgICAgICB2YXIgY29weSA9IFtdO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2YWwubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgcCA9IHZhbFtpXTtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHAgPT0gXCJvYmplY3RcIikge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZXhwYW5kaW5nW3AudGFic3RvcElkXSlcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgICB2YXIgaiA9IHZhbC5sYXN0SW5kZXhPZihwLCBpIC0gMSk7XG4gICAgICAgICAgICAgICAgICAgIHAgPSBjb3B5W2pdIHx8IHt0YWJzdG9wSWQ6IHAudGFic3RvcElkfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29weVtpXSA9IHA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gY29weTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRva2Vucy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIHAgPSB0b2tlbnNbaV07XG4gICAgICAgICAgICBpZiAodHlwZW9mIHAgIT0gXCJvYmplY3RcIilcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIHZhciBpZCA9IHAudGFic3RvcElkO1xuICAgICAgICAgICAgdmFyIGkxID0gdG9rZW5zLmluZGV4T2YocCwgaSArIDEpO1xuICAgICAgICAgICAgaWYgKGV4cGFuZGluZ1tpZF0pIHtcbiAgICAgICAgICAgICAgICBpZiAoZXhwYW5kaW5nW2lkXSA9PT0gcClcbiAgICAgICAgICAgICAgICAgICAgZXhwYW5kaW5nW2lkXSA9IG51bGw7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHZhciB0cyA9IHRhYnN0b3BzW2lkXTtcbiAgICAgICAgICAgIHZhciBhcmcgPSB0eXBlb2YgdHMudmFsdWUgPT0gXCJzdHJpbmdcIiA/IFt0cy52YWx1ZV0gOiBjb3B5VmFsdWUodHMudmFsdWUpO1xuICAgICAgICAgICAgYXJnLnVuc2hpZnQoaSArIDEsIE1hdGgubWF4KDAsIGkxIC0gaSkpO1xuICAgICAgICAgICAgYXJnLnB1c2gocCk7XG4gICAgICAgICAgICBleHBhbmRpbmdbaWRdID0gcDtcbiAgICAgICAgICAgIHRva2Vucy5zcGxpY2UuYXBwbHkodG9rZW5zLCBhcmcpO1xuXG4gICAgICAgICAgICBpZiAodHMuaW5kZXhPZihwKSA9PT0gLTEpXG4gICAgICAgICAgICAgICAgdHMucHVzaChwKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgcm93ID0gMCwgY29sdW1uID0gMDtcbiAgICAgICAgdmFyIHRleHQgPSBcIlwiO1xuICAgICAgICB0b2tlbnMuZm9yRWFjaChmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHQgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgICAgICB2YXIgbGluZXMgPSB0LnNwbGl0KFwiXFxuXCIpO1xuICAgICAgICAgICAgICAgIGlmIChsaW5lcy5sZW5ndGggPiAxKXtcbiAgICAgICAgICAgICAgICAgICAgY29sdW1uID0gbGluZXNbbGluZXMubGVuZ3RoIC0gMV0ubGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICByb3cgKz0gbGluZXMubGVuZ3RoIC0gMTtcbiAgICAgICAgICAgICAgICB9IGVsc2VcbiAgICAgICAgICAgICAgICAgICAgY29sdW1uICs9IHQubGVuZ3RoO1xuICAgICAgICAgICAgICAgIHRleHQgKz0gdDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKCF0LnN0YXJ0KVxuICAgICAgICAgICAgICAgICAgICB0LnN0YXJ0ID0ge3Jvdzogcm93LCBjb2x1bW46IGNvbHVtbn07XG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICB0LmVuZCA9IHtyb3c6IHJvdywgY29sdW1uOiBjb2x1bW59O1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgdmFyIHJhbmdlID0gZWRpdG9yLmdldFNlbGVjdGlvblJhbmdlKCk7XG4gICAgICAgIHZhciBlbmQgPSBlZGl0b3Iuc2Vzc2lvbi5yZXBsYWNlKHJhbmdlLCB0ZXh0KTtcblxuICAgICAgICB2YXIgdGFic3RvcE1hbmFnZXIgPSBuZXcgVGFic3RvcE1hbmFnZXIoZWRpdG9yKTtcbiAgICAgICAgdmFyIHNlbGVjdGlvbklkID0gZWRpdG9yLmluVmlydHVhbFNlbGVjdGlvbk1vZGUgJiYgZWRpdG9yLnNlbGVjdGlvbi5pbmRleDtcbiAgICAgICAgdGFic3RvcE1hbmFnZXIuYWRkVGFic3RvcHModGFic3RvcHMsIHJhbmdlLnN0YXJ0LCBlbmQsIHNlbGVjdGlvbklkKTtcbiAgICB9O1xuICAgIFxuICAgIHRoaXMuaW5zZXJ0U25pcHBldCA9IGZ1bmN0aW9uKGVkaXRvciwgc25pcHBldFRleHQpIHtcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgICBpZiAoZWRpdG9yLmluVmlydHVhbFNlbGVjdGlvbk1vZGUpXG4gICAgICAgICAgICByZXR1cm4gc2VsZi5pbnNlcnRTbmlwcGV0Rm9yU2VsZWN0aW9uKGVkaXRvciwgc25pcHBldFRleHQpO1xuICAgICAgICBcbiAgICAgICAgZWRpdG9yLmZvckVhY2hTZWxlY3Rpb24oZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBzZWxmLmluc2VydFNuaXBwZXRGb3JTZWxlY3Rpb24oZWRpdG9yLCBzbmlwcGV0VGV4dCk7XG4gICAgICAgIH0sIG51bGwsIHtrZWVwT3JkZXI6IHRydWV9KTtcbiAgICAgICAgXG4gICAgICAgIGlmIChlZGl0b3IudGFic3RvcE1hbmFnZXIpXG4gICAgICAgICAgICBlZGl0b3IudGFic3RvcE1hbmFnZXIudGFiTmV4dCgpO1xuICAgIH07XG5cbiAgICB0aGlzLiRnZXRTY29wZSA9IGZ1bmN0aW9uKGVkaXRvcikge1xuICAgICAgICB2YXIgc2NvcGUgPSBlZGl0b3Iuc2Vzc2lvbi4kbW9kZS4kaWQgfHwgXCJcIjtcbiAgICAgICAgc2NvcGUgPSBzY29wZS5zcGxpdChcIi9cIikucG9wKCk7XG4gICAgICAgIGlmIChzY29wZSA9PT0gXCJodG1sXCIgfHwgc2NvcGUgPT09IFwicGhwXCIpIHtcbiAgICAgICAgICAgIGlmIChzY29wZSA9PT0gXCJwaHBcIiAmJiAhZWRpdG9yLnNlc3Npb24uJG1vZGUuaW5saW5lUGhwKSBcbiAgICAgICAgICAgICAgICBzY29wZSA9IFwiaHRtbFwiO1xuICAgICAgICAgICAgdmFyIGMgPSBlZGl0b3IuZ2V0Q3Vyc29yUG9zaXRpb24oKTtcbiAgICAgICAgICAgIHZhciBzdGF0ZSA9IGVkaXRvci5zZXNzaW9uLmdldFN0YXRlKGMucm93KTtcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygc3RhdGUgPT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgICAgICAgICBzdGF0ZSA9IHN0YXRlWzBdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHN0YXRlLnN1YnN0cmluZykge1xuICAgICAgICAgICAgICAgIGlmIChzdGF0ZS5zdWJzdHJpbmcoMCwgMykgPT0gXCJqcy1cIilcbiAgICAgICAgICAgICAgICAgICAgc2NvcGUgPSBcImphdmFzY3JpcHRcIjtcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChzdGF0ZS5zdWJzdHJpbmcoMCwgNCkgPT0gXCJjc3MtXCIpXG4gICAgICAgICAgICAgICAgICAgIHNjb3BlID0gXCJjc3NcIjtcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChzdGF0ZS5zdWJzdHJpbmcoMCwgNCkgPT0gXCJwaHAtXCIpXG4gICAgICAgICAgICAgICAgICAgIHNjb3BlID0gXCJwaHBcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgcmV0dXJuIHNjb3BlO1xuICAgIH07XG5cbiAgICB0aGlzLmdldEFjdGl2ZVNjb3BlcyA9IGZ1bmN0aW9uKGVkaXRvcikge1xuICAgICAgICB2YXIgc2NvcGUgPSB0aGlzLiRnZXRTY29wZShlZGl0b3IpO1xuICAgICAgICB2YXIgc2NvcGVzID0gW3Njb3BlXTtcbiAgICAgICAgdmFyIHNuaXBwZXRNYXAgPSB0aGlzLnNuaXBwZXRNYXA7XG4gICAgICAgIGlmIChzbmlwcGV0TWFwW3Njb3BlXSAmJiBzbmlwcGV0TWFwW3Njb3BlXS5pbmNsdWRlU2NvcGVzKSB7XG4gICAgICAgICAgICBzY29wZXMucHVzaC5hcHBseShzY29wZXMsIHNuaXBwZXRNYXBbc2NvcGVdLmluY2x1ZGVTY29wZXMpO1xuICAgICAgICB9XG4gICAgICAgIHNjb3Blcy5wdXNoKFwiX1wiKTtcbiAgICAgICAgcmV0dXJuIHNjb3BlcztcbiAgICB9O1xuXG4gICAgdGhpcy5leHBhbmRXaXRoVGFiID0gZnVuY3Rpb24oZWRpdG9yLCBvcHRpb25zKSB7XG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgICAgdmFyIHJlc3VsdCA9IGVkaXRvci5mb3JFYWNoU2VsZWN0aW9uKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHNlbGYuZXhwYW5kU25pcHBldEZvclNlbGVjdGlvbihlZGl0b3IsIG9wdGlvbnMpO1xuICAgICAgICB9LCBudWxsLCB7a2VlcE9yZGVyOiB0cnVlfSk7XG4gICAgICAgIGlmIChyZXN1bHQgJiYgZWRpdG9yLnRhYnN0b3BNYW5hZ2VyKVxuICAgICAgICAgICAgZWRpdG9yLnRhYnN0b3BNYW5hZ2VyLnRhYk5leHQoKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xuICAgIFxuICAgIHRoaXMuZXhwYW5kU25pcHBldEZvclNlbGVjdGlvbiA9IGZ1bmN0aW9uKGVkaXRvciwgb3B0aW9ucykge1xuICAgICAgICB2YXIgY3Vyc29yID0gZWRpdG9yLmdldEN1cnNvclBvc2l0aW9uKCk7XG4gICAgICAgIHZhciBsaW5lID0gZWRpdG9yLnNlc3Npb24uZ2V0TGluZShjdXJzb3Iucm93KTtcbiAgICAgICAgdmFyIGJlZm9yZSA9IGxpbmUuc3Vic3RyaW5nKDAsIGN1cnNvci5jb2x1bW4pO1xuICAgICAgICB2YXIgYWZ0ZXIgPSBsaW5lLnN1YnN0cihjdXJzb3IuY29sdW1uKTtcblxuICAgICAgICB2YXIgc25pcHBldE1hcCA9IHRoaXMuc25pcHBldE1hcDtcbiAgICAgICAgdmFyIHNuaXBwZXQ7XG4gICAgICAgIHRoaXMuZ2V0QWN0aXZlU2NvcGVzKGVkaXRvcikuc29tZShmdW5jdGlvbihzY29wZSkge1xuICAgICAgICAgICAgdmFyIHNuaXBwZXRzID0gc25pcHBldE1hcFtzY29wZV07XG4gICAgICAgICAgICBpZiAoc25pcHBldHMpXG4gICAgICAgICAgICAgICAgc25pcHBldCA9IHRoaXMuZmluZE1hdGNoaW5nU25pcHBldChzbmlwcGV0cywgYmVmb3JlLCBhZnRlcik7XG4gICAgICAgICAgICByZXR1cm4gISFzbmlwcGV0O1xuICAgICAgICB9LCB0aGlzKTtcbiAgICAgICAgaWYgKCFzbmlwcGV0KVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLmRyeVJ1bilcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICBlZGl0b3Iuc2Vzc2lvbi5kb2MucmVtb3ZlSW5MaW5lKGN1cnNvci5yb3csXG4gICAgICAgICAgICBjdXJzb3IuY29sdW1uIC0gc25pcHBldC5yZXBsYWNlQmVmb3JlLmxlbmd0aCxcbiAgICAgICAgICAgIGN1cnNvci5jb2x1bW4gKyBzbmlwcGV0LnJlcGxhY2VBZnRlci5sZW5ndGhcbiAgICAgICAgKTtcblxuICAgICAgICB0aGlzLnZhcmlhYmxlcy5NX18gPSBzbmlwcGV0Lm1hdGNoQmVmb3JlO1xuICAgICAgICB0aGlzLnZhcmlhYmxlcy5UX18gPSBzbmlwcGV0Lm1hdGNoQWZ0ZXI7XG4gICAgICAgIHRoaXMuaW5zZXJ0U25pcHBldEZvclNlbGVjdGlvbihlZGl0b3IsIHNuaXBwZXQuY29udGVudCk7XG5cbiAgICAgICAgdGhpcy52YXJpYWJsZXMuTV9fID0gdGhpcy52YXJpYWJsZXMuVF9fID0gbnVsbDtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfTtcblxuICAgIHRoaXMuZmluZE1hdGNoaW5nU25pcHBldCA9IGZ1bmN0aW9uKHNuaXBwZXRMaXN0LCBiZWZvcmUsIGFmdGVyKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSBzbmlwcGV0TGlzdC5sZW5ndGg7IGktLTspIHtcbiAgICAgICAgICAgIHZhciBzID0gc25pcHBldExpc3RbaV07XG4gICAgICAgICAgICBpZiAocy5zdGFydFJlICYmICFzLnN0YXJ0UmUudGVzdChiZWZvcmUpKVxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgaWYgKHMuZW5kUmUgJiYgIXMuZW5kUmUudGVzdChhZnRlcikpXG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICBpZiAoIXMuc3RhcnRSZSAmJiAhcy5lbmRSZSlcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcblxuICAgICAgICAgICAgcy5tYXRjaEJlZm9yZSA9IHMuc3RhcnRSZSA/IHMuc3RhcnRSZS5leGVjKGJlZm9yZSkgOiBbXCJcIl07XG4gICAgICAgICAgICBzLm1hdGNoQWZ0ZXIgPSBzLmVuZFJlID8gcy5lbmRSZS5leGVjKGFmdGVyKSA6IFtcIlwiXTtcbiAgICAgICAgICAgIHMucmVwbGFjZUJlZm9yZSA9IHMudHJpZ2dlclJlID8gcy50cmlnZ2VyUmUuZXhlYyhiZWZvcmUpWzBdIDogXCJcIjtcbiAgICAgICAgICAgIHMucmVwbGFjZUFmdGVyID0gcy5lbmRUcmlnZ2VyUmUgPyBzLmVuZFRyaWdnZXJSZS5leGVjKGFmdGVyKVswXSA6IFwiXCI7XG4gICAgICAgICAgICByZXR1cm4gcztcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICB0aGlzLnNuaXBwZXRNYXAgPSB7fTtcbiAgICB0aGlzLnNuaXBwZXROYW1lTWFwID0ge307XG4gICAgdGhpcy5yZWdpc3RlciA9IGZ1bmN0aW9uKHNuaXBwZXRzLCBzY29wZSkge1xuICAgICAgICB2YXIgc25pcHBldE1hcCA9IHRoaXMuc25pcHBldE1hcDtcbiAgICAgICAgdmFyIHNuaXBwZXROYW1lTWFwID0gdGhpcy5zbmlwcGV0TmFtZU1hcDtcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgICBcbiAgICAgICAgaWYgKCFzbmlwcGV0cykgXG4gICAgICAgICAgICBzbmlwcGV0cyA9IFtdO1xuICAgICAgICBcbiAgICAgICAgZnVuY3Rpb24gd3JhcFJlZ2V4cChzcmMpIHtcbiAgICAgICAgICAgIGlmIChzcmMgJiYgIS9eXFxeP1xcKC4qXFwpXFwkPyR8XlxcXFxiJC8udGVzdChzcmMpKVxuICAgICAgICAgICAgICAgIHNyYyA9IFwiKD86XCIgKyBzcmMgKyBcIilcIjtcblxuICAgICAgICAgICAgcmV0dXJuIHNyYyB8fCBcIlwiO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGd1YXJkZWRSZWdleHAocmUsIGd1YXJkLCBvcGVuaW5nKSB7XG4gICAgICAgICAgICByZSA9IHdyYXBSZWdleHAocmUpO1xuICAgICAgICAgICAgZ3VhcmQgPSB3cmFwUmVnZXhwKGd1YXJkKTtcbiAgICAgICAgICAgIGlmIChvcGVuaW5nKSB7XG4gICAgICAgICAgICAgICAgcmUgPSBndWFyZCArIHJlO1xuICAgICAgICAgICAgICAgIGlmIChyZSAmJiByZVtyZS5sZW5ndGggLSAxXSAhPSBcIiRcIilcbiAgICAgICAgICAgICAgICAgICAgcmUgPSByZSArIFwiJFwiO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZSA9IHJlICsgZ3VhcmQ7XG4gICAgICAgICAgICAgICAgaWYgKHJlICYmIHJlWzBdICE9IFwiXlwiKVxuICAgICAgICAgICAgICAgICAgICByZSA9IFwiXlwiICsgcmU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbmV3IFJlZ0V4cChyZSk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBhZGRTbmlwcGV0KHMpIHtcbiAgICAgICAgICAgIGlmICghcy5zY29wZSlcbiAgICAgICAgICAgICAgICBzLnNjb3BlID0gc2NvcGUgfHwgXCJfXCI7XG4gICAgICAgICAgICBzY29wZSA9IHMuc2NvcGU7XG4gICAgICAgICAgICBpZiAoIXNuaXBwZXRNYXBbc2NvcGVdKSB7XG4gICAgICAgICAgICAgICAgc25pcHBldE1hcFtzY29wZV0gPSBbXTtcbiAgICAgICAgICAgICAgICBzbmlwcGV0TmFtZU1hcFtzY29wZV0gPSB7fTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIG1hcCA9IHNuaXBwZXROYW1lTWFwW3Njb3BlXTtcbiAgICAgICAgICAgIGlmIChzLm5hbWUpIHtcbiAgICAgICAgICAgICAgICB2YXIgb2xkID0gbWFwW3MubmFtZV07XG4gICAgICAgICAgICAgICAgaWYgKG9sZClcbiAgICAgICAgICAgICAgICAgICAgc2VsZi51bnJlZ2lzdGVyKG9sZCk7XG4gICAgICAgICAgICAgICAgbWFwW3MubmFtZV0gPSBzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc25pcHBldE1hcFtzY29wZV0ucHVzaChzKTtcblxuICAgICAgICAgICAgaWYgKHMudGFiVHJpZ2dlciAmJiAhcy50cmlnZ2VyKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFzLmd1YXJkICYmIC9eXFx3Ly50ZXN0KHMudGFiVHJpZ2dlcikpXG4gICAgICAgICAgICAgICAgICAgIHMuZ3VhcmQgPSBcIlxcXFxiXCI7XG4gICAgICAgICAgICAgICAgcy50cmlnZ2VyID0gbGFuZy5lc2NhcGVSZWdFeHAocy50YWJUcmlnZ2VyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKCFzLnRyaWdnZXIgJiYgIXMuZ3VhcmQgJiYgIXMuZW5kVHJpZ2dlciAmJiAhcy5lbmRHdWFyZClcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHMuc3RhcnRSZSA9IGd1YXJkZWRSZWdleHAocy50cmlnZ2VyLCBzLmd1YXJkLCB0cnVlKTtcbiAgICAgICAgICAgIHMudHJpZ2dlclJlID0gbmV3IFJlZ0V4cChzLnRyaWdnZXIsIFwiXCIsIHRydWUpO1xuXG4gICAgICAgICAgICBzLmVuZFJlID0gZ3VhcmRlZFJlZ2V4cChzLmVuZFRyaWdnZXIsIHMuZW5kR3VhcmQsIHRydWUpO1xuICAgICAgICAgICAgcy5lbmRUcmlnZ2VyUmUgPSBuZXcgUmVnRXhwKHMuZW5kVHJpZ2dlciwgXCJcIiwgdHJ1ZSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc25pcHBldHMgJiYgc25pcHBldHMuY29udGVudClcbiAgICAgICAgICAgIGFkZFNuaXBwZXQoc25pcHBldHMpO1xuICAgICAgICBlbHNlIGlmIChBcnJheS5pc0FycmF5KHNuaXBwZXRzKSlcbiAgICAgICAgICAgIHNuaXBwZXRzLmZvckVhY2goYWRkU25pcHBldCk7XG4gICAgICAgIFxuICAgICAgICB0aGlzLl9zaWduYWwoXCJyZWdpc3RlclNuaXBwZXRzXCIsIHtzY29wZTogc2NvcGV9KTtcbiAgICB9O1xuICAgIHRoaXMudW5yZWdpc3RlciA9IGZ1bmN0aW9uKHNuaXBwZXRzLCBzY29wZSkge1xuICAgICAgICB2YXIgc25pcHBldE1hcCA9IHRoaXMuc25pcHBldE1hcDtcbiAgICAgICAgdmFyIHNuaXBwZXROYW1lTWFwID0gdGhpcy5zbmlwcGV0TmFtZU1hcDtcblxuICAgICAgICBmdW5jdGlvbiByZW1vdmVTbmlwcGV0KHMpIHtcbiAgICAgICAgICAgIHZhciBuYW1lTWFwID0gc25pcHBldE5hbWVNYXBbcy5zY29wZXx8c2NvcGVdO1xuICAgICAgICAgICAgaWYgKG5hbWVNYXAgJiYgbmFtZU1hcFtzLm5hbWVdKSB7XG4gICAgICAgICAgICAgICAgZGVsZXRlIG5hbWVNYXBbcy5uYW1lXTtcbiAgICAgICAgICAgICAgICB2YXIgbWFwID0gc25pcHBldE1hcFtzLnNjb3BlfHxzY29wZV07XG4gICAgICAgICAgICAgICAgdmFyIGkgPSBtYXAgJiYgbWFwLmluZGV4T2Yocyk7XG4gICAgICAgICAgICAgICAgaWYgKGkgPj0gMClcbiAgICAgICAgICAgICAgICAgICAgbWFwLnNwbGljZShpLCAxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoc25pcHBldHMuY29udGVudClcbiAgICAgICAgICAgIHJlbW92ZVNuaXBwZXQoc25pcHBldHMpO1xuICAgICAgICBlbHNlIGlmIChBcnJheS5pc0FycmF5KHNuaXBwZXRzKSlcbiAgICAgICAgICAgIHNuaXBwZXRzLmZvckVhY2gocmVtb3ZlU25pcHBldCk7XG4gICAgfTtcbiAgICB0aGlzLnBhcnNlU25pcHBldEZpbGUgPSBmdW5jdGlvbihzdHIpIHtcbiAgICAgICAgc3RyID0gc3RyLnJlcGxhY2UoL1xcci9nLCBcIlwiKTtcbiAgICAgICAgdmFyIGxpc3QgPSBbXSwgc25pcHBldCA9IHt9O1xuICAgICAgICB2YXIgcmUgPSAvXiMuKnxeKHtbXFxzXFxTXSp9KVxccyokfF4oXFxTKykgKC4qKSR8XigoPzpcXG4qXFx0LiopKykvZ207XG4gICAgICAgIHZhciBtO1xuICAgICAgICB3aGlsZSAobSA9IHJlLmV4ZWMoc3RyKSkge1xuICAgICAgICAgICAgaWYgKG1bMV0pIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBzbmlwcGV0ID0gSlNPTi5wYXJzZShtWzFdKTtcbiAgICAgICAgICAgICAgICAgICAgbGlzdC5wdXNoKHNuaXBwZXQpO1xuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgICAgICAgICB9IGlmIChtWzRdKSB7XG4gICAgICAgICAgICAgICAgc25pcHBldC5jb250ZW50ID0gbVs0XS5yZXBsYWNlKC9eXFx0L2dtLCBcIlwiKTtcbiAgICAgICAgICAgICAgICBsaXN0LnB1c2goc25pcHBldCk7XG4gICAgICAgICAgICAgICAgc25pcHBldCA9IHt9O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB2YXIga2V5ID0gbVsyXSwgdmFsID0gbVszXTtcbiAgICAgICAgICAgICAgICBpZiAoa2V5ID09IFwicmVnZXhcIikge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZ3VhcmRSZSA9IC9cXC8oKD86W15cXC9cXFxcXXxcXFxcLikqKXwkL2c7XG4gICAgICAgICAgICAgICAgICAgIHNuaXBwZXQuZ3VhcmQgPSBndWFyZFJlLmV4ZWModmFsKVsxXTtcbiAgICAgICAgICAgICAgICAgICAgc25pcHBldC50cmlnZ2VyID0gZ3VhcmRSZS5leGVjKHZhbClbMV07XG4gICAgICAgICAgICAgICAgICAgIHNuaXBwZXQuZW5kVHJpZ2dlciA9IGd1YXJkUmUuZXhlYyh2YWwpWzFdO1xuICAgICAgICAgICAgICAgICAgICBzbmlwcGV0LmVuZEd1YXJkID0gZ3VhcmRSZS5leGVjKHZhbClbMV07XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChrZXkgPT0gXCJzbmlwcGV0XCIpIHtcbiAgICAgICAgICAgICAgICAgICAgc25pcHBldC50YWJUcmlnZ2VyID0gdmFsLm1hdGNoKC9eXFxTKi8pWzBdO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIXNuaXBwZXQubmFtZSlcbiAgICAgICAgICAgICAgICAgICAgICAgIHNuaXBwZXQubmFtZSA9IHZhbDtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBzbmlwcGV0W2tleV0gPSB2YWw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBsaXN0O1xuICAgIH07XG4gICAgdGhpcy5nZXRTbmlwcGV0QnlOYW1lID0gZnVuY3Rpb24obmFtZSwgZWRpdG9yKSB7XG4gICAgICAgIHZhciBzbmlwcGV0TWFwID0gdGhpcy5zbmlwcGV0TmFtZU1hcDtcbiAgICAgICAgdmFyIHNuaXBwZXQ7XG4gICAgICAgIHRoaXMuZ2V0QWN0aXZlU2NvcGVzKGVkaXRvcikuc29tZShmdW5jdGlvbihzY29wZSkge1xuICAgICAgICAgICAgdmFyIHNuaXBwZXRzID0gc25pcHBldE1hcFtzY29wZV07XG4gICAgICAgICAgICBpZiAoc25pcHBldHMpXG4gICAgICAgICAgICAgICAgc25pcHBldCA9IHNuaXBwZXRzW25hbWVdO1xuICAgICAgICAgICAgcmV0dXJuICEhc25pcHBldDtcbiAgICAgICAgfSwgdGhpcyk7XG4gICAgICAgIHJldHVybiBzbmlwcGV0O1xuICAgIH07XG5cbn0pLmNhbGwoU25pcHBldE1hbmFnZXIucHJvdG90eXBlKTtcblxuXG52YXIgVGFic3RvcE1hbmFnZXIgPSBmdW5jdGlvbihlZGl0b3IpIHtcbiAgICBpZiAoZWRpdG9yLnRhYnN0b3BNYW5hZ2VyKVxuICAgICAgICByZXR1cm4gZWRpdG9yLnRhYnN0b3BNYW5hZ2VyO1xuICAgIGVkaXRvci50YWJzdG9wTWFuYWdlciA9IHRoaXM7XG4gICAgdGhpcy4kb25DaGFuZ2UgPSB0aGlzLm9uQ2hhbmdlLmJpbmQodGhpcyk7XG4gICAgdGhpcy4kb25DaGFuZ2VTZWxlY3Rpb24gPSBsYW5nLmRlbGF5ZWRDYWxsKHRoaXMub25DaGFuZ2VTZWxlY3Rpb24uYmluZCh0aGlzKSkuc2NoZWR1bGU7XG4gICAgdGhpcy4kb25DaGFuZ2VTZXNzaW9uID0gdGhpcy5vbkNoYW5nZVNlc3Npb24uYmluZCh0aGlzKTtcbiAgICB0aGlzLiRvbkFmdGVyRXhlYyA9IHRoaXMub25BZnRlckV4ZWMuYmluZCh0aGlzKTtcbiAgICB0aGlzLmF0dGFjaChlZGl0b3IpO1xufTtcbihmdW5jdGlvbigpIHtcbiAgICB0aGlzLmF0dGFjaCA9IGZ1bmN0aW9uKGVkaXRvcikge1xuICAgICAgICB0aGlzLmluZGV4ID0gMDtcbiAgICAgICAgdGhpcy5yYW5nZXMgPSBbXTtcbiAgICAgICAgdGhpcy50YWJzdG9wcyA9IFtdO1xuICAgICAgICB0aGlzLiRvcGVuVGFic3RvcHMgPSBudWxsO1xuICAgICAgICB0aGlzLnNlbGVjdGVkVGFic3RvcCA9IG51bGw7XG5cbiAgICAgICAgdGhpcy5lZGl0b3IgPSBlZGl0b3I7XG4gICAgICAgIHRoaXMuZWRpdG9yLm9uKFwiY2hhbmdlXCIsIHRoaXMuJG9uQ2hhbmdlKTtcbiAgICAgICAgdGhpcy5lZGl0b3Iub24oXCJjaGFuZ2VTZWxlY3Rpb25cIiwgdGhpcy4kb25DaGFuZ2VTZWxlY3Rpb24pO1xuICAgICAgICB0aGlzLmVkaXRvci5vbihcImNoYW5nZVNlc3Npb25cIiwgdGhpcy4kb25DaGFuZ2VTZXNzaW9uKTtcbiAgICAgICAgdGhpcy5lZGl0b3IuY29tbWFuZHMub24oXCJhZnRlckV4ZWNcIiwgdGhpcy4kb25BZnRlckV4ZWMpO1xuICAgICAgICB0aGlzLmVkaXRvci5rZXlCaW5kaW5nLmFkZEtleWJvYXJkSGFuZGxlcih0aGlzLmtleWJvYXJkSGFuZGxlcik7XG4gICAgfTtcbiAgICB0aGlzLmRldGFjaCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLnRhYnN0b3BzLmZvckVhY2godGhpcy5yZW1vdmVUYWJzdG9wTWFya2VycywgdGhpcyk7XG4gICAgICAgIHRoaXMucmFuZ2VzID0gbnVsbDtcbiAgICAgICAgdGhpcy50YWJzdG9wcyA9IG51bGw7XG4gICAgICAgIHRoaXMuc2VsZWN0ZWRUYWJzdG9wID0gbnVsbDtcbiAgICAgICAgdGhpcy5lZGl0b3IucmVtb3ZlTGlzdGVuZXIoXCJjaGFuZ2VcIiwgdGhpcy4kb25DaGFuZ2UpO1xuICAgICAgICB0aGlzLmVkaXRvci5yZW1vdmVMaXN0ZW5lcihcImNoYW5nZVNlbGVjdGlvblwiLCB0aGlzLiRvbkNoYW5nZVNlbGVjdGlvbik7XG4gICAgICAgIHRoaXMuZWRpdG9yLnJlbW92ZUxpc3RlbmVyKFwiY2hhbmdlU2Vzc2lvblwiLCB0aGlzLiRvbkNoYW5nZVNlc3Npb24pO1xuICAgICAgICB0aGlzLmVkaXRvci5jb21tYW5kcy5yZW1vdmVMaXN0ZW5lcihcImFmdGVyRXhlY1wiLCB0aGlzLiRvbkFmdGVyRXhlYyk7XG4gICAgICAgIHRoaXMuZWRpdG9yLmtleUJpbmRpbmcucmVtb3ZlS2V5Ym9hcmRIYW5kbGVyKHRoaXMua2V5Ym9hcmRIYW5kbGVyKTtcbiAgICAgICAgdGhpcy5lZGl0b3IudGFic3RvcE1hbmFnZXIgPSBudWxsO1xuICAgICAgICB0aGlzLmVkaXRvciA9IG51bGw7XG4gICAgfTtcblxuICAgIHRoaXMub25DaGFuZ2UgPSBmdW5jdGlvbihkZWx0YSkge1xuICAgICAgICB2YXIgY2hhbmdlUmFuZ2UgPSBkZWx0YTtcbiAgICAgICAgdmFyIGlzUmVtb3ZlID0gZGVsdGEuYWN0aW9uWzBdID09IFwiclwiO1xuICAgICAgICB2YXIgc3RhcnQgPSBkZWx0YS5zdGFydDtcbiAgICAgICAgdmFyIGVuZCA9IGRlbHRhLmVuZDtcbiAgICAgICAgdmFyIHN0YXJ0Um93ID0gc3RhcnQucm93O1xuICAgICAgICB2YXIgZW5kUm93ID0gZW5kLnJvdztcbiAgICAgICAgdmFyIGxpbmVEaWYgPSBlbmRSb3cgLSBzdGFydFJvdztcbiAgICAgICAgdmFyIGNvbERpZmYgPSBlbmQuY29sdW1uIC0gc3RhcnQuY29sdW1uO1xuXG4gICAgICAgIGlmIChpc1JlbW92ZSkge1xuICAgICAgICAgICAgbGluZURpZiA9IC1saW5lRGlmO1xuICAgICAgICAgICAgY29sRGlmZiA9IC1jb2xEaWZmO1xuICAgICAgICB9XG4gICAgICAgIGlmICghdGhpcy4kaW5DaGFuZ2UgJiYgaXNSZW1vdmUpIHtcbiAgICAgICAgICAgIHZhciB0cyA9IHRoaXMuc2VsZWN0ZWRUYWJzdG9wO1xuICAgICAgICAgICAgdmFyIGNoYW5nZWRPdXRzaWRlID0gdHMgJiYgIXRzLnNvbWUoZnVuY3Rpb24ocikge1xuICAgICAgICAgICAgICAgIHJldHVybiBjb21wYXJlUG9pbnRzKHIuc3RhcnQsIHN0YXJ0KSA8PSAwICYmIGNvbXBhcmVQb2ludHMoci5lbmQsIGVuZCkgPj0gMDtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKGNoYW5nZWRPdXRzaWRlKVxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmRldGFjaCgpO1xuICAgICAgICB9XG4gICAgICAgIHZhciByYW5nZXMgPSB0aGlzLnJhbmdlcztcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCByYW5nZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciByID0gcmFuZ2VzW2ldO1xuICAgICAgICAgICAgaWYgKHIuZW5kLnJvdyA8IHN0YXJ0LnJvdylcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcblxuICAgICAgICAgICAgaWYgKGlzUmVtb3ZlICYmIGNvbXBhcmVQb2ludHMoc3RhcnQsIHIuc3RhcnQpIDwgMCAmJiBjb21wYXJlUG9pbnRzKGVuZCwgci5lbmQpID4gMCkge1xuICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlUmFuZ2Uocik7XG4gICAgICAgICAgICAgICAgaS0tO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoci5zdGFydC5yb3cgPT0gc3RhcnRSb3cgJiYgci5zdGFydC5jb2x1bW4gPiBzdGFydC5jb2x1bW4pXG4gICAgICAgICAgICAgICAgci5zdGFydC5jb2x1bW4gKz0gY29sRGlmZjtcbiAgICAgICAgICAgIGlmIChyLmVuZC5yb3cgPT0gc3RhcnRSb3cgJiYgci5lbmQuY29sdW1uID49IHN0YXJ0LmNvbHVtbilcbiAgICAgICAgICAgICAgICByLmVuZC5jb2x1bW4gKz0gY29sRGlmZjtcbiAgICAgICAgICAgIGlmIChyLnN0YXJ0LnJvdyA+PSBzdGFydFJvdylcbiAgICAgICAgICAgICAgICByLnN0YXJ0LnJvdyArPSBsaW5lRGlmO1xuICAgICAgICAgICAgaWYgKHIuZW5kLnJvdyA+PSBzdGFydFJvdylcbiAgICAgICAgICAgICAgICByLmVuZC5yb3cgKz0gbGluZURpZjtcblxuICAgICAgICAgICAgaWYgKGNvbXBhcmVQb2ludHMoci5zdGFydCwgci5lbmQpID4gMClcbiAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZVJhbmdlKHIpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghcmFuZ2VzLmxlbmd0aClcbiAgICAgICAgICAgIHRoaXMuZGV0YWNoKCk7XG4gICAgfTtcbiAgICB0aGlzLnVwZGF0ZUxpbmtlZEZpZWxkcyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgdHMgPSB0aGlzLnNlbGVjdGVkVGFic3RvcDtcbiAgICAgICAgaWYgKCF0cyB8fCAhdHMuaGFzTGlua2VkUmFuZ2VzKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB0aGlzLiRpbkNoYW5nZSA9IHRydWU7XG4gICAgICAgIHZhciBzZXNzaW9uID0gdGhpcy5lZGl0b3Iuc2Vzc2lvbjtcbiAgICAgICAgdmFyIHRleHQgPSBzZXNzaW9uLmdldFRleHRSYW5nZSh0cy5maXJzdE5vbkxpbmtlZCk7XG4gICAgICAgIGZvciAodmFyIGkgPSB0cy5sZW5ndGg7IGktLTspIHtcbiAgICAgICAgICAgIHZhciByYW5nZSA9IHRzW2ldO1xuICAgICAgICAgICAgaWYgKCFyYW5nZS5saW5rZWQpXG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB2YXIgZm10ID0gZXhwb3J0cy5zbmlwcGV0TWFuYWdlci50bVN0ckZvcm1hdCh0ZXh0LCByYW5nZS5vcmlnaW5hbCk7XG4gICAgICAgICAgICBzZXNzaW9uLnJlcGxhY2UocmFuZ2UsIGZtdCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy4kaW5DaGFuZ2UgPSBmYWxzZTtcbiAgICB9O1xuICAgIHRoaXMub25BZnRlckV4ZWMgPSBmdW5jdGlvbihlKSB7XG4gICAgICAgIGlmIChlLmNvbW1hbmQgJiYgIWUuY29tbWFuZC5yZWFkT25seSlcbiAgICAgICAgICAgIHRoaXMudXBkYXRlTGlua2VkRmllbGRzKCk7XG4gICAgfTtcbiAgICB0aGlzLm9uQ2hhbmdlU2VsZWN0aW9uID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICghdGhpcy5lZGl0b3IpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHZhciBsZWFkID0gdGhpcy5lZGl0b3Iuc2VsZWN0aW9uLmxlYWQ7XG4gICAgICAgIHZhciBhbmNob3IgPSB0aGlzLmVkaXRvci5zZWxlY3Rpb24uYW5jaG9yO1xuICAgICAgICB2YXIgaXNFbXB0eSA9IHRoaXMuZWRpdG9yLnNlbGVjdGlvbi5pc0VtcHR5KCk7XG4gICAgICAgIGZvciAodmFyIGkgPSB0aGlzLnJhbmdlcy5sZW5ndGg7IGktLTspIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnJhbmdlc1tpXS5saW5rZWQpXG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB2YXIgY29udGFpbnNMZWFkID0gdGhpcy5yYW5nZXNbaV0uY29udGFpbnMobGVhZC5yb3csIGxlYWQuY29sdW1uKTtcbiAgICAgICAgICAgIHZhciBjb250YWluc0FuY2hvciA9IGlzRW1wdHkgfHwgdGhpcy5yYW5nZXNbaV0uY29udGFpbnMoYW5jaG9yLnJvdywgYW5jaG9yLmNvbHVtbik7XG4gICAgICAgICAgICBpZiAoY29udGFpbnNMZWFkICYmIGNvbnRhaW5zQW5jaG9yKVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmRldGFjaCgpO1xuICAgIH07XG4gICAgdGhpcy5vbkNoYW5nZVNlc3Npb24gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy5kZXRhY2goKTtcbiAgICB9O1xuICAgIHRoaXMudGFiTmV4dCA9IGZ1bmN0aW9uKGRpcikge1xuICAgICAgICB2YXIgbWF4ID0gdGhpcy50YWJzdG9wcy5sZW5ndGg7XG4gICAgICAgIHZhciBpbmRleCA9IHRoaXMuaW5kZXggKyAoZGlyIHx8IDEpO1xuICAgICAgICBpbmRleCA9IE1hdGgubWluKE1hdGgubWF4KGluZGV4LCAxKSwgbWF4KTtcbiAgICAgICAgaWYgKGluZGV4ID09IG1heClcbiAgICAgICAgICAgIGluZGV4ID0gMDtcbiAgICAgICAgdGhpcy5zZWxlY3RUYWJzdG9wKGluZGV4KTtcbiAgICAgICAgaWYgKGluZGV4ID09PSAwKVxuICAgICAgICAgICAgdGhpcy5kZXRhY2goKTtcbiAgICB9O1xuICAgIHRoaXMuc2VsZWN0VGFic3RvcCA9IGZ1bmN0aW9uKGluZGV4KSB7XG4gICAgICAgIHRoaXMuJG9wZW5UYWJzdG9wcyA9IG51bGw7XG4gICAgICAgIHZhciB0cyA9IHRoaXMudGFic3RvcHNbdGhpcy5pbmRleF07XG4gICAgICAgIGlmICh0cylcbiAgICAgICAgICAgIHRoaXMuYWRkVGFic3RvcE1hcmtlcnModHMpO1xuICAgICAgICB0aGlzLmluZGV4ID0gaW5kZXg7XG4gICAgICAgIHRzID0gdGhpcy50YWJzdG9wc1t0aGlzLmluZGV4XTtcbiAgICAgICAgaWYgKCF0cyB8fCAhdHMubGVuZ3RoKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBcbiAgICAgICAgdGhpcy5zZWxlY3RlZFRhYnN0b3AgPSB0cztcbiAgICAgICAgaWYgKCF0aGlzLmVkaXRvci5pblZpcnR1YWxTZWxlY3Rpb25Nb2RlKSB7ICAgICAgICBcbiAgICAgICAgICAgIHZhciBzZWwgPSB0aGlzLmVkaXRvci5tdWx0aVNlbGVjdDtcbiAgICAgICAgICAgIHNlbC50b1NpbmdsZVJhbmdlKHRzLmZpcnN0Tm9uTGlua2VkLmNsb25lKCkpO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IHRzLmxlbmd0aDsgaS0tOykge1xuICAgICAgICAgICAgICAgIGlmICh0cy5oYXNMaW5rZWRSYW5nZXMgJiYgdHNbaV0ubGlua2VkKVxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBzZWwuYWRkUmFuZ2UodHNbaV0uY2xvbmUoKSwgdHJ1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoc2VsLnJhbmdlc1swXSlcbiAgICAgICAgICAgICAgICBzZWwuYWRkUmFuZ2Uoc2VsLnJhbmdlc1swXS5jbG9uZSgpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuZWRpdG9yLnNlbGVjdGlvbi5zZXRSYW5nZSh0cy5maXJzdE5vbkxpbmtlZCk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHRoaXMuZWRpdG9yLmtleUJpbmRpbmcuYWRkS2V5Ym9hcmRIYW5kbGVyKHRoaXMua2V5Ym9hcmRIYW5kbGVyKTtcbiAgICB9O1xuICAgIHRoaXMuYWRkVGFic3RvcHMgPSBmdW5jdGlvbih0YWJzdG9wcywgc3RhcnQsIGVuZCkge1xuICAgICAgICBpZiAoIXRoaXMuJG9wZW5UYWJzdG9wcylcbiAgICAgICAgICAgIHRoaXMuJG9wZW5UYWJzdG9wcyA9IFtdO1xuICAgICAgICBpZiAoIXRhYnN0b3BzWzBdKSB7XG4gICAgICAgICAgICB2YXIgcCA9IFJhbmdlLmZyb21Qb2ludHMoZW5kLCBlbmQpO1xuICAgICAgICAgICAgbW92ZVJlbGF0aXZlKHAuc3RhcnQsIHN0YXJ0KTtcbiAgICAgICAgICAgIG1vdmVSZWxhdGl2ZShwLmVuZCwgc3RhcnQpO1xuICAgICAgICAgICAgdGFic3RvcHNbMF0gPSBbcF07XG4gICAgICAgICAgICB0YWJzdG9wc1swXS5pbmRleCA9IDA7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgaSA9IHRoaXMuaW5kZXg7XG4gICAgICAgIHZhciBhcmcgPSBbaSArIDEsIDBdO1xuICAgICAgICB2YXIgcmFuZ2VzID0gdGhpcy5yYW5nZXM7XG4gICAgICAgIHRhYnN0b3BzLmZvckVhY2goZnVuY3Rpb24odHMsIGluZGV4KSB7XG4gICAgICAgICAgICB2YXIgZGVzdCA9IHRoaXMuJG9wZW5UYWJzdG9wc1tpbmRleF0gfHwgdHM7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gdHMubGVuZ3RoOyBpLS07KSB7XG4gICAgICAgICAgICAgICAgdmFyIHAgPSB0c1tpXTtcbiAgICAgICAgICAgICAgICB2YXIgcmFuZ2UgPSBSYW5nZS5mcm9tUG9pbnRzKHAuc3RhcnQsIHAuZW5kIHx8IHAuc3RhcnQpO1xuICAgICAgICAgICAgICAgIG1vdmVQb2ludChyYW5nZS5zdGFydCwgc3RhcnQpO1xuICAgICAgICAgICAgICAgIG1vdmVQb2ludChyYW5nZS5lbmQsIHN0YXJ0KTtcbiAgICAgICAgICAgICAgICByYW5nZS5vcmlnaW5hbCA9IHA7XG4gICAgICAgICAgICAgICAgcmFuZ2UudGFic3RvcCA9IGRlc3Q7XG4gICAgICAgICAgICAgICAgcmFuZ2VzLnB1c2gocmFuZ2UpO1xuICAgICAgICAgICAgICAgIGlmIChkZXN0ICE9IHRzKVxuICAgICAgICAgICAgICAgICAgICBkZXN0LnVuc2hpZnQocmFuZ2UpO1xuICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgZGVzdFtpXSA9IHJhbmdlO1xuICAgICAgICAgICAgICAgIGlmIChwLmZtdFN0cmluZykge1xuICAgICAgICAgICAgICAgICAgICByYW5nZS5saW5rZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBkZXN0Lmhhc0xpbmtlZFJhbmdlcyA9IHRydWU7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICghZGVzdC5maXJzdE5vbkxpbmtlZClcbiAgICAgICAgICAgICAgICAgICAgZGVzdC5maXJzdE5vbkxpbmtlZCA9IHJhbmdlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFkZXN0LmZpcnN0Tm9uTGlua2VkKVxuICAgICAgICAgICAgICAgIGRlc3QuaGFzTGlua2VkUmFuZ2VzID0gZmFsc2U7XG4gICAgICAgICAgICBpZiAoZGVzdCA9PT0gdHMpIHtcbiAgICAgICAgICAgICAgICBhcmcucHVzaChkZXN0KTtcbiAgICAgICAgICAgICAgICB0aGlzLiRvcGVuVGFic3RvcHNbaW5kZXhdID0gZGVzdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuYWRkVGFic3RvcE1hcmtlcnMoZGVzdCk7XG4gICAgICAgIH0sIHRoaXMpO1xuICAgICAgICBcbiAgICAgICAgaWYgKGFyZy5sZW5ndGggPiAyKSB7XG4gICAgICAgICAgICBpZiAodGhpcy50YWJzdG9wcy5sZW5ndGgpXG4gICAgICAgICAgICAgICAgYXJnLnB1c2goYXJnLnNwbGljZSgyLCAxKVswXSk7XG4gICAgICAgICAgICB0aGlzLnRhYnN0b3BzLnNwbGljZS5hcHBseSh0aGlzLnRhYnN0b3BzLCBhcmcpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIHRoaXMuYWRkVGFic3RvcE1hcmtlcnMgPSBmdW5jdGlvbih0cykge1xuICAgICAgICB2YXIgc2Vzc2lvbiA9IHRoaXMuZWRpdG9yLnNlc3Npb247XG4gICAgICAgIHRzLmZvckVhY2goZnVuY3Rpb24ocmFuZ2UpIHtcbiAgICAgICAgICAgIGlmICAoIXJhbmdlLm1hcmtlcklkKVxuICAgICAgICAgICAgICAgIHJhbmdlLm1hcmtlcklkID0gc2Vzc2lvbi5hZGRNYXJrZXIocmFuZ2UsIFwiYWNlX3NuaXBwZXQtbWFya2VyXCIsIFwidGV4dFwiKTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICB0aGlzLnJlbW92ZVRhYnN0b3BNYXJrZXJzID0gZnVuY3Rpb24odHMpIHtcbiAgICAgICAgdmFyIHNlc3Npb24gPSB0aGlzLmVkaXRvci5zZXNzaW9uO1xuICAgICAgICB0cy5mb3JFYWNoKGZ1bmN0aW9uKHJhbmdlKSB7XG4gICAgICAgICAgICBzZXNzaW9uLnJlbW92ZU1hcmtlcihyYW5nZS5tYXJrZXJJZCk7XG4gICAgICAgICAgICByYW5nZS5tYXJrZXJJZCA9IG51bGw7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgdGhpcy5yZW1vdmVSYW5nZSA9IGZ1bmN0aW9uKHJhbmdlKSB7XG4gICAgICAgIHZhciBpID0gcmFuZ2UudGFic3RvcC5pbmRleE9mKHJhbmdlKTtcbiAgICAgICAgcmFuZ2UudGFic3RvcC5zcGxpY2UoaSwgMSk7XG4gICAgICAgIGkgPSB0aGlzLnJhbmdlcy5pbmRleE9mKHJhbmdlKTtcbiAgICAgICAgdGhpcy5yYW5nZXMuc3BsaWNlKGksIDEpO1xuICAgICAgICB0aGlzLmVkaXRvci5zZXNzaW9uLnJlbW92ZU1hcmtlcihyYW5nZS5tYXJrZXJJZCk7XG4gICAgICAgIGlmICghcmFuZ2UudGFic3RvcC5sZW5ndGgpIHtcbiAgICAgICAgICAgIGkgPSB0aGlzLnRhYnN0b3BzLmluZGV4T2YocmFuZ2UudGFic3RvcCk7XG4gICAgICAgICAgICBpZiAoaSAhPSAtMSlcbiAgICAgICAgICAgICAgICB0aGlzLnRhYnN0b3BzLnNwbGljZShpLCAxKTtcbiAgICAgICAgICAgIGlmICghdGhpcy50YWJzdG9wcy5sZW5ndGgpXG4gICAgICAgICAgICAgICAgdGhpcy5kZXRhY2goKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICB0aGlzLmtleWJvYXJkSGFuZGxlciA9IG5ldyBIYXNoSGFuZGxlcigpO1xuICAgIHRoaXMua2V5Ym9hcmRIYW5kbGVyLmJpbmRLZXlzKHtcbiAgICAgICAgXCJUYWJcIjogZnVuY3Rpb24oZWQpIHtcbiAgICAgICAgICAgIGlmIChleHBvcnRzLnNuaXBwZXRNYW5hZ2VyICYmIGV4cG9ydHMuc25pcHBldE1hbmFnZXIuZXhwYW5kV2l0aFRhYihlZCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGVkLnRhYnN0b3BNYW5hZ2VyLnRhYk5leHQoMSk7XG4gICAgICAgIH0sXG4gICAgICAgIFwiU2hpZnQtVGFiXCI6IGZ1bmN0aW9uKGVkKSB7XG4gICAgICAgICAgICBlZC50YWJzdG9wTWFuYWdlci50YWJOZXh0KC0xKTtcbiAgICAgICAgfSxcbiAgICAgICAgXCJFc2NcIjogZnVuY3Rpb24oZWQpIHtcbiAgICAgICAgICAgIGVkLnRhYnN0b3BNYW5hZ2VyLmRldGFjaCgpO1xuICAgICAgICB9LFxuICAgICAgICBcIlJldHVyblwiOiBmdW5jdGlvbihlZCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfSk7XG59KS5jYWxsKFRhYnN0b3BNYW5hZ2VyLnByb3RvdHlwZSk7XG5cblxuXG52YXIgY2hhbmdlVHJhY2tlciA9IHt9O1xuY2hhbmdlVHJhY2tlci5vbkNoYW5nZSA9IEFuY2hvci5wcm90b3R5cGUub25DaGFuZ2U7XG5jaGFuZ2VUcmFja2VyLnNldFBvc2l0aW9uID0gZnVuY3Rpb24ocm93LCBjb2x1bW4pIHtcbiAgICB0aGlzLnBvcy5yb3cgPSByb3c7XG4gICAgdGhpcy5wb3MuY29sdW1uID0gY29sdW1uO1xufTtcbmNoYW5nZVRyYWNrZXIudXBkYXRlID0gZnVuY3Rpb24ocG9zLCBkZWx0YSwgJGluc2VydFJpZ2h0KSB7XG4gICAgdGhpcy4kaW5zZXJ0UmlnaHQgPSAkaW5zZXJ0UmlnaHQ7XG4gICAgdGhpcy5wb3MgPSBwb3M7IFxuICAgIHRoaXMub25DaGFuZ2UoZGVsdGEpO1xufTtcblxudmFyIG1vdmVQb2ludCA9IGZ1bmN0aW9uKHBvaW50LCBkaWZmKSB7XG4gICAgaWYgKHBvaW50LnJvdyA9PSAwKVxuICAgICAgICBwb2ludC5jb2x1bW4gKz0gZGlmZi5jb2x1bW47XG4gICAgcG9pbnQucm93ICs9IGRpZmYucm93O1xufTtcblxudmFyIG1vdmVSZWxhdGl2ZSA9IGZ1bmN0aW9uKHBvaW50LCBzdGFydCkge1xuICAgIGlmIChwb2ludC5yb3cgPT0gc3RhcnQucm93KVxuICAgICAgICBwb2ludC5jb2x1bW4gLT0gc3RhcnQuY29sdW1uO1xuICAgIHBvaW50LnJvdyAtPSBzdGFydC5yb3c7XG59O1xuXG5cbmFjZXF1aXJlKFwiLi9saWIvZG9tXCIpLmltcG9ydENzc1N0cmluZyhcIlxcXG4uYWNlX3NuaXBwZXQtbWFya2VyIHtcXFxuICAgIC1tb3otYm94LXNpemluZzogYm9yZGVyLWJveDtcXFxuICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxcbiAgICBiYWNrZ3JvdW5kOiByZ2JhKDE5NCwgMTkzLCAyMDgsIDAuMDkpO1xcXG4gICAgYm9yZGVyOiAxcHggZG90dGVkIHJnYmEoMjExLCAyMDgsIDIzNSwgMC42Mik7XFxcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxcbn1cIik7XG5cbmV4cG9ydHMuc25pcHBldE1hbmFnZXIgPSBuZXcgU25pcHBldE1hbmFnZXIoKTtcblxuXG52YXIgRWRpdG9yID0gYWNlcXVpcmUoXCIuL2VkaXRvclwiKS5FZGl0b3I7XG4oZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5pbnNlcnRTbmlwcGV0ID0gZnVuY3Rpb24oY29udGVudCwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gZXhwb3J0cy5zbmlwcGV0TWFuYWdlci5pbnNlcnRTbmlwcGV0KHRoaXMsIGNvbnRlbnQsIG9wdGlvbnMpO1xuICAgIH07XG4gICAgdGhpcy5leHBhbmRTbmlwcGV0ID0gZnVuY3Rpb24ob3B0aW9ucykge1xuICAgICAgICByZXR1cm4gZXhwb3J0cy5zbmlwcGV0TWFuYWdlci5leHBhbmRXaXRoVGFiKHRoaXMsIG9wdGlvbnMpO1xuICAgIH07XG59KS5jYWxsKEVkaXRvci5wcm90b3R5cGUpO1xuXG59KTtcblxuYWNlLmRlZmluZShcImFjZS9hdXRvY29tcGxldGUvcG9wdXBcIixbXCJyZXF1aXJlXCIsXCJleHBvcnRzXCIsXCJtb2R1bGVcIixcImFjZS92aXJ0dWFsX3JlbmRlcmVyXCIsXCJhY2UvZWRpdG9yXCIsXCJhY2UvcmFuZ2VcIixcImFjZS9saWIvZXZlbnRcIixcImFjZS9saWIvbGFuZ1wiLFwiYWNlL2xpYi9kb21cIl0sIGZ1bmN0aW9uKGFjZXF1aXJlLCBleHBvcnRzLCBtb2R1bGUpIHtcblwidXNlIHN0cmljdFwiO1xuXG52YXIgUmVuZGVyZXIgPSBhY2VxdWlyZShcIi4uL3ZpcnR1YWxfcmVuZGVyZXJcIikuVmlydHVhbFJlbmRlcmVyO1xudmFyIEVkaXRvciA9IGFjZXF1aXJlKFwiLi4vZWRpdG9yXCIpLkVkaXRvcjtcbnZhciBSYW5nZSA9IGFjZXF1aXJlKFwiLi4vcmFuZ2VcIikuUmFuZ2U7XG52YXIgZXZlbnQgPSBhY2VxdWlyZShcIi4uL2xpYi9ldmVudFwiKTtcbnZhciBsYW5nID0gYWNlcXVpcmUoXCIuLi9saWIvbGFuZ1wiKTtcbnZhciBkb20gPSBhY2VxdWlyZShcIi4uL2xpYi9kb21cIik7XG5cbnZhciAkc2luZ2xlTGluZUVkaXRvciA9IGZ1bmN0aW9uKGVsKSB7XG4gICAgdmFyIHJlbmRlcmVyID0gbmV3IFJlbmRlcmVyKGVsKTtcblxuICAgIHJlbmRlcmVyLiRtYXhMaW5lcyA9IDQ7XG5cbiAgICB2YXIgZWRpdG9yID0gbmV3IEVkaXRvcihyZW5kZXJlcik7XG5cbiAgICBlZGl0b3Iuc2V0SGlnaGxpZ2h0QWN0aXZlTGluZShmYWxzZSk7XG4gICAgZWRpdG9yLnNldFNob3dQcmludE1hcmdpbihmYWxzZSk7XG4gICAgZWRpdG9yLnJlbmRlcmVyLnNldFNob3dHdXR0ZXIoZmFsc2UpO1xuICAgIGVkaXRvci5yZW5kZXJlci5zZXRIaWdobGlnaHRHdXR0ZXJMaW5lKGZhbHNlKTtcblxuICAgIGVkaXRvci4kbW91c2VIYW5kbGVyLiRmb2N1c1dhaXRUaW1vdXQgPSAwO1xuICAgIGVkaXRvci4kaGlnaGxpZ2h0VGFnUGVuZGluZyA9IHRydWU7XG5cbiAgICByZXR1cm4gZWRpdG9yO1xufTtcblxudmFyIEFjZVBvcHVwID0gZnVuY3Rpb24ocGFyZW50Tm9kZSkge1xuICAgIHZhciBlbCA9IGRvbS5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIHZhciBwb3B1cCA9IG5ldyAkc2luZ2xlTGluZUVkaXRvcihlbCk7XG5cbiAgICBpZiAocGFyZW50Tm9kZSlcbiAgICAgICAgcGFyZW50Tm9kZS5hcHBlbmRDaGlsZChlbCk7XG4gICAgZWwuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xuICAgIHBvcHVwLnJlbmRlcmVyLmNvbnRlbnQuc3R5bGUuY3Vyc29yID0gXCJkZWZhdWx0XCI7XG4gICAgcG9wdXAucmVuZGVyZXIuc2V0U3R5bGUoXCJhY2VfYXV0b2NvbXBsZXRlXCIpO1xuXG4gICAgcG9wdXAuc2V0T3B0aW9uKFwiZGlzcGxheUluZGVudEd1aWRlc1wiLCBmYWxzZSk7XG4gICAgcG9wdXAuc2V0T3B0aW9uKFwiZHJhZ0RlbGF5XCIsIDE1MCk7XG5cbiAgICB2YXIgbm9vcCA9IGZ1bmN0aW9uKCl7fTtcblxuICAgIHBvcHVwLmZvY3VzID0gbm9vcDtcbiAgICBwb3B1cC4kaXNGb2N1c2VkID0gdHJ1ZTtcblxuICAgIHBvcHVwLnJlbmRlcmVyLiRjdXJzb3JMYXllci5yZXN0YXJ0VGltZXIgPSBub29wO1xuICAgIHBvcHVwLnJlbmRlcmVyLiRjdXJzb3JMYXllci5lbGVtZW50LnN0eWxlLm9wYWNpdHkgPSAwO1xuXG4gICAgcG9wdXAucmVuZGVyZXIuJG1heExpbmVzID0gODtcbiAgICBwb3B1cC5yZW5kZXJlci4ka2VlcFRleHRBcmVhQXRDdXJzb3IgPSBmYWxzZTtcblxuICAgIHBvcHVwLnNldEhpZ2hsaWdodEFjdGl2ZUxpbmUoZmFsc2UpO1xuICAgIHBvcHVwLnNlc3Npb24uaGlnaGxpZ2h0KFwiXCIpO1xuICAgIHBvcHVwLnNlc3Npb24uJHNlYXJjaEhpZ2hsaWdodC5jbGF6eiA9IFwiYWNlX2hpZ2hsaWdodC1tYXJrZXJcIjtcblxuICAgIHBvcHVwLm9uKFwibW91c2Vkb3duXCIsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgdmFyIHBvcyA9IGUuZ2V0RG9jdW1lbnRQb3NpdGlvbigpO1xuICAgICAgICBwb3B1cC5zZWxlY3Rpb24ubW92ZVRvUG9zaXRpb24ocG9zKTtcbiAgICAgICAgc2VsZWN0aW9uTWFya2VyLnN0YXJ0LnJvdyA9IHNlbGVjdGlvbk1hcmtlci5lbmQucm93ID0gcG9zLnJvdztcbiAgICAgICAgZS5zdG9wKCk7XG4gICAgfSk7XG5cbiAgICB2YXIgbGFzdE1vdXNlRXZlbnQ7XG4gICAgdmFyIGhvdmVyTWFya2VyID0gbmV3IFJhbmdlKC0xLDAsLTEsSW5maW5pdHkpO1xuICAgIHZhciBzZWxlY3Rpb25NYXJrZXIgPSBuZXcgUmFuZ2UoLTEsMCwtMSxJbmZpbml0eSk7XG4gICAgc2VsZWN0aW9uTWFya2VyLmlkID0gcG9wdXAuc2Vzc2lvbi5hZGRNYXJrZXIoc2VsZWN0aW9uTWFya2VyLCBcImFjZV9hY3RpdmUtbGluZVwiLCBcImZ1bGxMaW5lXCIpO1xuICAgIHBvcHVwLnNldFNlbGVjdE9uSG92ZXIgPSBmdW5jdGlvbih2YWwpIHtcbiAgICAgICAgaWYgKCF2YWwpIHtcbiAgICAgICAgICAgIGhvdmVyTWFya2VyLmlkID0gcG9wdXAuc2Vzc2lvbi5hZGRNYXJrZXIoaG92ZXJNYXJrZXIsIFwiYWNlX2xpbmUtaG92ZXJcIiwgXCJmdWxsTGluZVwiKTtcbiAgICAgICAgfSBlbHNlIGlmIChob3Zlck1hcmtlci5pZCkge1xuICAgICAgICAgICAgcG9wdXAuc2Vzc2lvbi5yZW1vdmVNYXJrZXIoaG92ZXJNYXJrZXIuaWQpO1xuICAgICAgICAgICAgaG92ZXJNYXJrZXIuaWQgPSBudWxsO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBwb3B1cC5zZXRTZWxlY3RPbkhvdmVyKGZhbHNlKTtcbiAgICBwb3B1cC5vbihcIm1vdXNlbW92ZVwiLCBmdW5jdGlvbihlKSB7XG4gICAgICAgIGlmICghbGFzdE1vdXNlRXZlbnQpIHtcbiAgICAgICAgICAgIGxhc3RNb3VzZUV2ZW50ID0gZTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAobGFzdE1vdXNlRXZlbnQueCA9PSBlLnggJiYgbGFzdE1vdXNlRXZlbnQueSA9PSBlLnkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBsYXN0TW91c2VFdmVudCA9IGU7XG4gICAgICAgIGxhc3RNb3VzZUV2ZW50LnNjcm9sbFRvcCA9IHBvcHVwLnJlbmRlcmVyLnNjcm9sbFRvcDtcbiAgICAgICAgdmFyIHJvdyA9IGxhc3RNb3VzZUV2ZW50LmdldERvY3VtZW50UG9zaXRpb24oKS5yb3c7XG4gICAgICAgIGlmIChob3Zlck1hcmtlci5zdGFydC5yb3cgIT0gcm93KSB7XG4gICAgICAgICAgICBpZiAoIWhvdmVyTWFya2VyLmlkKVxuICAgICAgICAgICAgICAgIHBvcHVwLnNldFJvdyhyb3cpO1xuICAgICAgICAgICAgc2V0SG92ZXJNYXJrZXIocm93KTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHBvcHVwLnJlbmRlcmVyLm9uKFwiYmVmb3JlUmVuZGVyXCIsIGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAobGFzdE1vdXNlRXZlbnQgJiYgaG92ZXJNYXJrZXIuc3RhcnQucm93ICE9IC0xKSB7XG4gICAgICAgICAgICBsYXN0TW91c2VFdmVudC4kcG9zID0gbnVsbDtcbiAgICAgICAgICAgIHZhciByb3cgPSBsYXN0TW91c2VFdmVudC5nZXREb2N1bWVudFBvc2l0aW9uKCkucm93O1xuICAgICAgICAgICAgaWYgKCFob3Zlck1hcmtlci5pZClcbiAgICAgICAgICAgICAgICBwb3B1cC5zZXRSb3cocm93KTtcbiAgICAgICAgICAgIHNldEhvdmVyTWFya2VyKHJvdywgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICBwb3B1cC5yZW5kZXJlci5vbihcImFmdGVyUmVuZGVyXCIsIGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgcm93ID0gcG9wdXAuZ2V0Um93KCk7XG4gICAgICAgIHZhciB0ID0gcG9wdXAucmVuZGVyZXIuJHRleHRMYXllcjtcbiAgICAgICAgdmFyIHNlbGVjdGVkID0gdC5lbGVtZW50LmNoaWxkTm9kZXNbcm93IC0gdC5jb25maWcuZmlyc3RSb3ddO1xuICAgICAgICBpZiAoc2VsZWN0ZWQgPT0gdC5zZWxlY3RlZE5vZGUpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGlmICh0LnNlbGVjdGVkTm9kZSlcbiAgICAgICAgICAgIGRvbS5yZW1vdmVDc3NDbGFzcyh0LnNlbGVjdGVkTm9kZSwgXCJhY2Vfc2VsZWN0ZWRcIik7XG4gICAgICAgIHQuc2VsZWN0ZWROb2RlID0gc2VsZWN0ZWQ7XG4gICAgICAgIGlmIChzZWxlY3RlZClcbiAgICAgICAgICAgIGRvbS5hZGRDc3NDbGFzcyhzZWxlY3RlZCwgXCJhY2Vfc2VsZWN0ZWRcIik7XG4gICAgfSk7XG4gICAgdmFyIGhpZGVIb3Zlck1hcmtlciA9IGZ1bmN0aW9uKCkgeyBzZXRIb3Zlck1hcmtlcigtMSk7IH07XG4gICAgdmFyIHNldEhvdmVyTWFya2VyID0gZnVuY3Rpb24ocm93LCBzdXBwcmVzc1JlZHJhdykge1xuICAgICAgICBpZiAocm93ICE9PSBob3Zlck1hcmtlci5zdGFydC5yb3cpIHtcbiAgICAgICAgICAgIGhvdmVyTWFya2VyLnN0YXJ0LnJvdyA9IGhvdmVyTWFya2VyLmVuZC5yb3cgPSByb3c7XG4gICAgICAgICAgICBpZiAoIXN1cHByZXNzUmVkcmF3KVxuICAgICAgICAgICAgICAgIHBvcHVwLnNlc3Npb24uX2VtaXQoXCJjaGFuZ2VCYWNrTWFya2VyXCIpO1xuICAgICAgICAgICAgcG9wdXAuX2VtaXQoXCJjaGFuZ2VIb3Zlck1hcmtlclwiKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcG9wdXAuZ2V0SG92ZXJlZFJvdyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gaG92ZXJNYXJrZXIuc3RhcnQucm93O1xuICAgIH07XG5cbiAgICBldmVudC5hZGRMaXN0ZW5lcihwb3B1cC5jb250YWluZXIsIFwibW91c2VvdXRcIiwgaGlkZUhvdmVyTWFya2VyKTtcbiAgICBwb3B1cC5vbihcImhpZGVcIiwgaGlkZUhvdmVyTWFya2VyKTtcbiAgICBwb3B1cC5vbihcImNoYW5nZVNlbGVjdGlvblwiLCBoaWRlSG92ZXJNYXJrZXIpO1xuXG4gICAgcG9wdXAuc2Vzc2lvbi5kb2MuZ2V0TGVuZ3RoID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBwb3B1cC5kYXRhLmxlbmd0aDtcbiAgICB9O1xuICAgIHBvcHVwLnNlc3Npb24uZG9jLmdldExpbmUgPSBmdW5jdGlvbihpKSB7XG4gICAgICAgIHZhciBkYXRhID0gcG9wdXAuZGF0YVtpXTtcbiAgICAgICAgaWYgKHR5cGVvZiBkYXRhID09IFwic3RyaW5nXCIpXG4gICAgICAgICAgICByZXR1cm4gZGF0YTtcbiAgICAgICAgcmV0dXJuIChkYXRhICYmIGRhdGEudmFsdWUpIHx8IFwiXCI7XG4gICAgfTtcblxuICAgIHZhciBiZ1Rva2VuaXplciA9IHBvcHVwLnNlc3Npb24uYmdUb2tlbml6ZXI7XG4gICAgYmdUb2tlbml6ZXIuJHRva2VuaXplUm93ID0gZnVuY3Rpb24ocm93KSB7XG4gICAgICAgIHZhciBkYXRhID0gcG9wdXAuZGF0YVtyb3ddO1xuICAgICAgICB2YXIgdG9rZW5zID0gW107XG4gICAgICAgIGlmICghZGF0YSlcbiAgICAgICAgICAgIHJldHVybiB0b2tlbnM7XG4gICAgICAgIGlmICh0eXBlb2YgZGF0YSA9PSBcInN0cmluZ1wiKVxuICAgICAgICAgICAgZGF0YSA9IHt2YWx1ZTogZGF0YX07XG4gICAgICAgIGlmICghZGF0YS5jYXB0aW9uKVxuICAgICAgICAgICAgZGF0YS5jYXB0aW9uID0gZGF0YS52YWx1ZSB8fCBkYXRhLm5hbWU7XG5cbiAgICAgICAgdmFyIGxhc3QgPSAtMTtcbiAgICAgICAgdmFyIGZsYWcsIGM7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZGF0YS5jYXB0aW9uLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjID0gZGF0YS5jYXB0aW9uW2ldO1xuICAgICAgICAgICAgZmxhZyA9IGRhdGEubWF0Y2hNYXNrICYgKDEgPDwgaSkgPyAxIDogMDtcbiAgICAgICAgICAgIGlmIChsYXN0ICE9PSBmbGFnKSB7XG4gICAgICAgICAgICAgICAgdG9rZW5zLnB1c2goe3R5cGU6IGRhdGEuY2xhc3NOYW1lIHx8IFwiXCIgKyAoIGZsYWcgPyBcImNvbXBsZXRpb24taGlnaGxpZ2h0XCIgOiBcIlwiKSwgdmFsdWU6IGN9KTtcbiAgICAgICAgICAgICAgICBsYXN0ID0gZmxhZztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdG9rZW5zW3Rva2Vucy5sZW5ndGggLSAxXS52YWx1ZSArPSBjO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGRhdGEubWV0YSkge1xuICAgICAgICAgICAgdmFyIG1heFcgPSBwb3B1cC5yZW5kZXJlci4kc2l6ZS5zY3JvbGxlcldpZHRoIC8gcG9wdXAucmVuZGVyZXIubGF5ZXJDb25maWcuY2hhcmFjdGVyV2lkdGg7XG4gICAgICAgICAgICB2YXIgbWV0YURhdGEgPSBkYXRhLm1ldGE7XG4gICAgICAgICAgICBpZiAobWV0YURhdGEubGVuZ3RoICsgZGF0YS5jYXB0aW9uLmxlbmd0aCA+IG1heFcgLSAyKSB7XG4gICAgICAgICAgICAgICAgbWV0YURhdGEgPSBtZXRhRGF0YS5zdWJzdHIoMCwgbWF4VyAtIGRhdGEuY2FwdGlvbi5sZW5ndGggLSAzKSArIFwiXFx1MjAyNlwiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdG9rZW5zLnB1c2goe3R5cGU6IFwicmlnaHRBbGlnbmVkVGV4dFwiLCB2YWx1ZTogbWV0YURhdGF9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdG9rZW5zO1xuICAgIH07XG4gICAgYmdUb2tlbml6ZXIuJHVwZGF0ZU9uQ2hhbmdlID0gbm9vcDtcbiAgICBiZ1Rva2VuaXplci5zdGFydCA9IG5vb3A7XG5cbiAgICBwb3B1cC5zZXNzaW9uLiRjb21wdXRlV2lkdGggPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2NyZWVuV2lkdGggPSAwO1xuICAgIH07XG5cbiAgICBwb3B1cC4kYmxvY2tTY3JvbGxpbmcgPSBJbmZpbml0eTtcbiAgICBwb3B1cC5pc09wZW4gPSBmYWxzZTtcbiAgICBwb3B1cC5pc1RvcGRvd24gPSBmYWxzZTtcbiAgICBwb3B1cC5hdXRvU2VsZWN0ID0gdHJ1ZTtcblxuICAgIHBvcHVwLmRhdGEgPSBbXTtcbiAgICBwb3B1cC5zZXREYXRhID0gZnVuY3Rpb24obGlzdCkge1xuICAgICAgICBwb3B1cC5zZXRWYWx1ZShsYW5nLnN0cmluZ1JlcGVhdChcIlxcblwiLCBsaXN0Lmxlbmd0aCksIC0xKTtcbiAgICAgICAgcG9wdXAuZGF0YSA9IGxpc3QgfHwgW107XG4gICAgICAgIHBvcHVwLnNldFJvdygwKTtcbiAgICB9O1xuICAgIHBvcHVwLmdldERhdGEgPSBmdW5jdGlvbihyb3cpIHtcbiAgICAgICAgcmV0dXJuIHBvcHVwLmRhdGFbcm93XTtcbiAgICB9O1xuXG4gICAgcG9wdXAuZ2V0Um93ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBzZWxlY3Rpb25NYXJrZXIuc3RhcnQucm93O1xuICAgIH07XG4gICAgcG9wdXAuc2V0Um93ID0gZnVuY3Rpb24obGluZSkge1xuICAgICAgICBsaW5lID0gTWF0aC5tYXgodGhpcy5hdXRvU2VsZWN0ID8gMCA6IC0xLCBNYXRoLm1pbih0aGlzLmRhdGEubGVuZ3RoLCBsaW5lKSk7XG4gICAgICAgIGlmIChzZWxlY3Rpb25NYXJrZXIuc3RhcnQucm93ICE9IGxpbmUpIHtcbiAgICAgICAgICAgIHBvcHVwLnNlbGVjdGlvbi5jbGVhclNlbGVjdGlvbigpO1xuICAgICAgICAgICAgc2VsZWN0aW9uTWFya2VyLnN0YXJ0LnJvdyA9IHNlbGVjdGlvbk1hcmtlci5lbmQucm93ID0gbGluZSB8fCAwO1xuICAgICAgICAgICAgcG9wdXAuc2Vzc2lvbi5fZW1pdChcImNoYW5nZUJhY2tNYXJrZXJcIik7XG4gICAgICAgICAgICBwb3B1cC5tb3ZlQ3Vyc29yVG8obGluZSB8fCAwLCAwKTtcbiAgICAgICAgICAgIGlmIChwb3B1cC5pc09wZW4pXG4gICAgICAgICAgICAgICAgcG9wdXAuX3NpZ25hbChcInNlbGVjdFwiKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBwb3B1cC5vbihcImNoYW5nZVNlbGVjdGlvblwiLCBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKHBvcHVwLmlzT3BlbilcbiAgICAgICAgICAgIHBvcHVwLnNldFJvdyhwb3B1cC5zZWxlY3Rpb24ubGVhZC5yb3cpO1xuICAgICAgICBwb3B1cC5yZW5kZXJlci5zY3JvbGxDdXJzb3JJbnRvVmlldygpO1xuICAgIH0pO1xuXG4gICAgcG9wdXAuaGlkZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLmNvbnRhaW5lci5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XG4gICAgICAgIHRoaXMuX3NpZ25hbChcImhpZGVcIik7XG4gICAgICAgIHBvcHVwLmlzT3BlbiA9IGZhbHNlO1xuICAgIH07XG4gICAgcG9wdXAuc2hvdyA9IGZ1bmN0aW9uKHBvcywgbGluZUhlaWdodCwgdG9wZG93bk9ubHkpIHtcbiAgICAgICAgdmFyIGVsID0gdGhpcy5jb250YWluZXI7XG4gICAgICAgIHZhciBzY3JlZW5IZWlnaHQgPSB3aW5kb3cuaW5uZXJIZWlnaHQ7XG4gICAgICAgIHZhciBzY3JlZW5XaWR0aCA9IHdpbmRvdy5pbm5lcldpZHRoO1xuICAgICAgICB2YXIgcmVuZGVyZXIgPSB0aGlzLnJlbmRlcmVyO1xuICAgICAgICB2YXIgbWF4SCA9IHJlbmRlcmVyLiRtYXhMaW5lcyAqIGxpbmVIZWlnaHQgKiAxLjQ7XG4gICAgICAgIHZhciB0b3AgPSBwb3MudG9wICsgdGhpcy4kYm9yZGVyU2l6ZTtcbiAgICAgICAgdmFyIGFsbG93VG9wZG93biA9IHRvcCA+IHNjcmVlbkhlaWdodCAvIDIgJiYgIXRvcGRvd25Pbmx5O1xuICAgICAgICBpZiAoYWxsb3dUb3Bkb3duICYmIHRvcCArIGxpbmVIZWlnaHQgKyBtYXhIID4gc2NyZWVuSGVpZ2h0KSB7XG4gICAgICAgICAgICByZW5kZXJlci4kbWF4UGl4ZWxIZWlnaHQgPSB0b3AgLSAyICogdGhpcy4kYm9yZGVyU2l6ZTtcbiAgICAgICAgICAgIGVsLnN0eWxlLnRvcCA9IFwiXCI7XG4gICAgICAgICAgICBlbC5zdHlsZS5ib3R0b20gPSBzY3JlZW5IZWlnaHQgLSB0b3AgKyBcInB4XCI7XG4gICAgICAgICAgICBwb3B1cC5pc1RvcGRvd24gPSBmYWxzZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRvcCArPSBsaW5lSGVpZ2h0O1xuICAgICAgICAgICAgcmVuZGVyZXIuJG1heFBpeGVsSGVpZ2h0ID0gc2NyZWVuSGVpZ2h0IC0gdG9wIC0gMC4yICogbGluZUhlaWdodDtcbiAgICAgICAgICAgIGVsLnN0eWxlLnRvcCA9IHRvcCArIFwicHhcIjtcbiAgICAgICAgICAgIGVsLnN0eWxlLmJvdHRvbSA9IFwiXCI7XG4gICAgICAgICAgICBwb3B1cC5pc1RvcGRvd24gPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgZWwuc3R5bGUuZGlzcGxheSA9IFwiXCI7XG4gICAgICAgIHRoaXMucmVuZGVyZXIuJHRleHRMYXllci5jaGVja0ZvclNpemVDaGFuZ2VzKCk7XG5cbiAgICAgICAgdmFyIGxlZnQgPSBwb3MubGVmdDtcbiAgICAgICAgaWYgKGxlZnQgKyBlbC5vZmZzZXRXaWR0aCA+IHNjcmVlbldpZHRoKVxuICAgICAgICAgICAgbGVmdCA9IHNjcmVlbldpZHRoIC0gZWwub2Zmc2V0V2lkdGg7XG5cbiAgICAgICAgZWwuc3R5bGUubGVmdCA9IGxlZnQgKyBcInB4XCI7XG5cbiAgICAgICAgdGhpcy5fc2lnbmFsKFwic2hvd1wiKTtcbiAgICAgICAgbGFzdE1vdXNlRXZlbnQgPSBudWxsO1xuICAgICAgICBwb3B1cC5pc09wZW4gPSB0cnVlO1xuICAgIH07XG5cbiAgICBwb3B1cC5nZXRUZXh0TGVmdE9mZnNldCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy4kYm9yZGVyU2l6ZSArIHRoaXMucmVuZGVyZXIuJHBhZGRpbmcgKyB0aGlzLiRpbWFnZVNpemU7XG4gICAgfTtcblxuICAgIHBvcHVwLiRpbWFnZVNpemUgPSAwO1xuICAgIHBvcHVwLiRib3JkZXJTaXplID0gMTtcblxuICAgIHJldHVybiBwb3B1cDtcbn07XG5cbmRvbS5pbXBvcnRDc3NTdHJpbmcoXCJcXFxuLmFjZV9lZGl0b3IuYWNlX2F1dG9jb21wbGV0ZSAuYWNlX21hcmtlci1sYXllciAuYWNlX2FjdGl2ZS1saW5lIHtcXFxuICAgIGJhY2tncm91bmQtY29sb3I6ICNDQUQ2RkE7XFxcbiAgICB6LWluZGV4OiAxO1xcXG59XFxcbi5hY2VfZWRpdG9yLmFjZV9hdXRvY29tcGxldGUgLmFjZV9saW5lLWhvdmVyIHtcXFxuICAgIGJvcmRlcjogMXB4IHNvbGlkICNhYmJmZmU7XFxcbiAgICBtYXJnaW4tdG9wOiAtMXB4O1xcXG4gICAgYmFja2dyb3VuZDogcmdiYSgyMzMsMjMzLDI1MywwLjQpO1xcXG59XFxcbi5hY2VfZWRpdG9yLmFjZV9hdXRvY29tcGxldGUgLmFjZV9saW5lLWhvdmVyIHtcXFxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXFxuICAgIHotaW5kZXg6IDI7XFxcbn1cXFxuLmFjZV9lZGl0b3IuYWNlX2F1dG9jb21wbGV0ZSAuYWNlX3Njcm9sbGVyIHtcXFxuICAgYmFja2dyb3VuZDogbm9uZTtcXFxuICAgYm9yZGVyOiBub25lO1xcXG4gICBib3gtc2hhZG93OiBub25lO1xcXG59XFxcbi5hY2VfcmlnaHRBbGlnbmVkVGV4dCB7XFxcbiAgICBjb2xvcjogZ3JheTtcXFxuICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXFxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXFxuICAgIHJpZ2h0OiA0cHg7XFxcbiAgICB0ZXh0LWFsaWduOiByaWdodDtcXFxuICAgIHotaW5kZXg6IC0xO1xcXG59XFxcbi5hY2VfZWRpdG9yLmFjZV9hdXRvY29tcGxldGUgLmFjZV9jb21wbGV0aW9uLWhpZ2hsaWdodHtcXFxuICAgIGNvbG9yOiAjMDAwO1xcXG4gICAgdGV4dC1zaGFkb3c6IDAgMCAwLjAxZW07XFxcbn1cXFxuLmFjZV9lZGl0b3IuYWNlX2F1dG9jb21wbGV0ZSB7XFxcbiAgICB3aWR0aDogMjgwcHg7XFxcbiAgICB6LWluZGV4OiAyMDAwMDA7XFxcbiAgICBiYWNrZ3JvdW5kOiAjZmJmYmZiO1xcXG4gICAgY29sb3I6ICM0NDQ7XFxcbiAgICBib3JkZXI6IDFweCBsaWdodGdyYXkgc29saWQ7XFxcbiAgICBwb3NpdGlvbjogZml4ZWQ7XFxcbiAgICBib3gtc2hhZG93OiAycHggM3B4IDVweCByZ2JhKDAsMCwwLC4yKTtcXFxuICAgIGxpbmUtaGVpZ2h0OiAxLjQ7XFxcbn1cIik7XG5cbmV4cG9ydHMuQWNlUG9wdXAgPSBBY2VQb3B1cDtcblxufSk7XG5cbmFjZS5kZWZpbmUoXCJhY2UvYXV0b2NvbXBsZXRlL3V0aWxcIixbXCJyZXF1aXJlXCIsXCJleHBvcnRzXCIsXCJtb2R1bGVcIl0sIGZ1bmN0aW9uKGFjZXF1aXJlLCBleHBvcnRzLCBtb2R1bGUpIHtcblwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLnBhckZvckVhY2ggPSBmdW5jdGlvbihhcnJheSwgZm4sIGNhbGxiYWNrKSB7XG4gICAgdmFyIGNvbXBsZXRlZCA9IDA7XG4gICAgdmFyIGFyTGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuICAgIGlmIChhckxlbmd0aCA9PT0gMClcbiAgICAgICAgY2FsbGJhY2soKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyTGVuZ3RoOyBpKyspIHtcbiAgICAgICAgZm4oYXJyYXlbaV0sIGZ1bmN0aW9uKHJlc3VsdCwgZXJyKSB7XG4gICAgICAgICAgICBjb21wbGV0ZWQrKztcbiAgICAgICAgICAgIGlmIChjb21wbGV0ZWQgPT09IGFyTGVuZ3RoKVxuICAgICAgICAgICAgICAgIGNhbGxiYWNrKHJlc3VsdCwgZXJyKTtcbiAgICAgICAgfSk7XG4gICAgfVxufTtcblxudmFyIElEX1JFR0VYID0gL1thLXpBLVpfMC05XFwkXFwtXFx1MDBBMi1cXHVGRkZGXS87XG5cbmV4cG9ydHMucmV0cmlldmVQcmVjZWRpbmdJZGVudGlmaWVyID0gZnVuY3Rpb24odGV4dCwgcG9zLCByZWdleCkge1xuICAgIHJlZ2V4ID0gcmVnZXggfHwgSURfUkVHRVg7XG4gICAgdmFyIGJ1ZiA9IFtdO1xuICAgIGZvciAodmFyIGkgPSBwb3MtMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgaWYgKHJlZ2V4LnRlc3QodGV4dFtpXSkpXG4gICAgICAgICAgICBidWYucHVzaCh0ZXh0W2ldKTtcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgfVxuICAgIHJldHVybiBidWYucmV2ZXJzZSgpLmpvaW4oXCJcIik7XG59O1xuXG5leHBvcnRzLnJldHJpZXZlRm9sbG93aW5nSWRlbnRpZmllciA9IGZ1bmN0aW9uKHRleHQsIHBvcywgcmVnZXgpIHtcbiAgICByZWdleCA9IHJlZ2V4IHx8IElEX1JFR0VYO1xuICAgIHZhciBidWYgPSBbXTtcbiAgICBmb3IgKHZhciBpID0gcG9zOyBpIDwgdGV4dC5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAocmVnZXgudGVzdCh0ZXh0W2ldKSlcbiAgICAgICAgICAgIGJ1Zi5wdXNoKHRleHRbaV0pO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgICBicmVhaztcbiAgICB9XG4gICAgcmV0dXJuIGJ1Zjtcbn07XG5cbmV4cG9ydHMuZ2V0Q29tcGxldGlvblByZWZpeCA9IGZ1bmN0aW9uIChlZGl0b3IpIHtcbiAgICB2YXIgcG9zID0gZWRpdG9yLmdldEN1cnNvclBvc2l0aW9uKCk7XG4gICAgdmFyIGxpbmUgPSBlZGl0b3Iuc2Vzc2lvbi5nZXRMaW5lKHBvcy5yb3cpO1xuICAgIHZhciBwcmVmaXg7XG4gICAgZWRpdG9yLmNvbXBsZXRlcnMuZm9yRWFjaChmdW5jdGlvbihjb21wbGV0ZXIpIHtcbiAgICAgICAgaWYgKGNvbXBsZXRlci5pZGVudGlmaWVyUmVnZXhwcykge1xuICAgICAgICAgICAgY29tcGxldGVyLmlkZW50aWZpZXJSZWdleHBzLmZvckVhY2goZnVuY3Rpb24oaWRlbnRpZmllclJlZ2V4KSB7XG4gICAgICAgICAgICAgICAgaWYgKCFwcmVmaXggJiYgaWRlbnRpZmllclJlZ2V4KVxuICAgICAgICAgICAgICAgICAgICBwcmVmaXggPSB0aGlzLnJldHJpZXZlUHJlY2VkaW5nSWRlbnRpZmllcihsaW5lLCBwb3MuY29sdW1uLCBpZGVudGlmaWVyUmVnZXgpO1xuICAgICAgICAgICAgfS5iaW5kKHRoaXMpKTtcbiAgICAgICAgfVxuICAgIH0uYmluZCh0aGlzKSk7XG4gICAgcmV0dXJuIHByZWZpeCB8fCB0aGlzLnJldHJpZXZlUHJlY2VkaW5nSWRlbnRpZmllcihsaW5lLCBwb3MuY29sdW1uKTtcbn07XG5cbn0pO1xuXG5hY2UuZGVmaW5lKFwiYWNlL2F1dG9jb21wbGV0ZVwiLFtcInJlcXVpcmVcIixcImV4cG9ydHNcIixcIm1vZHVsZVwiLFwiYWNlL2tleWJvYXJkL2hhc2hfaGFuZGxlclwiLFwiYWNlL2F1dG9jb21wbGV0ZS9wb3B1cFwiLFwiYWNlL2F1dG9jb21wbGV0ZS91dGlsXCIsXCJhY2UvbGliL2V2ZW50XCIsXCJhY2UvbGliL2xhbmdcIixcImFjZS9saWIvZG9tXCIsXCJhY2Uvc25pcHBldHNcIl0sIGZ1bmN0aW9uKGFjZXF1aXJlLCBleHBvcnRzLCBtb2R1bGUpIHtcblwidXNlIHN0cmljdFwiO1xuXG52YXIgSGFzaEhhbmRsZXIgPSBhY2VxdWlyZShcIi4va2V5Ym9hcmQvaGFzaF9oYW5kbGVyXCIpLkhhc2hIYW5kbGVyO1xudmFyIEFjZVBvcHVwID0gYWNlcXVpcmUoXCIuL2F1dG9jb21wbGV0ZS9wb3B1cFwiKS5BY2VQb3B1cDtcbnZhciB1dGlsID0gYWNlcXVpcmUoXCIuL2F1dG9jb21wbGV0ZS91dGlsXCIpO1xudmFyIGV2ZW50ID0gYWNlcXVpcmUoXCIuL2xpYi9ldmVudFwiKTtcbnZhciBsYW5nID0gYWNlcXVpcmUoXCIuL2xpYi9sYW5nXCIpO1xudmFyIGRvbSA9IGFjZXF1aXJlKFwiLi9saWIvZG9tXCIpO1xudmFyIHNuaXBwZXRNYW5hZ2VyID0gYWNlcXVpcmUoXCIuL3NuaXBwZXRzXCIpLnNuaXBwZXRNYW5hZ2VyO1xuXG52YXIgQXV0b2NvbXBsZXRlID0gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5hdXRvSW5zZXJ0ID0gZmFsc2U7XG4gICAgdGhpcy5hdXRvU2VsZWN0ID0gdHJ1ZTtcbiAgICB0aGlzLmV4YWN0TWF0Y2ggPSBmYWxzZTtcbiAgICB0aGlzLmdhdGhlckNvbXBsZXRpb25zSWQgPSAwO1xuICAgIHRoaXMua2V5Ym9hcmRIYW5kbGVyID0gbmV3IEhhc2hIYW5kbGVyKCk7XG4gICAgdGhpcy5rZXlib2FyZEhhbmRsZXIuYmluZEtleXModGhpcy5jb21tYW5kcyk7XG5cbiAgICB0aGlzLmJsdXJMaXN0ZW5lciA9IHRoaXMuYmx1ckxpc3RlbmVyLmJpbmQodGhpcyk7XG4gICAgdGhpcy5jaGFuZ2VMaXN0ZW5lciA9IHRoaXMuY2hhbmdlTGlzdGVuZXIuYmluZCh0aGlzKTtcbiAgICB0aGlzLm1vdXNlZG93bkxpc3RlbmVyID0gdGhpcy5tb3VzZWRvd25MaXN0ZW5lci5iaW5kKHRoaXMpO1xuICAgIHRoaXMubW91c2V3aGVlbExpc3RlbmVyID0gdGhpcy5tb3VzZXdoZWVsTGlzdGVuZXIuYmluZCh0aGlzKTtcblxuICAgIHRoaXMuY2hhbmdlVGltZXIgPSBsYW5nLmRlbGF5ZWRDYWxsKGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLnVwZGF0ZUNvbXBsZXRpb25zKHRydWUpO1xuICAgIH0uYmluZCh0aGlzKSk7XG5cbiAgICB0aGlzLnRvb2x0aXBUaW1lciA9IGxhbmcuZGVsYXllZENhbGwodGhpcy51cGRhdGVEb2NUb29sdGlwLmJpbmQodGhpcyksIDUwKTtcbn07XG5cbihmdW5jdGlvbigpIHtcblxuICAgIHRoaXMuJGluaXQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy5wb3B1cCA9IG5ldyBBY2VQb3B1cChkb2N1bWVudC5ib2R5IHx8IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCk7XG4gICAgICAgIHRoaXMucG9wdXAub24oXCJjbGlja1wiLCBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICB0aGlzLmluc2VydE1hdGNoKCk7XG4gICAgICAgICAgICBlLnN0b3AoKTtcbiAgICAgICAgfS5iaW5kKHRoaXMpKTtcbiAgICAgICAgdGhpcy5wb3B1cC5mb2N1cyA9IHRoaXMuZWRpdG9yLmZvY3VzLmJpbmQodGhpcy5lZGl0b3IpO1xuICAgICAgICB0aGlzLnBvcHVwLm9uKFwic2hvd1wiLCB0aGlzLnRvb2x0aXBUaW1lci5iaW5kKG51bGwsIG51bGwpKTtcbiAgICAgICAgdGhpcy5wb3B1cC5vbihcInNlbGVjdFwiLCB0aGlzLnRvb2x0aXBUaW1lci5iaW5kKG51bGwsIG51bGwpKTtcbiAgICAgICAgdGhpcy5wb3B1cC5vbihcImNoYW5nZUhvdmVyTWFya2VyXCIsIHRoaXMudG9vbHRpcFRpbWVyLmJpbmQobnVsbCwgbnVsbCkpO1xuICAgICAgICByZXR1cm4gdGhpcy5wb3B1cDtcbiAgICB9O1xuXG4gICAgdGhpcy5nZXRQb3B1cCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wb3B1cCB8fCB0aGlzLiRpbml0KCk7XG4gICAgfTtcblxuICAgIHRoaXMub3BlblBvcHVwID0gZnVuY3Rpb24oZWRpdG9yLCBwcmVmaXgsIGtlZXBQb3B1cFBvc2l0aW9uKSB7XG4gICAgICAgIGlmICghdGhpcy5wb3B1cClcbiAgICAgICAgICAgIHRoaXMuJGluaXQoKTtcblxuXHR0aGlzLnBvcHVwLmF1dG9TZWxlY3QgPSB0aGlzLmF1dG9TZWxlY3Q7XG5cbiAgICAgICAgdGhpcy5wb3B1cC5zZXREYXRhKHRoaXMuY29tcGxldGlvbnMuZmlsdGVyZWQpO1xuXG4gICAgICAgIGVkaXRvci5rZXlCaW5kaW5nLmFkZEtleWJvYXJkSGFuZGxlcih0aGlzLmtleWJvYXJkSGFuZGxlcik7XG4gICAgICAgIFxuICAgICAgICB2YXIgcmVuZGVyZXIgPSBlZGl0b3IucmVuZGVyZXI7XG4gICAgICAgIHRoaXMucG9wdXAuc2V0Um93KHRoaXMuYXV0b1NlbGVjdCA/IDAgOiAtMSk7XG4gICAgICAgIGlmICgha2VlcFBvcHVwUG9zaXRpb24pIHtcbiAgICAgICAgICAgIHRoaXMucG9wdXAuc2V0VGhlbWUoZWRpdG9yLmdldFRoZW1lKCkpO1xuICAgICAgICAgICAgdGhpcy5wb3B1cC5zZXRGb250U2l6ZShlZGl0b3IuZ2V0Rm9udFNpemUoKSk7XG5cbiAgICAgICAgICAgIHZhciBsaW5lSGVpZ2h0ID0gcmVuZGVyZXIubGF5ZXJDb25maWcubGluZUhlaWdodDtcblxuICAgICAgICAgICAgdmFyIHBvcyA9IHJlbmRlcmVyLiRjdXJzb3JMYXllci5nZXRQaXhlbFBvc2l0aW9uKHRoaXMuYmFzZSwgdHJ1ZSk7XG4gICAgICAgICAgICBwb3MubGVmdCAtPSB0aGlzLnBvcHVwLmdldFRleHRMZWZ0T2Zmc2V0KCk7XG5cbiAgICAgICAgICAgIHZhciByZWN0ID0gZWRpdG9yLmNvbnRhaW5lci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgICAgIHBvcy50b3AgKz0gcmVjdC50b3AgLSByZW5kZXJlci5sYXllckNvbmZpZy5vZmZzZXQ7XG4gICAgICAgICAgICBwb3MubGVmdCArPSByZWN0LmxlZnQgLSBlZGl0b3IucmVuZGVyZXIuc2Nyb2xsTGVmdDtcbiAgICAgICAgICAgIHBvcy5sZWZ0ICs9IHJlbmRlcmVyLmd1dHRlcldpZHRoO1xuXG4gICAgICAgICAgICB0aGlzLnBvcHVwLnNob3cocG9zLCBsaW5lSGVpZ2h0KTtcbiAgICAgICAgfSBlbHNlIGlmIChrZWVwUG9wdXBQb3NpdGlvbiAmJiAhcHJlZml4KSB7XG4gICAgICAgICAgICB0aGlzLmRldGFjaCgpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIHRoaXMuZGV0YWNoID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMuZWRpdG9yLmtleUJpbmRpbmcucmVtb3ZlS2V5Ym9hcmRIYW5kbGVyKHRoaXMua2V5Ym9hcmRIYW5kbGVyKTtcbiAgICAgICAgdGhpcy5lZGl0b3Iub2ZmKFwiY2hhbmdlU2VsZWN0aW9uXCIsIHRoaXMuY2hhbmdlTGlzdGVuZXIpO1xuICAgICAgICB0aGlzLmVkaXRvci5vZmYoXCJibHVyXCIsIHRoaXMuYmx1ckxpc3RlbmVyKTtcbiAgICAgICAgdGhpcy5lZGl0b3Iub2ZmKFwibW91c2Vkb3duXCIsIHRoaXMubW91c2Vkb3duTGlzdGVuZXIpO1xuICAgICAgICB0aGlzLmVkaXRvci5vZmYoXCJtb3VzZXdoZWVsXCIsIHRoaXMubW91c2V3aGVlbExpc3RlbmVyKTtcbiAgICAgICAgdGhpcy5jaGFuZ2VUaW1lci5jYW5jZWwoKTtcbiAgICAgICAgdGhpcy5oaWRlRG9jVG9vbHRpcCgpO1xuXG4gICAgICAgIHRoaXMuZ2F0aGVyQ29tcGxldGlvbnNJZCArPSAxO1xuICAgICAgICBpZiAodGhpcy5wb3B1cCAmJiB0aGlzLnBvcHVwLmlzT3BlbilcbiAgICAgICAgICAgIHRoaXMucG9wdXAuaGlkZSgpO1xuXG4gICAgICAgIGlmICh0aGlzLmJhc2UpXG4gICAgICAgICAgICB0aGlzLmJhc2UuZGV0YWNoKCk7XG4gICAgICAgIHRoaXMuYWN0aXZhdGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuY29tcGxldGlvbnMgPSB0aGlzLmJhc2UgPSBudWxsO1xuICAgIH07XG5cbiAgICB0aGlzLmNoYW5nZUxpc3RlbmVyID0gZnVuY3Rpb24oZSkge1xuICAgICAgICB2YXIgY3Vyc29yID0gdGhpcy5lZGl0b3Iuc2VsZWN0aW9uLmxlYWQ7XG4gICAgICAgIGlmIChjdXJzb3Iucm93ICE9IHRoaXMuYmFzZS5yb3cgfHwgY3Vyc29yLmNvbHVtbiA8IHRoaXMuYmFzZS5jb2x1bW4pIHtcbiAgICAgICAgICAgIHRoaXMuZGV0YWNoKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuYWN0aXZhdGVkKVxuICAgICAgICAgICAgdGhpcy5jaGFuZ2VUaW1lci5zY2hlZHVsZSgpO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgICB0aGlzLmRldGFjaCgpO1xuICAgIH07XG5cbiAgICB0aGlzLmJsdXJMaXN0ZW5lciA9IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgdmFyIGVsID0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudDtcbiAgICAgICAgdmFyIHRleHQgPSB0aGlzLmVkaXRvci50ZXh0SW5wdXQuZ2V0RWxlbWVudCgpO1xuICAgICAgICB2YXIgZnJvbVRvb2x0aXAgPSBlLnJlbGF0ZWRUYXJnZXQgJiYgdGhpcy50b29sdGlwTm9kZSAmJiB0aGlzLnRvb2x0aXBOb2RlLmNvbnRhaW5zKGUucmVsYXRlZFRhcmdldCk7XG4gICAgICAgIHZhciBjb250YWluZXIgPSB0aGlzLnBvcHVwICYmIHRoaXMucG9wdXAuY29udGFpbmVyO1xuICAgICAgICBpZiAoZWwgIT0gdGV4dCAmJiBlbC5wYXJlbnROb2RlICE9IGNvbnRhaW5lciAmJiAhZnJvbVRvb2x0aXBcbiAgICAgICAgICAgICYmIGVsICE9IHRoaXMudG9vbHRpcE5vZGUgJiYgZS5yZWxhdGVkVGFyZ2V0ICE9IHRleHRcbiAgICAgICAgKSB7XG4gICAgICAgICAgICB0aGlzLmRldGFjaCgpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIHRoaXMubW91c2Vkb3duTGlzdGVuZXIgPSBmdW5jdGlvbihlKSB7XG4gICAgICAgIHRoaXMuZGV0YWNoKCk7XG4gICAgfTtcblxuICAgIHRoaXMubW91c2V3aGVlbExpc3RlbmVyID0gZnVuY3Rpb24oZSkge1xuICAgICAgICB0aGlzLmRldGFjaCgpO1xuICAgIH07XG5cbiAgICB0aGlzLmdvVG8gPSBmdW5jdGlvbih3aGVyZSkge1xuICAgICAgICB2YXIgcm93ID0gdGhpcy5wb3B1cC5nZXRSb3coKTtcbiAgICAgICAgdmFyIG1heCA9IHRoaXMucG9wdXAuc2Vzc2lvbi5nZXRMZW5ndGgoKSAtIDE7XG5cbiAgICAgICAgc3dpdGNoKHdoZXJlKSB7XG4gICAgICAgICAgICBjYXNlIFwidXBcIjogcm93ID0gcm93IDw9IDAgPyBtYXggOiByb3cgLSAxOyBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJkb3duXCI6IHJvdyA9IHJvdyA+PSBtYXggPyAtMSA6IHJvdyArIDE7IGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcInN0YXJ0XCI6IHJvdyA9IDA7IGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcImVuZFwiOiByb3cgPSBtYXg7IGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5wb3B1cC5zZXRSb3cocm93KTtcbiAgICB9O1xuXG4gICAgdGhpcy5pbnNlcnRNYXRjaCA9IGZ1bmN0aW9uKGRhdGEsIG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKCFkYXRhKVxuICAgICAgICAgICAgZGF0YSA9IHRoaXMucG9wdXAuZ2V0RGF0YSh0aGlzLnBvcHVwLmdldFJvdygpKTtcbiAgICAgICAgaWYgKCFkYXRhKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuXG4gICAgICAgIGlmIChkYXRhLmNvbXBsZXRlciAmJiBkYXRhLmNvbXBsZXRlci5pbnNlcnRNYXRjaCkge1xuICAgICAgICAgICAgZGF0YS5jb21wbGV0ZXIuaW5zZXJ0TWF0Y2godGhpcy5lZGl0b3IsIGRhdGEpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKHRoaXMuY29tcGxldGlvbnMuZmlsdGVyVGV4dCkge1xuICAgICAgICAgICAgICAgIHZhciByYW5nZXMgPSB0aGlzLmVkaXRvci5zZWxlY3Rpb24uZ2V0QWxsUmFuZ2VzKCk7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIHJhbmdlOyByYW5nZSA9IHJhbmdlc1tpXTsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIHJhbmdlLnN0YXJ0LmNvbHVtbiAtPSB0aGlzLmNvbXBsZXRpb25zLmZpbHRlclRleHQubGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmVkaXRvci5zZXNzaW9uLnJlbW92ZShyYW5nZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGRhdGEuc25pcHBldClcbiAgICAgICAgICAgICAgICBzbmlwcGV0TWFuYWdlci5pbnNlcnRTbmlwcGV0KHRoaXMuZWRpdG9yLCBkYXRhLnNuaXBwZXQpO1xuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIHRoaXMuZWRpdG9yLmV4ZWNDb21tYW5kKFwiaW5zZXJ0c3RyaW5nXCIsIGRhdGEudmFsdWUgfHwgZGF0YSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5kZXRhY2goKTtcbiAgICB9O1xuXG5cbiAgICB0aGlzLmNvbW1hbmRzID0ge1xuICAgICAgICBcIlVwXCI6IGZ1bmN0aW9uKGVkaXRvcikgeyBlZGl0b3IuY29tcGxldGVyLmdvVG8oXCJ1cFwiKTsgfSxcbiAgICAgICAgXCJEb3duXCI6IGZ1bmN0aW9uKGVkaXRvcikgeyBlZGl0b3IuY29tcGxldGVyLmdvVG8oXCJkb3duXCIpOyB9LFxuICAgICAgICBcIkN0cmwtVXB8Q3RybC1Ib21lXCI6IGZ1bmN0aW9uKGVkaXRvcikgeyBlZGl0b3IuY29tcGxldGVyLmdvVG8oXCJzdGFydFwiKTsgfSxcbiAgICAgICAgXCJDdHJsLURvd258Q3RybC1FbmRcIjogZnVuY3Rpb24oZWRpdG9yKSB7IGVkaXRvci5jb21wbGV0ZXIuZ29UbyhcImVuZFwiKTsgfSxcblxuICAgICAgICBcIkVzY1wiOiBmdW5jdGlvbihlZGl0b3IpIHsgZWRpdG9yLmNvbXBsZXRlci5kZXRhY2goKTsgfSxcbiAgICAgICAgXCJSZXR1cm5cIjogZnVuY3Rpb24oZWRpdG9yKSB7IHJldHVybiBlZGl0b3IuY29tcGxldGVyLmluc2VydE1hdGNoKCk7IH0sXG4gICAgICAgIFwiU2hpZnQtUmV0dXJuXCI6IGZ1bmN0aW9uKGVkaXRvcikgeyBlZGl0b3IuY29tcGxldGVyLmluc2VydE1hdGNoKG51bGwsIHtkZWxldGVTdWZmaXg6IHRydWV9KTsgfSxcbiAgICAgICAgXCJUYWJcIjogZnVuY3Rpb24oZWRpdG9yKSB7XG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gZWRpdG9yLmNvbXBsZXRlci5pbnNlcnRNYXRjaCgpO1xuICAgICAgICAgICAgaWYgKCFyZXN1bHQgJiYgIWVkaXRvci50YWJzdG9wTWFuYWdlcilcbiAgICAgICAgICAgICAgICBlZGl0b3IuY29tcGxldGVyLmdvVG8oXCJkb3duXCIpO1xuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH0sXG5cbiAgICAgICAgXCJQYWdlVXBcIjogZnVuY3Rpb24oZWRpdG9yKSB7IGVkaXRvci5jb21wbGV0ZXIucG9wdXAuZ290b1BhZ2VVcCgpOyB9LFxuICAgICAgICBcIlBhZ2VEb3duXCI6IGZ1bmN0aW9uKGVkaXRvcikgeyBlZGl0b3IuY29tcGxldGVyLnBvcHVwLmdvdG9QYWdlRG93bigpOyB9XG4gICAgfTtcblxuICAgIHRoaXMuZ2F0aGVyQ29tcGxldGlvbnMgPSBmdW5jdGlvbihlZGl0b3IsIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBzZXNzaW9uID0gZWRpdG9yLmdldFNlc3Npb24oKTtcbiAgICAgICAgdmFyIHBvcyA9IGVkaXRvci5nZXRDdXJzb3JQb3NpdGlvbigpO1xuXG4gICAgICAgIHZhciBwcmVmaXggPSB1dGlsLmdldENvbXBsZXRpb25QcmVmaXgoZWRpdG9yKTtcblxuICAgICAgICB0aGlzLmJhc2UgPSBzZXNzaW9uLmRvYy5jcmVhdGVBbmNob3IocG9zLnJvdywgcG9zLmNvbHVtbiAtIHByZWZpeC5sZW5ndGgpO1xuICAgICAgICB0aGlzLmJhc2UuJGluc2VydFJpZ2h0ID0gdHJ1ZTtcblxuICAgICAgICB2YXIgbWF0Y2hlcyA9IFtdO1xuICAgICAgICB2YXIgdG90YWwgPSBlZGl0b3IuY29tcGxldGVycy5sZW5ndGg7XG4gICAgICAgIGVkaXRvci5jb21wbGV0ZXJzLmZvckVhY2goZnVuY3Rpb24oY29tcGxldGVyLCBpKSB7XG4gICAgICAgICAgICBjb21wbGV0ZXIuZ2V0Q29tcGxldGlvbnMoZWRpdG9yLCBzZXNzaW9uLCBwb3MsIHByZWZpeCwgZnVuY3Rpb24oZXJyLCByZXN1bHRzKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFlcnIgJiYgcmVzdWx0cylcbiAgICAgICAgICAgICAgICAgICAgbWF0Y2hlcyA9IG1hdGNoZXMuY29uY2F0KHJlc3VsdHMpO1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKG51bGwsIHtcbiAgICAgICAgICAgICAgICAgICAgcHJlZml4OiB1dGlsLmdldENvbXBsZXRpb25QcmVmaXgoZWRpdG9yKSxcbiAgICAgICAgICAgICAgICAgICAgbWF0Y2hlczogbWF0Y2hlcyxcbiAgICAgICAgICAgICAgICAgICAgZmluaXNoZWQ6ICgtLXRvdGFsID09PSAwKVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9O1xuXG4gICAgdGhpcy5zaG93UG9wdXAgPSBmdW5jdGlvbihlZGl0b3IpIHtcbiAgICAgICAgaWYgKHRoaXMuZWRpdG9yKVxuICAgICAgICAgICAgdGhpcy5kZXRhY2goKTtcblxuICAgICAgICB0aGlzLmFjdGl2YXRlZCA9IHRydWU7XG5cbiAgICAgICAgdGhpcy5lZGl0b3IgPSBlZGl0b3I7XG4gICAgICAgIGlmIChlZGl0b3IuY29tcGxldGVyICE9IHRoaXMpIHtcbiAgICAgICAgICAgIGlmIChlZGl0b3IuY29tcGxldGVyKVxuICAgICAgICAgICAgICAgIGVkaXRvci5jb21wbGV0ZXIuZGV0YWNoKCk7XG4gICAgICAgICAgICBlZGl0b3IuY29tcGxldGVyID0gdGhpcztcbiAgICAgICAgfVxuXG4gICAgICAgIGVkaXRvci5vbihcImNoYW5nZVNlbGVjdGlvblwiLCB0aGlzLmNoYW5nZUxpc3RlbmVyKTtcbiAgICAgICAgZWRpdG9yLm9uKFwiYmx1clwiLCB0aGlzLmJsdXJMaXN0ZW5lcik7XG4gICAgICAgIGVkaXRvci5vbihcIm1vdXNlZG93blwiLCB0aGlzLm1vdXNlZG93bkxpc3RlbmVyKTtcbiAgICAgICAgZWRpdG9yLm9uKFwibW91c2V3aGVlbFwiLCB0aGlzLm1vdXNld2hlZWxMaXN0ZW5lcik7XG5cbiAgICAgICAgdGhpcy51cGRhdGVDb21wbGV0aW9ucygpO1xuICAgIH07XG5cbiAgICB0aGlzLnVwZGF0ZUNvbXBsZXRpb25zID0gZnVuY3Rpb24oa2VlcFBvcHVwUG9zaXRpb24pIHtcbiAgICAgICAgaWYgKGtlZXBQb3B1cFBvc2l0aW9uICYmIHRoaXMuYmFzZSAmJiB0aGlzLmNvbXBsZXRpb25zKSB7XG4gICAgICAgICAgICB2YXIgcG9zID0gdGhpcy5lZGl0b3IuZ2V0Q3Vyc29yUG9zaXRpb24oKTtcbiAgICAgICAgICAgIHZhciBwcmVmaXggPSB0aGlzLmVkaXRvci5zZXNzaW9uLmdldFRleHRSYW5nZSh7c3RhcnQ6IHRoaXMuYmFzZSwgZW5kOiBwb3N9KTtcbiAgICAgICAgICAgIGlmIChwcmVmaXggPT0gdGhpcy5jb21wbGV0aW9ucy5maWx0ZXJUZXh0KVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIHRoaXMuY29tcGxldGlvbnMuc2V0RmlsdGVyKHByZWZpeCk7XG4gICAgICAgICAgICBpZiAoIXRoaXMuY29tcGxldGlvbnMuZmlsdGVyZWQubGVuZ3RoKVxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmRldGFjaCgpO1xuICAgICAgICAgICAgaWYgKHRoaXMuY29tcGxldGlvbnMuZmlsdGVyZWQubGVuZ3RoID09IDFcbiAgICAgICAgICAgICYmIHRoaXMuY29tcGxldGlvbnMuZmlsdGVyZWRbMF0udmFsdWUgPT0gcHJlZml4XG4gICAgICAgICAgICAmJiAhdGhpcy5jb21wbGV0aW9ucy5maWx0ZXJlZFswXS5zbmlwcGV0KVxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmRldGFjaCgpO1xuICAgICAgICAgICAgdGhpcy5vcGVuUG9wdXAodGhpcy5lZGl0b3IsIHByZWZpeCwga2VlcFBvcHVwUG9zaXRpb24pO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciBfaWQgPSB0aGlzLmdhdGhlckNvbXBsZXRpb25zSWQ7XG4gICAgICAgIHRoaXMuZ2F0aGVyQ29tcGxldGlvbnModGhpcy5lZGl0b3IsIGZ1bmN0aW9uKGVyciwgcmVzdWx0cykge1xuICAgICAgICAgICAgdmFyIGRldGFjaElmRmluaXNoZWQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBpZiAoIXJlc3VsdHMuZmluaXNoZWQpIHJldHVybjtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5kZXRhY2goKTtcbiAgICAgICAgICAgIH0uYmluZCh0aGlzKTtcblxuICAgICAgICAgICAgdmFyIHByZWZpeCA9IHJlc3VsdHMucHJlZml4O1xuICAgICAgICAgICAgdmFyIG1hdGNoZXMgPSByZXN1bHRzICYmIHJlc3VsdHMubWF0Y2hlcztcblxuICAgICAgICAgICAgaWYgKCFtYXRjaGVzIHx8ICFtYXRjaGVzLmxlbmd0aClcbiAgICAgICAgICAgICAgICByZXR1cm4gZGV0YWNoSWZGaW5pc2hlZCgpO1xuICAgICAgICAgICAgaWYgKHByZWZpeC5pbmRleE9mKHJlc3VsdHMucHJlZml4KSAhPT0gMCB8fCBfaWQgIT0gdGhpcy5nYXRoZXJDb21wbGV0aW9uc0lkKVxuICAgICAgICAgICAgICAgIHJldHVybjtcblxuICAgICAgICAgICAgdGhpcy5jb21wbGV0aW9ucyA9IG5ldyBGaWx0ZXJlZExpc3QobWF0Y2hlcyk7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLmV4YWN0TWF0Y2gpXG4gICAgICAgICAgICAgICAgdGhpcy5jb21wbGV0aW9ucy5leGFjdE1hdGNoID0gdHJ1ZTtcblxuICAgICAgICAgICAgdGhpcy5jb21wbGV0aW9ucy5zZXRGaWx0ZXIocHJlZml4KTtcbiAgICAgICAgICAgIHZhciBmaWx0ZXJlZCA9IHRoaXMuY29tcGxldGlvbnMuZmlsdGVyZWQ7XG4gICAgICAgICAgICBpZiAoIWZpbHRlcmVkLmxlbmd0aClcbiAgICAgICAgICAgICAgICByZXR1cm4gZGV0YWNoSWZGaW5pc2hlZCgpO1xuICAgICAgICAgICAgaWYgKGZpbHRlcmVkLmxlbmd0aCA9PSAxICYmIGZpbHRlcmVkWzBdLnZhbHVlID09IHByZWZpeCAmJiAhZmlsdGVyZWRbMF0uc25pcHBldClcbiAgICAgICAgICAgICAgICByZXR1cm4gZGV0YWNoSWZGaW5pc2hlZCgpO1xuICAgICAgICAgICAgaWYgKHRoaXMuYXV0b0luc2VydCAmJiBmaWx0ZXJlZC5sZW5ndGggPT0gMSAmJiByZXN1bHRzLmZpbmlzaGVkKVxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmluc2VydE1hdGNoKGZpbHRlcmVkWzBdKTtcblxuICAgICAgICAgICAgdGhpcy5vcGVuUG9wdXAodGhpcy5lZGl0b3IsIHByZWZpeCwga2VlcFBvcHVwUG9zaXRpb24pO1xuICAgICAgICB9LmJpbmQodGhpcykpO1xuICAgIH07XG5cbiAgICB0aGlzLmNhbmNlbENvbnRleHRNZW51ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMuZWRpdG9yLiRtb3VzZUhhbmRsZXIuY2FuY2VsQ29udGV4dE1lbnUoKTtcbiAgICB9O1xuXG4gICAgdGhpcy51cGRhdGVEb2NUb29sdGlwID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBwb3B1cCA9IHRoaXMucG9wdXA7XG4gICAgICAgIHZhciBhbGwgPSBwb3B1cC5kYXRhO1xuICAgICAgICB2YXIgc2VsZWN0ZWQgPSBhbGwgJiYgKGFsbFtwb3B1cC5nZXRIb3ZlcmVkUm93KCldIHx8IGFsbFtwb3B1cC5nZXRSb3coKV0pO1xuICAgICAgICB2YXIgZG9jID0gbnVsbDtcbiAgICAgICAgaWYgKCFzZWxlY3RlZCB8fCAhdGhpcy5lZGl0b3IgfHwgIXRoaXMucG9wdXAuaXNPcGVuKVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaGlkZURvY1Rvb2x0aXAoKTtcbiAgICAgICAgdGhpcy5lZGl0b3IuY29tcGxldGVycy5zb21lKGZ1bmN0aW9uKGNvbXBsZXRlcikge1xuICAgICAgICAgICAgaWYgKGNvbXBsZXRlci5nZXREb2NUb29sdGlwKVxuICAgICAgICAgICAgICAgIGRvYyA9IGNvbXBsZXRlci5nZXREb2NUb29sdGlwKHNlbGVjdGVkKTtcbiAgICAgICAgICAgIHJldHVybiBkb2M7XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoIWRvYylcbiAgICAgICAgICAgIGRvYyA9IHNlbGVjdGVkO1xuXG4gICAgICAgIGlmICh0eXBlb2YgZG9jID09IFwic3RyaW5nXCIpXG4gICAgICAgICAgICBkb2MgPSB7ZG9jVGV4dDogZG9jfTtcbiAgICAgICAgaWYgKCFkb2MgfHwgIShkb2MuZG9jSFRNTCB8fCBkb2MuZG9jVGV4dCkpXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5oaWRlRG9jVG9vbHRpcCgpO1xuICAgICAgICB0aGlzLnNob3dEb2NUb29sdGlwKGRvYyk7XG4gICAgfTtcblxuICAgIHRoaXMuc2hvd0RvY1Rvb2x0aXAgPSBmdW5jdGlvbihpdGVtKSB7XG4gICAgICAgIGlmICghdGhpcy50b29sdGlwTm9kZSkge1xuICAgICAgICAgICAgdGhpcy50b29sdGlwTm9kZSA9IGRvbS5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICAgICAgdGhpcy50b29sdGlwTm9kZS5jbGFzc05hbWUgPSBcImFjZV90b29sdGlwIGFjZV9kb2MtdG9vbHRpcFwiO1xuICAgICAgICAgICAgdGhpcy50b29sdGlwTm9kZS5zdHlsZS5tYXJnaW4gPSAwO1xuICAgICAgICAgICAgdGhpcy50b29sdGlwTm9kZS5zdHlsZS5wb2ludGVyRXZlbnRzID0gXCJhdXRvXCI7XG4gICAgICAgICAgICB0aGlzLnRvb2x0aXBOb2RlLnRhYkluZGV4ID0gLTE7XG4gICAgICAgICAgICB0aGlzLnRvb2x0aXBOb2RlLm9uYmx1ciA9IHRoaXMuYmx1ckxpc3RlbmVyLmJpbmQodGhpcyk7XG4gICAgICAgICAgICB0aGlzLnRvb2x0aXBOb2RlLm9uY2xpY2sgPSB0aGlzLm9uVG9vbHRpcENsaWNrLmJpbmQodGhpcyk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgdG9vbHRpcE5vZGUgPSB0aGlzLnRvb2x0aXBOb2RlO1xuICAgICAgICBpZiAoaXRlbS5kb2NIVE1MKSB7XG4gICAgICAgICAgICB0b29sdGlwTm9kZS5pbm5lckhUTUwgPSBpdGVtLmRvY0hUTUw7XG4gICAgICAgIH0gZWxzZSBpZiAoaXRlbS5kb2NUZXh0KSB7XG4gICAgICAgICAgICB0b29sdGlwTm9kZS50ZXh0Q29udGVudCA9IGl0ZW0uZG9jVGV4dDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghdG9vbHRpcE5vZGUucGFyZW50Tm9kZSlcbiAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQodG9vbHRpcE5vZGUpO1xuICAgICAgICB2YXIgcG9wdXAgPSB0aGlzLnBvcHVwO1xuICAgICAgICB2YXIgcmVjdCA9IHBvcHVwLmNvbnRhaW5lci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgdG9vbHRpcE5vZGUuc3R5bGUudG9wID0gcG9wdXAuY29udGFpbmVyLnN0eWxlLnRvcDtcbiAgICAgICAgdG9vbHRpcE5vZGUuc3R5bGUuYm90dG9tID0gcG9wdXAuY29udGFpbmVyLnN0eWxlLmJvdHRvbTtcblxuICAgICAgICBpZiAod2luZG93LmlubmVyV2lkdGggLSByZWN0LnJpZ2h0IDwgMzIwKSB7XG4gICAgICAgICAgICB0b29sdGlwTm9kZS5zdHlsZS5yaWdodCA9IHdpbmRvdy5pbm5lcldpZHRoIC0gcmVjdC5sZWZ0ICsgXCJweFwiO1xuICAgICAgICAgICAgdG9vbHRpcE5vZGUuc3R5bGUubGVmdCA9IFwiXCI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0b29sdGlwTm9kZS5zdHlsZS5sZWZ0ID0gKHJlY3QucmlnaHQgKyAxKSArIFwicHhcIjtcbiAgICAgICAgICAgIHRvb2x0aXBOb2RlLnN0eWxlLnJpZ2h0ID0gXCJcIjtcbiAgICAgICAgfVxuICAgICAgICB0b29sdGlwTm9kZS5zdHlsZS5kaXNwbGF5ID0gXCJibG9ja1wiO1xuICAgIH07XG5cbiAgICB0aGlzLmhpZGVEb2NUb29sdGlwID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMudG9vbHRpcFRpbWVyLmNhbmNlbCgpO1xuICAgICAgICBpZiAoIXRoaXMudG9vbHRpcE5vZGUpIHJldHVybjtcbiAgICAgICAgdmFyIGVsID0gdGhpcy50b29sdGlwTm9kZTtcbiAgICAgICAgaWYgKCF0aGlzLmVkaXRvci5pc0ZvY3VzZWQoKSAmJiBkb2N1bWVudC5hY3RpdmVFbGVtZW50ID09IGVsKVxuICAgICAgICAgICAgdGhpcy5lZGl0b3IuZm9jdXMoKTtcbiAgICAgICAgdGhpcy50b29sdGlwTm9kZSA9IG51bGw7XG4gICAgICAgIGlmIChlbC5wYXJlbnROb2RlKVxuICAgICAgICAgICAgZWwucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChlbCk7XG4gICAgfTtcblxuICAgIHRoaXMub25Ub29sdGlwQ2xpY2sgPSBmdW5jdGlvbihlKSB7XG4gICAgICAgIHZhciBhID0gZS50YXJnZXQ7XG4gICAgICAgIHdoaWxlIChhICYmIGEgIT0gdGhpcy50b29sdGlwTm9kZSkge1xuICAgICAgICAgICAgaWYgKGEubm9kZU5hbWUgPT0gXCJBXCIgJiYgYS5ocmVmKSB7XG4gICAgICAgICAgICAgICAgYS5yZWwgPSBcIm5vcmVmZXJyZXJcIjtcbiAgICAgICAgICAgICAgICBhLnRhcmdldCA9IFwiX2JsYW5rXCI7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhID0gYS5wYXJlbnROb2RlO1xuICAgICAgICB9XG4gICAgfTtcblxufSkuY2FsbChBdXRvY29tcGxldGUucHJvdG90eXBlKTtcblxuQXV0b2NvbXBsZXRlLnN0YXJ0Q29tbWFuZCA9IHtcbiAgICBuYW1lOiBcInN0YXJ0QXV0b2NvbXBsZXRlXCIsXG4gICAgZXhlYzogZnVuY3Rpb24oZWRpdG9yKSB7XG4gICAgICAgIGlmICghZWRpdG9yLmNvbXBsZXRlcilcbiAgICAgICAgICAgIGVkaXRvci5jb21wbGV0ZXIgPSBuZXcgQXV0b2NvbXBsZXRlKCk7XG4gICAgICAgIGVkaXRvci5jb21wbGV0ZXIuYXV0b0luc2VydCA9IGZhbHNlO1xuICAgICAgICBlZGl0b3IuY29tcGxldGVyLmF1dG9TZWxlY3QgPSB0cnVlO1xuICAgICAgICBlZGl0b3IuY29tcGxldGVyLnNob3dQb3B1cChlZGl0b3IpO1xuICAgICAgICBlZGl0b3IuY29tcGxldGVyLmNhbmNlbENvbnRleHRNZW51KCk7XG4gICAgfSxcbiAgICBiaW5kS2V5OiBcIkN0cmwtU3BhY2V8Q3RybC1TaGlmdC1TcGFjZXxBbHQtU3BhY2VcIlxufTtcblxudmFyIEZpbHRlcmVkTGlzdCA9IGZ1bmN0aW9uKGFycmF5LCBmaWx0ZXJUZXh0KSB7XG4gICAgdGhpcy5hbGwgPSBhcnJheTtcbiAgICB0aGlzLmZpbHRlcmVkID0gYXJyYXk7XG4gICAgdGhpcy5maWx0ZXJUZXh0ID0gZmlsdGVyVGV4dCB8fCBcIlwiO1xuICAgIHRoaXMuZXhhY3RNYXRjaCA9IGZhbHNlO1xufTtcbihmdW5jdGlvbigpe1xuICAgIHRoaXMuc2V0RmlsdGVyID0gZnVuY3Rpb24oc3RyKSB7XG4gICAgICAgIGlmIChzdHIubGVuZ3RoID4gdGhpcy5maWx0ZXJUZXh0ICYmIHN0ci5sYXN0SW5kZXhPZih0aGlzLmZpbHRlclRleHQsIDApID09PSAwKVxuICAgICAgICAgICAgdmFyIG1hdGNoZXMgPSB0aGlzLmZpbHRlcmVkO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgICB2YXIgbWF0Y2hlcyA9IHRoaXMuYWxsO1xuXG4gICAgICAgIHRoaXMuZmlsdGVyVGV4dCA9IHN0cjtcbiAgICAgICAgbWF0Y2hlcyA9IHRoaXMuZmlsdGVyQ29tcGxldGlvbnMobWF0Y2hlcywgdGhpcy5maWx0ZXJUZXh0KTtcbiAgICAgICAgbWF0Y2hlcyA9IG1hdGNoZXMuc29ydChmdW5jdGlvbihhLCBiKSB7XG4gICAgICAgICAgICByZXR1cm4gYi5leGFjdE1hdGNoIC0gYS5leGFjdE1hdGNoIHx8IGIuc2NvcmUgLSBhLnNjb3JlO1xuICAgICAgICB9KTtcbiAgICAgICAgdmFyIHByZXYgPSBudWxsO1xuICAgICAgICBtYXRjaGVzID0gbWF0Y2hlcy5maWx0ZXIoZnVuY3Rpb24oaXRlbSl7XG4gICAgICAgICAgICB2YXIgY2FwdGlvbiA9IGl0ZW0uc25pcHBldCB8fCBpdGVtLmNhcHRpb24gfHwgaXRlbS52YWx1ZTtcbiAgICAgICAgICAgIGlmIChjYXB0aW9uID09PSBwcmV2KSByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICBwcmV2ID0gY2FwdGlvbjtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLmZpbHRlcmVkID0gbWF0Y2hlcztcbiAgICB9O1xuICAgIHRoaXMuZmlsdGVyQ29tcGxldGlvbnMgPSBmdW5jdGlvbihpdGVtcywgbmVlZGxlKSB7XG4gICAgICAgIHZhciByZXN1bHRzID0gW107XG4gICAgICAgIHZhciB1cHBlciA9IG5lZWRsZS50b1VwcGVyQ2FzZSgpO1xuICAgICAgICB2YXIgbG93ZXIgPSBuZWVkbGUudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgbG9vcDogZm9yICh2YXIgaSA9IDAsIGl0ZW07IGl0ZW0gPSBpdGVtc1tpXTsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgY2FwdGlvbiA9IGl0ZW0udmFsdWUgfHwgaXRlbS5jYXB0aW9uIHx8IGl0ZW0uc25pcHBldDtcbiAgICAgICAgICAgIGlmICghY2FwdGlvbikgY29udGludWU7XG4gICAgICAgICAgICB2YXIgbGFzdEluZGV4ID0gLTE7XG4gICAgICAgICAgICB2YXIgbWF0Y2hNYXNrID0gMDtcbiAgICAgICAgICAgIHZhciBwZW5hbHR5ID0gMDtcbiAgICAgICAgICAgIHZhciBpbmRleCwgZGlzdGFuY2U7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLmV4YWN0TWF0Y2gpIHtcbiAgICAgICAgICAgICAgICBpZiAobmVlZGxlICE9PSBjYXB0aW9uLnN1YnN0cigwLCBuZWVkbGUubGVuZ3RoKSlcbiAgICAgICAgICAgICAgICAgICAgY29udGludWUgbG9vcDtcbiAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgbmVlZGxlLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBpMSA9IGNhcHRpb24uaW5kZXhPZihsb3dlcltqXSwgbGFzdEluZGV4ICsgMSk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBpMiA9IGNhcHRpb24uaW5kZXhPZih1cHBlcltqXSwgbGFzdEluZGV4ICsgMSk7XG4gICAgICAgICAgICAgICAgICAgIGluZGV4ID0gKGkxID49IDApID8gKChpMiA8IDAgfHwgaTEgPCBpMikgPyBpMSA6IGkyKSA6IGkyO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaW5kZXggPCAwKVxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWUgbG9vcDtcbiAgICAgICAgICAgICAgICAgICAgZGlzdGFuY2UgPSBpbmRleCAtIGxhc3RJbmRleCAtIDE7XG4gICAgICAgICAgICAgICAgICAgIGlmIChkaXN0YW5jZSA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsYXN0SW5kZXggPT09IC0xKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBlbmFsdHkgKz0gMTA7XG4gICAgICAgICAgICAgICAgICAgICAgICBwZW5hbHR5ICs9IGRpc3RhbmNlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG1hdGNoTWFzayA9IG1hdGNoTWFzayB8ICgxIDw8IGluZGV4KTtcbiAgICAgICAgICAgICAgICAgICAgbGFzdEluZGV4ID0gaW5kZXg7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaXRlbS5tYXRjaE1hc2sgPSBtYXRjaE1hc2s7XG4gICAgICAgICAgICBpdGVtLmV4YWN0TWF0Y2ggPSBwZW5hbHR5ID8gMCA6IDE7XG4gICAgICAgICAgICBpdGVtLnNjb3JlID0gKGl0ZW0uc2NvcmUgfHwgMCkgLSBwZW5hbHR5O1xuICAgICAgICAgICAgcmVzdWx0cy5wdXNoKGl0ZW0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHRzO1xuICAgIH07XG59KS5jYWxsKEZpbHRlcmVkTGlzdC5wcm90b3R5cGUpO1xuXG5leHBvcnRzLkF1dG9jb21wbGV0ZSA9IEF1dG9jb21wbGV0ZTtcbmV4cG9ydHMuRmlsdGVyZWRMaXN0ID0gRmlsdGVyZWRMaXN0O1xuXG59KTtcblxuYWNlLmRlZmluZShcImFjZS9hdXRvY29tcGxldGUvdGV4dF9jb21wbGV0ZXJcIixbXCJyZXF1aXJlXCIsXCJleHBvcnRzXCIsXCJtb2R1bGVcIixcImFjZS9yYW5nZVwiXSwgZnVuY3Rpb24oYWNlcXVpcmUsIGV4cG9ydHMsIG1vZHVsZSkge1xuICAgIHZhciBSYW5nZSA9IGFjZXF1aXJlKFwiLi4vcmFuZ2VcIikuUmFuZ2U7XG4gICAgXG4gICAgdmFyIHNwbGl0UmVnZXggPSAvW15hLXpBLVpfMC05XFwkXFwtXFx1MDBDMC1cXHUxRkZGXFx1MkMwMC1cXHVEN0ZGXFx3XSsvO1xuXG4gICAgZnVuY3Rpb24gZ2V0V29yZEluZGV4KGRvYywgcG9zKSB7XG4gICAgICAgIHZhciB0ZXh0QmVmb3JlID0gZG9jLmdldFRleHRSYW5nZShSYW5nZS5mcm9tUG9pbnRzKHtyb3c6IDAsIGNvbHVtbjowfSwgcG9zKSk7XG4gICAgICAgIHJldHVybiB0ZXh0QmVmb3JlLnNwbGl0KHNwbGl0UmVnZXgpLmxlbmd0aCAtIDE7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHdvcmREaXN0YW5jZShkb2MsIHBvcykge1xuICAgICAgICB2YXIgcHJlZml4UG9zID0gZ2V0V29yZEluZGV4KGRvYywgcG9zKTtcbiAgICAgICAgdmFyIHdvcmRzID0gZG9jLmdldFZhbHVlKCkuc3BsaXQoc3BsaXRSZWdleCk7XG4gICAgICAgIHZhciB3b3JkU2NvcmVzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgICAgXG4gICAgICAgIHZhciBjdXJyZW50V29yZCA9IHdvcmRzW3ByZWZpeFBvc107XG5cbiAgICAgICAgd29yZHMuZm9yRWFjaChmdW5jdGlvbih3b3JkLCBpZHgpIHtcbiAgICAgICAgICAgIGlmICghd29yZCB8fCB3b3JkID09PSBjdXJyZW50V29yZCkgcmV0dXJuO1xuXG4gICAgICAgICAgICB2YXIgZGlzdGFuY2UgPSBNYXRoLmFicyhwcmVmaXhQb3MgLSBpZHgpO1xuICAgICAgICAgICAgdmFyIHNjb3JlID0gd29yZHMubGVuZ3RoIC0gZGlzdGFuY2U7XG4gICAgICAgICAgICBpZiAod29yZFNjb3Jlc1t3b3JkXSkge1xuICAgICAgICAgICAgICAgIHdvcmRTY29yZXNbd29yZF0gPSBNYXRoLm1heChzY29yZSwgd29yZFNjb3Jlc1t3b3JkXSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHdvcmRTY29yZXNbd29yZF0gPSBzY29yZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB3b3JkU2NvcmVzO1xuICAgIH1cblxuICAgIGV4cG9ydHMuZ2V0Q29tcGxldGlvbnMgPSBmdW5jdGlvbihlZGl0b3IsIHNlc3Npb24sIHBvcywgcHJlZml4LCBjYWxsYmFjaykge1xuICAgICAgICB2YXIgd29yZFNjb3JlID0gd29yZERpc3RhbmNlKHNlc3Npb24sIHBvcywgcHJlZml4KTtcbiAgICAgICAgdmFyIHdvcmRMaXN0ID0gT2JqZWN0LmtleXMod29yZFNjb3JlKTtcbiAgICAgICAgY2FsbGJhY2sobnVsbCwgd29yZExpc3QubWFwKGZ1bmN0aW9uKHdvcmQpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgY2FwdGlvbjogd29yZCxcbiAgICAgICAgICAgICAgICB2YWx1ZTogd29yZCxcbiAgICAgICAgICAgICAgICBzY29yZTogd29yZFNjb3JlW3dvcmRdLFxuICAgICAgICAgICAgICAgIG1ldGE6IFwibG9jYWxcIlxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSkpO1xuICAgIH07XG59KTtcblxuYWNlLmRlZmluZShcImFjZS9leHQvbGFuZ3VhZ2VfdG9vbHNcIixbXCJyZXF1aXJlXCIsXCJleHBvcnRzXCIsXCJtb2R1bGVcIixcImFjZS9zbmlwcGV0c1wiLFwiYWNlL2F1dG9jb21wbGV0ZVwiLFwiYWNlL2NvbmZpZ1wiLFwiYWNlL2xpYi9sYW5nXCIsXCJhY2UvYXV0b2NvbXBsZXRlL3V0aWxcIixcImFjZS9hdXRvY29tcGxldGUvdGV4dF9jb21wbGV0ZXJcIixcImFjZS9lZGl0b3JcIixcImFjZS9jb25maWdcIl0sIGZ1bmN0aW9uKGFjZXF1aXJlLCBleHBvcnRzLCBtb2R1bGUpIHtcblwidXNlIHN0cmljdFwiO1xuXG52YXIgc25pcHBldE1hbmFnZXIgPSBhY2VxdWlyZShcIi4uL3NuaXBwZXRzXCIpLnNuaXBwZXRNYW5hZ2VyO1xudmFyIEF1dG9jb21wbGV0ZSA9IGFjZXF1aXJlKFwiLi4vYXV0b2NvbXBsZXRlXCIpLkF1dG9jb21wbGV0ZTtcbnZhciBjb25maWcgPSBhY2VxdWlyZShcIi4uL2NvbmZpZ1wiKTtcbnZhciBsYW5nID0gYWNlcXVpcmUoXCIuLi9saWIvbGFuZ1wiKTtcbnZhciB1dGlsID0gYWNlcXVpcmUoXCIuLi9hdXRvY29tcGxldGUvdXRpbFwiKTtcblxudmFyIHRleHRDb21wbGV0ZXIgPSBhY2VxdWlyZShcIi4uL2F1dG9jb21wbGV0ZS90ZXh0X2NvbXBsZXRlclwiKTtcbnZhciBrZXlXb3JkQ29tcGxldGVyID0ge1xuICAgIGdldENvbXBsZXRpb25zOiBmdW5jdGlvbihlZGl0b3IsIHNlc3Npb24sIHBvcywgcHJlZml4LCBjYWxsYmFjaykge1xuICAgICAgICBpZiAoc2Vzc2lvbi4kbW9kZS5jb21wbGV0ZXIpIHtcbiAgICAgICAgICAgIHJldHVybiBzZXNzaW9uLiRtb2RlLmNvbXBsZXRlci5nZXRDb21wbGV0aW9ucyhlZGl0b3IsIHNlc3Npb24sIHBvcywgcHJlZml4LCBjYWxsYmFjayk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHN0YXRlID0gZWRpdG9yLnNlc3Npb24uZ2V0U3RhdGUocG9zLnJvdyk7XG4gICAgICAgIHZhciBjb21wbGV0aW9ucyA9IHNlc3Npb24uJG1vZGUuZ2V0Q29tcGxldGlvbnMoc3RhdGUsIHNlc3Npb24sIHBvcywgcHJlZml4KTtcbiAgICAgICAgY2FsbGJhY2sobnVsbCwgY29tcGxldGlvbnMpO1xuICAgIH1cbn07XG5cbnZhciBzbmlwcGV0Q29tcGxldGVyID0ge1xuICAgIGdldENvbXBsZXRpb25zOiBmdW5jdGlvbihlZGl0b3IsIHNlc3Npb24sIHBvcywgcHJlZml4LCBjYWxsYmFjaykge1xuICAgICAgICB2YXIgc25pcHBldE1hcCA9IHNuaXBwZXRNYW5hZ2VyLnNuaXBwZXRNYXA7XG4gICAgICAgIHZhciBjb21wbGV0aW9ucyA9IFtdO1xuICAgICAgICBzbmlwcGV0TWFuYWdlci5nZXRBY3RpdmVTY29wZXMoZWRpdG9yKS5mb3JFYWNoKGZ1bmN0aW9uKHNjb3BlKSB7XG4gICAgICAgICAgICB2YXIgc25pcHBldHMgPSBzbmlwcGV0TWFwW3Njb3BlXSB8fCBbXTtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSBzbmlwcGV0cy5sZW5ndGg7IGktLTspIHtcbiAgICAgICAgICAgICAgICB2YXIgcyA9IHNuaXBwZXRzW2ldO1xuICAgICAgICAgICAgICAgIHZhciBjYXB0aW9uID0gcy5uYW1lIHx8IHMudGFiVHJpZ2dlcjtcbiAgICAgICAgICAgICAgICBpZiAoIWNhcHRpb24pXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGNvbXBsZXRpb25zLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICBjYXB0aW9uOiBjYXB0aW9uLFxuICAgICAgICAgICAgICAgICAgICBzbmlwcGV0OiBzLmNvbnRlbnQsXG4gICAgICAgICAgICAgICAgICAgIG1ldGE6IHMudGFiVHJpZ2dlciAmJiAhcy5uYW1lID8gcy50YWJUcmlnZ2VyICsgXCJcXHUyMUU1IFwiIDogXCJzbmlwcGV0XCIsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwic25pcHBldFwiXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIHRoaXMpO1xuICAgICAgICBjYWxsYmFjayhudWxsLCBjb21wbGV0aW9ucyk7XG4gICAgfSxcbiAgICBnZXREb2NUb29sdGlwOiBmdW5jdGlvbihpdGVtKSB7XG4gICAgICAgIGlmIChpdGVtLnR5cGUgPT0gXCJzbmlwcGV0XCIgJiYgIWl0ZW0uZG9jSFRNTCkge1xuICAgICAgICAgICAgaXRlbS5kb2NIVE1MID0gW1xuICAgICAgICAgICAgICAgIFwiPGI+XCIsIGxhbmcuZXNjYXBlSFRNTChpdGVtLmNhcHRpb24pLCBcIjwvYj5cIiwgXCI8aHI+PC9ocj5cIixcbiAgICAgICAgICAgICAgICBsYW5nLmVzY2FwZUhUTUwoaXRlbS5zbmlwcGV0KVxuICAgICAgICAgICAgXS5qb2luKFwiXCIpO1xuICAgICAgICB9XG4gICAgfVxufTtcblxudmFyIGNvbXBsZXRlcnMgPSBbc25pcHBldENvbXBsZXRlciwgdGV4dENvbXBsZXRlciwga2V5V29yZENvbXBsZXRlcl07XG5leHBvcnRzLnNldENvbXBsZXRlcnMgPSBmdW5jdGlvbih2YWwpIHtcbiAgICBjb21wbGV0ZXJzLmxlbmd0aCA9IDA7XG4gICAgaWYgKHZhbCkgY29tcGxldGVycy5wdXNoLmFwcGx5KGNvbXBsZXRlcnMsIHZhbCk7XG59O1xuZXhwb3J0cy5hZGRDb21wbGV0ZXIgPSBmdW5jdGlvbihjb21wbGV0ZXIpIHtcbiAgICBjb21wbGV0ZXJzLnB1c2goY29tcGxldGVyKTtcbn07XG5leHBvcnRzLnRleHRDb21wbGV0ZXIgPSB0ZXh0Q29tcGxldGVyO1xuZXhwb3J0cy5rZXlXb3JkQ29tcGxldGVyID0ga2V5V29yZENvbXBsZXRlcjtcbmV4cG9ydHMuc25pcHBldENvbXBsZXRlciA9IHNuaXBwZXRDb21wbGV0ZXI7XG5cbnZhciBleHBhbmRTbmlwcGV0ID0ge1xuICAgIG5hbWU6IFwiZXhwYW5kU25pcHBldFwiLFxuICAgIGV4ZWM6IGZ1bmN0aW9uKGVkaXRvcikge1xuICAgICAgICByZXR1cm4gc25pcHBldE1hbmFnZXIuZXhwYW5kV2l0aFRhYihlZGl0b3IpO1xuICAgIH0sXG4gICAgYmluZEtleTogXCJUYWJcIlxufTtcblxudmFyIG9uQ2hhbmdlTW9kZSA9IGZ1bmN0aW9uKGUsIGVkaXRvcikge1xuICAgIGxvYWRTbmlwcGV0c0Zvck1vZGUoZWRpdG9yLnNlc3Npb24uJG1vZGUpO1xufTtcblxudmFyIGxvYWRTbmlwcGV0c0Zvck1vZGUgPSBmdW5jdGlvbihtb2RlKSB7XG4gICAgdmFyIGlkID0gbW9kZS4kaWQ7XG4gICAgaWYgKCFzbmlwcGV0TWFuYWdlci5maWxlcylcbiAgICAgICAgc25pcHBldE1hbmFnZXIuZmlsZXMgPSB7fTtcbiAgICBsb2FkU25pcHBldEZpbGUoaWQpO1xuICAgIGlmIChtb2RlLm1vZGVzKVxuICAgICAgICBtb2RlLm1vZGVzLmZvckVhY2gobG9hZFNuaXBwZXRzRm9yTW9kZSk7XG59O1xuXG52YXIgbG9hZFNuaXBwZXRGaWxlID0gZnVuY3Rpb24oaWQpIHtcbiAgICBpZiAoIWlkIHx8IHNuaXBwZXRNYW5hZ2VyLmZpbGVzW2lkXSlcbiAgICAgICAgcmV0dXJuO1xuICAgIHZhciBzbmlwcGV0RmlsZVBhdGggPSBpZC5yZXBsYWNlKFwibW9kZVwiLCBcInNuaXBwZXRzXCIpO1xuICAgIHNuaXBwZXRNYW5hZ2VyLmZpbGVzW2lkXSA9IHt9O1xuICAgIGNvbmZpZy5sb2FkTW9kdWxlKHNuaXBwZXRGaWxlUGF0aCwgZnVuY3Rpb24obSkge1xuICAgICAgICBpZiAobSkge1xuICAgICAgICAgICAgc25pcHBldE1hbmFnZXIuZmlsZXNbaWRdID0gbTtcbiAgICAgICAgICAgIGlmICghbS5zbmlwcGV0cyAmJiBtLnNuaXBwZXRUZXh0KVxuICAgICAgICAgICAgICAgIG0uc25pcHBldHMgPSBzbmlwcGV0TWFuYWdlci5wYXJzZVNuaXBwZXRGaWxlKG0uc25pcHBldFRleHQpO1xuICAgICAgICAgICAgc25pcHBldE1hbmFnZXIucmVnaXN0ZXIobS5zbmlwcGV0cyB8fCBbXSwgbS5zY29wZSk7XG4gICAgICAgICAgICBpZiAobS5pbmNsdWRlU2NvcGVzKSB7XG4gICAgICAgICAgICAgICAgc25pcHBldE1hbmFnZXIuc25pcHBldE1hcFttLnNjb3BlXS5pbmNsdWRlU2NvcGVzID0gbS5pbmNsdWRlU2NvcGVzO1xuICAgICAgICAgICAgICAgIG0uaW5jbHVkZVNjb3Blcy5mb3JFYWNoKGZ1bmN0aW9uKHgpIHtcbiAgICAgICAgICAgICAgICAgICAgbG9hZFNuaXBwZXRGaWxlKFwiYWNlL21vZGUvXCIgKyB4KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0pO1xufTtcblxudmFyIGRvTGl2ZUF1dG9jb21wbGV0ZSA9IGZ1bmN0aW9uKGUpIHtcbiAgICB2YXIgZWRpdG9yID0gZS5lZGl0b3I7XG4gICAgdmFyIGhhc0NvbXBsZXRlciA9IGVkaXRvci5jb21wbGV0ZXIgJiYgZWRpdG9yLmNvbXBsZXRlci5hY3RpdmF0ZWQ7XG4gICAgaWYgKGUuY29tbWFuZC5uYW1lID09PSBcImJhY2tzcGFjZVwiKSB7XG4gICAgICAgIGlmIChoYXNDb21wbGV0ZXIgJiYgIXV0aWwuZ2V0Q29tcGxldGlvblByZWZpeChlZGl0b3IpKVxuICAgICAgICAgICAgZWRpdG9yLmNvbXBsZXRlci5kZXRhY2goKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoZS5jb21tYW5kLm5hbWUgPT09IFwiaW5zZXJ0c3RyaW5nXCIpIHtcbiAgICAgICAgdmFyIHByZWZpeCA9IHV0aWwuZ2V0Q29tcGxldGlvblByZWZpeChlZGl0b3IpO1xuICAgICAgICBpZiAocHJlZml4ICYmICFoYXNDb21wbGV0ZXIpIHtcbiAgICAgICAgICAgIGlmICghZWRpdG9yLmNvbXBsZXRlcikge1xuICAgICAgICAgICAgICAgIGVkaXRvci5jb21wbGV0ZXIgPSBuZXcgQXV0b2NvbXBsZXRlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlZGl0b3IuY29tcGxldGVyLmF1dG9JbnNlcnQgPSBmYWxzZTtcbiAgICAgICAgICAgIGVkaXRvci5jb21wbGV0ZXIuc2hvd1BvcHVwKGVkaXRvcik7XG4gICAgICAgIH1cbiAgICB9XG59O1xuXG52YXIgRWRpdG9yID0gYWNlcXVpcmUoXCIuLi9lZGl0b3JcIikuRWRpdG9yO1xuYWNlcXVpcmUoXCIuLi9jb25maWdcIikuZGVmaW5lT3B0aW9ucyhFZGl0b3IucHJvdG90eXBlLCBcImVkaXRvclwiLCB7XG4gICAgZW5hYmxlQmFzaWNBdXRvY29tcGxldGlvbjoge1xuICAgICAgICBzZXQ6IGZ1bmN0aW9uKHZhbCkge1xuICAgICAgICAgICAgaWYgKHZhbCkge1xuICAgICAgICAgICAgICAgIGlmICghdGhpcy5jb21wbGV0ZXJzKVxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbXBsZXRlcnMgPSBBcnJheS5pc0FycmF5KHZhbCk/IHZhbDogY29tcGxldGVycztcbiAgICAgICAgICAgICAgICB0aGlzLmNvbW1hbmRzLmFkZENvbW1hbmQoQXV0b2NvbXBsZXRlLnN0YXJ0Q29tbWFuZCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuY29tbWFuZHMucmVtb3ZlQ29tbWFuZChBdXRvY29tcGxldGUuc3RhcnRDb21tYW5kKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgdmFsdWU6IGZhbHNlXG4gICAgfSxcbiAgICBlbmFibGVMaXZlQXV0b2NvbXBsZXRpb246IHtcbiAgICAgICAgc2V0OiBmdW5jdGlvbih2YWwpIHtcbiAgICAgICAgICAgIGlmICh2YWwpIHtcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuY29tcGxldGVycylcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jb21wbGV0ZXJzID0gQXJyYXkuaXNBcnJheSh2YWwpPyB2YWw6IGNvbXBsZXRlcnM7XG4gICAgICAgICAgICAgICAgdGhpcy5jb21tYW5kcy5vbignYWZ0ZXJFeGVjJywgZG9MaXZlQXV0b2NvbXBsZXRlKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jb21tYW5kcy5yZW1vdmVMaXN0ZW5lcignYWZ0ZXJFeGVjJywgZG9MaXZlQXV0b2NvbXBsZXRlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgdmFsdWU6IGZhbHNlXG4gICAgfSxcbiAgICBlbmFibGVTbmlwcGV0czoge1xuICAgICAgICBzZXQ6IGZ1bmN0aW9uKHZhbCkge1xuICAgICAgICAgICAgaWYgKHZhbCkge1xuICAgICAgICAgICAgICAgIHRoaXMuY29tbWFuZHMuYWRkQ29tbWFuZChleHBhbmRTbmlwcGV0KTtcbiAgICAgICAgICAgICAgICB0aGlzLm9uKFwiY2hhbmdlTW9kZVwiLCBvbkNoYW5nZU1vZGUpO1xuICAgICAgICAgICAgICAgIG9uQ2hhbmdlTW9kZShudWxsLCB0aGlzKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jb21tYW5kcy5yZW1vdmVDb21tYW5kKGV4cGFuZFNuaXBwZXQpO1xuICAgICAgICAgICAgICAgIHRoaXMub2ZmKFwiY2hhbmdlTW9kZVwiLCBvbkNoYW5nZU1vZGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB2YWx1ZTogZmFsc2VcbiAgICB9XG59KTtcbn0pO1xuICAgICAgICAgICAgICAgIChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgYWNlLmFjZXF1aXJlKFtcImFjZS9leHQvbGFuZ3VhZ2VfdG9vbHNcIl0sIGZ1bmN0aW9uKCkge30pO1xuICAgICAgICAgICAgICAgIH0pKCk7XG4gICAgICAgICAgICAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./.yarn/cache/brace-npm-0.11.1-a66ecae2b2-def78159ab.zip/node_modules/brace/ext/language_tools.js\n");

/***/ })

}]);