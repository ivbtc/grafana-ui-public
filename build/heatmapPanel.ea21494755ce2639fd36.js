"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkgrafana"] = self["webpackChunkgrafana"] || []).push([["heatmapPanel"],{

/***/ "./public/app/core/components/ColorScale/ColorScale.tsx":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ColorScale: () => (/* binding */ ColorScale)\n/* harmony export */ });\n/* harmony import */ var _emotion_css__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(\"./.yarn/cache/@emotion-css-npm-11.11.2-dbfa42cf83-1edea109df.zip/node_modules/@emotion/css/dist/emotion-css.esm.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(\"./.yarn/cache/react-npm-18.2.0-1eae08fee2-88e38092da.zip/node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(\"./.yarn/__virtual__/@grafana-ui-virtual-d722efae30/1/packages/grafana-ui/src/themes/ThemeContext.tsx\");\n\n\n\n\nconst GRADIENT_STOPS = 10;\nconst ColorScale = ({ colorPalette, min, max, display, hoverValue, useStopsPercentage }) => {\n  const [colors, setColors] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n  const [scaleHover, setScaleHover] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({ isShown: false, value: 0 });\n  const [percent, setPercent] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n  const theme = (0,_grafana_ui__WEBPACK_IMPORTED_MODULE_2__.useTheme2)();\n  const styles = getStyles(theme, colors);\n  (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(() => {\n    setColors(getGradientStops({ colorArray: colorPalette, stops: GRADIENT_STOPS, useStopsPercentage }));\n  }, [colorPalette, useStopsPercentage]);\n  const onScaleMouseMove = (event) => {\n    const divOffset = event.nativeEvent.offsetX;\n    const offsetWidth = event.currentTarget.offsetWidth;\n    const normPercentage = Math.floor(divOffset * 100 / offsetWidth + 1);\n    const scaleValue = Math.floor((max - min) * normPercentage / 100 + min);\n    setScaleHover({ isShown: true, value: scaleValue });\n    setPercent(normPercentage);\n  };\n  const onScaleMouseLeave = () => {\n    setScaleHover({ isShown: false, value: 0 });\n  };\n  (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(() => {\n    setPercent(hoverValue == null ? null : clampPercent100((hoverValue - min) / (max - min)));\n  }, [hoverValue, min, max]);\n  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", { className: styles.scaleWrapper, onMouseMove: onScaleMouseMove, onMouseLeave: onScaleMouseLeave }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", { className: styles.scaleGradient }, display && (scaleHover.isShown || hoverValue !== void 0) && /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", { className: styles.followerContainer }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", { className: styles.follower, style: { left: `${percent}%` } }))), display && /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", { className: styles.followerContainer }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", { className: styles.legendValues }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"span\", null, display(min)), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"span\", null, display(max))), percent != null && (scaleHover.isShown || hoverValue !== void 0) && /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"span\", { className: styles.hoverValue, style: { left: `${percent}%` } }, display(hoverValue ?? scaleHover.value))));\n};\nconst getGradientStops = ({\n  colorArray,\n  stops,\n  useStopsPercentage = true\n}) => {\n  const colorCount = colorArray.length;\n  if (useStopsPercentage && colorCount <= 20) {\n    const incr = 1 / colorCount * 100;\n    let per = 0;\n    const stops2 = [];\n    for (const color of colorArray) {\n      if (per > 0) {\n        stops2.push(`${color} ${per}%`);\n      } else {\n        stops2.push(color);\n      }\n      per += incr;\n      stops2.push(`${color} ${per}%`);\n    }\n    return stops2;\n  }\n  const gradientEnd = colorArray[colorCount - 1];\n  const skip = Math.ceil(colorCount / stops);\n  const gradientStops = /* @__PURE__ */ new Set();\n  for (let i = 0; i < colorCount; i += skip) {\n    gradientStops.add(colorArray[i]);\n  }\n  gradientStops.add(gradientEnd);\n  return [...gradientStops];\n};\nfunction clampPercent100(v) {\n  if (v > 1) {\n    return 100;\n  }\n  if (v < 0) {\n    return 0;\n  }\n  return v * 100;\n}\nconst getStyles = (theme, colors) => ({\n  scaleWrapper: (0,_emotion_css__WEBPACK_IMPORTED_MODULE_0__.css)`\n    width: 100%;\n    font-size: 11px;\n    opacity: 1;\n  `,\n  scaleGradient: (0,_emotion_css__WEBPACK_IMPORTED_MODULE_0__.css)`\n    background: linear-gradient(90deg, ${colors.join()});\n    height: 10px;\n    pointer-events: none;\n  `,\n  legendValues: (0,_emotion_css__WEBPACK_IMPORTED_MODULE_0__.css)`\n    display: flex;\n    justify-content: space-between;\n    pointer-events: none;\n  `,\n  hoverValue: (0,_emotion_css__WEBPACK_IMPORTED_MODULE_0__.css)`\n    position: absolute;\n    margin-top: -14px;\n    padding: 3px 15px;\n    background: ${theme.colors.background.primary};\n    transform: translateX(-50%);\n  `,\n  followerContainer: (0,_emotion_css__WEBPACK_IMPORTED_MODULE_0__.css)`\n    position: relative;\n    pointer-events: none;\n    white-space: nowrap;\n  `,\n  follower: (0,_emotion_css__WEBPACK_IMPORTED_MODULE_0__.css)`\n    position: absolute;\n    height: 14px;\n    width: 14px;\n    border-radius: 50%;\n    transform: translateX(-50%) translateY(-50%);\n    border: 2px solid ${theme.colors.text.primary};\n    margin-top: 5px;\n  `\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./public/app/core/components/ColorScale/ColorScale.tsx\n");

/***/ }),

/***/ "./public/app/plugins/panel/heatmap/HeatmapHoverView.tsx":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   HeatmapHoverView: () => (/* binding */ HeatmapHoverView)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(\"./.yarn/cache/react-npm-18.2.0-1eae08fee2-88e38092da.zip/node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _grafana_data__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(\"./.yarn/__virtual__/@grafana-data-virtual-0996183232/1/packages/grafana-data/src/valueFormats/valueFormats.ts\");\n/* harmony import */ var _grafana_data__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(\"./.yarn/__virtual__/@grafana-data-virtual-0996183232/1/packages/grafana-data/src/types/dataFrame.ts\");\n/* harmony import */ var _grafana_data__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(\"./.yarn/__virtual__/@grafana-data-virtual-0996183232/1/packages/grafana-data/src/field/fieldOverrides.ts\");\n/* harmony import */ var _grafana_data__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(\"./.yarn/__virtual__/@grafana-data-virtual-0996183232/1/packages/grafana-data/src/types/dataFrameTypes.ts\");\n/* harmony import */ var _grafana_data__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(\"./.yarn/__virtual__/@grafana-data-virtual-0996183232/1/packages/grafana-data/src/field/fieldState.ts\");\n/* harmony import */ var _grafana_schema__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(\"./packages/grafana-schema/src/common/common.gen.ts\");\n/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(\"./.yarn/__virtual__/@grafana-ui-virtual-d722efae30/1/packages/grafana-ui/src/components/Layout/Layout.tsx\");\n/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(\"./.yarn/__virtual__/@grafana-ui-virtual-d722efae30/1/packages/grafana-ui/src/components/Button/Button.tsx\");\n/* harmony import */ var app_features_dashboard_services_DashboardSrv__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(\"./public/app/features/dashboard/services/DashboardSrv.ts\");\n/* harmony import */ var app_features_transformers_calculateHeatmap_heatmap__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(\"./public/app/features/transformers/calculateHeatmap/heatmap.ts\");\n/* harmony import */ var app_features_visualization_data_hover_DataHoverView__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(\"./public/app/features/visualization/data-hover/DataHoverView.tsx\");\n\n\n\n\n\n\n\n\nconst HeatmapHoverView = (props) => {\n  if (props.hover.seriesIdx === 2) {\n    return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(app_features_visualization_data_hover_DataHoverView__WEBPACK_IMPORTED_MODULE_3__.DataHoverView, { data: props.data.exemplars, rowIndex: props.hover.dataIdx, header: \"Exemplar\" });\n  }\n  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(HeatmapHoverCell, { ...props });\n};\nconst HeatmapHoverCell = ({ data, hover, showHistogram, scopedVars, replaceVars }) => {\n  const index = hover.dataIdx;\n  const xField = data.heatmap?.fields[0];\n  const yField = data.heatmap?.fields[1];\n  const countField = data.heatmap?.fields[2];\n  const xDisp = (v) => {\n    if (xField?.display) {\n      return (0,_grafana_data__WEBPACK_IMPORTED_MODULE_4__.formattedValueToString)(xField.display(v));\n    }\n    if (xField?.type === _grafana_data__WEBPACK_IMPORTED_MODULE_5__.FieldType.time) {\n      const tooltipTimeFormat = \"YYYY-MM-DD HH:mm:ss\";\n      const dashboard = (0,app_features_dashboard_services_DashboardSrv__WEBPACK_IMPORTED_MODULE_1__.getDashboardSrv)().getCurrent();\n      return dashboard?.formatDate(v, tooltipTimeFormat);\n    }\n    return `${v}`;\n  };\n  const xVals = xField?.values;\n  const yVals = yField?.values;\n  const countVals = countField?.values;\n  const meta = (0,app_features_transformers_calculateHeatmap_heatmap__WEBPACK_IMPORTED_MODULE_2__.readHeatmapRowsCustomMeta)(data.heatmap);\n  const yDisp = yField?.display ? (v) => (0,_grafana_data__WEBPACK_IMPORTED_MODULE_4__.formattedValueToString)(yField.display(v)) : (v) => `${v}`;\n  const yValueIdx = index % data.yBucketCount;\n  let yBucketMin;\n  let yBucketMax;\n  let nonNumericOrdinalDisplay = void 0;\n  if (meta.yOrdinalDisplay) {\n    const yMinIdx = data.yLayout === _grafana_schema__WEBPACK_IMPORTED_MODULE_6__.HeatmapCellLayout.le ? yValueIdx - 1 : yValueIdx;\n    const yMaxIdx = data.yLayout === _grafana_schema__WEBPACK_IMPORTED_MODULE_6__.HeatmapCellLayout.le ? yValueIdx : yValueIdx + 1;\n    yBucketMin = yMinIdx < 0 ? meta.yMinDisplay : `${meta.yOrdinalDisplay[yMinIdx]}`;\n    yBucketMax = `${meta.yOrdinalDisplay[yMaxIdx]}`;\n    if (!meta.yOrdinalLabel || Number.isNaN(+meta.yOrdinalLabel[0])) {\n      nonNumericOrdinalDisplay = data.yLayout === _grafana_schema__WEBPACK_IMPORTED_MODULE_6__.HeatmapCellLayout.le ? yBucketMax : yBucketMin;\n    }\n  } else {\n    const value = yVals?.[yValueIdx];\n    if (data.yLayout === _grafana_schema__WEBPACK_IMPORTED_MODULE_6__.HeatmapCellLayout.le) {\n      yBucketMax = `${value}`;\n      if (data.yLog) {\n        let logFn = data.yLog === 2 ? Math.log2 : Math.log10;\n        let exp = logFn(value) - 1 / data.yLogSplit;\n        yBucketMin = `${data.yLog ** exp}`;\n      } else {\n        yBucketMin = `${value - data.yBucketSize}`;\n      }\n    } else {\n      yBucketMin = `${value}`;\n      if (data.yLog) {\n        let logFn = data.yLog === 2 ? Math.log2 : Math.log10;\n        let exp = logFn(value) + 1 / data.yLogSplit;\n        yBucketMax = `${data.yLog ** exp}`;\n      } else {\n        yBucketMax = `${value + data.yBucketSize}`;\n      }\n    }\n  }\n  let xBucketMin;\n  let xBucketMax;\n  if (data.xLayout === _grafana_schema__WEBPACK_IMPORTED_MODULE_6__.HeatmapCellLayout.le) {\n    xBucketMax = xVals?.[index];\n    xBucketMin = xBucketMax - data.xBucketSize;\n  } else {\n    xBucketMin = xVals?.[index];\n    xBucketMax = xBucketMin + data.xBucketSize;\n  }\n  const count = countVals?.[index];\n  const visibleFields = data.heatmap?.fields.filter((f) => !Boolean(f.config.custom?.hideFrom?.tooltip));\n  const links = [];\n  const linkLookup = /* @__PURE__ */ new Set();\n  for (const field of visibleFields ?? []) {\n    const hasLinks = field.config.links && field.config.links.length > 0;\n    if (hasLinks && data.heatmap) {\n      const appropriateScopedVars = scopedVars.find(\n        (scopedVar) => scopedVar && scopedVar.__dataContext && scopedVar.__dataContext.value.field.name === nonNumericOrdinalDisplay\n      );\n      field.getLinks = (0,_grafana_data__WEBPACK_IMPORTED_MODULE_7__.getLinksSupplier)(data.heatmap, field, appropriateScopedVars || {}, replaceVars);\n    }\n    if (field.getLinks) {\n      const value = field.values[index];\n      const display = field.display ? field.display(value) : { text: `${value}`, numeric: +value };\n      field.getLinks({ calculatedValue: display, valueRowIndex: index }).forEach((link) => {\n        const key = `${link.title}/${link.href}`;\n        if (!linkLookup.has(key)) {\n          links.push(link);\n          linkLookup.add(key);\n        }\n      });\n    }\n  }\n  let can = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n  let histCssWidth = 150;\n  let histCssHeight = 50;\n  let histCanWidth = Math.round(histCssWidth * devicePixelRatio);\n  let histCanHeight = Math.round(histCssHeight * devicePixelRatio);\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(\n    () => {\n      if (showHistogram) {\n        let histCtx = can.current?.getContext(\"2d\");\n        if (histCtx && xVals && yVals && countVals) {\n          let fromIdx = index;\n          while (xVals[fromIdx--] === xVals[index]) {\n          }\n          fromIdx++;\n          let toIdx = fromIdx + data.yBucketCount;\n          let maxCount = 0;\n          let i = fromIdx;\n          while (i < toIdx) {\n            let c = countVals[i];\n            maxCount = Math.max(maxCount, c);\n            i++;\n          }\n          let pHov = new Path2D();\n          let pRest = new Path2D();\n          i = fromIdx;\n          let j = 0;\n          while (i < toIdx) {\n            let c = countVals[i];\n            if (c > 0) {\n              let pctY = c / maxCount;\n              let pctX = j / (data.yBucketCount + 1);\n              let p = i === index ? pHov : pRest;\n              p.rect(\n                Math.round(histCanWidth * pctX),\n                Math.round(histCanHeight * (1 - pctY)),\n                Math.round(histCanWidth / data.yBucketCount),\n                Math.round(histCanHeight * pctY)\n              );\n            }\n            i++;\n            j++;\n          }\n          histCtx.clearRect(0, 0, histCanWidth, histCanHeight);\n          histCtx.fillStyle = \"#ffffff80\";\n          histCtx.fill(pRest);\n          histCtx.fillStyle = \"#ff000080\";\n          histCtx.fill(pHov);\n        }\n      }\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [index]\n  );\n  const [isSparse] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\n    () => data.heatmap?.meta?.type === _grafana_data__WEBPACK_IMPORTED_MODULE_8__.DataFrameType.HeatmapCells && !(0,app_features_transformers_calculateHeatmap_heatmap__WEBPACK_IMPORTED_MODULE_2__.isHeatmapCellsDense)(data.heatmap)\n  );\n  if (isSparse) {\n    return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", null, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(app_features_visualization_data_hover_DataHoverView__WEBPACK_IMPORTED_MODULE_3__.DataHoverView, { data: data.heatmap, rowIndex: index }));\n  }\n  const renderYBucket = () => {\n    if (nonNumericOrdinalDisplay) {\n      return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", null, \"Name: \", nonNumericOrdinalDisplay);\n    }\n    switch (data.yLayout) {\n      case _grafana_schema__WEBPACK_IMPORTED_MODULE_6__.HeatmapCellLayout.unknown:\n        return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", null, yDisp(yBucketMin));\n    }\n    return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", null, \"Bucket: \", yDisp(yBucketMin), \" - \", yDisp(yBucketMax));\n  };\n  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default().createElement((react__WEBPACK_IMPORTED_MODULE_0___default().Fragment), null, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", null, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", null, xDisp(xBucketMin)), data.xLayout !== _grafana_schema__WEBPACK_IMPORTED_MODULE_6__.HeatmapCellLayout.unknown && /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", null, xDisp(xBucketMax))), showHistogram && /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\n    \"canvas\",\n    {\n      width: histCanWidth,\n      height: histCanHeight,\n      ref: can,\n      style: { width: histCanWidth + \"px\", height: histCanHeight + \"px\" }\n    }\n  ), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", null, renderYBucket(), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", null, (0,_grafana_data__WEBPACK_IMPORTED_MODULE_9__.getFieldDisplayName)(countField, data.heatmap), \": \", data.display(count))), links.length > 0 && /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_10__.VerticalGroup, null, links.map((link, i) => /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\n    _grafana_ui__WEBPACK_IMPORTED_MODULE_11__.LinkButton,\n    {\n      key: i,\n      icon: \"external-link-alt\",\n      target: link.target,\n      href: link.href,\n      onClick: link.onClick,\n      fill: \"text\",\n      style: { width: \"100%\" }\n    },\n    link.title\n  ))));\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./public/app/plugins/panel/heatmap/HeatmapHoverView.tsx\n");

/***/ }),

/***/ "./public/app/plugins/panel/heatmap/HeatmapPanel.tsx":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   HeatmapPanel: () => (/* binding */ HeatmapPanel)\n/* harmony export */ });\n/* harmony import */ var _emotion_css__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(\"./.yarn/cache/@emotion-css-npm-11.11.2-dbfa42cf83-1edea109df.zip/node_modules/@emotion/css/dist/emotion-css.esm.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(\"./.yarn/cache/react-npm-18.2.0-1eae08fee2-88e38092da.zip/node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _grafana_data__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(\"./.yarn/__virtual__/@grafana-data-virtual-0996183232/1/packages/grafana-data/src/field/fieldOverrides.ts\");\n/* harmony import */ var _grafana_data__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(\"./.yarn/__virtual__/@grafana-data-virtual-0996183232/1/packages/grafana-data/src/types/dataFrameTypes.ts\");\n/* harmony import */ var _grafana_runtime__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(\"./.yarn/__virtual__/@grafana-runtime-virtual-68c57d4c0c/1/packages/grafana-runtime/src/components/PanelDataErrorView.tsx\");\n/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(\"./.yarn/__virtual__/@grafana-ui-virtual-d722efae30/1/packages/grafana-ui/src/themes/ThemeContext.tsx\");\n/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(\"./.yarn/__virtual__/@grafana-ui-virtual-d722efae30/1/packages/grafana-ui/src/components/PanelChrome/PanelContext.ts\");\n/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(\"./packages/grafana-schema/src/common/common.gen.ts\");\n/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(\"./.yarn/__virtual__/@grafana-ui-virtual-d722efae30/1/packages/grafana-ui/src/components/VizLayout/VizLayout.tsx\");\n/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(\"./.yarn/__virtual__/@grafana-ui-virtual-d722efae30/1/packages/grafana-ui/src/components/uPlot/Plot.tsx\");\n/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(\"./.yarn/__virtual__/@grafana-ui-virtual-d722efae30/1/packages/grafana-ui/src/components/Portal/Portal.tsx\");\n/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(\"./.yarn/__virtual__/@grafana-ui-virtual-d722efae30/1/packages/grafana-ui/src/components/VizTooltip/VizTooltipContainer.tsx\");\n/* harmony import */ var app_core_components_ColorScale_ColorScale__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(\"./public/app/core/components/ColorScale/ColorScale.tsx\");\n/* harmony import */ var app_features_transformers_calculateHeatmap_heatmap__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(\"./public/app/features/transformers/calculateHeatmap/heatmap.ts\");\n/* harmony import */ var _ExemplarModalHeader__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(\"./public/app/plugins/panel/heatmap/ExemplarModalHeader.tsx\");\n/* harmony import */ var _HeatmapHoverView__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(\"./public/app/plugins/panel/heatmap/HeatmapHoverView.tsx\");\n/* harmony import */ var _fields__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(\"./public/app/plugins/panel/heatmap/fields.ts\");\n/* harmony import */ var _palettes__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(\"./public/app/plugins/panel/heatmap/palettes.ts\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(\"./public/app/plugins/panel/heatmap/utils.ts\");\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst HeatmapPanel = ({\n  data,\n  id,\n  timeRange,\n  timeZone,\n  width,\n  height,\n  options,\n  fieldConfig,\n  eventBus,\n  onChangeTimeRange,\n  replaceVariables\n}) => {\n  const theme = (0,_grafana_ui__WEBPACK_IMPORTED_MODULE_9__.useTheme2)();\n  const styles = (0,_grafana_ui__WEBPACK_IMPORTED_MODULE_9__.useStyles2)(getStyles);\n  const { sync } = (0,_grafana_ui__WEBPACK_IMPORTED_MODULE_10__.usePanelContext)();\n  let scopedVarsFromRawData = [];\n  for (const series of data.series) {\n    for (const field of series.fields) {\n      if (field.state?.scopedVars) {\n        scopedVarsFromRawData.push(field.state.scopedVars);\n      }\n    }\n  }\n  let timeRangeRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(timeRange);\n  timeRangeRef.current = timeRange;\n  const getFieldLinksSupplier = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(\n    (exemplars, field) => {\n      return (0,_grafana_data__WEBPACK_IMPORTED_MODULE_11__.getLinksSupplier)(exemplars, field, field.state?.scopedVars ?? {}, replaceVariables);\n    },\n    [replaceVariables]\n  );\n  const palette = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(() => (0,_palettes__WEBPACK_IMPORTED_MODULE_7__.quantizeScheme)(options.color, theme), [options.color, theme]);\n  const info = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(() => {\n    try {\n      return (0,_fields__WEBPACK_IMPORTED_MODULE_6__.prepareHeatmapData)(data.series, data.annotations, options, palette, theme, getFieldLinksSupplier);\n    } catch (ex) {\n      return { warning: `${ex}` };\n    }\n  }, [data.series, data.annotations, options, palette, theme, getFieldLinksSupplier]);\n  const facets = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(() => {\n    let exemplarsXFacet = [];\n    let exemplarsyFacet = [];\n    const meta = (0,app_features_transformers_calculateHeatmap_heatmap__WEBPACK_IMPORTED_MODULE_3__.readHeatmapRowsCustomMeta)(info.heatmap);\n    if (info.exemplars?.length && meta.yMatchWithLabel) {\n      exemplarsXFacet = info.exemplars?.fields[0].values;\n      const hasLabeledY = meta.yOrdinalDisplay != null;\n      if (hasLabeledY) {\n        let matchExemplarsBy = info.exemplars?.fields.find((field) => field.name === meta.yMatchWithLabel).values;\n        exemplarsyFacet = matchExemplarsBy.map((label) => meta.yOrdinalLabel?.indexOf(label));\n      } else {\n        exemplarsyFacet = info.exemplars?.fields[1].values;\n      }\n    }\n    return [null, info.heatmap?.fields.map((f) => f.values), [exemplarsXFacet, exemplarsyFacet]];\n  }, [info.heatmap, info.exemplars]);\n  const [hover, setHover] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(void 0);\n  const [shouldDisplayCloseButton, setShouldDisplayCloseButton] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n  const isToolTipOpen = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(false);\n  const onCloseToolTip = () => {\n    isToolTipOpen.current = false;\n    setShouldDisplayCloseButton(false);\n    onhover(null);\n  };\n  const onclick = () => {\n    isToolTipOpen.current = !isToolTipOpen.current;\n    setShouldDisplayCloseButton(isToolTipOpen.current);\n  };\n  const onhover = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(\n    (evt) => {\n      setHover(evt ?? void 0);\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [options, data.structureRev]\n  );\n  const dataRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(info);\n  dataRef.current = info;\n  const builder = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(() => {\n    const scaleConfig = dataRef.current?.heatmap?.fields[1].config?.custom?.scaleDistribution;\n    return (0,_utils__WEBPACK_IMPORTED_MODULE_8__.prepConfig)({\n      dataRef,\n      theme,\n      eventBus,\n      onhover,\n      onclick: options.tooltip.show ? onclick : null,\n      onzoom: (evt) => {\n        const delta = evt.xMax - evt.xMin;\n        if (delta > 1) {\n          onChangeTimeRange({ from: evt.xMin, to: evt.xMax });\n        }\n      },\n      isToolTipOpen,\n      timeZone,\n      getTimeRange: () => timeRangeRef.current,\n      sync,\n      cellGap: options.cellGap,\n      hideLE: options.filterValues?.le,\n      hideGE: options.filterValues?.ge,\n      exemplarColor: options.exemplars?.color ?? \"rgba(255,0,255,0.7)\",\n      yAxisConfig: options.yAxis,\n      ySizeDivisor: scaleConfig?.type === _grafana_ui__WEBPACK_IMPORTED_MODULE_12__.ScaleDistribution.Log ? +(options.calculation?.yBuckets?.value || 1) : 1\n    });\n  }, [options, timeZone, data.structureRev]);\n  const renderLegend = () => {\n    if (!info.heatmap || !options.legend.show) {\n      return null;\n    }\n    let heatmapType = dataRef.current?.heatmap?.meta?.type;\n    let isSparseHeatmap = heatmapType === _grafana_data__WEBPACK_IMPORTED_MODULE_13__.DataFrameType.HeatmapCells && !(0,app_features_transformers_calculateHeatmap_heatmap__WEBPACK_IMPORTED_MODULE_3__.isHeatmapCellsDense)(dataRef.current?.heatmap);\n    let countFieldIdx = !isSparseHeatmap ? 2 : 3;\n    const countField = info.heatmap.fields[countFieldIdx];\n    let hoverValue = void 0;\n    if (hover && info.heatmap.fields && hover.seriesIdx === 1) {\n      hoverValue = countField.values[hover.dataIdx];\n    }\n    return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_14__.VizLayout.Legend, { placement: \"bottom\", maxHeight: \"20%\" }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", { className: styles.colorScaleWrapper }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\n      app_core_components_ColorScale_ColorScale__WEBPACK_IMPORTED_MODULE_2__.ColorScale,\n      {\n        hoverValue,\n        colorPalette: palette,\n        min: dataRef.current.heatmapColors?.minValue,\n        max: dataRef.current.heatmapColors?.maxValue,\n        display: info.display\n      }\n    )));\n  };\n  if (info.warning || !info.heatmap) {\n    return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\n      _grafana_runtime__WEBPACK_IMPORTED_MODULE_15__.PanelDataErrorView,\n      {\n        panelId: id,\n        fieldConfig,\n        data,\n        needsNumberField: true,\n        message: info.warning\n      }\n    );\n  }\n  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_1___default().createElement((react__WEBPACK_IMPORTED_MODULE_1___default().Fragment), null, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_14__.VizLayout, { width, height, legend: renderLegend() }, (vizWidth, vizHeight) => /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_16__.UPlotChart, { config: builder, data: facets, width: vizWidth, height: vizHeight })), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_17__.Portal, null, hover && options.tooltip.show && /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\n    _grafana_ui__WEBPACK_IMPORTED_MODULE_18__.VizTooltipContainer,\n    {\n      position: { x: hover.pageX, y: hover.pageY },\n      offset: { x: 10, y: 10 },\n      allowPointerEvents: isToolTipOpen.current\n    },\n    shouldDisplayCloseButton && /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(_ExemplarModalHeader__WEBPACK_IMPORTED_MODULE_4__.ExemplarModalHeader, { onClick: onCloseToolTip }),\n    /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\n      _HeatmapHoverView__WEBPACK_IMPORTED_MODULE_5__.HeatmapHoverView,\n      {\n        timeRange,\n        data: info,\n        hover,\n        showHistogram: options.tooltip.yHistogram,\n        replaceVars: replaceVariables,\n        scopedVars: scopedVarsFromRawData\n      }\n    )\n  )));\n};\nconst getStyles = (theme) => ({\n  colorScaleWrapper: (0,_emotion_css__WEBPACK_IMPORTED_MODULE_0__.css)`\n    margin-left: 25px;\n    padding: 10px 0;\n    max-width: 300px;\n  `\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./public/app/plugins/panel/heatmap/HeatmapPanel.tsx\n");

/***/ }),

/***/ "./public/app/plugins/panel/heatmap/fields.ts":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   prepareHeatmapData: () => (/* binding */ prepareHeatmapData)\n/* harmony export */ });\n/* harmony import */ var _grafana_data__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(\"./.yarn/__virtual__/@grafana-data-virtual-0996183232/1/packages/grafana-data/src/field/fieldState.ts\");\n/* harmony import */ var _grafana_data__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(\"./.yarn/__virtual__/@grafana-data-virtual-0996183232/1/packages/grafana-data/src/types/dataFrameTypes.ts\");\n/* harmony import */ var _grafana_data__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(\"./.yarn/__virtual__/@grafana-data-virtual-0996183232/1/packages/grafana-data/src/transformations/transformers/joinDataFrames.ts\");\n/* harmony import */ var _grafana_data__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(\"./.yarn/__virtual__/@grafana-data-virtual-0996183232/1/packages/grafana-data/src/types/dataFrame.ts\");\n/* harmony import */ var _grafana_data__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(\"./.yarn/__virtual__/@grafana-data-virtual-0996183232/1/packages/grafana-data/src/valueFormats/valueFormats.ts\");\n/* harmony import */ var _grafana_data__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(\"./.yarn/__virtual__/@grafana-data-virtual-0996183232/1/packages/grafana-data/src/field/displayProcessor.ts\");\n/* harmony import */ var _grafana_schema__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(\"./packages/grafana-schema/src/common/common.gen.ts\");\n/* harmony import */ var app_features_transformers_calculateHeatmap_heatmap__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(\"./public/app/features/transformers/calculateHeatmap/heatmap.ts\");\n/* harmony import */ var app_plugins_datasource_prometheus_result_transformer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(\"./public/app/plugins/datasource/prometheus/result_transformer.ts\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(\"./public/app/plugins/panel/heatmap/utils.ts\");\n\n\n\n\n\n\nfunction prepareHeatmapData(frames, annotations, options, palette, theme, getFieldLinks) {\n  if (!frames?.length) {\n    return {};\n  }\n  (0,_grafana_data__WEBPACK_IMPORTED_MODULE_3__.cacheFieldDisplayNames)(frames);\n  const exemplars = annotations?.find((f) => f.name === \"exemplar\");\n  if (getFieldLinks) {\n    exemplars?.fields.forEach((field, index) => {\n      exemplars.fields[index].getLinks = getFieldLinks(exemplars, field);\n    });\n  }\n  if (options.calculate) {\n    return getDenseHeatmapData(\n      (0,app_features_transformers_calculateHeatmap_heatmap__WEBPACK_IMPORTED_MODULE_0__.calculateHeatmapFromData)(frames, options.calculation ?? {}),\n      exemplars,\n      options,\n      palette,\n      theme\n    );\n  }\n  let rowsHeatmap = void 0;\n  for (const frame of frames) {\n    switch (frame.meta?.type) {\n      case _grafana_data__WEBPACK_IMPORTED_MODULE_4__.DataFrameType.HeatmapCells:\n        return (0,app_features_transformers_calculateHeatmap_heatmap__WEBPACK_IMPORTED_MODULE_0__.isHeatmapCellsDense)(frame) ? getDenseHeatmapData(frame, exemplars, options, palette, theme) : getSparseHeatmapData(frame, exemplars, options, palette, theme);\n      case _grafana_data__WEBPACK_IMPORTED_MODULE_4__.DataFrameType.HeatmapRows:\n        rowsHeatmap = frame;\n    }\n  }\n  if (!rowsHeatmap) {\n    if (frames.length > 1) {\n      let allNamesNumeric = frames.every(\n        (frame) => !Number.isNaN((0,app_plugins_datasource_prometheus_result_transformer__WEBPACK_IMPORTED_MODULE_1__.parseSampleValue)(frame.fields[1].state?.displayName))\n      );\n      if (allNamesNumeric) {\n        frames.sort(app_plugins_datasource_prometheus_result_transformer__WEBPACK_IMPORTED_MODULE_1__.sortSeriesByLabel);\n      }\n      rowsHeatmap = [\n        (0,_grafana_data__WEBPACK_IMPORTED_MODULE_5__.joinDataFrames)({\n          frames\n        })\n      ][0];\n    } else {\n      let frame = frames[0];\n      let numberFields = frame.fields.filter((field) => field.type === _grafana_data__WEBPACK_IMPORTED_MODULE_6__.FieldType.number);\n      let allNamesNumeric = numberFields.every((field) => !Number.isNaN((0,app_plugins_datasource_prometheus_result_transformer__WEBPACK_IMPORTED_MODULE_1__.parseSampleValue)(field.state?.displayName)));\n      if (allNamesNumeric) {\n        numberFields.sort((a, b) => (0,app_plugins_datasource_prometheus_result_transformer__WEBPACK_IMPORTED_MODULE_1__.parseSampleValue)(a.state?.displayName) - (0,app_plugins_datasource_prometheus_result_transformer__WEBPACK_IMPORTED_MODULE_1__.parseSampleValue)(b.state?.displayName));\n        rowsHeatmap = {\n          ...frame,\n          fields: [frame.fields.find((f) => f.type === _grafana_data__WEBPACK_IMPORTED_MODULE_6__.FieldType.time), ...numberFields]\n        };\n      } else {\n        rowsHeatmap = frame;\n      }\n    }\n  }\n  return getDenseHeatmapData(\n    (0,app_features_transformers_calculateHeatmap_heatmap__WEBPACK_IMPORTED_MODULE_0__.rowsToCellsHeatmap)({\n      unit: options.yAxis?.unit,\n      // used to format the ordinal lookup values\n      decimals: options.yAxis?.decimals,\n      ...options.rowsFrame,\n      frame: rowsHeatmap\n    }),\n    exemplars,\n    options,\n    palette,\n    theme\n  );\n}\nconst getSparseHeatmapData = (frame, exemplars, options, palette, theme) => {\n  if (frame.meta?.type !== _grafana_data__WEBPACK_IMPORTED_MODULE_4__.DataFrameType.HeatmapCells || (0,app_features_transformers_calculateHeatmap_heatmap__WEBPACK_IMPORTED_MODULE_0__.isHeatmapCellsDense)(frame)) {\n    return {\n      warning: \"Expected sparse heatmap format\",\n      heatmap: frame\n    };\n  }\n  updateFieldDisplay(frame.fields[1], options.yAxis, theme);\n  const valueField = frame.fields[3];\n  const disp = updateFieldDisplay(valueField, options.cellValues, theme);\n  let [minValue, maxValue] = (0,_utils__WEBPACK_IMPORTED_MODULE_2__.boundedMinMax)(\n    valueField.values,\n    options.color.min,\n    options.color.max,\n    options.filterValues?.le,\n    options.filterValues?.ge\n  );\n  return {\n    heatmap: frame,\n    heatmapColors: {\n      palette,\n      values: (0,_utils__WEBPACK_IMPORTED_MODULE_2__.valuesToFills)(valueField.values, palette, minValue, maxValue),\n      minValue,\n      maxValue\n    },\n    exemplars,\n    display: (v) => (0,_grafana_data__WEBPACK_IMPORTED_MODULE_7__.formattedValueToString)(disp(v))\n  };\n};\nconst getDenseHeatmapData = (frame, exemplars, options, palette, theme) => {\n  if (frame.meta?.type !== _grafana_data__WEBPACK_IMPORTED_MODULE_4__.DataFrameType.HeatmapCells) {\n    return {\n      warning: \"Expected heatmap scanlines format\",\n      heatmap: frame\n    };\n  }\n  if (frame.fields.length < 2 || frame.length < 2) {\n    return { heatmap: frame };\n  }\n  const meta = (0,app_features_transformers_calculateHeatmap_heatmap__WEBPACK_IMPORTED_MODULE_0__.readHeatmapRowsCustomMeta)(frame);\n  let xName = void 0;\n  let yName = void 0;\n  let valueField = void 0;\n  for (const field of frame.fields) {\n    switch (field.name) {\n      case \"y\":\n        yName = field.name;\n      case \"yMin\":\n      case \"yMax\": {\n        if (!yName) {\n          yName = field.name;\n        }\n        if (meta.yOrdinalDisplay == null) {\n          updateFieldDisplay(field, options.yAxis, theme);\n        }\n        break;\n      }\n      case \"x\":\n      case \"xMin\":\n      case \"xMax\":\n        xName = field.name;\n        break;\n      default: {\n        if (field.type === _grafana_data__WEBPACK_IMPORTED_MODULE_6__.FieldType.number && !valueField) {\n          valueField = field;\n        }\n      }\n    }\n  }\n  if (!yName) {\n    return { warning: \"Missing Y field\", heatmap: frame };\n  }\n  if (!yName) {\n    return { warning: \"Missing X field\", heatmap: frame };\n  }\n  if (!valueField) {\n    return { warning: \"Missing value field\", heatmap: frame };\n  }\n  const disp = updateFieldDisplay(valueField, options.cellValues, theme);\n  const xs = frame.fields[0].values;\n  const ys = frame.fields[1].values;\n  const dlen = xs.length;\n  let yBinQty = dlen - ys.lastIndexOf(ys[0]);\n  let xBinQty = dlen / yBinQty;\n  let yBinIncr = ys[1] - ys[0];\n  let xBinIncr = xs[yBinQty] - xs[0];\n  let [minValue, maxValue] = (0,_utils__WEBPACK_IMPORTED_MODULE_2__.boundedMinMax)(\n    valueField.values,\n    options.color.min,\n    options.color.max,\n    options.filterValues?.le,\n    options.filterValues?.ge\n  );\n  let calcX = options.calculation?.xBuckets;\n  let calcY = options.calculation?.yBuckets;\n  const data = {\n    heatmap: frame,\n    heatmapColors: {\n      palette,\n      values: (0,_utils__WEBPACK_IMPORTED_MODULE_2__.valuesToFills)(valueField.values, palette, minValue, maxValue),\n      minValue,\n      maxValue\n    },\n    exemplars: exemplars?.length ? exemplars : void 0,\n    xBucketSize: xBinIncr,\n    yBucketSize: yBinIncr,\n    xBucketCount: xBinQty,\n    yBucketCount: yBinQty,\n    yLog: calcY?.scale?.log ?? 0,\n    xLog: calcX?.scale?.log ?? 0,\n    xLogSplit: calcX?.scale?.log ? +(calcX?.value ?? \"1\") : 1,\n    yLogSplit: calcY?.scale?.log ? +(calcY?.value ?? \"1\") : 1,\n    // TODO: improve heuristic\n    xLayout: xName === \"xMax\" ? _grafana_schema__WEBPACK_IMPORTED_MODULE_8__.HeatmapCellLayout.le : xName === \"xMin\" ? _grafana_schema__WEBPACK_IMPORTED_MODULE_8__.HeatmapCellLayout.ge : _grafana_schema__WEBPACK_IMPORTED_MODULE_8__.HeatmapCellLayout.unknown,\n    yLayout: yName === \"yMax\" ? _grafana_schema__WEBPACK_IMPORTED_MODULE_8__.HeatmapCellLayout.le : yName === \"yMin\" ? _grafana_schema__WEBPACK_IMPORTED_MODULE_8__.HeatmapCellLayout.ge : _grafana_schema__WEBPACK_IMPORTED_MODULE_8__.HeatmapCellLayout.unknown,\n    display: (v) => (0,_grafana_data__WEBPACK_IMPORTED_MODULE_7__.formattedValueToString)(disp(v))\n  };\n  return data;\n};\nfunction updateFieldDisplay(field, opts, theme) {\n  if (opts?.unit?.length || opts?.decimals != null) {\n    const { unit, decimals } = opts;\n    field.display = void 0;\n    field.config = { ...field.config };\n    if (unit?.length) {\n      field.config.unit = unit;\n    }\n    if (decimals != null) {\n      field.config.decimals = decimals;\n    }\n  }\n  if (!field.display) {\n    field.display = (0,_grafana_data__WEBPACK_IMPORTED_MODULE_9__.getDisplayProcessor)({ field, theme });\n  }\n  return field.display;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./public/app/plugins/panel/heatmap/fields.ts\n");

/***/ }),

/***/ "./public/app/plugins/panel/heatmap/migrations.ts":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   angularToReactHeatmap: () => (/* binding */ angularToReactHeatmap),\n/* harmony export */   heatmapChangedHandler: () => (/* binding */ heatmapChangedHandler),\n/* harmony export */   heatmapMigrationHandler: () => (/* binding */ heatmapMigrationHandler)\n/* harmony export */ });\n/* harmony import */ var _grafana_schema__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(\"./packages/grafana-schema/src/common/common.gen.ts\");\n/* harmony import */ var _palettes__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(\"./public/app/plugins/panel/heatmap/palettes.ts\");\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(\"./public/app/plugins/panel/heatmap/types.ts\");\n\n\n\n\nconst heatmapMigrationHandler = (panel) => {\n  if (Object.keys(panel.options).length === 0) {\n    return heatmapChangedHandler(panel, \"heatmap\", { angular: panel }, panel.fieldConfig);\n  }\n  return panel.options;\n};\nconst heatmapChangedHandler = (panel, prevPluginId, prevOptions, prevFieldConfig) => {\n  if (prevPluginId === \"heatmap\" && prevOptions.angular) {\n    const { fieldConfig, options } = angularToReactHeatmap({\n      ...prevOptions.angular,\n      fieldConfig: prevFieldConfig\n    });\n    panel.fieldConfig = fieldConfig;\n    return options;\n  }\n  if (prevPluginId === \"heatmap-new\") {\n    const { bucketFrame, ...options } = panel.options;\n    if (bucketFrame) {\n      return { ...options, rowsFrame: bucketFrame };\n    }\n    return panel.options;\n  }\n  return {};\n};\nfunction angularToReactHeatmap(angular) {\n  const fieldConfig = {\n    defaults: {},\n    overrides: []\n  };\n  const calculate = angular.dataFormat === \"tsbuckets\" ? false : true;\n  const calculation = {\n    ..._types__WEBPACK_IMPORTED_MODULE_1__.defaultOptions.calculation\n  };\n  const oldYAxis = { logBase: 1, ...angular.yAxis };\n  if (calculate) {\n    if (angular.xBucketSize) {\n      calculation.xBuckets = { mode: _grafana_schema__WEBPACK_IMPORTED_MODULE_2__.HeatmapCalculationMode.Size, value: `${angular.xBucketSize}` };\n    } else if (angular.xBucketNumber) {\n      calculation.xBuckets = { mode: _grafana_schema__WEBPACK_IMPORTED_MODULE_2__.HeatmapCalculationMode.Count, value: `${angular.xBucketNumber}` };\n    }\n    if (angular.yBucketSize) {\n      calculation.yBuckets = { mode: _grafana_schema__WEBPACK_IMPORTED_MODULE_2__.HeatmapCalculationMode.Size, value: `${angular.yBucketSize}` };\n    } else if (angular.xBucketNumber) {\n      calculation.yBuckets = { mode: _grafana_schema__WEBPACK_IMPORTED_MODULE_2__.HeatmapCalculationMode.Count, value: `${angular.yBucketNumber}` };\n    }\n    if (oldYAxis.logBase > 1) {\n      calculation.yBuckets = {\n        mode: _grafana_schema__WEBPACK_IMPORTED_MODULE_2__.HeatmapCalculationMode.Count,\n        value: +oldYAxis.splitFactor > 0 ? `${oldYAxis.splitFactor}` : void 0,\n        scale: {\n          type: _grafana_schema__WEBPACK_IMPORTED_MODULE_2__.ScaleDistribution.Log,\n          log: oldYAxis.logBase\n        }\n      };\n    }\n  }\n  const cellGap = asNumber(angular.cards?.cardPadding, 2);\n  const options = {\n    calculate,\n    calculation,\n    color: {\n      ..._types__WEBPACK_IMPORTED_MODULE_1__.defaultOptions.color,\n      steps: 128\n      // best match with existing colors\n    },\n    cellGap: cellGap ? cellGap : 1,\n    // default to size 1\n    cellRadius: asNumber(angular.cards?.cardRound),\n    // just to keep it\n    yAxis: {\n      axisPlacement: oldYAxis.show === false ? _grafana_schema__WEBPACK_IMPORTED_MODULE_2__.AxisPlacement.Hidden : _grafana_schema__WEBPACK_IMPORTED_MODULE_2__.AxisPlacement.Left,\n      reverse: Boolean(angular.reverseYBuckets),\n      axisWidth: asNumber(oldYAxis.width),\n      min: oldYAxis.min,\n      max: oldYAxis.max,\n      unit: oldYAxis.format,\n      decimals: oldYAxis.decimals\n    },\n    cellValues: {\n      decimals: asNumber(angular.tooltipDecimals)\n    },\n    rowsFrame: {\n      layout: getHeatmapCellLayout(angular.yBucketBound)\n    },\n    legend: {\n      show: Boolean(angular.legend?.show)\n    },\n    showValue: _grafana_schema__WEBPACK_IMPORTED_MODULE_2__.VisibilityMode.Never,\n    tooltip: {\n      show: Boolean(angular.tooltip?.show),\n      yHistogram: Boolean(angular.tooltip?.showHistogram)\n    },\n    exemplars: {\n      ..._types__WEBPACK_IMPORTED_MODULE_1__.defaultOptions.exemplars\n    }\n  };\n  if (angular.hideZeroBuckets) {\n    options.filterValues = { ..._types__WEBPACK_IMPORTED_MODULE_1__.defaultOptions.filterValues };\n  }\n  const color = angular.color ?? {};\n  switch (color?.mode) {\n    case \"spectrum\": {\n      options.color.mode = _types__WEBPACK_IMPORTED_MODULE_1__.HeatmapColorMode.Scheme;\n      const current = color.colorScheme;\n      let scheme = _palettes__WEBPACK_IMPORTED_MODULE_0__.colorSchemes.find((v) => v.name === current);\n      if (!scheme) {\n        scheme = _palettes__WEBPACK_IMPORTED_MODULE_0__.colorSchemes.find((v) => current.indexOf(v.name) >= 0);\n      }\n      options.color.scheme = scheme ? scheme.name : _types__WEBPACK_IMPORTED_MODULE_1__.defaultOptions.color.scheme;\n      break;\n    }\n    case \"opacity\": {\n      options.color.mode = _types__WEBPACK_IMPORTED_MODULE_1__.HeatmapColorMode.Opacity;\n      options.color.scale = color.scale;\n      break;\n    }\n  }\n  options.color.fill = color.cardColor;\n  options.color.min = color.min;\n  options.color.max = color.max;\n  if (typeof color.min === \"number\" && typeof color.max === \"number\" && color.min > color.max) {\n    options.color.min = color.max;\n    options.color.max = color.min;\n    options.color.reverse = true;\n  }\n  return { fieldConfig, options };\n}\nfunction getHeatmapCellLayout(v) {\n  switch (v) {\n    case \"upper\":\n      return _grafana_schema__WEBPACK_IMPORTED_MODULE_2__.HeatmapCellLayout.ge;\n    case \"lower\":\n      return _grafana_schema__WEBPACK_IMPORTED_MODULE_2__.HeatmapCellLayout.le;\n    case \"middle\":\n      return _grafana_schema__WEBPACK_IMPORTED_MODULE_2__.HeatmapCellLayout.unknown;\n  }\n  return _grafana_schema__WEBPACK_IMPORTED_MODULE_2__.HeatmapCellLayout.auto;\n}\nfunction asNumber(v, defaultValue) {\n  if (v == null || v === \"\") {\n    return defaultValue;\n  }\n  const num = +v;\n  return isNaN(num) ? defaultValue : num;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./public/app/plugins/panel/heatmap/migrations.ts\n");

/***/ }),

/***/ "./public/app/plugins/panel/heatmap/module.tsx":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   plugin: () => (/* binding */ plugin)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(\"./.yarn/cache/react-npm-18.2.0-1eae08fee2-88e38092da.zip/node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _grafana_data__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(\"./.yarn/__virtual__/@grafana-data-virtual-0996183232/1/packages/grafana-data/src/panel/PanelPlugin.ts\");\n/* harmony import */ var _grafana_data__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(\"./.yarn/__virtual__/@grafana-data-virtual-0996183232/1/packages/grafana-data/src/types/fieldOverrides.ts\");\n/* harmony import */ var _grafana_data__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(\"./.yarn/__virtual__/@grafana-data-virtual-0996183232/1/packages/grafana-data/src/types/dataFrame.ts\");\n/* harmony import */ var _grafana_data__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(\"./.yarn/__virtual__/@grafana-data-virtual-0996183232/1/packages/grafana-data/src/field/overrides/processors.ts\");\n/* harmony import */ var _grafana_runtime__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(\"./.yarn/__virtual__/@grafana-runtime-virtual-68c57d4c0c/1/packages/grafana-runtime/src/config.ts\");\n/* harmony import */ var _grafana_schema__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(\"./packages/grafana-schema/src/common/common.gen.ts\");\n/* harmony import */ var _grafana_ui_src_options_builder__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(\"./.yarn/__virtual__/@grafana-ui-virtual-d722efae30/1/packages/grafana-ui/src/options/builder/axis.tsx\");\n/* harmony import */ var _grafana_ui_src_options_builder__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(\"./.yarn/__virtual__/@grafana-ui-virtual-d722efae30/1/packages/grafana-ui/src/options/builder/hideSeries.tsx\");\n/* harmony import */ var app_core_components_ColorScale_ColorScale__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(\"./public/app/core/components/ColorScale/ColorScale.tsx\");\n/* harmony import */ var app_features_transformers_calculateHeatmap_editor_helper__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(\"./public/app/features/transformers/calculateHeatmap/editor/helper.ts\");\n/* harmony import */ var app_features_transformers_calculateHeatmap_heatmap__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(\"./public/app/features/transformers/calculateHeatmap/heatmap.ts\");\n/* harmony import */ var _HeatmapPanel__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(\"./public/app/plugins/panel/heatmap/HeatmapPanel.tsx\");\n/* harmony import */ var _fields__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(\"./public/app/plugins/panel/heatmap/fields.ts\");\n/* harmony import */ var _migrations__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(\"./public/app/plugins/panel/heatmap/migrations.ts\");\n/* harmony import */ var _palettes__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(\"./public/app/plugins/panel/heatmap/palettes.ts\");\n/* harmony import */ var _suggestions__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(\"./public/app/plugins/panel/heatmap/suggestions.ts\");\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(\"./public/app/plugins/panel/heatmap/types.ts\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst plugin = new _grafana_data__WEBPACK_IMPORTED_MODULE_10__.PanelPlugin(_HeatmapPanel__WEBPACK_IMPORTED_MODULE_4__.HeatmapPanel).useFieldConfig({\n  disableStandardOptions: Object.values(_grafana_data__WEBPACK_IMPORTED_MODULE_11__.FieldConfigProperty).filter((v) => v !== _grafana_data__WEBPACK_IMPORTED_MODULE_11__.FieldConfigProperty.Links),\n  useCustomConfig: (builder) => {\n    builder.addCustomEditor({\n      id: \"scaleDistribution\",\n      path: \"scaleDistribution\",\n      name: \"Y axis scale\",\n      category: [\"Heatmap\"],\n      editor: _grafana_ui_src_options_builder__WEBPACK_IMPORTED_MODULE_12__.ScaleDistributionEditor,\n      override: _grafana_ui_src_options_builder__WEBPACK_IMPORTED_MODULE_12__.ScaleDistributionEditor,\n      defaultValue: { type: _grafana_schema__WEBPACK_IMPORTED_MODULE_13__.ScaleDistribution.Linear },\n      shouldApply: (f) => f.type === _grafana_data__WEBPACK_IMPORTED_MODULE_14__.FieldType.number,\n      process: _grafana_data__WEBPACK_IMPORTED_MODULE_15__.identityOverrideProcessor,\n      hideFromDefaults: true\n    });\n    (0,_grafana_ui_src_options_builder__WEBPACK_IMPORTED_MODULE_16__.addHideFrom)(builder);\n  }\n}).setPanelChangeHandler(_migrations__WEBPACK_IMPORTED_MODULE_6__.heatmapChangedHandler).setMigrationHandler(_migrations__WEBPACK_IMPORTED_MODULE_6__.heatmapMigrationHandler).setPanelOptions((builder, context) => {\n  const opts = context.options ?? _types__WEBPACK_IMPORTED_MODULE_9__.defaultOptions;\n  let isOrdinalY = false;\n  if (context.data.length > 0) {\n    try {\n      const palette = (0,_palettes__WEBPACK_IMPORTED_MODULE_7__.quantizeScheme)(opts.color, _grafana_runtime__WEBPACK_IMPORTED_MODULE_17__.config.theme2);\n      const v = (0,_fields__WEBPACK_IMPORTED_MODULE_5__.prepareHeatmapData)(context.data, void 0, opts, palette, _grafana_runtime__WEBPACK_IMPORTED_MODULE_17__.config.theme2);\n      isOrdinalY = (0,app_features_transformers_calculateHeatmap_heatmap__WEBPACK_IMPORTED_MODULE_3__.readHeatmapRowsCustomMeta)(v.heatmap).yOrdinalDisplay != null;\n    } catch {\n    }\n  }\n  let category = [\"Heatmap\"];\n  builder.addRadio({\n    path: \"calculate\",\n    name: \"Calculate from data\",\n    defaultValue: _types__WEBPACK_IMPORTED_MODULE_9__.defaultOptions.calculate,\n    category,\n    settings: {\n      options: [\n        { label: \"Yes\", value: true },\n        { label: \"No\", value: false }\n      ]\n    }\n  });\n  if (opts.calculate) {\n    (0,app_features_transformers_calculateHeatmap_editor_helper__WEBPACK_IMPORTED_MODULE_2__.addHeatmapCalculationOptions)(\"calculation.\", builder, opts.calculation, category);\n  }\n  category = [\"Y Axis\"];\n  builder.addRadio({\n    path: \"yAxis.axisPlacement\",\n    name: \"Placement\",\n    defaultValue: _types__WEBPACK_IMPORTED_MODULE_9__.defaultOptions.yAxis.axisPlacement ?? _grafana_schema__WEBPACK_IMPORTED_MODULE_13__.AxisPlacement.Left,\n    category,\n    settings: {\n      options: [\n        { label: \"Left\", value: _grafana_schema__WEBPACK_IMPORTED_MODULE_13__.AxisPlacement.Left },\n        { label: \"Right\", value: _grafana_schema__WEBPACK_IMPORTED_MODULE_13__.AxisPlacement.Right },\n        { label: \"Hidden\", value: _grafana_schema__WEBPACK_IMPORTED_MODULE_13__.AxisPlacement.Hidden }\n      ]\n    }\n  }).addUnitPicker({\n    category,\n    path: \"yAxis.unit\",\n    name: \"Unit\",\n    defaultValue: void 0,\n    settings: {\n      isClearable: true\n    }\n  }).addNumberInput({\n    category,\n    path: \"yAxis.decimals\",\n    name: \"Decimals\",\n    settings: {\n      placeholder: \"Auto\"\n    }\n  });\n  if (!isOrdinalY) {\n    builder.addNumberInput({\n      path: \"yAxis.min\",\n      name: \"Min value\",\n      settings: {\n        placeholder: \"Auto\"\n      },\n      category\n    }).addTextInput({\n      path: \"yAxis.max\",\n      name: \"Max value\",\n      settings: {\n        placeholder: \"Auto\"\n      },\n      category\n    });\n  }\n  builder.addNumberInput({\n    path: \"yAxis.axisWidth\",\n    name: \"Axis width\",\n    defaultValue: _types__WEBPACK_IMPORTED_MODULE_9__.defaultOptions.yAxis.axisWidth,\n    settings: {\n      placeholder: \"Auto\",\n      min: 5\n      // smaller should just be hidden\n    },\n    category\n  }).addTextInput({\n    path: \"yAxis.axisLabel\",\n    name: \"Axis label\",\n    defaultValue: _types__WEBPACK_IMPORTED_MODULE_9__.defaultOptions.yAxis.axisLabel,\n    settings: {\n      placeholder: \"Auto\"\n    },\n    category\n  });\n  if (!opts.calculate) {\n    builder.addRadio({\n      path: \"rowsFrame.layout\",\n      name: \"Tick alignment\",\n      defaultValue: _types__WEBPACK_IMPORTED_MODULE_9__.defaultOptions.rowsFrame?.layout ?? _grafana_schema__WEBPACK_IMPORTED_MODULE_13__.HeatmapCellLayout.auto,\n      category,\n      settings: {\n        options: [\n          { label: \"Auto\", value: _grafana_schema__WEBPACK_IMPORTED_MODULE_13__.HeatmapCellLayout.auto },\n          { label: \"Top (LE)\", value: _grafana_schema__WEBPACK_IMPORTED_MODULE_13__.HeatmapCellLayout.le },\n          { label: \"Middle\", value: _grafana_schema__WEBPACK_IMPORTED_MODULE_13__.HeatmapCellLayout.unknown },\n          { label: \"Bottom (GE)\", value: _grafana_schema__WEBPACK_IMPORTED_MODULE_13__.HeatmapCellLayout.ge }\n        ]\n      }\n    });\n  }\n  builder.addBooleanSwitch({\n    path: \"yAxis.reverse\",\n    name: \"Reverse\",\n    defaultValue: _types__WEBPACK_IMPORTED_MODULE_9__.defaultOptions.yAxis.reverse === true,\n    category\n  });\n  category = [\"Colors\"];\n  builder.addRadio({\n    path: `color.mode`,\n    name: \"Mode\",\n    defaultValue: _types__WEBPACK_IMPORTED_MODULE_9__.defaultOptions.color.mode,\n    category,\n    settings: {\n      options: [\n        { label: \"Scheme\", value: _types__WEBPACK_IMPORTED_MODULE_9__.HeatmapColorMode.Scheme },\n        { label: \"Opacity\", value: _types__WEBPACK_IMPORTED_MODULE_9__.HeatmapColorMode.Opacity }\n      ]\n    }\n  });\n  builder.addColorPicker({\n    path: `color.fill`,\n    name: \"Color\",\n    defaultValue: _types__WEBPACK_IMPORTED_MODULE_9__.defaultOptions.color.fill,\n    category,\n    showIf: (opts2) => opts2.color.mode === _types__WEBPACK_IMPORTED_MODULE_9__.HeatmapColorMode.Opacity\n  });\n  builder.addRadio({\n    path: `color.scale`,\n    name: \"Scale\",\n    defaultValue: _types__WEBPACK_IMPORTED_MODULE_9__.defaultOptions.color.scale,\n    category,\n    settings: {\n      options: [\n        { label: \"Exponential\", value: _types__WEBPACK_IMPORTED_MODULE_9__.HeatmapColorScale.Exponential },\n        { label: \"Linear\", value: _types__WEBPACK_IMPORTED_MODULE_9__.HeatmapColorScale.Linear }\n      ]\n    },\n    showIf: (opts2) => opts2.color.mode === _types__WEBPACK_IMPORTED_MODULE_9__.HeatmapColorMode.Opacity\n  });\n  builder.addSliderInput({\n    path: \"color.exponent\",\n    name: \"Exponent\",\n    defaultValue: _types__WEBPACK_IMPORTED_MODULE_9__.defaultOptions.color.exponent,\n    category,\n    settings: {\n      min: 0.1,\n      // 1 for on/off?\n      max: 2,\n      step: 0.1\n    },\n    showIf: (opts2) => opts2.color.mode === _types__WEBPACK_IMPORTED_MODULE_9__.HeatmapColorMode.Opacity && opts2.color.scale === _types__WEBPACK_IMPORTED_MODULE_9__.HeatmapColorScale.Exponential\n  });\n  builder.addSelect({\n    path: `color.scheme`,\n    name: \"Scheme\",\n    description: \"\",\n    defaultValue: _types__WEBPACK_IMPORTED_MODULE_9__.defaultOptions.color.scheme,\n    category,\n    settings: {\n      options: _palettes__WEBPACK_IMPORTED_MODULE_7__.colorSchemes.map((scheme) => ({\n        value: scheme.name,\n        label: scheme.name\n        //description: 'Set a geometry field based on the results of other fields',\n      }))\n    },\n    showIf: (opts2) => opts2.color.mode !== _types__WEBPACK_IMPORTED_MODULE_9__.HeatmapColorMode.Opacity\n  });\n  builder.addSliderInput({\n    path: \"color.steps\",\n    name: \"Steps\",\n    defaultValue: _types__WEBPACK_IMPORTED_MODULE_9__.defaultOptions.color.steps,\n    category,\n    settings: {\n      min: 2,\n      max: 128,\n      step: 1\n    }\n  }).addBooleanSwitch({\n    path: \"color.reverse\",\n    name: \"Reverse\",\n    defaultValue: _types__WEBPACK_IMPORTED_MODULE_9__.defaultOptions.color.reverse,\n    category\n  }).addCustomEditor({\n    id: \"__scale__\",\n    path: `__scale__`,\n    name: \"\",\n    category,\n    editor: () => {\n      const palette = (0,_palettes__WEBPACK_IMPORTED_MODULE_7__.quantizeScheme)(opts.color, _grafana_runtime__WEBPACK_IMPORTED_MODULE_17__.config.theme2);\n      return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", null, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(app_core_components_ColorScale_ColorScale__WEBPACK_IMPORTED_MODULE_1__.ColorScale, { colorPalette: palette, min: 1, max: 100 }));\n    }\n  });\n  builder.addNumberInput({\n    path: \"color.min\",\n    name: \"Start color scale from value\",\n    defaultValue: _types__WEBPACK_IMPORTED_MODULE_9__.defaultOptions.color.min,\n    settings: {\n      placeholder: \"Auto (min)\"\n    },\n    category\n  }).addNumberInput({\n    path: \"color.max\",\n    name: \"End color scale at value\",\n    defaultValue: _types__WEBPACK_IMPORTED_MODULE_9__.defaultOptions.color.max,\n    settings: {\n      placeholder: \"Auto (max)\"\n    },\n    category\n  });\n  category = [\"Cell display\"];\n  if (!opts.calculate) {\n    builder.addTextInput({\n      path: \"rowsFrame.value\",\n      name: \"Value name\",\n      defaultValue: _types__WEBPACK_IMPORTED_MODULE_9__.defaultOptions.rowsFrame?.value,\n      settings: {\n        placeholder: \"Value\"\n      },\n      category\n    });\n  }\n  builder.addUnitPicker({\n    category,\n    path: \"cellValues.unit\",\n    name: \"Unit\",\n    defaultValue: void 0,\n    settings: {\n      isClearable: true\n    }\n  }).addNumberInput({\n    category,\n    path: \"cellValues.decimals\",\n    name: \"Decimals\",\n    settings: {\n      placeholder: \"Auto\"\n    }\n  });\n  builder.addSliderInput({\n    name: \"Cell gap\",\n    path: \"cellGap\",\n    defaultValue: _types__WEBPACK_IMPORTED_MODULE_9__.defaultOptions.cellGap,\n    category,\n    settings: {\n      min: 0,\n      max: 25\n    }\n  }).addNumberInput({\n    path: \"filterValues.le\",\n    name: \"Hide cells with values <=\",\n    defaultValue: _types__WEBPACK_IMPORTED_MODULE_9__.defaultOptions.filterValues?.le,\n    settings: {\n      placeholder: \"None\"\n    },\n    category\n  }).addNumberInput({\n    path: \"filterValues.ge\",\n    name: \"Hide cells with values >=\",\n    defaultValue: _types__WEBPACK_IMPORTED_MODULE_9__.defaultOptions.filterValues?.ge,\n    settings: {\n      placeholder: \"None\"\n    },\n    category\n  });\n  category = [\"Tooltip\"];\n  builder.addBooleanSwitch({\n    path: \"tooltip.show\",\n    name: \"Show tooltip\",\n    defaultValue: _types__WEBPACK_IMPORTED_MODULE_9__.defaultOptions.tooltip.show,\n    category\n  });\n  builder.addBooleanSwitch({\n    path: \"tooltip.yHistogram\",\n    name: \"Show histogram (Y axis)\",\n    defaultValue: _types__WEBPACK_IMPORTED_MODULE_9__.defaultOptions.tooltip.yHistogram,\n    category,\n    showIf: (opts2) => opts2.tooltip.show\n  });\n  category = [\"Legend\"];\n  builder.addBooleanSwitch({\n    path: \"legend.show\",\n    name: \"Show legend\",\n    defaultValue: _types__WEBPACK_IMPORTED_MODULE_9__.defaultOptions.legend.show,\n    category\n  });\n  category = [\"Exemplars\"];\n  builder.addColorPicker({\n    path: \"exemplars.color\",\n    name: \"Color\",\n    defaultValue: _types__WEBPACK_IMPORTED_MODULE_9__.defaultOptions.exemplars.color,\n    category\n  });\n}).setSuggestionsSupplier(new _suggestions__WEBPACK_IMPORTED_MODULE_8__.HeatmapSuggestionsSupplier());\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./public/app/plugins/panel/heatmap/module.tsx\n");

/***/ }),

/***/ "./public/app/plugins/panel/heatmap/palettes.ts":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   colorSchemes: () => (/* binding */ colorSchemes),\n/* harmony export */   quantizeScheme: () => (/* binding */ quantizeScheme)\n/* harmony export */ });\n/* harmony import */ var d3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(\"./.yarn/cache/d3-npm-7.8.5-5db20a5616-e407e79731.zip/node_modules/d3/src/index.js\");\n/* harmony import */ var d3_scale_chromatic__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(\"./.yarn/cache/d3-scale-chromatic-npm-3.0.0-ca3b48a3cb-a8ce4cb026.zip/node_modules/d3-scale-chromatic/src/index.js\");\n/* harmony import */ var tinycolor2__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(\"./.yarn/cache/tinycolor2-npm-1.6.0-8df41252c6-6df4d07fce.zip/node_modules/tinycolor2/esm/tinycolor.js\");\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(\"./public/app/plugins/panel/heatmap/types.ts\");\n\n\n\n\n\nconst colorSchemes = [\n  // Diverging\n  { name: \"BrBG\", invert: \"always\" },\n  { name: \"PiYG\", invert: \"always\" },\n  { name: \"PRGn\", invert: \"always\" },\n  { name: \"PuOr\", invert: \"always\" },\n  { name: \"RdBu\", invert: \"always\" },\n  { name: \"RdGy\", invert: \"always\" },\n  { name: \"RdYlBu\", invert: \"always\" },\n  { name: \"RdYlGn\", invert: \"always\" },\n  { name: \"Spectral\", invert: \"always\" },\n  // Sequential (Single Hue)\n  { name: \"Blues\", invert: \"dark\" },\n  { name: \"Greens\", invert: \"dark\" },\n  { name: \"Greys\", invert: \"dark\" },\n  { name: \"Oranges\", invert: \"dark\" },\n  { name: \"Purples\", invert: \"dark\" },\n  { name: \"Reds\", invert: \"dark\" },\n  // Sequential (Multi-Hue)\n  { name: \"Turbo\", invert: \"light\" },\n  { name: \"Cividis\", invert: \"light\" },\n  { name: \"Viridis\", invert: \"light\" },\n  { name: \"Magma\", invert: \"light\" },\n  { name: \"Inferno\", invert: \"light\" },\n  { name: \"Plasma\", invert: \"light\" },\n  { name: \"Warm\", invert: \"light\" },\n  { name: \"Cool\", invert: \"light\" },\n  { name: \"Cubehelix\", invert: \"light\", name2: \"CubehelixDefault\" },\n  { name: \"BuGn\", invert: \"dark\" },\n  { name: \"BuPu\", invert: \"dark\" },\n  { name: \"GnBu\", invert: \"dark\" },\n  { name: \"OrRd\", invert: \"dark\" },\n  { name: \"PuBuGn\", invert: \"dark\" },\n  { name: \"PuBu\", invert: \"dark\" },\n  { name: \"PuRd\", invert: \"dark\" },\n  { name: \"RdPu\", invert: \"dark\" },\n  { name: \"YlGnBu\", invert: \"dark\" },\n  { name: \"YlGn\", invert: \"dark\" },\n  { name: \"YlOrBr\", invert: \"dark\" },\n  { name: \"YlOrRd\", invert: \"dark\" },\n  // Cyclical\n  { name: \"Rainbow\", invert: \"always\" },\n  { name: \"Sinebow\", invert: \"always\" }\n];\nconst DEFAULT_SCHEME = colorSchemes.find((scheme) => scheme.name === \"Spectral\");\nfunction quantizeScheme(opts, theme) {\n  const options = { ..._types__WEBPACK_IMPORTED_MODULE_2__.defaultOptions.color, ...opts };\n  const palette = [];\n  const steps = (options.steps ?? 128) - 1;\n  if (opts.mode === _types__WEBPACK_IMPORTED_MODULE_2__.HeatmapColorMode.Opacity) {\n    const fill = (0,tinycolor2__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(theme.visualization.getColorByName(opts.fill)).toPercentageRgb();\n    const scale = options.scale === _types__WEBPACK_IMPORTED_MODULE_2__.HeatmapColorScale.Exponential ? d3__WEBPACK_IMPORTED_MODULE_0__.scalePow().exponent(options.exponent).domain([0, 1]).range([0, 1]) : d3__WEBPACK_IMPORTED_MODULE_0__.scaleLinear().domain([0, 1]).range([0, 1]);\n    for (let i = 0; i <= steps; i++) {\n      fill.a = scale(i / steps);\n      palette.push((0,tinycolor2__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(fill).toString(\"hex8\"));\n    }\n  } else {\n    const scheme = colorSchemes.find((scheme2) => scheme2.name === options.scheme) ?? DEFAULT_SCHEME;\n    let fnName = \"interpolate\" + (scheme.name2 ?? scheme.name);\n    const interpolate = d3_scale_chromatic__WEBPACK_IMPORTED_MODULE_3__[fnName];\n    for (let i = 0; i <= steps; i++) {\n      let rgbStr = interpolate(i / steps);\n      let rgb = rgbStr.indexOf(\"rgb\") === 0 ? \"#\" + [...rgbStr.matchAll(/\\d+/g)].map((v) => (+v[0]).toString(16).padStart(2, \"0\")).join(\"\") : rgbStr;\n      palette.push(rgb);\n    }\n    if (scheme.invert === \"always\" || scheme.invert === \"dark\" && theme.isDark || scheme.invert === \"light\" && theme.isLight) {\n      palette.reverse();\n    }\n    if (opts.reverse) {\n      palette.reverse();\n    }\n  }\n  return palette;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./public/app/plugins/panel/heatmap/palettes.ts\n");

/***/ }),

/***/ "./public/app/plugins/panel/heatmap/panelcfg.gen.ts":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   HeatmapColorMode: () => (/* binding */ HeatmapColorMode),\n/* harmony export */   HeatmapColorScale: () => (/* binding */ HeatmapColorScale),\n/* harmony export */   defaultOptions: () => (/* binding */ defaultOptions)\n/* harmony export */ });\n/* harmony import */ var _grafana_schema__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(\"./packages/grafana-schema/src/common/common.gen.ts\");\n\n\nvar HeatmapColorMode = /* @__PURE__ */ ((HeatmapColorMode2) => {\n  HeatmapColorMode2[\"Opacity\"] = \"opacity\";\n  HeatmapColorMode2[\"Scheme\"] = \"scheme\";\n  return HeatmapColorMode2;\n})(HeatmapColorMode || {});\nvar HeatmapColorScale = /* @__PURE__ */ ((HeatmapColorScale2) => {\n  HeatmapColorScale2[\"Exponential\"] = \"exponential\";\n  HeatmapColorScale2[\"Linear\"] = \"linear\";\n  return HeatmapColorScale2;\n})(HeatmapColorScale || {});\nconst defaultOptions = {\n  calculate: false,\n  cellGap: 1,\n  cellValues: {},\n  color: {\n    /**\n     * mode:     HeatmapColorMode // TODO: fix after remove when https://github.com/grafana/cuetsy/issues/74 is fixed\n     */\n    scheme: \"Oranges\",\n    fill: \"dark-orange\",\n    /**\n     * scale:    HeatmapColorScale // TODO: fix after remove when https://github.com/grafana/cuetsy/issues/74 is fixed\n     */\n    reverse: false,\n    exponent: 0.5,\n    steps: 64\n  },\n  exemplars: {\n    color: \"rgba(255,0,255,0.7)\"\n  },\n  filterValues: {\n    le: 1e-9\n  },\n  legend: {\n    show: true\n  },\n  showValue: _grafana_schema__WEBPACK_IMPORTED_MODULE_0__.VisibilityMode.Auto,\n  tooltip: {\n    show: true,\n    yHistogram: false\n  }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./public/app/plugins/panel/heatmap/panelcfg.gen.ts\n");

/***/ }),

/***/ "./public/app/plugins/panel/heatmap/suggestions.ts":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   HeatmapSuggestionsSupplier: () => (/* binding */ HeatmapSuggestionsSupplier)\n/* harmony export */ });\n/* harmony import */ var _grafana_runtime__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(\"./.yarn/__virtual__/@grafana-runtime-virtual-68c57d4c0c/1/packages/grafana-runtime/src/config.ts\");\n/* harmony import */ var _fields__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(\"./public/app/plugins/panel/heatmap/fields.ts\");\n/* harmony import */ var _palettes__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(\"./public/app/plugins/panel/heatmap/palettes.ts\");\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(\"./public/app/plugins/panel/heatmap/types.ts\");\n\n\n\n\n\nclass HeatmapSuggestionsSupplier {\n  getSuggestionsForData(builder) {\n    const { dataSummary } = builder;\n    if (!builder.data?.series || !dataSummary.hasData || dataSummary.timeFieldCount < 1 || dataSummary.numberFieldCount < 2 || dataSummary.numberFieldCount > 10) {\n      return;\n    }\n    const palette = (0,_palettes__WEBPACK_IMPORTED_MODULE_1__.quantizeScheme)(_types__WEBPACK_IMPORTED_MODULE_2__.defaultOptions.color, _grafana_runtime__WEBPACK_IMPORTED_MODULE_3__.config.theme2);\n    const info = (0,_fields__WEBPACK_IMPORTED_MODULE_0__.prepareHeatmapData)(builder.data.series, void 0, _types__WEBPACK_IMPORTED_MODULE_2__.defaultOptions, palette, _grafana_runtime__WEBPACK_IMPORTED_MODULE_3__.config.theme2);\n    if (!info || info.warning) {\n      return;\n    }\n    builder.getListAppender({\n      name: \"\",\n      pluginId: \"heatmap\",\n      options: {},\n      fieldConfig: {\n        defaults: {\n          custom: {}\n        },\n        overrides: []\n      }\n    });\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9wdWJsaWMvYXBwL3BsdWdpbnMvcGFuZWwvaGVhdG1hcC9zdWdnZXN0aW9ucy50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFDdUI7QUFFWTtBQUNKO0FBQ1M7QUFFakMsTUFBTSwyQkFBMkI7QUFBQSxFQUN0QyxzQkFBc0IsU0FBMEM7QUFDOUQsVUFBTSxFQUFFLFlBQVksSUFBSTtBQUV4QixRQUNFLENBQUMsUUFBUSxNQUFNLFVBQ2YsQ0FBQyxZQUFZLFdBQ2IsWUFBWSxpQkFBaUIsS0FDN0IsWUFBWSxtQkFBbUIsS0FDL0IsWUFBWSxtQkFBbUIsSUFDL0I7QUFDQTtBQUFBLElBQ0Y7QUFFQSxVQUFNLFVBQVUseURBQWMsQ0FBQyxrREFBYyxDQUFDLE9BQU8sb0RBQU0sQ0FBQyxNQUFNO0FBQ2xFLFVBQU0sT0FBTywyREFBa0IsQ0FBQyxRQUFRLEtBQUssUUFBUSxRQUFXLGtEQUFjLEVBQUUsU0FBUyxvREFBTSxDQUFDLE1BQU07QUFDdEcsUUFBSSxDQUFDLFFBQVEsS0FBSyxTQUFTO0FBQ3pCO0FBQUEsSUFDRjtBQUVBLFlBQVEsZ0JBQTZCO0FBQUEsTUFDbkMsTUFBTTtBQUFBLE1BQ04sVUFBVTtBQUFBLE1BQ1YsU0FBUyxDQUFDO0FBQUEsTUFDVixhQUFhO0FBQUEsUUFDWCxVQUFVO0FBQUEsVUFDUixRQUFRLENBQUM7QUFBQSxRQUNYO0FBQUEsUUFDQSxXQUFXLENBQUM7QUFBQSxNQUNkO0FBQUEsSUFDRixDQUFDO0FBQUEsRUFDSDtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZ3JhZmFuYS8uL3B1YmxpYy9hcHAvcGx1Z2lucy9wYW5lbC9oZWF0bWFwL3N1Z2dlc3Rpb25zLnRzPzNkNjciXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVmlzdWFsaXphdGlvblN1Z2dlc3Rpb25zQnVpbGRlciB9IGZyb20gJ0BncmFmYW5hL2RhdGEnO1xuaW1wb3J0IHsgY29uZmlnIH0gZnJvbSAnQGdyYWZhbmEvcnVudGltZSc7XG5cbmltcG9ydCB7IHByZXBhcmVIZWF0bWFwRGF0YSB9IGZyb20gJy4vZmllbGRzJztcbmltcG9ydCB7IHF1YW50aXplU2NoZW1lIH0gZnJvbSAnLi9wYWxldHRlcyc7XG5pbXBvcnQgeyBPcHRpb25zLCBkZWZhdWx0T3B0aW9ucyB9IGZyb20gJy4vdHlwZXMnO1xuXG5leHBvcnQgY2xhc3MgSGVhdG1hcFN1Z2dlc3Rpb25zU3VwcGxpZXIge1xuICBnZXRTdWdnZXN0aW9uc0ZvckRhdGEoYnVpbGRlcjogVmlzdWFsaXphdGlvblN1Z2dlc3Rpb25zQnVpbGRlcikge1xuICAgIGNvbnN0IHsgZGF0YVN1bW1hcnkgfSA9IGJ1aWxkZXI7XG5cbiAgICBpZiAoXG4gICAgICAhYnVpbGRlci5kYXRhPy5zZXJpZXMgfHxcbiAgICAgICFkYXRhU3VtbWFyeS5oYXNEYXRhIHx8XG4gICAgICBkYXRhU3VtbWFyeS50aW1lRmllbGRDb3VudCA8IDEgfHxcbiAgICAgIGRhdGFTdW1tYXJ5Lm51bWJlckZpZWxkQ291bnQgPCAyIHx8XG4gICAgICBkYXRhU3VtbWFyeS5udW1iZXJGaWVsZENvdW50ID4gMTBcbiAgICApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBwYWxldHRlID0gcXVhbnRpemVTY2hlbWUoZGVmYXVsdE9wdGlvbnMuY29sb3IsIGNvbmZpZy50aGVtZTIpO1xuICAgIGNvbnN0IGluZm8gPSBwcmVwYXJlSGVhdG1hcERhdGEoYnVpbGRlci5kYXRhLnNlcmllcywgdW5kZWZpbmVkLCBkZWZhdWx0T3B0aW9ucywgcGFsZXR0ZSwgY29uZmlnLnRoZW1lMik7XG4gICAgaWYgKCFpbmZvIHx8IGluZm8ud2FybmluZykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGJ1aWxkZXIuZ2V0TGlzdEFwcGVuZGVyPE9wdGlvbnMsIHt9Pih7XG4gICAgICBuYW1lOiAnJyxcbiAgICAgIHBsdWdpbklkOiAnaGVhdG1hcCcsXG4gICAgICBvcHRpb25zOiB7fSxcbiAgICAgIGZpZWxkQ29uZmlnOiB7XG4gICAgICAgIGRlZmF1bHRzOiB7XG4gICAgICAgICAgY3VzdG9tOiB7fSxcbiAgICAgICAgfSxcbiAgICAgICAgb3ZlcnJpZGVzOiBbXSxcbiAgICAgIH0sXG4gICAgfSk7XG4gIH1cbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./public/app/plugins/panel/heatmap/suggestions.ts\n");

/***/ }),

/***/ "./public/app/plugins/panel/heatmap/types.ts":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   HeatmapColorMode: () => (/* reexport safe */ _panelcfg_gen__WEBPACK_IMPORTED_MODULE_0__.HeatmapColorMode),\n/* harmony export */   HeatmapColorScale: () => (/* reexport safe */ _panelcfg_gen__WEBPACK_IMPORTED_MODULE_0__.HeatmapColorScale),\n/* harmony export */   defaultOptions: () => (/* binding */ defaultOptions)\n/* harmony export */ });\n/* harmony import */ var _panelcfg_gen__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(\"./public/app/plugins/panel/heatmap/panelcfg.gen.ts\");\n/* harmony import */ var _grafana_schema__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(\"./packages/grafana-schema/src/common/common.gen.ts\");\n\n\n\n\nconst defaultOptions = {\n  ..._panelcfg_gen__WEBPACK_IMPORTED_MODULE_0__.defaultOptions,\n  color: { ..._panelcfg_gen__WEBPACK_IMPORTED_MODULE_0__.defaultOptions.color, mode: _panelcfg_gen__WEBPACK_IMPORTED_MODULE_0__.HeatmapColorMode.Scheme, scale: _panelcfg_gen__WEBPACK_IMPORTED_MODULE_0__.HeatmapColorScale.Exponential },\n  yAxis: { ..._panelcfg_gen__WEBPACK_IMPORTED_MODULE_0__.defaultOptions.yAxis, axisPlacement: _grafana_schema__WEBPACK_IMPORTED_MODULE_1__.AxisPlacement.Left },\n  rowsFrame: { ..._panelcfg_gen__WEBPACK_IMPORTED_MODULE_0__.defaultOptions.rowsFrame, layout: _grafana_schema__WEBPACK_IMPORTED_MODULE_1__.HeatmapCellLayout.auto }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9wdWJsaWMvYXBwL3BsdWdpbnMvcGFuZWwvaGVhdG1hcC90eXBlcy50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBYztBQUVtQztBQUVpRDtBQUUzRixNQUFNLGlCQUFpQjtBQUFBLEVBQzVCLEdBQUcseURBQWlCO0FBQWpCLEVBQ0gsT0FBTyxFQUFFLEdBQUcseURBQWlCLENBQUMsT0FBTyxNQUFNLDJEQUFnQixDQUFDLFFBQVEsT0FBTyw0REFBaUIsQ0FBQyxZQUFZO0FBQUEsRUFDekcsT0FBTyxFQUFFLEdBQUcseURBQWlCLENBQUMsT0FBTyxlQUFlLDBEQUFhLENBQUMsS0FBSztBQUFBLEVBQ3ZFLFdBQVcsRUFBRSxHQUFHLHlEQUFpQixDQUFDLFdBQVcsUUFBUSw4REFBaUIsQ0FBQyxLQUFLO0FBQzlFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZ3JhZmFuYS8uL3B1YmxpYy9hcHAvcGx1Z2lucy9wYW5lbC9oZWF0bWFwL3R5cGVzLnRzPzk0MGUiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0ICogZnJvbSAnLi9wYW5lbGNmZy5nZW4nO1xuXG5pbXBvcnQgeyBBeGlzUGxhY2VtZW50LCBIZWF0bWFwQ2VsbExheW91dCB9IGZyb20gJ0BncmFmYW5hL3NjaGVtYSc7XG5cbmltcG9ydCB7IGRlZmF1bHRPcHRpb25zIGFzIGRlZmF1bHRPcHRpb25zR2VuLCBIZWF0bWFwQ29sb3JNb2RlLCBIZWF0bWFwQ29sb3JTY2FsZSwgT3B0aW9ucyB9IGZyb20gJy4vcGFuZWxjZmcuZ2VuJztcblxuZXhwb3J0IGNvbnN0IGRlZmF1bHRPcHRpb25zID0ge1xuICAuLi5kZWZhdWx0T3B0aW9uc0dlbixcbiAgY29sb3I6IHsgLi4uZGVmYXVsdE9wdGlvbnNHZW4uY29sb3IsIG1vZGU6IEhlYXRtYXBDb2xvck1vZGUuU2NoZW1lLCBzY2FsZTogSGVhdG1hcENvbG9yU2NhbGUuRXhwb25lbnRpYWwgfSxcbiAgeUF4aXM6IHsgLi4uZGVmYXVsdE9wdGlvbnNHZW4ueUF4aXMsIGF4aXNQbGFjZW1lbnQ6IEF4aXNQbGFjZW1lbnQuTGVmdCB9LFxuICByb3dzRnJhbWU6IHsgLi4uZGVmYXVsdE9wdGlvbnNHZW4ucm93c0ZyYW1lLCBsYXlvdXQ6IEhlYXRtYXBDZWxsTGF5b3V0LmF1dG8gfSxcbn0gYXMgT3B0aW9ucztcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./public/app/plugins/panel/heatmap/types.ts\n");

/***/ }),

/***/ "./public/app/plugins/panel/heatmap/utils.ts":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   boundedMinMax: () => (/* binding */ boundedMinMax),\n/* harmony export */   heatmapPathsDense: () => (/* binding */ heatmapPathsDense),\n/* harmony export */   heatmapPathsPoints: () => (/* binding */ heatmapPathsPoints),\n/* harmony export */   heatmapPathsSparse: () => (/* binding */ heatmapPathsSparse),\n/* harmony export */   prepConfig: () => (/* binding */ prepConfig),\n/* harmony export */   valuesToFills: () => (/* binding */ valuesToFills)\n/* harmony export */ });\n/* harmony import */ var uplot__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(\"./.yarn/cache/uplot-npm-1.6.24-51171f5ab7-253e389dc6.zip/node_modules/uplot/dist/uPlot.esm.js\");\n/* harmony import */ var _grafana_data__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(\"./.yarn/__virtual__/@grafana-data-virtual-0996183232/1/packages/grafana-data/src/types/dataFrame.ts\");\n/* harmony import */ var _grafana_data__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(\"./.yarn/__virtual__/@grafana-data-virtual-0996183232/1/packages/grafana-data/src/events/common.ts\");\n/* harmony import */ var _grafana_data__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(\"./.yarn/__virtual__/@grafana-data-virtual-0996183232/1/packages/grafana-data/src/types/dataFrameTypes.ts\");\n/* harmony import */ var _grafana_data__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(\"./.yarn/__virtual__/@grafana-data-virtual-0996183232/1/packages/grafana-data/src/transformations/transformers/histogram.ts\");\n/* harmony import */ var _grafana_data__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(\"./.yarn/__virtual__/@grafana-data-virtual-0996183232/1/packages/grafana-data/src/valueFormats/valueFormats.ts\");\n/* harmony import */ var _grafana_data__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(\"./.yarn/__virtual__/@grafana-data-virtual-0996183232/1/packages/grafana-data/src/types/dashboard.ts\");\n/* harmony import */ var _grafana_schema__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(\"./packages/grafana-schema/src/common/common.gen.ts\");\n/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(\"./.yarn/__virtual__/@grafana-ui-virtual-d722efae30/1/packages/grafana-ui/src/components/uPlot/config/UPlotConfigBuilder.ts\");\n/* harmony import */ var app_features_transformers_calculateHeatmap_heatmap__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(\"./public/app/features/transformers/calculateHeatmap/heatmap.ts\");\n/* harmony import */ var _barchart_quadtree__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(\"./public/app/plugins/panel/barchart/quadtree.ts\");\n\n\n\n\n\n\n\nfunction prepConfig(opts) {\n  const {\n    dataRef,\n    theme,\n    eventBus,\n    onhover,\n    onclick,\n    onzoom,\n    isToolTipOpen,\n    timeZone,\n    getTimeRange,\n    cellGap,\n    hideLE,\n    hideGE,\n    yAxisConfig,\n    ySizeDivisor,\n    sync,\n    eventsScope = \"__global_\"\n  } = opts;\n  const xScaleKey = \"x\";\n  let xScaleUnit = \"time\";\n  let isTime = true;\n  if (dataRef.current?.heatmap?.fields[0].type !== _grafana_data__WEBPACK_IMPORTED_MODULE_3__.FieldType.time) {\n    xScaleUnit = dataRef.current?.heatmap?.fields[0].config?.unit ?? \"x\";\n    isTime = false;\n  }\n  const pxRatio = devicePixelRatio;\n  let heatmapType = dataRef.current?.heatmap?.meta?.type;\n  const exemplarFillColor = theme.visualization.getColorByName(opts.exemplarColor);\n  let qt;\n  let hRect;\n  let builder = new _grafana_ui__WEBPACK_IMPORTED_MODULE_4__.UPlotConfigBuilder(timeZone);\n  let rect;\n  builder.addHook(\"init\", (u) => {\n    u.root.querySelectorAll(\".u-cursor-pt\").forEach((el) => {\n      Object.assign(el.style, {\n        borderRadius: \"0\",\n        border: \"1px solid white\",\n        background: \"transparent\"\n      });\n    });\n    onclick && u.over.addEventListener(\n      \"mouseup\",\n      (e) => {\n        let isDragging = u.cursor.drag._x || u.cursor.drag._y;\n        if (!isDragging) {\n          onclick(e);\n        }\n      },\n      true\n    );\n  });\n  onzoom && builder.addHook(\"setSelect\", (u) => {\n    onzoom({\n      xMin: u.posToVal(u.select.left, xScaleKey),\n      xMax: u.posToVal(u.select.left + u.select.width, xScaleKey)\n    });\n    u.setSelect({ left: 0, top: 0, width: 0, height: 0 }, false);\n  });\n  if (isTime) {\n    builder.addHook(\"setData\", (u) => {\n      let { min: xMin, max: xMax } = u.scales.x;\n      let min = getTimeRange().from.valueOf();\n      let max = getTimeRange().to.valueOf();\n      if (xMin !== min || xMax !== max) {\n        queueMicrotask(() => {\n          u.setScale(xScaleKey, { min, max });\n        });\n      }\n    });\n  }\n  builder.addHook(\"syncRect\", (u, r) => {\n    rect = r;\n  });\n  const payload = {\n    point: {\n      [xScaleUnit]: null\n    },\n    data: dataRef.current?.heatmap\n  };\n  const hoverEvent = new _grafana_data__WEBPACK_IMPORTED_MODULE_5__.DataHoverEvent(payload);\n  let pendingOnleave;\n  onhover && builder.addHook(\"setLegend\", (u) => {\n    if (u.cursor.idxs != null) {\n      for (let i = 0; i < u.cursor.idxs.length; i++) {\n        const sel = u.cursor.idxs[i];\n        if (sel != null) {\n          const { left, top } = u.cursor;\n          payload.rowIndex = sel;\n          payload.point[xScaleUnit] = u.posToVal(left, xScaleKey);\n          eventBus.publish(hoverEvent);\n          if (!isToolTipOpen.current) {\n            if (pendingOnleave) {\n              clearTimeout(pendingOnleave);\n              pendingOnleave = 0;\n            }\n            onhover({\n              seriesIdx: i,\n              dataIdx: sel,\n              pageX: rect.left + left,\n              pageY: rect.top + top\n            });\n          }\n          return;\n        }\n      }\n    }\n    if (!isToolTipOpen.current) {\n      if (!pendingOnleave) {\n        pendingOnleave = setTimeout(() => {\n          onhover(null);\n          payload.rowIndex = void 0;\n          payload.point[xScaleUnit] = null;\n          eventBus.publish(hoverEvent);\n        }, 100);\n      }\n    }\n  });\n  builder.addHook(\"drawClear\", (u) => {\n    qt = qt || new _barchart_quadtree__WEBPACK_IMPORTED_MODULE_2__.Quadtree(0, 0, u.bbox.width, u.bbox.height);\n    qt.clear();\n    u.series.forEach((s, i) => {\n      if (i > 0) {\n        s._paths = null;\n      }\n    });\n  });\n  builder.setMode(2);\n  builder.addScale({\n    scaleKey: xScaleKey,\n    isTime,\n    orientation: _grafana_schema__WEBPACK_IMPORTED_MODULE_6__.ScaleOrientation.Horizontal,\n    direction: _grafana_schema__WEBPACK_IMPORTED_MODULE_6__.ScaleDirection.Right,\n    // TODO: expand by x bucket size and layout\n    range: (u, dataMin, dataMax) => {\n      if (isTime) {\n        return [getTimeRange().from.valueOf(), getTimeRange().to.valueOf()];\n      } else {\n        if (dataRef.current?.xLayout === _grafana_schema__WEBPACK_IMPORTED_MODULE_6__.HeatmapCellLayout.le) {\n          return [dataMin - dataRef.current?.xBucketSize, dataMax];\n        } else if (dataRef.current?.xLayout === _grafana_schema__WEBPACK_IMPORTED_MODULE_6__.HeatmapCellLayout.ge) {\n          return [dataMin, dataMax + dataRef.current?.xBucketSize];\n        } else {\n          let offset = dataRef.current?.xBucketSize / 2;\n          return [dataMin - offset, dataMax + offset];\n        }\n      }\n    }\n  });\n  let incrs;\n  if (!isTime) {\n    incrs = [];\n    for (let i = 0; i < 10; i++) {\n      incrs.push(i * dataRef.current?.xBucketSize);\n    }\n  }\n  builder.addAxis({\n    scaleKey: xScaleKey,\n    placement: _grafana_schema__WEBPACK_IMPORTED_MODULE_6__.AxisPlacement.Bottom,\n    incrs,\n    isTime,\n    theme,\n    timeZone\n  });\n  const yField = dataRef.current?.heatmap?.fields[1];\n  if (!yField) {\n    return builder;\n  }\n  const yFieldConfig = yField.config?.custom;\n  const yScale = yFieldConfig?.scaleDistribution ?? { type: _grafana_schema__WEBPACK_IMPORTED_MODULE_6__.ScaleDistribution.Linear };\n  const yAxisReverse = Boolean(yAxisConfig.reverse);\n  const isSparseHeatmap = heatmapType === _grafana_data__WEBPACK_IMPORTED_MODULE_7__.DataFrameType.HeatmapCells && !(0,app_features_transformers_calculateHeatmap_heatmap__WEBPACK_IMPORTED_MODULE_1__.isHeatmapCellsDense)(dataRef.current?.heatmap);\n  const shouldUseLogScale = yScale.type !== _grafana_schema__WEBPACK_IMPORTED_MODULE_6__.ScaleDistribution.Linear || isSparseHeatmap;\n  const isOrdinalY = (0,app_features_transformers_calculateHeatmap_heatmap__WEBPACK_IMPORTED_MODULE_1__.readHeatmapRowsCustomMeta)(dataRef.current?.heatmap).yOrdinalDisplay != null;\n  const yScaleKey = \"y_\" + (Math.random() + 1).toString(36).substring(7);\n  builder.addScale({\n    scaleKey: yScaleKey,\n    isTime: false,\n    // distribution: ScaleDistribution.Ordinal, // does not work with facets/scatter yet\n    orientation: _grafana_schema__WEBPACK_IMPORTED_MODULE_6__.ScaleOrientation.Vertical,\n    direction: yAxisReverse ? _grafana_schema__WEBPACK_IMPORTED_MODULE_6__.ScaleDirection.Down : _grafana_schema__WEBPACK_IMPORTED_MODULE_6__.ScaleDirection.Up,\n    // should be tweakable manually\n    distribution: shouldUseLogScale ? _grafana_schema__WEBPACK_IMPORTED_MODULE_6__.ScaleDistribution.Log : _grafana_schema__WEBPACK_IMPORTED_MODULE_6__.ScaleDistribution.Linear,\n    log: yScale.log ?? 2,\n    range: (\n      // sparse already accounts for le/ge by explicit yMin & yMax cell bounds, so no need to expand y range\n      isSparseHeatmap ? (u, dataMin, dataMax) => {\n        let scaleMin, scaleMax;\n        [scaleMin, scaleMax] = shouldUseLogScale ? uplot__WEBPACK_IMPORTED_MODULE_0__[\"default\"].rangeLog(dataMin, dataMax, yScale.log ?? 2, true) : [dataMin, dataMax];\n        if (shouldUseLogScale && !isOrdinalY) {\n          let yExp = u.scales[yScaleKey].log;\n          let log = yExp === 2 ? Math.log2 : Math.log10;\n          let { min: explicitMin, max: explicitMax } = yAxisConfig;\n          if (explicitMin != null && explicitMin > 0) {\n            let minLog = log(explicitMin);\n            scaleMin = yExp ** (0,_grafana_data__WEBPACK_IMPORTED_MODULE_8__.incrRoundDn)(minLog, 1);\n          }\n          if (explicitMax != null && explicitMax > 0) {\n            let maxLog = log(explicitMax);\n            scaleMax = yExp ** (0,_grafana_data__WEBPACK_IMPORTED_MODULE_8__.incrRoundUp)(maxLog, 1);\n          }\n        }\n        return [scaleMin, scaleMax];\n      } : (\n        // dense and ordinal only have one of yMin|yMax|y, so expand range by one cell in the direction of le/ge/unknown\n        (u, dataMin, dataMax) => {\n          let scaleMin = dataMin, scaleMax = dataMax;\n          let { min: explicitMin, max: explicitMax } = yAxisConfig;\n          if (shouldUseLogScale) {\n            let yExp = u.scales[yScaleKey].log;\n            let minExpanded = false;\n            let maxExpanded = false;\n            let log = yExp === 2 ? Math.log2 : Math.log10;\n            if (ySizeDivisor !== 1) {\n              let minLog = log(dataMin);\n              let maxLog = log(dataMax);\n              if (!Number.isInteger(minLog)) {\n                scaleMin = yExp ** (0,_grafana_data__WEBPACK_IMPORTED_MODULE_8__.incrRoundDn)(minLog, 1);\n                minExpanded = true;\n              }\n              if (!Number.isInteger(maxLog)) {\n                scaleMax = yExp ** (0,_grafana_data__WEBPACK_IMPORTED_MODULE_8__.incrRoundUp)(maxLog, 1);\n                maxExpanded = true;\n              }\n            }\n            if (dataRef.current?.yLayout === _grafana_schema__WEBPACK_IMPORTED_MODULE_6__.HeatmapCellLayout.le) {\n              if (!minExpanded) {\n                scaleMin /= yExp;\n              }\n            } else if (dataRef.current?.yLayout === _grafana_schema__WEBPACK_IMPORTED_MODULE_6__.HeatmapCellLayout.ge) {\n              if (!maxExpanded) {\n                scaleMax *= yExp;\n              }\n            } else {\n              scaleMin /= yExp / 2;\n              scaleMax *= yExp / 2;\n            }\n            if (!isOrdinalY) {\n              if (explicitMin != null && explicitMin > 0) {\n                let minLog = log(explicitMin);\n                scaleMin = yExp ** (0,_grafana_data__WEBPACK_IMPORTED_MODULE_8__.incrRoundDn)(minLog, 1);\n              }\n              if (explicitMax != null && explicitMax > 0) {\n                let maxLog = log(explicitMax);\n                scaleMax = yExp ** (0,_grafana_data__WEBPACK_IMPORTED_MODULE_8__.incrRoundUp)(maxLog, 1);\n              }\n            }\n          } else {\n            let bucketSize = dataRef.current?.yBucketSize;\n            if (bucketSize === 0) {\n              bucketSize = 1;\n            }\n            if (bucketSize) {\n              if (dataRef.current?.yLayout === _grafana_schema__WEBPACK_IMPORTED_MODULE_6__.HeatmapCellLayout.le) {\n                scaleMin -= bucketSize;\n              } else if (dataRef.current?.yLayout === _grafana_schema__WEBPACK_IMPORTED_MODULE_6__.HeatmapCellLayout.ge) {\n                scaleMax += bucketSize;\n              } else {\n                scaleMin -= bucketSize / 2;\n                scaleMax += bucketSize / 2;\n              }\n            } else {\n            }\n            if (!isOrdinalY) {\n              scaleMin = explicitMin ?? scaleMin;\n              scaleMax = explicitMax ?? scaleMax;\n            }\n          }\n          return [scaleMin, scaleMax];\n        }\n      )\n    )\n  });\n  const dispY = yField.display ?? (0,_grafana_data__WEBPACK_IMPORTED_MODULE_9__.getValueFormat)(\"short\");\n  builder.addAxis({\n    scaleKey: yScaleKey,\n    show: yAxisConfig.axisPlacement !== _grafana_schema__WEBPACK_IMPORTED_MODULE_6__.AxisPlacement.Hidden,\n    placement: yAxisConfig.axisPlacement || _grafana_schema__WEBPACK_IMPORTED_MODULE_6__.AxisPlacement.Left,\n    size: yAxisConfig.axisWidth || null,\n    label: yAxisConfig.axisLabel,\n    theme,\n    formatValue: (v, decimals) => (0,_grafana_data__WEBPACK_IMPORTED_MODULE_9__.formattedValueToString)(dispY(v, decimals)),\n    splits: isOrdinalY ? (self) => {\n      const meta = (0,app_features_transformers_calculateHeatmap_heatmap__WEBPACK_IMPORTED_MODULE_1__.readHeatmapRowsCustomMeta)(dataRef.current?.heatmap);\n      if (!meta.yOrdinalDisplay) {\n        return [0, 1];\n      }\n      let splits = meta.yOrdinalDisplay.map((v, idx) => idx);\n      switch (dataRef.current?.yLayout) {\n        case _grafana_schema__WEBPACK_IMPORTED_MODULE_6__.HeatmapCellLayout.le:\n          splits.unshift(-1);\n          break;\n        case _grafana_schema__WEBPACK_IMPORTED_MODULE_6__.HeatmapCellLayout.ge:\n          splits.push(splits.length);\n          break;\n      }\n      if (self.height < 60) {\n        splits = [splits[0], splits[splits.length - 1]];\n      } else {\n        while (splits.length > 3 && (self.height - 15) / splits.length < 10) {\n          splits = splits.filter((v, idx) => idx % 2 === 0);\n        }\n      }\n      return splits;\n    } : void 0,\n    values: isOrdinalY ? (self, splits) => {\n      const meta = (0,app_features_transformers_calculateHeatmap_heatmap__WEBPACK_IMPORTED_MODULE_1__.readHeatmapRowsCustomMeta)(dataRef.current?.heatmap);\n      if (meta.yOrdinalDisplay) {\n        return splits.map(\n          (v) => v < 0 ? meta.yMinDisplay ?? \"\" : meta.yOrdinalDisplay[v] ?? \"\"\n        );\n      }\n      return splits;\n    } : void 0\n  });\n  const pathBuilder = isSparseHeatmap ? heatmapPathsSparse : heatmapPathsDense;\n  builder.addSeries({\n    facets: [\n      {\n        scale: xScaleKey,\n        auto: true,\n        sorted: 1\n      },\n      {\n        scale: yScaleKey,\n        auto: true\n      }\n    ],\n    pathBuilder: pathBuilder({\n      each: (u, seriesIdx, dataIdx, x, y, xSize, ySize) => {\n        qt.add({\n          x: x - u.bbox.left,\n          y: y - u.bbox.top,\n          w: xSize,\n          h: ySize,\n          sidx: seriesIdx,\n          didx: dataIdx\n        });\n      },\n      gap: cellGap,\n      hideLE,\n      hideGE,\n      xAlign: dataRef.current?.xLayout === _grafana_schema__WEBPACK_IMPORTED_MODULE_6__.HeatmapCellLayout.le ? -1 : dataRef.current?.xLayout === _grafana_schema__WEBPACK_IMPORTED_MODULE_6__.HeatmapCellLayout.ge ? 1 : 0,\n      yAlign: (dataRef.current?.yLayout === _grafana_schema__WEBPACK_IMPORTED_MODULE_6__.HeatmapCellLayout.le ? -1 : dataRef.current?.yLayout === _grafana_schema__WEBPACK_IMPORTED_MODULE_6__.HeatmapCellLayout.ge ? 1 : 0) * (yAxisReverse ? -1 : 1),\n      ySizeDivisor,\n      disp: {\n        fill: {\n          values: (u, seriesIdx) => dataRef.current?.heatmapColors?.values,\n          index: dataRef.current?.heatmapColors?.palette\n        }\n      }\n    }),\n    theme,\n    scaleKey: \"\"\n    // facets' scales used (above)\n  });\n  builder.addSeries({\n    facets: [\n      {\n        scale: xScaleKey,\n        auto: true,\n        sorted: 1\n      },\n      {\n        scale: yScaleKey,\n        auto: true\n      }\n    ],\n    pathBuilder: heatmapPathsPoints(\n      {\n        each: (u, seriesIdx, dataIdx, x, y, xSize, ySize) => {\n          qt.add({\n            x: x - u.bbox.left,\n            y: y - u.bbox.top,\n            w: xSize,\n            h: ySize,\n            sidx: seriesIdx,\n            didx: dataIdx\n          });\n        }\n      },\n      exemplarFillColor\n    ),\n    theme,\n    scaleKey: \"\"\n    // facets' scales used (above)\n  });\n  const cursor = {\n    drag: {\n      x: true,\n      y: false,\n      setScale: false\n    },\n    dataIdx: (u, seriesIdx) => {\n      if (seriesIdx === 1) {\n        hRect = null;\n        let cx = u.cursor.left * pxRatio;\n        let cy = u.cursor.top * pxRatio;\n        qt.get(cx, cy, 1, 1, (o) => {\n          if ((0,_barchart_quadtree__WEBPACK_IMPORTED_MODULE_2__.pointWithin)(cx, cy, o.x, o.y, o.x + o.w, o.y + o.h)) {\n            hRect = o;\n          }\n        });\n      }\n      return hRect && seriesIdx === hRect.sidx ? hRect.didx : null;\n    },\n    points: {\n      fill: \"rgba(255,255,255, 0.3)\",\n      bbox: (u, seriesIdx) => {\n        let isHovered = hRect && seriesIdx === hRect.sidx;\n        return {\n          left: isHovered ? hRect.x / pxRatio : -10,\n          top: isHovered ? hRect.y / pxRatio : -10,\n          width: isHovered ? hRect.w / pxRatio : 0,\n          height: isHovered ? hRect.h / pxRatio : 0\n        };\n      }\n    }\n  };\n  if (sync && sync() !== _grafana_data__WEBPACK_IMPORTED_MODULE_10__.DashboardCursorSync.Off) {\n    cursor.sync = {\n      key: eventsScope,\n      scales: [xScaleKey, yScaleKey],\n      filters: {\n        pub: (type, src, x, y, w, h, dataIdx) => {\n          if (x < 0) {\n            payload.point[xScaleUnit] = null;\n            eventBus.publish(new _grafana_data__WEBPACK_IMPORTED_MODULE_5__.DataHoverClearEvent());\n          } else {\n            payload.point[xScaleUnit] = src.posToVal(x, xScaleKey);\n            eventBus.publish(hoverEvent);\n          }\n          return true;\n        }\n      }\n    };\n    builder.setSync();\n  }\n  builder.setCursor(cursor);\n  return builder;\n}\nconst CRISP_EDGES_GAP_MIN = 4;\nfunction heatmapPathsDense(opts) {\n  const { disp, each, gap = 1, hideLE = -Infinity, hideGE = Infinity, xAlign = 1, yAlign = 1, ySizeDivisor = 1 } = opts;\n  const pxRatio = devicePixelRatio;\n  const round = gap >= CRISP_EDGES_GAP_MIN ? Math.round : (v) => v;\n  const cellGap = Math.round(gap * pxRatio);\n  return (u, seriesIdx) => {\n    uplot__WEBPACK_IMPORTED_MODULE_0__[\"default\"].orient(\n      u,\n      seriesIdx,\n      (series, dataX, dataY, scaleX, scaleY, valToPosX, valToPosY, xOff, yOff, xDim, yDim, moveTo, lineTo, rect, arc) => {\n        let d = u.data[seriesIdx];\n        const xs = d[0];\n        const ys = d[1];\n        const counts = d[2];\n        const dlen = xs.length;\n        let fills = disp.fill.values(u, seriesIdx);\n        let fillPalette = disp.fill.index ?? [...new Set(fills)];\n        let fillPaths = fillPalette.map((color) => new Path2D());\n        let yBinQty = dlen - ys.lastIndexOf(ys[0]);\n        let xBinQty = dlen / yBinQty;\n        let yBinIncr = ys[1] - ys[0] || scaleY.max - scaleY.min;\n        let xBinIncr = xs[yBinQty] - xs[0];\n        let xSize;\n        let ySize;\n        if (scaleX.distr === 3) {\n          xSize = Math.abs(valToPosX(xs[0] * scaleX.log, scaleX, xDim, xOff) - valToPosX(xs[0], scaleX, xDim, xOff));\n        } else {\n          xSize = Math.abs(valToPosX(xBinIncr, scaleX, xDim, xOff) - valToPosX(0, scaleX, xDim, xOff));\n        }\n        if (scaleY.distr === 3) {\n          ySize = Math.abs(valToPosY(ys[0] * scaleY.log, scaleY, yDim, yOff) - valToPosY(ys[0], scaleY, yDim, yOff)) / ySizeDivisor;\n        } else {\n          ySize = Math.abs(valToPosY(yBinIncr, scaleY, yDim, yOff) - valToPosY(0, scaleY, yDim, yOff)) / ySizeDivisor;\n        }\n        xSize = Math.max(1, round(xSize - cellGap));\n        ySize = Math.max(1, round(ySize - cellGap));\n        let xOffset = xAlign === -1 ? -xSize : xAlign === 0 ? -xSize / 2 : 0;\n        let yOffset = yAlign === 1 ? -ySize : yAlign === 0 ? -ySize / 2 : 0;\n        let cys = ys.slice(0, yBinQty).map((y) => round(valToPosY(y, scaleY, yDim, yOff) + yOffset));\n        let cxs = Array.from(\n          { length: xBinQty },\n          (v, i) => round(valToPosX(xs[i * yBinQty], scaleX, xDim, xOff) + xOffset)\n        );\n        for (let i = 0; i < dlen; i++) {\n          if (counts[i] > hideLE && counts[i] < hideGE) {\n            let cx = cxs[~~(i / yBinQty)];\n            let cy = cys[i % yBinQty];\n            let fillPath = fillPaths[fills[i]];\n            rect(fillPath, cx, cy, xSize, ySize);\n            each(u, 1, i, cx, cy, xSize, ySize);\n          }\n        }\n        u.ctx.save();\n        u.ctx.rect(u.bbox.left, u.bbox.top, u.bbox.width, u.bbox.height);\n        u.ctx.clip();\n        fillPaths.forEach((p, i) => {\n          u.ctx.fillStyle = fillPalette[i];\n          u.ctx.fill(p);\n        });\n        u.ctx.restore();\n        return null;\n      }\n    );\n    return null;\n  };\n}\nfunction heatmapPathsPoints(opts, exemplarColor) {\n  return (u, seriesIdx) => {\n    uplot__WEBPACK_IMPORTED_MODULE_0__[\"default\"].orient(\n      u,\n      seriesIdx,\n      (series, dataX, dataY, scaleX, scaleY, valToPosX, valToPosY, xOff, yOff, xDim, yDim, moveTo, lineTo, rect, arc) => {\n        let points = new Path2D();\n        let fillPaths = [points];\n        let fillPalette = [exemplarColor ?? \"rgba(255,0,255,0.7)\"];\n        for (let i = 0; i < dataX.length; i++) {\n          let yVal = dataY[i];\n          yVal -= 0.5;\n          let randSign = Math.round(Math.random()) * 2 - 1;\n          yVal += randSign * 0.5 * Math.random();\n          let x = valToPosX(dataX[i], scaleX, xDim, xOff);\n          let y = valToPosY(yVal, scaleY, yDim, yOff);\n          let w = 8;\n          let h = 8;\n          rect(points, x - w / 2, y - h / 2, w, h);\n          opts.each(u, seriesIdx, i, x - w / 2, y - h / 2, w, h);\n        }\n        u.ctx.save();\n        u.ctx.rect(u.bbox.left, u.bbox.top, u.bbox.width, u.bbox.height);\n        u.ctx.clip();\n        fillPaths.forEach((p, i) => {\n          u.ctx.fillStyle = fillPalette[i];\n          u.ctx.fill(p);\n        });\n        u.ctx.restore();\n      }\n    );\n    return null;\n  };\n}\nfunction heatmapPathsSparse(opts) {\n  const { disp, each, gap = 1, hideLE = -Infinity, hideGE = Infinity } = opts;\n  const pxRatio = devicePixelRatio;\n  const round = gap >= CRISP_EDGES_GAP_MIN ? Math.round : (v) => v;\n  const cellGap = Math.round(gap * pxRatio);\n  return (u, seriesIdx) => {\n    uplot__WEBPACK_IMPORTED_MODULE_0__[\"default\"].orient(\n      u,\n      seriesIdx,\n      (series, dataX, dataY, scaleX, scaleY, valToPosX, valToPosY, xOff, yOff, xDim, yDim, moveTo, lineTo, rect, arc) => {\n        let d = u.data[seriesIdx];\n        const xMaxs = d[0];\n        const yMins = d[1];\n        const yMaxs = d[2];\n        const counts = d[3];\n        const dlen = xMaxs.length;\n        let fills = disp.fill.values(u, seriesIdx);\n        let fillPalette = disp.fill.index ?? [...new Set(fills)];\n        let fillPaths = fillPalette.map((color) => new Path2D());\n        let xOffs = /* @__PURE__ */ new Map();\n        let yOffs = /* @__PURE__ */ new Map();\n        for (let i = 0; i < xMaxs.length; i++) {\n          let xMax = xMaxs[i];\n          let yMin = yMins[i];\n          let yMax = yMaxs[i];\n          if (!xOffs.has(xMax)) {\n            xOffs.set(xMax, round(valToPosX(xMax, scaleX, xDim, xOff)));\n          }\n          if (!yOffs.has(yMin)) {\n            yOffs.set(yMin, round(valToPosY(yMin, scaleY, yDim, yOff)));\n          }\n          if (!yOffs.has(yMax)) {\n            yOffs.set(yMax, round(valToPosY(yMax, scaleY, yDim, yOff)));\n          }\n        }\n        let xSizeUniform = xOffs.get(xMaxs.find((v) => v !== xMaxs[0])) - xOffs.get(xMaxs[0]);\n        for (let i = 0; i < dlen; i++) {\n          if (counts[i] <= hideLE || counts[i] >= hideGE) {\n            continue;\n          }\n          let xMax = xMaxs[i];\n          let yMin = yMins[i];\n          let yMax = yMaxs[i];\n          let xMaxPx = xOffs.get(xMax);\n          let yMinPx = yOffs.get(yMin);\n          let yMaxPx = yOffs.get(yMax);\n          let xSize = xSizeUniform;\n          let ySize = yMinPx - yMaxPx;\n          xSize = Math.max(1, xSize - cellGap);\n          ySize = Math.max(1, ySize - cellGap);\n          let x = xMaxPx;\n          let y = yMinPx;\n          let fillPath = fillPaths[fills[i]];\n          rect(fillPath, x, y, xSize, ySize);\n          each(u, 1, i, x, y, xSize, ySize);\n        }\n        u.ctx.save();\n        u.ctx.rect(u.bbox.left, u.bbox.top, u.bbox.width, u.bbox.height);\n        u.ctx.clip();\n        fillPaths.forEach((p, i) => {\n          u.ctx.fillStyle = fillPalette[i];\n          u.ctx.fill(p);\n        });\n        u.ctx.restore();\n      }\n    );\n    return null;\n  };\n}\nconst boundedMinMax = (values, minValue, maxValue, hideLE = -Infinity, hideGE = Infinity) => {\n  if (minValue == null) {\n    minValue = Infinity;\n    for (let i = 0; i < values.length; i++) {\n      if (values[i] > hideLE && values[i] < hideGE) {\n        minValue = Math.min(minValue, values[i]);\n      }\n    }\n  }\n  if (maxValue == null) {\n    maxValue = -Infinity;\n    for (let i = 0; i < values.length; i++) {\n      if (values[i] > hideLE && values[i] < hideGE) {\n        maxValue = Math.max(maxValue, values[i]);\n      }\n    }\n  }\n  return [minValue, maxValue];\n};\nconst valuesToFills = (values, palette, minValue, maxValue) => {\n  let range = maxValue - minValue || 1;\n  let paletteSize = palette.length;\n  let indexedFills = Array(values.length);\n  for (let i = 0; i < values.length; i++) {\n    indexedFills[i] = values[i] < minValue ? 0 : values[i] > maxValue ? paletteSize - 1 : Math.min(paletteSize - 1, Math.floor(paletteSize * (values[i] - minValue) / range));\n  }\n  return indexedFills;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./public/app/plugins/panel/heatmap/utils.ts\n");

/***/ })

}]);