/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkgrafana"] = self["webpackChunkgrafana"] || []).push([["visjs-network"],{

/***/ "./.yarn/cache/visjs-network-npm-4.25.0-2e90efaeed-40bfcbbf2b.zip/node_modules/visjs-network/dist/vis.js":
/***/ (function(module) {

eval("/**\n * vis.js\n * https://github.com/almende/vis\n *\n * A dynamic, browser-based visualization library.\n *\n * @version 4.25.0\n * @date    2018-09-20\n *\n * @license\n * Copyright (C) 2011-2017 Almende B.V, http://almende.com\n *\n * Vis.js is dual licensed under both\n *\n * * The Apache 2.0 License\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * and\n *\n * * The MIT License\n *   http://opensource.org/licenses/MIT\n *\n * Vis.js may be distributed under either license.\n */\n\n(function webpackUniversalModuleDefinition(root, factory) {\n\tif(true)\n\t\tmodule.exports = factory();\n\telse {}\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __nested_webpack_require_1040__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __nested_webpack_require_1040__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__nested_webpack_require_1040__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__nested_webpack_require_1040__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__nested_webpack_require_1040__.d = function(exports, name, getter) {\n/******/ \t\tif(!__nested_webpack_require_1040__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__nested_webpack_require_1040__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__nested_webpack_require_1040__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__nested_webpack_require_1040__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__nested_webpack_require_1040__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __nested_webpack_require_1040__(__nested_webpack_require_1040__.s = 85);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nexports.__esModule = true;\n\nexports.default = function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __nested_webpack_require_3604__) {\n\n\"use strict\";\n\n\nexports.__esModule = true;\n\nvar _defineProperty = __nested_webpack_require_3604__(130);\n\nvar _defineProperty2 = _interopRequireDefault(_defineProperty);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      (0, _defineProperty2.default)(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports, __nested_webpack_require_4566__) {\n\n\"use strict\";\n\n\nvar _getIterator2 = __nested_webpack_require_4566__(58);\n\nvar _getIterator3 = _interopRequireDefault(_getIterator2);\n\nvar _create = __nested_webpack_require_4566__(31);\n\nvar _create2 = _interopRequireDefault(_create);\n\nvar _keys = __nested_webpack_require_4566__(9);\n\nvar _keys2 = _interopRequireDefault(_keys);\n\nvar _typeof2 = __nested_webpack_require_4566__(7);\n\nvar _typeof3 = _interopRequireDefault(_typeof2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\n// utility functions\n\n// first check if moment.js is already loaded in the browser window, if so,\n// use this instance. Else, load via commonjs.\n\nvar moment = __nested_webpack_require_4566__(71);\nvar uuid = __nested_webpack_require_4566__(119);\n\n/**\n * Test whether given object is a number\n * @param {*} object\n * @return {Boolean} isNumber\n */\nexports.isNumber = function (object) {\n  return object instanceof Number || typeof object == 'number';\n};\n\n/**\n * Remove everything in the DOM object\n * @param {Element} DOMobject\n */\nexports.recursiveDOMDelete = function (DOMobject) {\n  if (DOMobject) {\n    while (DOMobject.hasChildNodes() === true) {\n      exports.recursiveDOMDelete(DOMobject.firstChild);\n      DOMobject.removeChild(DOMobject.firstChild);\n    }\n  }\n};\n\n/**\n * Test whether given object is a string\n * @param {*} object\n * @return {Boolean} isString\n */\nexports.isString = function (object) {\n  return object instanceof String || typeof object == 'string';\n};\n\n/**\n * Test whether given object is a Date, or a String containing a Date\n * @param {Date | String} object\n * @return {Boolean} isDate\n */\nexports.isDate = function (object) {\n  if (object instanceof Date) {\n    return true;\n  } else if (exports.isString(object)) {\n    // test whether this string contains a date\n    var match = ASPDateRegex.exec(object);\n    if (match) {\n      return true;\n    } else if (!isNaN(Date.parse(object))) {\n      return true;\n    }\n  }\n\n  return false;\n};\n\n/**\n * Create a UUID\n * @return {string} uuid\n */\nexports.randomUUID = function () {\n  return uuid.v4();\n};\n\n/**\n * Copy property from b to a if property present in a.\n * If property in b explicitly set to null, delete it if `allowDeletion` set.\n *\n * Internal helper routine, should not be exported. Not added to `exports` for that reason.\n *\n * @param {object} a  target object\n * @param {object} b  source object\n * @param {string} prop  name of property to copy to a\n * @param {boolean} allowDeletion  if true, delete property in a if explicitly set to null in b\n * @private\n */\nfunction copyOrDelete(a, b, prop, allowDeletion) {\n  var doDeletion = false;\n  if (allowDeletion === true) {\n    doDeletion = b[prop] === null && a[prop] !== undefined;\n  }\n\n  if (doDeletion) {\n    delete a[prop];\n  } else {\n    a[prop] = b[prop]; // Remember, this is a reference copy!\n  }\n}\n\n/**\n * Fill an object with a possibly partially defined other object.\n *\n * Only copies values for the properties already present in a.\n * That means an object is not created on a property if only the b object has it.\n *\n * @param {object} a\n * @param {object} b\n * @param {boolean} [allowDeletion=false]  if true, delete properties in a that are explicitly set to null in b\n */\nexports.fillIfDefined = function (a, b) {\n  var allowDeletion = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n  // NOTE: iteration of properties of a\n  // NOTE: prototype properties iterated over as well\n  for (var prop in a) {\n    if (b[prop] !== undefined) {\n      if (b[prop] === null || (0, _typeof3['default'])(b[prop]) !== 'object') {\n        // Note: typeof null === 'object'\n        copyOrDelete(a, b, prop, allowDeletion);\n      } else {\n        if ((0, _typeof3['default'])(a[prop]) === 'object') {\n          exports.fillIfDefined(a[prop], b[prop], allowDeletion);\n        }\n      }\n    }\n  }\n};\n\n/**\n * Extend object a with the properties of object b or a series of objects\n * Only properties with defined values are copied\n * @param {Object} a\n * @param {...Object} b\n * @return {Object} a\n */\nexports.extend = function (a /* b */) {\n  // eslint-disable-line no-unused-vars\n  for (var i = 1; i < arguments.length; i++) {\n    var other = arguments[i];\n    for (var prop in other) {\n      if (other.hasOwnProperty(prop)) {\n        a[prop] = other[prop];\n      }\n    }\n  }\n  return a;\n};\n\n/**\n * Extend object a with selected properties of object b or a series of objects\n * Only properties with defined values are copied\n * @param {Array.<string>} props\n * @param {Object} a\n * @param {Object} b\n * @return {Object} a\n */\nexports.selectiveExtend = function (props, a /* b */) {\n  // eslint-disable-line no-unused-vars\n  if (!Array.isArray(props)) {\n    throw new Error('Array with property names expected as first argument');\n  }\n\n  for (var i = 2; i < arguments.length; i++) {\n    var other = arguments[i];\n\n    for (var p = 0; p < props.length; p++) {\n      var prop = props[p];\n      if (other && other.hasOwnProperty(prop)) {\n        a[prop] = other[prop];\n      }\n    }\n  }\n  return a;\n};\n\n/**\n * Extend object a with selected properties of object b.\n * Only properties with defined values are copied.\n *\n * **Note:** Previous version of this routine implied that multiple source objects\n *           could be used; however, the implementation was **wrong**.\n *           Since multiple (>1) sources weren't used anywhere in the `vis.js` code,\n *           this has been removed\n *\n * @param {Array.<string>} props names of first-level properties to copy over\n * @param {object} a  target object\n * @param {object} b  source object\n * @param {boolean} [allowDeletion=false]  if true, delete property in a if explicitly set to null in b\n * @returns {Object} a\n */\nexports.selectiveDeepExtend = function (props, a, b) {\n  var allowDeletion = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n\n  // TODO: add support for Arrays to deepExtend\n  if (Array.isArray(b)) {\n    throw new TypeError('Arrays are not supported by deepExtend');\n  }\n\n  for (var p = 0; p < props.length; p++) {\n    var prop = props[p];\n    if (b.hasOwnProperty(prop)) {\n      if (b[prop] && b[prop].constructor === Object) {\n        if (a[prop] === undefined) {\n          a[prop] = {};\n        }\n        if (a[prop].constructor === Object) {\n          exports.deepExtend(a[prop], b[prop], false, allowDeletion);\n        } else {\n          copyOrDelete(a, b, prop, allowDeletion);\n        }\n      } else if (Array.isArray(b[prop])) {\n        throw new TypeError('Arrays are not supported by deepExtend');\n      } else {\n        copyOrDelete(a, b, prop, allowDeletion);\n      }\n    }\n  }\n  return a;\n};\n\n/**\n * Extend object `a` with properties of object `b`, ignoring properties which are explicitly\n * specified to be excluded.\n *\n * The properties of `b` are considered for copying.\n * Properties which are themselves objects are are also extended.\n * Only properties with defined values are copied\n *\n * @param {Array.<string>} propsToExclude  names of properties which should *not* be copied\n * @param {Object}                      a  object to extend\n * @param {Object}                      b  object to take properties from for extension\n * @param {boolean} [allowDeletion=false]  if true, delete properties in a that are explicitly set to null in b\n * @return {Object} a\n */\nexports.selectiveNotDeepExtend = function (propsToExclude, a, b) {\n  var allowDeletion = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n\n  // TODO: add support for Arrays to deepExtend\n  // NOTE: array properties have an else-below; apparently, there is a problem here.\n  if (Array.isArray(b)) {\n    throw new TypeError('Arrays are not supported by deepExtend');\n  }\n\n  for (var prop in b) {\n    if (!b.hasOwnProperty(prop)) continue; // Handle local properties only\n    if (propsToExclude.indexOf(prop) !== -1) continue; // In exclusion list, skip\n\n    if (b[prop] && b[prop].constructor === Object) {\n      if (a[prop] === undefined) {\n        a[prop] = {};\n      }\n      if (a[prop].constructor === Object) {\n        exports.deepExtend(a[prop], b[prop]); // NOTE: allowDeletion not propagated!\n      } else {\n        copyOrDelete(a, b, prop, allowDeletion);\n      }\n    } else if (Array.isArray(b[prop])) {\n      a[prop] = [];\n      for (var i = 0; i < b[prop].length; i++) {\n        a[prop].push(b[prop][i]);\n      }\n    } else {\n      copyOrDelete(a, b, prop, allowDeletion);\n    }\n  }\n\n  return a;\n};\n\n/**\n * Deep extend an object a with the properties of object b\n *\n * @param {Object} a\n * @param {Object} b\n * @param {boolean} [protoExtend=false]  If true, the prototype values will also be extended.\n *                          (ie. the options objects that inherit from others will also get the inherited options)\n * @param {boolean} [allowDeletion=false] If true, the values of fields that are null will be deleted\n * @returns {Object}\n */\nexports.deepExtend = function (a, b) {\n  var protoExtend = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var allowDeletion = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n\n  for (var prop in b) {\n    if (b.hasOwnProperty(prop) || protoExtend === true) {\n      if (b[prop] && b[prop].constructor === Object) {\n        if (a[prop] === undefined) {\n          a[prop] = {};\n        }\n        if (a[prop].constructor === Object) {\n          exports.deepExtend(a[prop], b[prop], protoExtend); // NOTE: allowDeletion not propagated!\n        } else {\n          copyOrDelete(a, b, prop, allowDeletion);\n        }\n      } else if (Array.isArray(b[prop])) {\n        a[prop] = [];\n        for (var i = 0; i < b[prop].length; i++) {\n          a[prop].push(b[prop][i]);\n        }\n      } else {\n        copyOrDelete(a, b, prop, allowDeletion);\n      }\n    }\n  }\n  return a;\n};\n\n/**\n * Test whether all elements in two arrays are equal.\n * @param {Array} a\n * @param {Array} b\n * @return {boolean} Returns true if both arrays have the same length and same\n *                   elements.\n */\nexports.equalArray = function (a, b) {\n  if (a.length != b.length) return false;\n\n  for (var i = 0, len = a.length; i < len; i++) {\n    if (a[i] != b[i]) return false;\n  }\n\n  return true;\n};\n\n/**\n * Convert an object to another type\n * @param {boolean | number | string | Date | Moment | Null | undefined} object\n * @param {string | undefined} type   Name of the type. Available types:\n *                                    'Boolean', 'Number', 'String',\n *                                    'Date', 'Moment', ISODate', 'ASPDate'.\n * @return {*} object\n * @throws Error\n */\nexports.convert = function (object, type) {\n  var match;\n\n  if (object === undefined) {\n    return undefined;\n  }\n  if (object === null) {\n    return null;\n  }\n\n  if (!type) {\n    return object;\n  }\n  if (!(typeof type === 'string') && !(type instanceof String)) {\n    throw new Error('Type must be a string');\n  }\n\n  //noinspection FallthroughInSwitchStatementJS\n  switch (type) {\n    case 'boolean':\n    case 'Boolean':\n      return Boolean(object);\n\n    case 'number':\n    case 'Number':\n      if (exports.isString(object) && !isNaN(Date.parse(object))) {\n        return moment(object).valueOf();\n      } else {\n        return Number(object.valueOf());\n      }\n    case 'string':\n    case 'String':\n      return String(object);\n\n    case 'Date':\n      if (exports.isNumber(object)) {\n        return new Date(object);\n      }\n      if (object instanceof Date) {\n        return new Date(object.valueOf());\n      } else if (moment.isMoment(object)) {\n        return new Date(object.valueOf());\n      }\n      if (exports.isString(object)) {\n        match = ASPDateRegex.exec(object);\n        if (match) {\n          // object is an ASP date\n          return new Date(Number(match[1])); // parse number\n        } else {\n          return moment(new Date(object)).toDate(); // parse string\n        }\n      } else {\n        throw new Error('Cannot convert object of type ' + exports.getType(object) + ' to type Date');\n      }\n\n    case 'Moment':\n      if (exports.isNumber(object)) {\n        return moment(object);\n      }\n      if (object instanceof Date) {\n        return moment(object.valueOf());\n      } else if (moment.isMoment(object)) {\n        return moment(object);\n      }\n      if (exports.isString(object)) {\n        match = ASPDateRegex.exec(object);\n        if (match) {\n          // object is an ASP date\n          return moment(Number(match[1])); // parse number\n        } else {\n          return moment(object); // parse string\n        }\n      } else {\n        throw new Error('Cannot convert object of type ' + exports.getType(object) + ' to type Date');\n      }\n\n    case 'ISODate':\n      if (exports.isNumber(object)) {\n        return new Date(object);\n      } else if (object instanceof Date) {\n        return object.toISOString();\n      } else if (moment.isMoment(object)) {\n        return object.toDate().toISOString();\n      } else if (exports.isString(object)) {\n        match = ASPDateRegex.exec(object);\n        if (match) {\n          // object is an ASP date\n          return new Date(Number(match[1])).toISOString(); // parse number\n        } else {\n          return moment(object).format(); // ISO 8601\n        }\n      } else {\n        throw new Error('Cannot convert object of type ' + exports.getType(object) + ' to type ISODate');\n      }\n\n    case 'ASPDate':\n      if (exports.isNumber(object)) {\n        return '/Date(' + object + ')/';\n      } else if (object instanceof Date) {\n        return '/Date(' + object.valueOf() + ')/';\n      } else if (exports.isString(object)) {\n        match = ASPDateRegex.exec(object);\n        var value;\n        if (match) {\n          // object is an ASP date\n          value = new Date(Number(match[1])).valueOf(); // parse number\n        } else {\n          value = new Date(object).valueOf(); // parse string\n        }\n        return '/Date(' + value + ')/';\n      } else {\n        throw new Error('Cannot convert object of type ' + exports.getType(object) + ' to type ASPDate');\n      }\n\n    default:\n      throw new Error('Unknown type \"' + type + '\"');\n  }\n};\n\n// parse ASP.Net Date pattern,\n// for example '/Date(1198908717056)/' or '/Date(1198908717056-0700)/'\n// code from http://momentjs.com/\nvar ASPDateRegex = /^\\/?Date\\((\\-?\\d+)/i;\n\n/**\n * Get the type of an object, for example exports.getType([]) returns 'Array'\n * @param {*} object\n * @return {string} type\n */\nexports.getType = function (object) {\n  var type = typeof object === 'undefined' ? 'undefined' : (0, _typeof3['default'])(object);\n\n  if (type == 'object') {\n    if (object === null) {\n      return 'null';\n    }\n    if (object instanceof Boolean) {\n      return 'Boolean';\n    }\n    if (object instanceof Number) {\n      return 'Number';\n    }\n    if (object instanceof String) {\n      return 'String';\n    }\n    if (Array.isArray(object)) {\n      return 'Array';\n    }\n    if (object instanceof Date) {\n      return 'Date';\n    }\n    return 'Object';\n  } else if (type == 'number') {\n    return 'Number';\n  } else if (type == 'boolean') {\n    return 'Boolean';\n  } else if (type == 'string') {\n    return 'String';\n  } else if (type === undefined) {\n    return 'undefined';\n  }\n\n  return type;\n};\n\n/**\n * Used to extend an array and copy it. This is used to propagate paths recursively.\n *\n * @param {Array} arr\n * @param {*} newValue\n * @returns {Array}\n */\nexports.copyAndExtendArray = function (arr, newValue) {\n  var newArr = [];\n  for (var i = 0; i < arr.length; i++) {\n    newArr.push(arr[i]);\n  }\n  newArr.push(newValue);\n  return newArr;\n};\n\n/**\n * Used to extend an array and copy it. This is used to propagate paths recursively.\n *\n * @param {Array} arr\n * @returns {Array}\n */\nexports.copyArray = function (arr) {\n  var newArr = [];\n  for (var i = 0; i < arr.length; i++) {\n    newArr.push(arr[i]);\n  }\n  return newArr;\n};\n\n/**\n * Retrieve the absolute left value of a DOM element\n * @param {Element} elem        A dom element, for example a div\n * @return {number} left        The absolute left position of this element\n *                              in the browser page.\n */\nexports.getAbsoluteLeft = function (elem) {\n  return elem.getBoundingClientRect().left;\n};\n\nexports.getAbsoluteRight = function (elem) {\n  return elem.getBoundingClientRect().right;\n};\n\n/**\n * Retrieve the absolute top value of a DOM element\n * @param {Element} elem        A dom element, for example a div\n * @return {number} top        The absolute top position of this element\n *                              in the browser page.\n */\nexports.getAbsoluteTop = function (elem) {\n  return elem.getBoundingClientRect().top;\n};\n\n/**\n * add a className to the given elements style\n * @param {Element} elem\n * @param {string} classNames\n */\nexports.addClassName = function (elem, classNames) {\n  var classes = elem.className.split(' ');\n  var newClasses = classNames.split(' ');\n  classes = classes.concat(newClasses.filter(function (className) {\n    return classes.indexOf(className) < 0;\n  }));\n  elem.className = classes.join(' ');\n};\n\n/**\n * add a className to the given elements style\n * @param {Element} elem\n * @param {string} classNames\n */\nexports.removeClassName = function (elem, classNames) {\n  var classes = elem.className.split(' ');\n  var oldClasses = classNames.split(' ');\n  classes = classes.filter(function (className) {\n    return oldClasses.indexOf(className) < 0;\n  });\n  elem.className = classes.join(' ');\n};\n\n/**\n * For each method for both arrays and objects.\n * In case of an array, the built-in Array.forEach() is applied. (**No, it's not!**)\n * In case of an Object, the method loops over all properties of the object.\n * @param {Object | Array} object   An Object or Array\n * @param {function} callback       Callback method, called for each item in\n *                                  the object or array with three parameters:\n *                                  callback(value, index, object)\n */\nexports.forEach = function (object, callback) {\n  var i, len;\n  if (Array.isArray(object)) {\n    // array\n    for (i = 0, len = object.length; i < len; i++) {\n      callback(object[i], i, object);\n    }\n  } else {\n    // object\n    for (i in object) {\n      if (object.hasOwnProperty(i)) {\n        callback(object[i], i, object);\n      }\n    }\n  }\n};\n\n/**\n * Convert an object into an array: all objects properties are put into the\n * array. The resulting array is unordered.\n * @param {Object} object\n * @returns {Array} array\n */\nexports.toArray = function (object) {\n  var array = [];\n\n  for (var prop in object) {\n    if (object.hasOwnProperty(prop)) array.push(object[prop]);\n  }\n\n  return array;\n};\n\n/**\n * Update a property in an object\n * @param {Object} object\n * @param {string} key\n * @param {*} value\n * @return {Boolean} changed\n */\nexports.updateProperty = function (object, key, value) {\n  if (object[key] !== value) {\n    object[key] = value;\n    return true;\n  } else {\n    return false;\n  }\n};\n\n/**\n * Throttle the given function to be only executed once per animation frame\n * @param {function} fn\n * @returns {function} Returns the throttled function\n */\nexports.throttle = function (fn) {\n  var scheduled = false;\n\n  return function throttled() {\n    if (!scheduled) {\n      scheduled = true;\n      requestAnimationFrame(function () {\n        scheduled = false;\n        fn();\n      });\n    }\n  };\n};\n\n/**\n * Add and event listener. Works for all browsers\n * @param {Element}     element    An html element\n * @param {string}      action     The action, for example \"click\",\n *                                 without the prefix \"on\"\n * @param {function}    listener   The callback function to be executed\n * @param {boolean}     [useCapture]\n */\nexports.addEventListener = function (element, action, listener, useCapture) {\n  if (element.addEventListener) {\n    if (useCapture === undefined) useCapture = false;\n\n    if (action === 'mousewheel' && navigator.userAgent.indexOf('Firefox') >= 0) {\n      action = 'DOMMouseScroll'; // For Firefox\n    }\n\n    element.addEventListener(action, listener, useCapture);\n  } else {\n    element.attachEvent('on' + action, listener); // IE browsers\n  }\n};\n\n/**\n * Remove an event listener from an element\n * @param {Element}     element         An html dom element\n * @param {string}      action          The name of the event, for example \"mousedown\"\n * @param {function}    listener        The listener function\n * @param {boolean}     [useCapture]\n */\nexports.removeEventListener = function (element, action, listener, useCapture) {\n  if (element.removeEventListener) {\n    // non-IE browsers\n    if (useCapture === undefined) useCapture = false;\n\n    if (action === 'mousewheel' && navigator.userAgent.indexOf('Firefox') >= 0) {\n      action = 'DOMMouseScroll'; // For Firefox\n    }\n\n    element.removeEventListener(action, listener, useCapture);\n  } else {\n    // IE browsers\n    element.detachEvent('on' + action, listener);\n  }\n};\n\n/**\n * Cancels the event if it is cancelable, without stopping further propagation of the event.\n * @param {Event} event\n */\nexports.preventDefault = function (event) {\n  if (!event) event = window.event;\n\n  if (event.preventDefault) {\n    event.preventDefault(); // non-IE browsers\n  } else {\n    event.returnValue = false; // IE browsers\n  }\n};\n\n/**\n * Get HTML element which is the target of the event\n * @param {Event} event\n * @return {Element} target element\n */\nexports.getTarget = function (event) {\n  // code from http://www.quirksmode.org/js/events_properties.html\n  if (!event) {\n    event = window.event;\n  }\n\n  var target;\n\n  if (event.target) {\n    target = event.target;\n  } else if (event.srcElement) {\n    target = event.srcElement;\n  }\n\n  if (target.nodeType != undefined && target.nodeType == 3) {\n    // defeat Safari bug\n    target = target.parentNode;\n  }\n\n  return target;\n};\n\n/**\n * Check if given element contains given parent somewhere in the DOM tree\n * @param {Element} element\n * @param {Element} parent\n * @returns {boolean}\n */\nexports.hasParent = function (element, parent) {\n  var e = element;\n\n  while (e) {\n    if (e === parent) {\n      return true;\n    }\n    e = e.parentNode;\n  }\n\n  return false;\n};\n\nexports.option = {};\n\n/**\n * Convert a value into a boolean\n * @param {Boolean | function | undefined} value\n * @param {boolean} [defaultValue]\n * @returns {Boolean} bool\n */\nexports.option.asBoolean = function (value, defaultValue) {\n  if (typeof value == 'function') {\n    value = value();\n  }\n\n  if (value != null) {\n    return value != false;\n  }\n\n  return defaultValue || null;\n};\n\n/**\n * Convert a value into a number\n * @param {Boolean | function | undefined} value\n * @param {number} [defaultValue]\n * @returns {number} number\n */\nexports.option.asNumber = function (value, defaultValue) {\n  if (typeof value == 'function') {\n    value = value();\n  }\n\n  if (value != null) {\n    return Number(value) || defaultValue || null;\n  }\n\n  return defaultValue || null;\n};\n\n/**\n * Convert a value into a string\n * @param {string | function | undefined} value\n * @param {string} [defaultValue]\n * @returns {String} str\n */\nexports.option.asString = function (value, defaultValue) {\n  if (typeof value == 'function') {\n    value = value();\n  }\n\n  if (value != null) {\n    return String(value);\n  }\n\n  return defaultValue || null;\n};\n\n/**\n * Convert a size or location into a string with pixels or a percentage\n * @param {string | number | function | undefined} value\n * @param {string} [defaultValue]\n * @returns {String} size\n */\nexports.option.asSize = function (value, defaultValue) {\n  if (typeof value == 'function') {\n    value = value();\n  }\n\n  if (exports.isString(value)) {\n    return value;\n  } else if (exports.isNumber(value)) {\n    return value + 'px';\n  } else {\n    return defaultValue || null;\n  }\n};\n\n/**\n * Convert a value into a DOM element\n * @param {HTMLElement | function | undefined} value\n * @param {HTMLElement} [defaultValue]\n * @returns {HTMLElement | null} dom\n */\nexports.option.asElement = function (value, defaultValue) {\n  if (typeof value == 'function') {\n    value = value();\n  }\n\n  return value || defaultValue || null;\n};\n\n/**\n * http://stackoverflow.com/questions/5623838/rgb-to-hex-and-hex-to-rgb\n *\n * @param {string} hex\n * @returns {{r: *, g: *, b: *}} | 255 range\n */\nexports.hexToRGB = function (hex) {\n  // Expand shorthand form (e.g. \"03F\") to full form (e.g. \"0033FF\")\n  var shorthandRegex = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\n  hex = hex.replace(shorthandRegex, function (m, r, g, b) {\n    return r + r + g + g + b + b;\n  });\n  var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n  return result ? {\n    r: parseInt(result[1], 16),\n    g: parseInt(result[2], 16),\n    b: parseInt(result[3], 16)\n  } : null;\n};\n\n/**\n * This function takes color in hex format or rgb() or rgba() format and overrides the opacity. Returns rgba() string.\n * @param {string} color\n * @param {number} opacity\n * @returns {String}\n */\nexports.overrideOpacity = function (color, opacity) {\n  var rgb;\n  if (color.indexOf('rgba') != -1) {\n    return color;\n  } else if (color.indexOf('rgb') != -1) {\n    rgb = color.substr(color.indexOf('(') + 1).replace(')', '').split(',');\n    return 'rgba(' + rgb[0] + ',' + rgb[1] + ',' + rgb[2] + ',' + opacity + ')';\n  } else {\n    rgb = exports.hexToRGB(color);\n    if (rgb == null) {\n      return color;\n    } else {\n      return 'rgba(' + rgb.r + ',' + rgb.g + ',' + rgb.b + ',' + opacity + ')';\n    }\n  }\n};\n\n/**\n *\n * @param {number} red     0 -- 255\n * @param {number} green   0 -- 255\n * @param {number} blue    0 -- 255\n * @returns {String}\n * @constructor\n */\nexports.RGBToHex = function (red, green, blue) {\n  return '#' + ((1 << 24) + (red << 16) + (green << 8) + blue).toString(16).slice(1);\n};\n\n/**\n * Parse a color property into an object with border, background, and\n * highlight colors\n * @param {Object | String} color\n * @return {Object} colorObject\n */\nexports.parseColor = function (color) {\n  var c;\n  if (exports.isString(color) === true) {\n    if (exports.isValidRGB(color) === true) {\n      var rgb = color.substr(4).substr(0, color.length - 5).split(',').map(function (value) {\n        return parseInt(value);\n      });\n      color = exports.RGBToHex(rgb[0], rgb[1], rgb[2]);\n    }\n    if (exports.isValidHex(color) === true) {\n      var hsv = exports.hexToHSV(color);\n      var lighterColorHSV = {\n        h: hsv.h,\n        s: hsv.s * 0.8,\n        v: Math.min(1, hsv.v * 1.02)\n      };\n      var darkerColorHSV = {\n        h: hsv.h,\n        s: Math.min(1, hsv.s * 1.25),\n        v: hsv.v * 0.8\n      };\n      var darkerColorHex = exports.HSVToHex(darkerColorHSV.h, darkerColorHSV.s, darkerColorHSV.v);\n      var lighterColorHex = exports.HSVToHex(lighterColorHSV.h, lighterColorHSV.s, lighterColorHSV.v);\n      c = {\n        background: color,\n        border: darkerColorHex,\n        highlight: {\n          background: lighterColorHex,\n          border: darkerColorHex\n        },\n        hover: {\n          background: lighterColorHex,\n          border: darkerColorHex\n        }\n      };\n    } else {\n      c = {\n        background: color,\n        border: color,\n        highlight: {\n          background: color,\n          border: color\n        },\n        hover: {\n          background: color,\n          border: color\n        }\n      };\n    }\n  } else {\n    c = {};\n    c.background = color.background || undefined;\n    c.border = color.border || undefined;\n\n    if (exports.isString(color.highlight)) {\n      c.highlight = {\n        border: color.highlight,\n        background: color.highlight\n      };\n    } else {\n      c.highlight = {};\n      c.highlight.background = color.highlight && color.highlight.background || undefined;\n      c.highlight.border = color.highlight && color.highlight.border || undefined;\n    }\n\n    if (exports.isString(color.hover)) {\n      c.hover = {\n        border: color.hover,\n        background: color.hover\n      };\n    } else {\n      c.hover = {};\n      c.hover.background = color.hover && color.hover.background || undefined;\n      c.hover.border = color.hover && color.hover.border || undefined;\n    }\n  }\n\n  return c;\n};\n\n/**\n * http://www.javascripter.net/faq/rgb2hsv.htm\n *\n * @param {number} red\n * @param {number} green\n * @param {number} blue\n * @returns {{h: number, s: number, v: number}}\n * @constructor\n */\nexports.RGBToHSV = function (red, green, blue) {\n  red = red / 255;\n  green = green / 255;\n  blue = blue / 255;\n  var minRGB = Math.min(red, Math.min(green, blue));\n  var maxRGB = Math.max(red, Math.max(green, blue));\n\n  // Black-gray-white\n  if (minRGB == maxRGB) {\n    return { h: 0, s: 0, v: minRGB };\n  }\n\n  // Colors other than black-gray-white:\n  var d = red == minRGB ? green - blue : blue == minRGB ? red - green : blue - red;\n  var h = red == minRGB ? 3 : blue == minRGB ? 1 : 5;\n  var hue = 60 * (h - d / (maxRGB - minRGB)) / 360;\n  var saturation = (maxRGB - minRGB) / maxRGB;\n  var value = maxRGB;\n  return { h: hue, s: saturation, v: value };\n};\n\nvar cssUtil = {\n  // split a string with css styles into an object with key/values\n  split: function split(cssText) {\n    var styles = {};\n\n    cssText.split(';').forEach(function (style) {\n      if (style.trim() != '') {\n        var parts = style.split(':');\n        var key = parts[0].trim();\n        var value = parts[1].trim();\n        styles[key] = value;\n      }\n    });\n\n    return styles;\n  },\n\n  // build a css text string from an object with key/values\n  join: function join(styles) {\n    return (0, _keys2['default'])(styles).map(function (key) {\n      return key + ': ' + styles[key];\n    }).join('; ');\n  }\n\n  /**\n   * Append a string with css styles to an element\n   * @param {Element} element\n   * @param {string} cssText\n   */\n};exports.addCssText = function (element, cssText) {\n  var currentStyles = cssUtil.split(element.style.cssText);\n  var newStyles = cssUtil.split(cssText);\n  var styles = exports.extend(currentStyles, newStyles);\n\n  element.style.cssText = cssUtil.join(styles);\n};\n\n/**\n * Remove a string with css styles from an element\n * @param {Element} element\n * @param {string} cssText\n */\nexports.removeCssText = function (element, cssText) {\n  var styles = cssUtil.split(element.style.cssText);\n  var removeStyles = cssUtil.split(cssText);\n\n  for (var key in removeStyles) {\n    if (removeStyles.hasOwnProperty(key)) {\n      delete styles[key];\n    }\n  }\n\n  element.style.cssText = cssUtil.join(styles);\n};\n\n/**\n * https://gist.github.com/mjijackson/5311256\n * @param {number} h\n * @param {number} s\n * @param {number} v\n * @returns {{r: number, g: number, b: number}}\n * @constructor\n */\nexports.HSVToRGB = function (h, s, v) {\n  var r, g, b;\n\n  var i = Math.floor(h * 6);\n  var f = h * 6 - i;\n  var p = v * (1 - s);\n  var q = v * (1 - f * s);\n  var t = v * (1 - (1 - f) * s);\n\n  switch (i % 6) {\n    case 0:\n      ;r = v, g = t, b = p;\n      break;\n    case 1:\n      ;r = q, g = v, b = p;\n      break;\n    case 2:\n      ;r = p, g = v, b = t;\n      break;\n    case 3:\n      ;r = p, g = q, b = v;\n      break;\n    case 4:\n      ;r = t, g = p, b = v;\n      break;\n    case 5:\n      ;r = v, g = p, b = q;\n      break;\n  }\n\n  return {\n    r: Math.floor(r * 255),\n    g: Math.floor(g * 255),\n    b: Math.floor(b * 255)\n  };\n};\n\nexports.HSVToHex = function (h, s, v) {\n  var rgb = exports.HSVToRGB(h, s, v);\n  return exports.RGBToHex(rgb.r, rgb.g, rgb.b);\n};\n\nexports.hexToHSV = function (hex) {\n  var rgb = exports.hexToRGB(hex);\n  return exports.RGBToHSV(rgb.r, rgb.g, rgb.b);\n};\n\nexports.isValidHex = function (hex) {\n  var isOk = /(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)/i.test(hex);\n  return isOk;\n};\n\nexports.isValidRGB = function (rgb) {\n  rgb = rgb.replace(' ', '');\n  var isOk = /rgb\\((\\d{1,3}),(\\d{1,3}),(\\d{1,3})\\)/i.test(rgb);\n  return isOk;\n};\nexports.isValidRGBA = function (rgba) {\n  rgba = rgba.replace(' ', '');\n  var isOk = /rgba\\((\\d{1,3}),(\\d{1,3}),(\\d{1,3}),(.{1,3})\\)/i.test(rgba);\n  return isOk;\n};\n\n/**\n * This recursively redirects the prototype of JSON objects to the referenceObject\n * This is used for default options.\n *\n * @param {Array.<string>} fields\n * @param {Object} referenceObject\n * @returns {*}\n */\nexports.selectiveBridgeObject = function (fields, referenceObject) {\n  if (referenceObject !== null && (typeof referenceObject === 'undefined' ? 'undefined' : (0, _typeof3['default'])(referenceObject)) === 'object') {\n    // !!! typeof null === 'object'\n    var objectTo = (0, _create2['default'])(referenceObject);\n    for (var i = 0; i < fields.length; i++) {\n      if (referenceObject.hasOwnProperty(fields[i])) {\n        if ((0, _typeof3['default'])(referenceObject[fields[i]]) == 'object') {\n          objectTo[fields[i]] = exports.bridgeObject(referenceObject[fields[i]]);\n        }\n      }\n    }\n    return objectTo;\n  } else {\n    return null;\n  }\n};\n\n/**\n * This recursively redirects the prototype of JSON objects to the referenceObject\n * This is used for default options.\n *\n * @param {Object} referenceObject\n * @returns {*}\n */\nexports.bridgeObject = function (referenceObject) {\n  if (referenceObject !== null && (typeof referenceObject === 'undefined' ? 'undefined' : (0, _typeof3['default'])(referenceObject)) === 'object') {\n    // !!! typeof null === 'object'\n    var objectTo = (0, _create2['default'])(referenceObject);\n    if (referenceObject instanceof Element) {\n      // Avoid bridging DOM objects\n      objectTo = referenceObject;\n    } else {\n      objectTo = (0, _create2['default'])(referenceObject);\n      for (var i in referenceObject) {\n        if (referenceObject.hasOwnProperty(i)) {\n          if ((0, _typeof3['default'])(referenceObject[i]) == 'object') {\n            objectTo[i] = exports.bridgeObject(referenceObject[i]);\n          }\n        }\n      }\n    }\n    return objectTo;\n  } else {\n    return null;\n  }\n};\n\n/**\n * This method provides a stable sort implementation, very fast for presorted data\n *\n * @param {Array} a the array\n * @param {function} compare an order comparator\n * @returns {Array}\n */\nexports.insertSort = function (a, compare) {\n  for (var i = 0; i < a.length; i++) {\n    var k = a[i];\n    for (var j = i; j > 0 && compare(k, a[j - 1]) < 0; j--) {\n      a[j] = a[j - 1];\n    }\n    a[j] = k;\n  }\n  return a;\n};\n\n/**\n * This is used to set the options of subobjects in the options object.\n *\n * A requirement of these subobjects is that they have an 'enabled' element\n * which is optional for the user but mandatory for the program.\n *\n * The added value here of the merge is that option 'enabled' is set as required.\n *\n *\n * @param {object} mergeTarget   | either this.options or the options used for the groups.\n * @param {object} options       | options\n * @param {string} option        | option key in the options argument\n * @param {object} globalOptions | global options, passed in to determine value of option 'enabled'\n */\nexports.mergeOptions = function (mergeTarget, options, option) {\n  var globalOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n\n  // Local helpers\n  var isPresent = function isPresent(obj) {\n    return obj !== null && obj !== undefined;\n  };\n\n  var isObject = function isObject(obj) {\n    return obj !== null && (typeof obj === 'undefined' ? 'undefined' : (0, _typeof3['default'])(obj)) === 'object';\n  };\n\n  // https://stackoverflow.com/a/34491287/1223531\n  var isEmpty = function isEmpty(obj) {\n    for (var x in obj) {\n      if (obj.hasOwnProperty(x)) return false;\n    }\n    return true;\n  };\n\n  // Guards\n  if (!isObject(mergeTarget)) {\n    throw new Error('Parameter mergeTarget must be an object');\n  }\n\n  if (!isObject(options)) {\n    throw new Error('Parameter options must be an object');\n  }\n\n  if (!isPresent(option)) {\n    throw new Error('Parameter option must have a value');\n  }\n\n  if (!isObject(globalOptions)) {\n    throw new Error('Parameter globalOptions must be an object');\n  }\n\n  //\n  // Actual merge routine, separated from main logic\n  // Only a single level of options is merged. Deeper levels are ref'd. This may actually be an issue.\n  //\n  var doMerge = function doMerge(target, options, option) {\n    if (!isObject(target[option])) {\n      target[option] = {};\n    }\n\n    var src = options[option];\n    var dst = target[option];\n    for (var prop in src) {\n      if (src.hasOwnProperty(prop)) {\n        dst[prop] = src[prop];\n      }\n    }\n  };\n\n  // Local initialization\n  var srcOption = options[option];\n  var globalPassed = isObject(globalOptions) && !isEmpty(globalOptions);\n  var globalOption = globalPassed ? globalOptions[option] : undefined;\n  var globalEnabled = globalOption ? globalOption.enabled : undefined;\n\n  /////////////////////////////////////////\n  // Main routine\n  /////////////////////////////////////////\n  if (srcOption === undefined) {\n    return; // Nothing to do\n  }\n\n  if (typeof srcOption === 'boolean') {\n    if (!isObject(mergeTarget[option])) {\n      mergeTarget[option] = {};\n    }\n\n    mergeTarget[option].enabled = srcOption;\n    return;\n  }\n\n  if (srcOption === null && !isObject(mergeTarget[option])) {\n    // If possible, explicit copy from globals\n    if (isPresent(globalOption)) {\n      mergeTarget[option] = (0, _create2['default'])(globalOption);\n    } else {\n      return; // Nothing to do\n    }\n  }\n\n  if (!isObject(srcOption)) {\n    return;\n  }\n\n  //\n  // Ensure that 'enabled' is properly set. It is required internally\n  // Note that the value from options will always overwrite the existing value\n  //\n  var enabled = true; // default value\n\n  if (srcOption.enabled !== undefined) {\n    enabled = srcOption.enabled;\n  } else {\n    // Take from globals, if present\n    if (globalEnabled !== undefined) {\n      enabled = globalOption.enabled;\n    }\n  }\n\n  doMerge(mergeTarget, options, option);\n  mergeTarget[option].enabled = enabled;\n};\n\n/**\n * This function does a binary search for a visible item in a sorted list. If we find a visible item, the code that uses\n * this function will then iterate in both directions over this sorted list to find all visible items.\n *\n * @param {Item[]} orderedItems       | Items ordered by start\n * @param {function} comparator       | -1 is lower, 0 is equal, 1 is higher\n * @param {string} field\n * @param {string} field2\n * @returns {number}\n * @private\n */\nexports.binarySearchCustom = function (orderedItems, comparator, field, field2) {\n  var maxIterations = 10000;\n  var iteration = 0;\n  var low = 0;\n  var high = orderedItems.length - 1;\n\n  while (low <= high && iteration < maxIterations) {\n    var middle = Math.floor((low + high) / 2);\n\n    var item = orderedItems[middle];\n    var value = field2 === undefined ? item[field] : item[field][field2];\n\n    var searchResult = comparator(value);\n    if (searchResult == 0) {\n      // jihaa, found a visible item!\n      return middle;\n    } else if (searchResult == -1) {\n      // it is too small --> increase low\n      low = middle + 1;\n    } else {\n      // it is too big --> decrease high\n      high = middle - 1;\n    }\n\n    iteration++;\n  }\n\n  return -1;\n};\n\n/**\n * This function does a binary search for a specific value in a sorted array. If it does not exist but is in between of\n * two values, we return either the one before or the one after, depending on user input\n * If it is found, we return the index, else -1.\n *\n * @param {Array} orderedItems\n * @param {{start: number, end: number}} target\n * @param {string} field\n * @param {string} sidePreference   'before' or 'after'\n * @param {function} comparator an optional comparator, returning -1,0,1 for <,==,>.\n * @returns {number}\n * @private\n */\nexports.binarySearchValue = function (orderedItems, target, field, sidePreference, comparator) {\n  var maxIterations = 10000;\n  var iteration = 0;\n  var low = 0;\n  var high = orderedItems.length - 1;\n  var prevValue, value, nextValue, middle;\n\n  comparator = comparator != undefined ? comparator : function (a, b) {\n    return a == b ? 0 : a < b ? -1 : 1;\n  };\n\n  while (low <= high && iteration < maxIterations) {\n    // get a new guess\n    middle = Math.floor(0.5 * (high + low));\n    prevValue = orderedItems[Math.max(0, middle - 1)][field];\n    value = orderedItems[middle][field];\n    nextValue = orderedItems[Math.min(orderedItems.length - 1, middle + 1)][field];\n\n    if (comparator(value, target) == 0) {\n      // we found the target\n      return middle;\n    } else if (comparator(prevValue, target) < 0 && comparator(value, target) > 0) {\n      // target is in between of the previous and the current\n      return sidePreference == 'before' ? Math.max(0, middle - 1) : middle;\n    } else if (comparator(value, target) < 0 && comparator(nextValue, target) > 0) {\n      // target is in between of the current and the next\n      return sidePreference == 'before' ? middle : Math.min(orderedItems.length - 1, middle + 1);\n    } else {\n      // didnt find the target, we need to change our boundaries.\n      if (comparator(value, target) < 0) {\n        // it is too small --> increase low\n        low = middle + 1;\n      } else {\n        // it is too big --> decrease high\n        high = middle - 1;\n      }\n    }\n    iteration++;\n  }\n\n  // didnt find anything. Return -1.\n  return -1;\n};\n\n/*\n * Easing Functions - inspired from http://gizma.com/easing/\n * only considering the t value for the range [0, 1] => [0, 1]\n * https://gist.github.com/gre/1650294\n */\nexports.easingFunctions = {\n  // no easing, no acceleration\n  linear: function linear(t) {\n    return t;\n  },\n  // accelerating from zero velocity\n  easeInQuad: function easeInQuad(t) {\n    return t * t;\n  },\n  // decelerating to zero velocity\n  easeOutQuad: function easeOutQuad(t) {\n    return t * (2 - t);\n  },\n  // acceleration until halfway, then deceleration\n  easeInOutQuad: function easeInOutQuad(t) {\n    return t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t;\n  },\n  // accelerating from zero velocity\n  easeInCubic: function easeInCubic(t) {\n    return t * t * t;\n  },\n  // decelerating to zero velocity\n  easeOutCubic: function easeOutCubic(t) {\n    return --t * t * t + 1;\n  },\n  // acceleration until halfway, then deceleration\n  easeInOutCubic: function easeInOutCubic(t) {\n    return t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1;\n  },\n  // accelerating from zero velocity\n  easeInQuart: function easeInQuart(t) {\n    return t * t * t * t;\n  },\n  // decelerating to zero velocity\n  easeOutQuart: function easeOutQuart(t) {\n    return 1 - --t * t * t * t;\n  },\n  // acceleration until halfway, then deceleration\n  easeInOutQuart: function easeInOutQuart(t) {\n    return t < 0.5 ? 8 * t * t * t * t : 1 - 8 * --t * t * t * t;\n  },\n  // accelerating from zero velocity\n  easeInQuint: function easeInQuint(t) {\n    return t * t * t * t * t;\n  },\n  // decelerating to zero velocity\n  easeOutQuint: function easeOutQuint(t) {\n    return 1 + --t * t * t * t * t;\n  },\n  // acceleration until halfway, then deceleration\n  easeInOutQuint: function easeInOutQuint(t) {\n    return t < 0.5 ? 16 * t * t * t * t * t : 1 + 16 * --t * t * t * t * t;\n  }\n};\n\nexports.getScrollBarWidth = function () {\n  var inner = document.createElement('p');\n  inner.style.width = '100%';\n  inner.style.height = '200px';\n\n  var outer = document.createElement('div');\n  outer.style.position = 'absolute';\n  outer.style.top = '0px';\n  outer.style.left = '0px';\n  outer.style.visibility = 'hidden';\n  outer.style.width = '200px';\n  outer.style.height = '150px';\n  outer.style.overflow = 'hidden';\n  outer.appendChild(inner);\n\n  document.body.appendChild(outer);\n  var w1 = inner.offsetWidth;\n  outer.style.overflow = 'scroll';\n  var w2 = inner.offsetWidth;\n  if (w1 == w2) w2 = outer.clientWidth;\n\n  document.body.removeChild(outer);\n\n  return w1 - w2;\n};\n\nexports.topMost = function (pile, accessors) {\n  var candidate = void 0;\n  if (!Array.isArray(accessors)) {\n    accessors = [accessors];\n  }\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = (0, _getIterator3['default'])(pile), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var member = _step.value;\n\n      if (member) {\n        candidate = member[accessors[0]];\n        for (var i = 1; i < accessors.length; i++) {\n          if (candidate) {\n            candidate = candidate[accessors[i]];\n          }\n        }\n        if (typeof candidate != 'undefined') {\n          break;\n        }\n      }\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator['return']) {\n        _iterator['return']();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  return candidate;\n};\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __nested_webpack_require_49405__) {\n\nmodule.exports = { \"default\": __nested_webpack_require_49405__(145), __esModule: true };\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __nested_webpack_require_49557__) {\n\n\"use strict\";\n\n\nexports.__esModule = true;\n\nvar _typeof2 = __nested_webpack_require_49557__(7);\n\nvar _typeof3 = _interopRequireDefault(_typeof2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = function (self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && ((typeof call === \"undefined\" ? \"undefined\" : (0, _typeof3.default)(call)) === \"object\" || typeof call === \"function\") ? call : self;\n};\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports, __nested_webpack_require_50171__) {\n\n\"use strict\";\n\n\nexports.__esModule = true;\n\nvar _setPrototypeOf = __nested_webpack_require_50171__(147);\n\nvar _setPrototypeOf2 = _interopRequireDefault(_setPrototypeOf);\n\nvar _create = __nested_webpack_require_50171__(31);\n\nvar _create2 = _interopRequireDefault(_create);\n\nvar _typeof2 = __nested_webpack_require_50171__(7);\n\nvar _typeof3 = _interopRequireDefault(_typeof2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = function (subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + (typeof superClass === \"undefined\" ? \"undefined\" : (0, _typeof3.default)(superClass)));\n  }\n\n  subClass.prototype = (0, _create2.default)(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf2.default ? (0, _setPrototypeOf2.default)(subClass, superClass) : subClass.__proto__ = superClass;\n};\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports) {\n\nvar core = module.exports = { version: '2.5.7' };\nif (typeof __e == 'number') __e = core; // eslint-disable-line no-undef\n\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports, __nested_webpack_require_51498__) {\n\n\"use strict\";\n\n\nexports.__esModule = true;\n\nvar _iterator = __nested_webpack_require_51498__(104);\n\nvar _iterator2 = _interopRequireDefault(_iterator);\n\nvar _symbol = __nested_webpack_require_51498__(106);\n\nvar _symbol2 = _interopRequireDefault(_symbol);\n\nvar _typeof = typeof _symbol2.default === \"function\" && typeof _iterator2.default === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof _symbol2.default === \"function\" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? \"symbol\" : typeof obj; };\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = typeof _symbol2.default === \"function\" && _typeof(_iterator2.default) === \"symbol\" ? function (obj) {\n  return typeof obj === \"undefined\" ? \"undefined\" : _typeof(obj);\n} : function (obj) {\n  return obj && typeof _symbol2.default === \"function\" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? \"symbol\" : typeof obj === \"undefined\" ? \"undefined\" : _typeof(obj);\n};\n\n/***/ }),\n/* 8 */\n/***/ (function(module, exports, __nested_webpack_require_52628__) {\n\nvar store = __nested_webpack_require_52628__(44)('wks');\nvar uid = __nested_webpack_require_52628__(29);\nvar Symbol = __nested_webpack_require_52628__(10).Symbol;\nvar USE_SYMBOL = typeof Symbol == 'function';\n\nvar $exports = module.exports = function (name) {\n  return store[name] || (store[name] =\n    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));\n};\n\n$exports.store = store;\n\n\n/***/ }),\n/* 9 */\n/***/ (function(module, exports, __nested_webpack_require_53075__) {\n\nmodule.exports = { \"default\": __nested_webpack_require_53075__(102), __esModule: true };\n\n/***/ }),\n/* 10 */\n/***/ (function(module, exports) {\n\n// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028\nvar global = module.exports = typeof window != 'undefined' && window.Math == Math\n  ? window : typeof self != 'undefined' && self.Math == Math ? self\n  // eslint-disable-next-line no-new-func\n  : Function('return this')();\nif (typeof __g == 'number') __g = global; // eslint-disable-line no-undef\n\n\n/***/ }),\n/* 11 */\n/***/ (function(module, exports, __nested_webpack_require_53654__) {\n\nvar global = __nested_webpack_require_53654__(10);\nvar core = __nested_webpack_require_53654__(6);\nvar ctx = __nested_webpack_require_53654__(61);\nvar hide = __nested_webpack_require_53654__(19);\nvar has = __nested_webpack_require_53654__(14);\nvar PROTOTYPE = 'prototype';\n\nvar $export = function (type, name, source) {\n  var IS_FORCED = type & $export.F;\n  var IS_GLOBAL = type & $export.G;\n  var IS_STATIC = type & $export.S;\n  var IS_PROTO = type & $export.P;\n  var IS_BIND = type & $export.B;\n  var IS_WRAP = type & $export.W;\n  var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});\n  var expProto = exports[PROTOTYPE];\n  var target = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE];\n  var key, own, out;\n  if (IS_GLOBAL) source = name;\n  for (key in source) {\n    // contains in native\n    own = !IS_FORCED && target && target[key] !== undefined;\n    if (own && has(exports, key)) continue;\n    // export native or passed\n    out = own ? target[key] : source[key];\n    // prevent global pollution for namespaces\n    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]\n    // bind timers to global for call from export context\n    : IS_BIND && own ? ctx(out, global)\n    // wrap global constructors for prevent change them in library\n    : IS_WRAP && target[key] == out ? (function (C) {\n      var F = function (a, b, c) {\n        if (this instanceof C) {\n          switch (arguments.length) {\n            case 0: return new C();\n            case 1: return new C(a);\n            case 2: return new C(a, b);\n          } return new C(a, b, c);\n        } return C.apply(this, arguments);\n      };\n      F[PROTOTYPE] = C[PROTOTYPE];\n      return F;\n    // make static versions for prototype methods\n    })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;\n    // export proto methods to core.%CONSTRUCTOR%.methods.%NAME%\n    if (IS_PROTO) {\n      (exports.virtual || (exports.virtual = {}))[key] = out;\n      // export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%\n      if (type & $export.R && expProto && !expProto[key]) hide(expProto, key, out);\n    }\n  }\n};\n// type bitmap\n$export.F = 1;   // forced\n$export.G = 2;   // global\n$export.S = 4;   // static\n$export.P = 8;   // proto\n$export.B = 16;  // bind\n$export.W = 32;  // wrap\n$export.U = 64;  // safe\n$export.R = 128; // real proto method for `library`\nmodule.exports = $export;\n\n\n/***/ }),\n/* 12 */\n/***/ (function(module, exports, __nested_webpack_require_56105__) {\n\nvar anObject = __nested_webpack_require_56105__(20);\nvar IE8_DOM_DEFINE = __nested_webpack_require_56105__(62);\nvar toPrimitive = __nested_webpack_require_56105__(40);\nvar dP = Object.defineProperty;\n\nexports.f = __nested_webpack_require_56105__(13) ? Object.defineProperty : function defineProperty(O, P, Attributes) {\n  anObject(O);\n  P = toPrimitive(P, true);\n  anObject(Attributes);\n  if (IE8_DOM_DEFINE) try {\n    return dP(O, P, Attributes);\n  } catch (e) { /* empty */ }\n  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');\n  if ('value' in Attributes) O[P] = Attributes.value;\n  return O;\n};\n\n\n/***/ }),\n/* 13 */\n/***/ (function(module, exports, __nested_webpack_require_56773__) {\n\n// Thank's IE8 for his funny defineProperty\nmodule.exports = !__nested_webpack_require_56773__(22)(function () {\n  return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;\n});\n\n\n/***/ }),\n/* 14 */\n/***/ (function(module, exports) {\n\nvar hasOwnProperty = {}.hasOwnProperty;\nmodule.exports = function (it, key) {\n  return hasOwnProperty.call(it, key);\n};\n\n\n/***/ }),\n/* 15 */\n/***/ (function(module, exports, __nested_webpack_require_57216__) {\n\n\"use strict\";\n\n\nexports.__esModule = true;\n\nvar _isIterable2 = __nested_webpack_require_57216__(136);\n\nvar _isIterable3 = _interopRequireDefault(_isIterable2);\n\nvar _getIterator2 = __nested_webpack_require_57216__(58);\n\nvar _getIterator3 = _interopRequireDefault(_getIterator2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = (0, _getIterator3.default)(arr), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if ((0, _isIterable3.default)(Object(arr))) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\n\n/***/ }),\n/* 16 */\n/***/ (function(module, exports, __nested_webpack_require_58479__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof2 = __nested_webpack_require_58479__(7);\n\nvar _typeof3 = _interopRequireDefault(_typeof2);\n\nvar _classCallCheck2 = __nested_webpack_require_58479__(0);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __nested_webpack_require_58479__(1);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\n/**\n * The Base class for all Nodes.\n */\nvar NodeBase = function () {\n  /**\n   * @param {Object} options\n   * @param {Object} body\n   * @param {Label} labelModule\n   */\n  function NodeBase(options, body, labelModule) {\n    (0, _classCallCheck3['default'])(this, NodeBase);\n\n    this.body = body;\n    this.labelModule = labelModule;\n    this.setOptions(options);\n    this.top = undefined;\n    this.left = undefined;\n    this.height = undefined;\n    this.width = undefined;\n    this.radius = undefined;\n    this.margin = undefined;\n    this.refreshNeeded = true;\n    this.boundingBox = { top: 0, left: 0, right: 0, bottom: 0 };\n  }\n\n  /**\n   *\n   * @param {Object} options\n   */\n\n\n  (0, _createClass3['default'])(NodeBase, [{\n    key: 'setOptions',\n    value: function setOptions(options) {\n      this.options = options;\n    }\n\n    /**\n     *\n     * @param {Label} labelModule\n     * @private\n     */\n\n  }, {\n    key: '_setMargins',\n    value: function _setMargins(labelModule) {\n      this.margin = {};\n      if (this.options.margin) {\n        if ((0, _typeof3['default'])(this.options.margin) == 'object') {\n          this.margin.top = this.options.margin.top;\n          this.margin.right = this.options.margin.right;\n          this.margin.bottom = this.options.margin.bottom;\n          this.margin.left = this.options.margin.left;\n        } else {\n          this.margin.top = this.options.margin;\n          this.margin.right = this.options.margin;\n          this.margin.bottom = this.options.margin;\n          this.margin.left = this.options.margin;\n        }\n      }\n      labelModule.adjustSizes(this.margin);\n    }\n\n    /**\n     *\n     * @param {CanvasRenderingContext2D} ctx\n     * @param {number} angle\n     * @returns {number}\n     * @private\n     */\n\n  }, {\n    key: '_distanceToBorder',\n    value: function _distanceToBorder(ctx, angle) {\n      var borderWidth = this.options.borderWidth;\n      this.resize(ctx);\n      return Math.min(Math.abs(this.width / 2 / Math.cos(angle)), Math.abs(this.height / 2 / Math.sin(angle))) + borderWidth;\n    }\n\n    /**\n     *\n     * @param {CanvasRenderingContext2D} ctx\n     * @param {ArrowOptions} values\n     */\n\n  }, {\n    key: 'enableShadow',\n    value: function enableShadow(ctx, values) {\n      if (values.shadow) {\n        ctx.shadowColor = values.shadowColor;\n        ctx.shadowBlur = values.shadowSize;\n        ctx.shadowOffsetX = values.shadowX;\n        ctx.shadowOffsetY = values.shadowY;\n      }\n    }\n\n    /**\n     *\n     * @param {CanvasRenderingContext2D} ctx\n     * @param {ArrowOptions} values\n     */\n\n  }, {\n    key: 'disableShadow',\n    value: function disableShadow(ctx, values) {\n      if (values.shadow) {\n        ctx.shadowColor = 'rgba(0,0,0,0)';\n        ctx.shadowBlur = 0;\n        ctx.shadowOffsetX = 0;\n        ctx.shadowOffsetY = 0;\n      }\n    }\n\n    /**\n     *\n     * @param {CanvasRenderingContext2D} ctx\n     * @param {ArrowOptions} values\n     */\n\n  }, {\n    key: 'enableBorderDashes',\n    value: function enableBorderDashes(ctx, values) {\n      if (values.borderDashes !== false) {\n        if (ctx.setLineDash !== undefined) {\n          var dashes = values.borderDashes;\n          if (dashes === true) {\n            dashes = [5, 15];\n          }\n          ctx.setLineDash(dashes);\n        } else {\n          console.warn('setLineDash is not supported in this browser. The dashed borders cannot be used.');\n          this.options.shapeProperties.borderDashes = false;\n          values.borderDashes = false;\n        }\n      }\n    }\n\n    /**\n     *\n     * @param {CanvasRenderingContext2D} ctx\n     * @param {ArrowOptions} values\n     */\n\n  }, {\n    key: 'disableBorderDashes',\n    value: function disableBorderDashes(ctx, values) {\n      if (values.borderDashes !== false) {\n        if (ctx.setLineDash !== undefined) {\n          ctx.setLineDash([0]);\n        } else {\n          console.warn('setLineDash is not supported in this browser. The dashed borders cannot be used.');\n          this.options.shapeProperties.borderDashes = false;\n          values.borderDashes = false;\n        }\n      }\n    }\n\n    /**\n     * Determine if the shape of a node needs to be recalculated.\n     *\n     * @param {boolean} selected\n     * @param {boolean} hover\n     * @returns {boolean}\n     * @protected\n     */\n\n  }, {\n    key: 'needsRefresh',\n    value: function needsRefresh(selected, hover) {\n      if (this.refreshNeeded === true) {\n        // This is probably not the best location to reset this member.\n        // However, in the current logic, it is the most convenient one.\n        this.refreshNeeded = false;\n        return true;\n      }\n\n      return this.width === undefined || this.labelModule.differentState(selected, hover);\n    }\n\n    /**\n     *\n     * @param {CanvasRenderingContext2D} ctx\n     * @param {ArrowOptions} values\n     */\n\n  }, {\n    key: 'initContextForDraw',\n    value: function initContextForDraw(ctx, values) {\n      var borderWidth = values.borderWidth / this.body.view.scale;\n\n      ctx.lineWidth = Math.min(this.width, borderWidth);\n      ctx.strokeStyle = values.borderColor;\n      ctx.fillStyle = values.color;\n    }\n\n    /**\n     *\n     * @param {CanvasRenderingContext2D} ctx\n     * @param {ArrowOptions} values\n     */\n\n  }, {\n    key: 'performStroke',\n    value: function performStroke(ctx, values) {\n      var borderWidth = values.borderWidth / this.body.view.scale;\n\n      //draw dashed border if enabled, save and restore is required for firefox not to crash on unix.\n      ctx.save();\n      // if borders are zero width, they will be drawn with width 1 by default. This prevents that\n      if (borderWidth > 0) {\n        this.enableBorderDashes(ctx, values);\n        //draw the border\n        ctx.stroke();\n        //disable dashed border for other elements\n        this.disableBorderDashes(ctx, values);\n      }\n      ctx.restore();\n    }\n\n    /**\n     *\n     * @param {CanvasRenderingContext2D} ctx\n     * @param {ArrowOptions} values\n     */\n\n  }, {\n    key: 'performFill',\n    value: function performFill(ctx, values) {\n      // draw shadow if enabled\n      this.enableShadow(ctx, values);\n      // draw the background\n      ctx.fill();\n      // disable shadows for other elements.\n      this.disableShadow(ctx, values);\n\n      this.performStroke(ctx, values);\n    }\n\n    /**\n     *\n     * @param {number} margin\n     * @private\n     */\n\n  }, {\n    key: '_addBoundingBoxMargin',\n    value: function _addBoundingBoxMargin(margin) {\n      this.boundingBox.left -= margin;\n      this.boundingBox.top -= margin;\n      this.boundingBox.bottom += margin;\n      this.boundingBox.right += margin;\n    }\n\n    /**\n     * Actual implementation of this method call.\n     *\n     * Doing it like this makes it easier to override\n     * in the child classes.\n     *\n     * @param {number} x width\n     * @param {number} y height\n     * @param {CanvasRenderingContext2D} ctx\n     * @param {boolean} selected\n     * @param {boolean} hover\n     * @private\n     */\n\n  }, {\n    key: '_updateBoundingBox',\n    value: function _updateBoundingBox(x, y, ctx, selected, hover) {\n      if (ctx !== undefined) {\n        this.resize(ctx, selected, hover);\n      }\n\n      this.left = x - this.width / 2;\n      this.top = y - this.height / 2;\n\n      this.boundingBox.left = this.left;\n      this.boundingBox.top = this.top;\n      this.boundingBox.bottom = this.top + this.height;\n      this.boundingBox.right = this.left + this.width;\n    }\n\n    /**\n     * Default implementation of this method call.\n     * This acts as a stub which can be overridden.\n     *\n     * @param {number} x width\n     * @param {number} y height\n     * @param {CanvasRenderingContext2D} ctx\n     * @param {boolean} selected\n     * @param {boolean} hover\n     */\n\n  }, {\n    key: 'updateBoundingBox',\n    value: function updateBoundingBox(x, y, ctx, selected, hover) {\n      this._updateBoundingBox(x, y, ctx, selected, hover);\n    }\n\n    /**\n     * Determine the dimensions to use for nodes with an internal label\n     *\n     * Currently, these are: Circle, Ellipse, Database, Box\n     * The other nodes have external labels, and will not call this method\n     *\n     * If there is no label, decent default values are supplied.\n     *\n     * @param {CanvasRenderingContext2D} ctx\n     * @param {boolean} [selected]\n     * @param {boolean} [hover]\n     * @returns {{width:number, height:number}}\n     */\n\n  }, {\n    key: 'getDimensionsFromLabel',\n    value: function getDimensionsFromLabel(ctx, selected, hover) {\n      // NOTE: previously 'textSize' was not put in 'this' for Ellipse\n      // TODO: examine the consequences.\n      this.textSize = this.labelModule.getTextSize(ctx, selected, hover);\n      var width = this.textSize.width;\n      var height = this.textSize.height;\n\n      var DEFAULT_SIZE = 14;\n      if (width === 0) {\n        // This happens when there is no label text set\n        width = DEFAULT_SIZE; // use a decent default\n        height = DEFAULT_SIZE; // if width zero, then height also always zero\n      }\n\n      return { width: width, height: height };\n    }\n  }]);\n  return NodeBase;\n}();\n\nexports['default'] = NodeBase;\n\n/***/ }),\n/* 17 */\n/***/ (function(module, exports, __nested_webpack_require_68154__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _getPrototypeOf = __nested_webpack_require_68154__(3);\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _classCallCheck2 = __nested_webpack_require_68154__(0);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __nested_webpack_require_68154__(1);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = __nested_webpack_require_68154__(4);\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = __nested_webpack_require_68154__(5);\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _NodeBase2 = __nested_webpack_require_68154__(16);\n\nvar _NodeBase3 = _interopRequireDefault(_NodeBase2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\n/**\n * Base class for constructing Node/Cluster Shapes.\n *\n * @extends NodeBase\n */\nvar ShapeBase = function (_NodeBase) {\n  (0, _inherits3['default'])(ShapeBase, _NodeBase);\n\n  /**\n   * @param {Object} options\n   * @param {Object} body\n   * @param {Label} labelModule\n   */\n  function ShapeBase(options, body, labelModule) {\n    (0, _classCallCheck3['default'])(this, ShapeBase);\n    return (0, _possibleConstructorReturn3['default'])(this, (ShapeBase.__proto__ || (0, _getPrototypeOf2['default'])(ShapeBase)).call(this, options, body, labelModule));\n  }\n\n  /**\n   *\n   * @param {CanvasRenderingContext2D} ctx\n   * @param {boolean} [selected]\n   * @param {boolean} [hover]\n   * @param {Object} [values={size: this.options.size}]\n   */\n\n\n  (0, _createClass3['default'])(ShapeBase, [{\n    key: 'resize',\n    value: function resize(ctx) {\n      var selected = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.selected;\n      var hover = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.hover;\n      var values = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : { size: this.options.size };\n\n      if (this.needsRefresh(selected, hover)) {\n        this.labelModule.getTextSize(ctx, selected, hover);\n        var size = 2 * values.size;\n        this.width = size;\n        this.height = size;\n        this.radius = 0.5 * this.width;\n      }\n    }\n\n    /**\n     *\n     * @param {CanvasRenderingContext2D} ctx\n     * @param {string} shape\n     * @param {number} sizeMultiplier - Unused! TODO: Remove next major release\n     * @param {number} x\n     * @param {number} y\n     * @param {boolean} selected\n     * @param {boolean} hover\n     * @param {ArrowOptions} values\n     * @private\n     */\n\n  }, {\n    key: '_drawShape',\n    value: function _drawShape(ctx, shape, sizeMultiplier, x, y, selected, hover, values) {\n      this.resize(ctx, selected, hover, values);\n      this.left = x - this.width / 2;\n      this.top = y - this.height / 2;\n\n      this.initContextForDraw(ctx, values);\n      ctx[shape](x, y, values.size);\n      this.performFill(ctx, values);\n\n      if (this.options.icon !== undefined) {\n        if (this.options.icon.code !== undefined) {\n          ctx.font = (selected ? 'bold ' : '') + this.height / 2 + 'px ' + (this.options.icon.face || 'FontAwesome');\n          ctx.fillStyle = this.options.icon.color || 'black';\n          ctx.textAlign = 'center';\n          ctx.textBaseline = 'middle';\n          ctx.fillText(this.options.icon.code, x, y);\n        }\n      }\n\n      if (this.options.label !== undefined) {\n        // Need to call following here in order to ensure value for `this.labelModule.size.height`\n        this.labelModule.calculateLabelSize(ctx, selected, hover, x, y, 'hanging');\n        var yLabel = y + 0.5 * this.height + 0.5 * this.labelModule.size.height;\n        this.labelModule.draw(ctx, x, yLabel, selected, hover, 'hanging');\n      }\n\n      this.updateBoundingBox(x, y);\n    }\n\n    /**\n     *\n     * @param {number} x\n     * @param {number} y\n     */\n\n  }, {\n    key: 'updateBoundingBox',\n    value: function updateBoundingBox(x, y) {\n      this.boundingBox.top = y - this.options.size;\n      this.boundingBox.left = x - this.options.size;\n      this.boundingBox.right = x + this.options.size;\n      this.boundingBox.bottom = y + this.options.size;\n\n      if (this.options.label !== undefined && this.labelModule.size.width > 0) {\n        this.boundingBox.left = Math.min(this.boundingBox.left, this.labelModule.size.left);\n        this.boundingBox.right = Math.max(this.boundingBox.right, this.labelModule.size.left + this.labelModule.size.width);\n        this.boundingBox.bottom = Math.max(this.boundingBox.bottom, this.boundingBox.bottom + this.labelModule.size.height);\n      }\n    }\n  }]);\n  return ShapeBase;\n}(_NodeBase3['default']);\n\nexports['default'] = ShapeBase;\n\n/***/ }),\n/* 18 */\n/***/ (function(module, exports, __nested_webpack_require_72961__) {\n\n// to indexed object, toObject with fallback for non-array-like ES3 strings\nvar IObject = __nested_webpack_require_72961__(59);\nvar defined = __nested_webpack_require_72961__(39);\nmodule.exports = function (it) {\n  return IObject(defined(it));\n};\n\n\n/***/ }),\n/* 19 */\n/***/ (function(module, exports, __nested_webpack_require_73260__) {\n\nvar dP = __nested_webpack_require_73260__(12);\nvar createDesc = __nested_webpack_require_73260__(28);\nmodule.exports = __nested_webpack_require_73260__(13) ? function (object, key, value) {\n  return dP.f(object, key, createDesc(1, value));\n} : function (object, key, value) {\n  object[key] = value;\n  return object;\n};\n\n\n/***/ }),\n/* 20 */\n/***/ (function(module, exports, __nested_webpack_require_73618__) {\n\nvar isObject = __nested_webpack_require_73618__(21);\nmodule.exports = function (it) {\n  if (!isObject(it)) throw TypeError(it + ' is not an object!');\n  return it;\n};\n\n\n/***/ }),\n/* 21 */\n/***/ (function(module, exports) {\n\nmodule.exports = function (it) {\n  return typeof it === 'object' ? it !== null : typeof it === 'function';\n};\n\n\n/***/ }),\n/* 22 */\n/***/ (function(module, exports) {\n\nmodule.exports = function (exec) {\n  try {\n    return !!exec();\n  } catch (e) {\n    return true;\n  }\n};\n\n\n/***/ }),\n/* 23 */\n/***/ (function(module, exports, __nested_webpack_require_74178__) {\n\nmodule.exports = { \"default\": __nested_webpack_require_74178__(123), __esModule: true };\n\n/***/ }),\n/* 24 */\n/***/ (function(module, exports, __nested_webpack_require_74331__) {\n\n\"use strict\";\n\n\n/**\n * Setup a mock hammer.js object, for unit testing.\n *\n * Inspiration: https://github.com/uber/deck.gl/pull/658\n *\n * @returns {{on: noop, off: noop, destroy: noop, emit: noop, get: get}}\n */\nfunction hammerMock() {\n  var noop = function noop() {};\n\n  return {\n    on: noop,\n    off: noop,\n    destroy: noop,\n    emit: noop,\n\n    //eslint-disable-next-line no-unused-vars\n    get: function get(m) {\n      return {\n        set: noop\n      };\n    }\n  };\n}\n\nif (typeof window !== 'undefined') {\n  var propagating = __nested_webpack_require_74331__(127);\n  var Hammer = window['Hammer'] || __nested_webpack_require_74331__(128);\n  module.exports = propagating(Hammer, {\n    preventDefault: 'mouse'\n  });\n} else {\n  module.exports = function () {\n    // hammer.js is only available in a browser, not in node.js. Replacing it with a mock object.\n    return hammerMock();\n  };\n}\n\n/***/ }),\n/* 25 */\n/***/ (function(module, exports) {\n\nmodule.exports = {};\n\n\n/***/ }),\n/* 26 */\n/***/ (function(module, exports, __nested_webpack_require_75352__) {\n\n// 19.1.2.14 / 15.2.3.14 Object.keys(O)\nvar $keys = __nested_webpack_require_75352__(65);\nvar enumBugKeys = __nested_webpack_require_75352__(45);\n\nmodule.exports = Object.keys || function keys(O) {\n  return $keys(O, enumBugKeys);\n};\n\n\n/***/ }),\n/* 27 */\n/***/ (function(module, exports) {\n\nmodule.exports = true;\n\n\n/***/ }),\n/* 28 */\n/***/ (function(module, exports) {\n\nmodule.exports = function (bitmap, value) {\n  return {\n    enumerable: !(bitmap & 1),\n    configurable: !(bitmap & 2),\n    writable: !(bitmap & 4),\n    value: value\n  };\n};\n\n\n/***/ }),\n/* 29 */\n/***/ (function(module, exports) {\n\nvar id = 0;\nvar px = Math.random();\nmodule.exports = function (key) {\n  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));\n};\n\n\n/***/ }),\n/* 30 */\n/***/ (function(module, exports, __nested_webpack_require_76166__) {\n\n// 7.1.13 ToObject(argument)\nvar defined = __nested_webpack_require_76166__(39);\nmodule.exports = function (it) {\n  return Object(defined(it));\n};\n\n\n/***/ }),\n/* 31 */\n/***/ (function(module, exports, __nested_webpack_require_76378__) {\n\nmodule.exports = { \"default\": __nested_webpack_require_76378__(100), __esModule: true };\n\n/***/ }),\n/* 32 */\n/***/ (function(module, exports) {\n\nexports.f = {}.propertyIsEnumerable;\n\n\n/***/ }),\n/* 33 */\n/***/ (function(module, exports, __nested_webpack_require_76625__) {\n\n\"use strict\";\n\n\nvar _stringify = __nested_webpack_require_76625__(23);\n\nvar _stringify2 = _interopRequireDefault(_stringify);\n\nvar _typeof2 = __nested_webpack_require_76625__(7);\n\nvar _typeof3 = _interopRequireDefault(_typeof2);\n\nvar _keys = __nested_webpack_require_76625__(9);\n\nvar _keys2 = _interopRequireDefault(_keys);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar util = __nested_webpack_require_76625__(2);\nvar Queue = __nested_webpack_require_76625__(72);\n\n/**\n * DataSet\n * // TODO: add a DataSet constructor DataSet(data, options)\n *\n * Usage:\n *     var dataSet = new DataSet({\n *         fieldId: '_id',\n *         type: {\n *             // ...\n *         }\n *     });\n *\n *     dataSet.add(item);\n *     dataSet.add(data);\n *     dataSet.update(item);\n *     dataSet.update(data);\n *     dataSet.remove(id);\n *     dataSet.remove(ids);\n *     var data = dataSet.get();\n *     var data = dataSet.get(id);\n *     var data = dataSet.get(ids);\n *     var data = dataSet.get(ids, options, data);\n *     dataSet.clear();\n *\n * A data set can:\n * - add/remove/update data\n * - gives triggers upon changes in the data\n * - can  import/export data in various data formats\n *\n * @param {Array} [data]    Optional array with initial data\n * @param {Object} [options]   Available options:\n *                             {string} fieldId Field name of the id in the\n *                                              items, 'id' by default.\n *                             {Object.<string, string} type\n *                                              A map with field names as key,\n *                                              and the field type as value.\n *                             {Object} queue   Queue changes to the DataSet,\n *                                              flush them all at once.\n *                                              Queue options:\n *                                              - {number} delay  Delay in ms, null by default\n *                                              - {number} max    Maximum number of entries in the queue, Infinity by default\n * @constructor DataSet\n */\nfunction DataSet(data, options) {\n  // correctly read optional arguments\n  if (data && !Array.isArray(data)) {\n    options = data;\n    data = null;\n  }\n\n  this._options = options || {};\n  this._data = {}; // map with data indexed by id\n  this.length = 0; // number of items in the DataSet\n  this._fieldId = this._options.fieldId || 'id'; // name of the field containing id\n  this._type = {}; // internal field types (NOTE: this can differ from this._options.type)\n\n  // all variants of a Date are internally stored as Date, so we can convert\n  // from everything to everything (also from ISODate to Number for example)\n  if (this._options.type) {\n    var fields = (0, _keys2['default'])(this._options.type);\n    for (var i = 0, len = fields.length; i < len; i++) {\n      var field = fields[i];\n      var value = this._options.type[field];\n      if (value == 'Date' || value == 'ISODate' || value == 'ASPDate') {\n        this._type[field] = 'Date';\n      } else {\n        this._type[field] = value;\n      }\n    }\n  }\n\n  this._subscribers = {}; // event subscribers\n\n  // add initial data when provided\n  if (data) {\n    this.add(data);\n  }\n\n  this.setOptions(options);\n}\n\n/**\n * @param {Object} options   Available options:\n *                             {Object} queue   Queue changes to the DataSet,\n *                                              flush them all at once.\n *                                              Queue options:\n *                                              - {number} delay  Delay in ms, null by default\n *                                              - {number} max    Maximum number of entries in the queue, Infinity by default\n */\nDataSet.prototype.setOptions = function (options) {\n  if (options && options.queue !== undefined) {\n    if (options.queue === false) {\n      // delete queue if loaded\n      if (this._queue) {\n        this._queue.destroy();\n        delete this._queue;\n      }\n    } else {\n      // create queue and update its options\n      if (!this._queue) {\n        this._queue = Queue.extend(this, {\n          replace: ['add', 'update', 'remove']\n        });\n      }\n\n      if ((0, _typeof3['default'])(options.queue) === 'object') {\n        this._queue.setOptions(options.queue);\n      }\n    }\n  }\n};\n\n/**\n * Subscribe to an event, add an event listener\n * @param {string} event        Event name. Available events: 'add', 'update',\n *                              'remove'\n * @param {function} callback   Callback method. Called with three parameters:\n *                                  {string} event\n *                                  {Object | null} params\n *                                  {string | number} senderId\n */\nDataSet.prototype.on = function (event, callback) {\n  var subscribers = this._subscribers[event];\n  if (!subscribers) {\n    subscribers = [];\n    this._subscribers[event] = subscribers;\n  }\n\n  subscribers.push({\n    callback: callback\n  });\n};\n\n/**\n * Unsubscribe from an event, remove an event listener\n * @param {string} event\n * @param {function} callback\n */\nDataSet.prototype.off = function (event, callback) {\n  var subscribers = this._subscribers[event];\n  if (subscribers) {\n    this._subscribers[event] = subscribers.filter(function (listener) {\n      return listener.callback != callback;\n    });\n  }\n};\n\n/**\n * Trigger an event\n * @param {string} event\n * @param {Object | null} params\n * @param {string} [senderId]       Optional id of the sender.\n * @private\n */\nDataSet.prototype._trigger = function (event, params, senderId) {\n  if (event == '*') {\n    throw new Error('Cannot trigger event *');\n  }\n\n  var subscribers = [];\n  if (event in this._subscribers) {\n    subscribers = subscribers.concat(this._subscribers[event]);\n  }\n  if ('*' in this._subscribers) {\n    subscribers = subscribers.concat(this._subscribers['*']);\n  }\n\n  for (var i = 0, len = subscribers.length; i < len; i++) {\n    var subscriber = subscribers[i];\n    if (subscriber.callback) {\n      subscriber.callback(event, params, senderId || null);\n    }\n  }\n};\n\n/**\n * Add data.\n * Adding an item will fail when there already is an item with the same id.\n * @param {Object | Array} data\n * @param {string} [senderId] Optional sender id\n * @return {Array.<string|number>} addedIds      Array with the ids of the added items\n */\nDataSet.prototype.add = function (data, senderId) {\n  var addedIds = [],\n      id,\n      me = this;\n\n  if (Array.isArray(data)) {\n    // Array\n    for (var i = 0, len = data.length; i < len; i++) {\n      id = me._addItem(data[i]);\n      addedIds.push(id);\n    }\n  } else if (data && (typeof data === 'undefined' ? 'undefined' : (0, _typeof3['default'])(data)) === 'object') {\n    // Single item\n    id = me._addItem(data);\n    addedIds.push(id);\n  } else {\n    throw new Error('Unknown dataType');\n  }\n\n  if (addedIds.length) {\n    this._trigger('add', { items: addedIds }, senderId);\n  }\n\n  return addedIds;\n};\n\n/**\n * Update existing items. When an item does not exist, it will be created\n * @param {Object | Array} data\n * @param {string} [senderId] Optional sender id\n * @return {Array.<string|number>} updatedIds     The ids of the added or updated items\n * @throws {Error} Unknown Datatype\n */\nDataSet.prototype.update = function (data, senderId) {\n  var addedIds = [];\n  var updatedIds = [];\n  var oldData = [];\n  var updatedData = [];\n  var me = this;\n  var fieldId = me._fieldId;\n\n  var addOrUpdate = function addOrUpdate(item) {\n    var id = item[fieldId];\n    if (me._data[id]) {\n      var oldItem = util.extend({}, me._data[id]);\n      // update item\n      id = me._updateItem(item);\n      updatedIds.push(id);\n      updatedData.push(item);\n      oldData.push(oldItem);\n    } else {\n      // add new item\n      id = me._addItem(item);\n      addedIds.push(id);\n    }\n  };\n\n  if (Array.isArray(data)) {\n    // Array\n    for (var i = 0, len = data.length; i < len; i++) {\n      if (data[i] && (0, _typeof3['default'])(data[i]) === 'object') {\n        addOrUpdate(data[i]);\n      } else {\n        console.warn('Ignoring input item, which is not an object at index ' + i);\n      }\n    }\n  } else if (data && (typeof data === 'undefined' ? 'undefined' : (0, _typeof3['default'])(data)) === 'object') {\n    // Single item\n    addOrUpdate(data);\n  } else {\n    throw new Error('Unknown dataType');\n  }\n\n  if (addedIds.length) {\n    this._trigger('add', { items: addedIds }, senderId);\n  }\n  if (updatedIds.length) {\n    var props = { items: updatedIds, oldData: oldData, data: updatedData\n      // TODO: remove deprecated property 'data' some day\n      //Object.defineProperty(props, 'data', {\n      //  'get': (function() {\n      //    console.warn('Property data is deprecated. Use DataSet.get(ids) to retrieve the new data, use the oldData property on this object to get the old data');\n      //    return updatedData;\n      //  }).bind(this)\n      //});\n    };this._trigger('update', props, senderId);\n  }\n\n  return addedIds.concat(updatedIds);\n};\n\n// prettier-ignore\n/**\n * Get a data item or multiple items.\n *\n * Usage:\n *\n *     get()\n *     get(options: Object)\n *\n *     get(id: number | string)\n *     get(id: number | string, options: Object)\n *\n *     get(ids: number[] | string[])\n *     get(ids: number[] | string[], options: Object)\n *\n * Where:\n *\n * {number | string} id         The id of an item\n * {number[] | string{}} ids    An array with ids of items\n * {Object} options             An Object with options. Available options:\n * {string} [returnType]        Type of data to be returned.\n *                              Can be 'Array' (default) or 'Object'.\n * {Object.<string, string>} [type]\n * {string[]} [fields]          field names to be returned\n * {function} [filter]          filter items\n * {string | function} [order]  Order the items by a field name or custom sort function.\n * @param {Array} args\n * @returns {DataSet}\n * @throws Error\n */\nDataSet.prototype.get = function (args) {\n  // eslint-disable-line no-unused-vars\n  var me = this;\n\n  // parse the arguments\n  var id, ids, options;\n  var firstType = util.getType(arguments[0]);\n  if (firstType == 'String' || firstType == 'Number') {\n    // get(id [, options])\n    id = arguments[0];\n    options = arguments[1];\n  } else if (firstType == 'Array') {\n    // get(ids [, options])\n    ids = arguments[0];\n    options = arguments[1];\n  } else {\n    // get([, options])\n    options = arguments[0];\n  }\n\n  // determine the return type\n  var returnType;\n  if (options && options.returnType) {\n    var allowedValues = ['Array', 'Object'];\n    returnType = allowedValues.indexOf(options.returnType) == -1 ? 'Array' : options.returnType;\n  } else {\n    returnType = 'Array';\n  }\n\n  // build options\n  var type = options && options.type || this._options.type;\n  var filter = options && options.filter;\n  var items = [],\n      item,\n      itemIds,\n      itemId,\n      i,\n      len;\n\n  // convert items\n  if (id != undefined) {\n    // return a single item\n    item = me._getItem(id, type);\n    if (item && filter && !filter(item)) {\n      item = null;\n    }\n  } else if (ids != undefined) {\n    // return a subset of items\n    for (i = 0, len = ids.length; i < len; i++) {\n      item = me._getItem(ids[i], type);\n      if (!filter || filter(item)) {\n        items.push(item);\n      }\n    }\n  } else {\n    // return all items\n    itemIds = (0, _keys2['default'])(this._data);\n    for (i = 0, len = itemIds.length; i < len; i++) {\n      itemId = itemIds[i];\n      item = me._getItem(itemId, type);\n      if (!filter || filter(item)) {\n        items.push(item);\n      }\n    }\n  }\n\n  // order the results\n  if (options && options.order && id == undefined) {\n    this._sort(items, options.order);\n  }\n\n  // filter fields of the items\n  if (options && options.fields) {\n    var fields = options.fields;\n    if (id != undefined) {\n      item = this._filterFields(item, fields);\n    } else {\n      for (i = 0, len = items.length; i < len; i++) {\n        items[i] = this._filterFields(items[i], fields);\n      }\n    }\n  }\n\n  // return the results\n  if (returnType == 'Object') {\n    var result = {},\n        resultant;\n    for (i = 0, len = items.length; i < len; i++) {\n      resultant = items[i];\n      result[resultant.id] = resultant;\n    }\n    return result;\n  } else {\n    if (id != undefined) {\n      // a single item\n      return item;\n    } else {\n      // just return our array\n      return items;\n    }\n  }\n};\n\n/**\n * Get ids of all items or from a filtered set of items.\n * @param {Object} [options]    An Object with options. Available options:\n *                              {function} [filter] filter items\n *                              {string | function} [order] Order the items by\n *                                  a field name or custom sort function.\n * @return {Array.<string|number>} ids\n */\nDataSet.prototype.getIds = function (options) {\n  var data = this._data,\n      filter = options && options.filter,\n      order = options && options.order,\n      type = options && options.type || this._options.type,\n      itemIds = (0, _keys2['default'])(data),\n      i,\n      len,\n      id,\n      item,\n      items,\n      ids = [];\n\n  if (filter) {\n    // get filtered items\n    if (order) {\n      // create ordered list\n      items = [];\n      for (i = 0, len = itemIds.length; i < len; i++) {\n        id = itemIds[i];\n        item = this._getItem(id, type);\n        if (filter(item)) {\n          items.push(item);\n        }\n      }\n\n      this._sort(items, order);\n\n      for (i = 0, len = items.length; i < len; i++) {\n        ids.push(items[i][this._fieldId]);\n      }\n    } else {\n      // create unordered list\n      for (i = 0, len = itemIds.length; i < len; i++) {\n        id = itemIds[i];\n        item = this._getItem(id, type);\n        if (filter(item)) {\n          ids.push(item[this._fieldId]);\n        }\n      }\n    }\n  } else {\n    // get all items\n    if (order) {\n      // create an ordered list\n      items = [];\n      for (i = 0, len = itemIds.length; i < len; i++) {\n        id = itemIds[i];\n        items.push(data[id]);\n      }\n\n      this._sort(items, order);\n\n      for (i = 0, len = items.length; i < len; i++) {\n        ids.push(items[i][this._fieldId]);\n      }\n    } else {\n      // create unordered list\n      for (i = 0, len = itemIds.length; i < len; i++) {\n        id = itemIds[i];\n        item = data[id];\n        ids.push(item[this._fieldId]);\n      }\n    }\n  }\n\n  return ids;\n};\n\n/**\n * Returns the DataSet itself. Is overwritten for example by the DataView,\n * which returns the DataSet it is connected to instead.\n * @returns {DataSet}\n */\nDataSet.prototype.getDataSet = function () {\n  return this;\n};\n\n/**\n * Execute a callback function for every item in the dataset.\n * @param {function} callback\n * @param {Object} [options]    Available options:\n *                              {Object.<string, string>} [type]\n *                              {string[]} [fields] filter fields\n *                              {function} [filter] filter items\n *                              {string | function} [order] Order the items by\n *                                  a field name or custom sort function.\n */\nDataSet.prototype.forEach = function (callback, options) {\n  var filter = options && options.filter,\n      type = options && options.type || this._options.type,\n      data = this._data,\n      itemIds = (0, _keys2['default'])(data),\n      i,\n      len,\n      item,\n      id;\n\n  if (options && options.order) {\n    // execute forEach on ordered list\n    var items = this.get(options);\n\n    for (i = 0, len = items.length; i < len; i++) {\n      item = items[i];\n      id = item[this._fieldId];\n      callback(item, id);\n    }\n  } else {\n    // unordered\n    for (i = 0, len = itemIds.length; i < len; i++) {\n      id = itemIds[i];\n      item = this._getItem(id, type);\n      if (!filter || filter(item)) {\n        callback(item, id);\n      }\n    }\n  }\n};\n\n/**\n * Map every item in the dataset.\n * @param {function} callback\n * @param {Object} [options]    Available options:\n *                              {Object.<string, string>} [type]\n *                              {string[]} [fields] filter fields\n *                              {function} [filter] filter items\n *                              {string | function} [order] Order the items by\n *                                  a field name or custom sort function.\n * @return {Object[]} mappedItems\n */\nDataSet.prototype.map = function (callback, options) {\n  var filter = options && options.filter,\n      type = options && options.type || this._options.type,\n      mappedItems = [],\n      data = this._data,\n      itemIds = (0, _keys2['default'])(data),\n      i,\n      len,\n      id,\n      item;\n\n  // convert and filter items\n  for (i = 0, len = itemIds.length; i < len; i++) {\n    id = itemIds[i];\n    item = this._getItem(id, type);\n    if (!filter || filter(item)) {\n      mappedItems.push(callback(item, id));\n    }\n  }\n\n  // order items\n  if (options && options.order) {\n    this._sort(mappedItems, options.order);\n  }\n\n  return mappedItems;\n};\n\n/**\n * Filter the fields of an item\n * @param {Object | null} item\n * @param {string[]} fields     Field names\n * @return {Object | null} filteredItem or null if no item is provided\n * @private\n */\nDataSet.prototype._filterFields = function (item, fields) {\n  if (!item) {\n    // item is null\n    return item;\n  }\n\n  var filteredItem = {},\n      itemFields = (0, _keys2['default'])(item),\n      len = itemFields.length,\n      i,\n      field;\n\n  if (Array.isArray(fields)) {\n    for (i = 0; i < len; i++) {\n      field = itemFields[i];\n      if (fields.indexOf(field) != -1) {\n        filteredItem[field] = item[field];\n      }\n    }\n  } else {\n    for (i = 0; i < len; i++) {\n      field = itemFields[i];\n      if (fields.hasOwnProperty(field)) {\n        filteredItem[fields[field]] = item[field];\n      }\n    }\n  }\n\n  return filteredItem;\n};\n\n/**\n * Sort the provided array with items\n * @param {Object[]} items\n * @param {string | function} order      A field name or custom sort function.\n * @private\n */\nDataSet.prototype._sort = function (items, order) {\n  if (util.isString(order)) {\n    // order by provided field name\n    var name = order; // field name\n    items.sort(function (a, b) {\n      var av = a[name];\n      var bv = b[name];\n      return av > bv ? 1 : av < bv ? -1 : 0;\n    });\n  } else if (typeof order === 'function') {\n    // order by sort function\n    items.sort(order);\n  }\n  // TODO: extend order by an Object {field:string, direction:string}\n  //       where direction can be 'asc' or 'desc'\n  else {\n      throw new TypeError('Order must be a function or a string');\n    }\n};\n\n/**\n * Remove an object by pointer or by id\n * @param {string | number | Object | Array.<string|number>} id Object or id, or an array with\n *                                              objects or ids to be removed\n * @param {string} [senderId] Optional sender id\n * @return {Array.<string|number>} removedIds\n */\nDataSet.prototype.remove = function (id, senderId) {\n  var removedIds = [],\n      removedItems = [],\n      ids = [],\n      i,\n      len,\n      itemId,\n      item;\n\n  // force everything to be an array for simplicity\n  ids = Array.isArray(id) ? id : [id];\n\n  for (i = 0, len = ids.length; i < len; i++) {\n    item = this._remove(ids[i]);\n    if (item) {\n      itemId = item[this._fieldId];\n      if (itemId != undefined) {\n        removedIds.push(itemId);\n        removedItems.push(item);\n      }\n    }\n  }\n\n  if (removedIds.length) {\n    this._trigger('remove', { items: removedIds, oldData: removedItems }, senderId);\n  }\n\n  return removedIds;\n};\n\n/**\n * Remove an item by its id\n * @param {number | string | Object} id   id or item\n * @returns {number | string | null} id\n * @private\n */\nDataSet.prototype._remove = function (id) {\n  var item, ident;\n\n  // confirm the id to use based on the args type\n  if (util.isNumber(id) || util.isString(id)) {\n    ident = id;\n  } else if (id && (typeof id === 'undefined' ? 'undefined' : (0, _typeof3['default'])(id)) === 'object') {\n    ident = id[this._fieldId]; // look for the identifier field using _fieldId\n  }\n\n  // do the remove if the item is found\n  if (ident !== undefined && this._data[ident]) {\n    item = this._data[ident];\n    delete this._data[ident];\n    this.length--;\n    return item;\n  }\n  return null;\n};\n\n/**\n * Clear the data\n * @param {string} [senderId] Optional sender id\n * @return {Array.<string|number>} removedIds    The ids of all removed items\n */\nDataSet.prototype.clear = function (senderId) {\n  var i, len;\n  var ids = (0, _keys2['default'])(this._data);\n  var items = [];\n\n  for (i = 0, len = ids.length; i < len; i++) {\n    items.push(this._data[ids[i]]);\n  }\n\n  this._data = {};\n  this.length = 0;\n\n  this._trigger('remove', { items: ids, oldData: items }, senderId);\n\n  return ids;\n};\n\n/**\n * Find the item with maximum value of a specified field\n * @param {string} field\n * @return {Object | null} item  Item containing max value, or null if no items\n */\nDataSet.prototype.max = function (field) {\n  var data = this._data,\n      itemIds = (0, _keys2['default'])(data),\n      max = null,\n      maxField = null,\n      i,\n      len;\n\n  for (i = 0, len = itemIds.length; i < len; i++) {\n    var id = itemIds[i];\n    var item = data[id];\n    var itemField = item[field];\n    if (itemField != null && (!max || itemField > maxField)) {\n      max = item;\n      maxField = itemField;\n    }\n  }\n\n  return max;\n};\n\n/**\n * Find the item with minimum value of a specified field\n * @param {string} field\n * @return {Object | null} item  Item containing max value, or null if no items\n */\nDataSet.prototype.min = function (field) {\n  var data = this._data,\n      itemIds = (0, _keys2['default'])(data),\n      min = null,\n      minField = null,\n      i,\n      len;\n\n  for (i = 0, len = itemIds.length; i < len; i++) {\n    var id = itemIds[i];\n    var item = data[id];\n    var itemField = item[field];\n    if (itemField != null && (!min || itemField < minField)) {\n      min = item;\n      minField = itemField;\n    }\n  }\n\n  return min;\n};\n\n/**\n * Find all distinct values of a specified field\n * @param {string} field\n * @return {Array} values  Array containing all distinct values. If data items\n *                         do not contain the specified field are ignored.\n *                         The returned array is unordered.\n */\nDataSet.prototype.distinct = function (field) {\n  var data = this._data;\n  var itemIds = (0, _keys2['default'])(data);\n  var values = [];\n  var fieldType = this._options.type && this._options.type[field] || null;\n  var count = 0;\n  var i, j, len;\n\n  for (i = 0, len = itemIds.length; i < len; i++) {\n    var id = itemIds[i];\n    var item = data[id];\n    var value = item[field];\n    var exists = false;\n    for (j = 0; j < count; j++) {\n      if (values[j] == value) {\n        exists = true;\n        break;\n      }\n    }\n    if (!exists && value !== undefined) {\n      values[count] = value;\n      count++;\n    }\n  }\n\n  if (fieldType) {\n    for (i = 0, len = values.length; i < len; i++) {\n      values[i] = util.convert(values[i], fieldType);\n    }\n  }\n\n  return values;\n};\n\n/**\n * Add a single item. Will fail when an item with the same id already exists.\n * @param {Object} item\n * @return {string} id\n * @private\n */\nDataSet.prototype._addItem = function (item) {\n  var id = item[this._fieldId];\n\n  if (id != undefined) {\n    // check whether this id is already taken\n    if (this._data[id]) {\n      // item already exists\n      throw new Error('Cannot add item: item with id ' + id + ' already exists');\n    }\n  } else {\n    // generate an id\n    id = util.randomUUID();\n    item[this._fieldId] = id;\n  }\n\n  var d = {},\n      fields = (0, _keys2['default'])(item),\n      i,\n      len;\n  for (i = 0, len = fields.length; i < len; i++) {\n    var field = fields[i];\n    var fieldType = this._type[field]; // type may be undefined\n    d[field] = util.convert(item[field], fieldType);\n  }\n  this._data[id] = d;\n  this.length++;\n\n  return id;\n};\n\n/**\n * Get an item. Fields can be converted to a specific type\n * @param {string} id\n * @param {Object.<string, string>} [types]  field types to convert\n * @return {Object | null} item\n * @private\n */\nDataSet.prototype._getItem = function (id, types) {\n  var field, value, i, len;\n\n  // get the item from the dataset\n  var raw = this._data[id];\n  if (!raw) {\n    return null;\n  }\n\n  // convert the items field types\n  var converted = {},\n      fields = (0, _keys2['default'])(raw);\n\n  if (types) {\n    for (i = 0, len = fields.length; i < len; i++) {\n      field = fields[i];\n      value = raw[field];\n      converted[field] = util.convert(value, types[field]);\n    }\n  } else {\n    // no field types specified, no converting needed\n    for (i = 0, len = fields.length; i < len; i++) {\n      field = fields[i];\n      value = raw[field];\n      converted[field] = value;\n    }\n  }\n\n  if (!converted[this._fieldId]) {\n    converted[this._fieldId] = raw.id;\n  }\n\n  return converted;\n};\n\n/**\n * Update a single item: merge with existing item.\n * Will fail when the item has no id, or when there does not exist an item\n * with the same id.\n * @param {Object} item\n * @return {string} id\n * @private\n */\nDataSet.prototype._updateItem = function (item) {\n  var id = item[this._fieldId];\n  if (id == undefined) {\n    throw new Error('Cannot update item: item has no id (item: ' + (0, _stringify2['default'])(item) + ')');\n  }\n  var d = this._data[id];\n  if (!d) {\n    // item doesn't exist\n    throw new Error('Cannot update item: no item with id ' + id + ' found');\n  }\n\n  // merge with current item\n  var fields = (0, _keys2['default'])(item);\n  for (var i = 0, len = fields.length; i < len; i++) {\n    var field = fields[i];\n    var fieldType = this._type[field]; // type may be undefined\n    d[field] = util.convert(item[field], fieldType);\n  }\n\n  return id;\n};\n\nmodule.exports = DataSet;\n\n/***/ }),\n/* 34 */\n/***/ (function(module, exports, __nested_webpack_require_102692__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _classCallCheck2 = __nested_webpack_require_102692__(0);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __nested_webpack_require_102692__(1);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar util = __nested_webpack_require_102692__(2);\n\nvar Label = __nested_webpack_require_102692__(77)['default'];\nvar ComponentUtil = __nested_webpack_require_102692__(35)['default'];\nvar Box = __nested_webpack_require_102692__(144)['default'];\nvar Circle = __nested_webpack_require_102692__(151)['default'];\nvar CircularImage = __nested_webpack_require_102692__(152)['default'];\nvar Database = __nested_webpack_require_102692__(153)['default'];\nvar Diamond = __nested_webpack_require_102692__(154)['default'];\nvar Dot = __nested_webpack_require_102692__(155)['default'];\nvar Ellipse = __nested_webpack_require_102692__(156)['default'];\nvar Icon = __nested_webpack_require_102692__(157)['default'];\nvar Image = __nested_webpack_require_102692__(158)['default'];\nvar Square = __nested_webpack_require_102692__(159)['default'];\nvar Hexagon = __nested_webpack_require_102692__(160)['default'];\nvar Star = __nested_webpack_require_102692__(161)['default'];\nvar Text = __nested_webpack_require_102692__(162)['default'];\nvar Triangle = __nested_webpack_require_102692__(163)['default'];\nvar TriangleDown = __nested_webpack_require_102692__(164)['default'];\n\nvar _require = __nested_webpack_require_102692__(54),\n    printStyle = _require.printStyle;\n\n/**\n * A node. A node can be connected to other nodes via one or multiple edges.\n */\n\n\nvar Node = function () {\n  /**\n   *\n   * @param {object} options An object containing options for the node. All\n   *                            options are optional, except for the id.\n   *                              {number} id     Id of the node. Required\n   *                              {string} label  Text label for the node\n   *                              {number} x      Horizontal position of the node\n   *                              {number} y      Vertical position of the node\n   *                              {string} shape  Node shape\n   *                              {string} image  An image url\n   *                              {string} title  A title text, can be HTML\n   *                              {anytype} group A group name or number\n   *\n   * @param {Object} body               Shared state of current network instance\n   * @param {Network.Images} imagelist  A list with images. Only needed when the node has an image\n   * @param {Groups} grouplist          A list with groups. Needed for retrieving group options\n   * @param {Object} globalOptions      Current global node options; these serve as defaults for the node instance\n   * @param {Object} defaultOptions     Global default options for nodes; note that this is also the prototype\n   *                                    for parameter `globalOptions`.\n   */\n  function Node(options, body, imagelist, grouplist, globalOptions, defaultOptions) {\n    (0, _classCallCheck3['default'])(this, Node);\n\n    this.options = util.bridgeObject(globalOptions);\n    this.globalOptions = globalOptions;\n    this.defaultOptions = defaultOptions;\n    this.body = body;\n\n    this.edges = []; // all edges connected to this node\n\n    // set defaults for the options\n    this.id = undefined;\n    this.imagelist = imagelist;\n    this.grouplist = grouplist;\n\n    // state options\n    this.x = undefined;\n    this.y = undefined;\n    this.baseSize = this.options.size;\n    this.baseFontSize = this.options.font.size;\n    this.predefinedPosition = false; // used to check if initial fit should just take the range or approximate\n    this.selected = false;\n    this.hover = false;\n\n    this.labelModule = new Label(this.body, this.options, false /* Not edge label */\n    );\n    this.setOptions(options);\n  }\n\n  /**\n   * Attach a edge to the node\n   * @param {Edge} edge\n   */\n\n\n  (0, _createClass3['default'])(Node, [{\n    key: 'attachEdge',\n    value: function attachEdge(edge) {\n      if (this.edges.indexOf(edge) === -1) {\n        this.edges.push(edge);\n      }\n    }\n\n    /**\n     * Detach a edge from the node\n     *\n     * @param {Edge} edge\n     */\n\n  }, {\n    key: 'detachEdge',\n    value: function detachEdge(edge) {\n      var index = this.edges.indexOf(edge);\n      if (index != -1) {\n        this.edges.splice(index, 1);\n      }\n    }\n\n    /**\n     * Set or overwrite options for the node\n     *\n     * @param {Object} options an object with options\n     * @returns {null|boolean}\n     */\n\n  }, {\n    key: 'setOptions',\n    value: function setOptions(options) {\n      var currentShape = this.options.shape;\n      if (!options) {\n        return; // Note that the return value will be 'undefined'! This is OK.\n      }\n\n      // basic options\n      if (options.id !== undefined) {\n        this.id = options.id;\n      }\n\n      if (this.id === undefined) {\n        throw new Error('Node must have an id');\n      }\n\n      Node.checkMass(options, this.id);\n\n      // set these options locally\n      // clear x and y positions\n      if (options.x !== undefined) {\n        if (options.x === null) {\n          this.x = undefined;\n          this.predefinedPosition = false;\n        } else {\n          this.x = parseInt(options.x);\n          this.predefinedPosition = true;\n        }\n      }\n      if (options.y !== undefined) {\n        if (options.y === null) {\n          this.y = undefined;\n          this.predefinedPosition = false;\n        } else {\n          this.y = parseInt(options.y);\n          this.predefinedPosition = true;\n        }\n      }\n      if (options.size !== undefined) {\n        this.baseSize = options.size;\n      }\n      if (options.value !== undefined) {\n        options.value = parseFloat(options.value);\n      }\n\n      // this transforms all shorthands into fully defined options\n      Node.parseOptions(this.options, options, true, this.globalOptions, this.grouplist);\n\n      var pile = [options, this.options, this.defaultOptions];\n      this.chooser = ComponentUtil.choosify('node', pile);\n\n      this._load_images();\n      this.updateLabelModule(options);\n      this.updateShape(currentShape);\n\n      return options.hidden !== undefined || options.physics !== undefined;\n    }\n\n    /**\n     * Load the images from the options, for the nodes that need them.\n     *\n     * Images are always loaded, even if they are not used in the current shape.\n     * The user may switch to an image shape later on.\n     *\n     * @private\n     */\n\n  }, {\n    key: '_load_images',\n    value: function _load_images() {\n      if (this.options.shape === 'circularImage' || this.options.shape === 'image') {\n        if (this.options.image === undefined) {\n          throw new Error(\"Option image must be defined for node type '\" + this.options.shape + \"'\");\n        }\n      }\n\n      if (this.options.image === undefined) {\n        return;\n      }\n\n      if (this.imagelist === undefined) {\n        throw new Error('Internal Error: No images provided');\n      }\n\n      if (typeof this.options.image === 'string') {\n        this.imageObj = this.imagelist.load(this.options.image, this.options.brokenImage, this.id);\n      } else {\n        if (this.options.image.unselected === undefined) {\n          throw new Error('No unselected image provided');\n        }\n\n        this.imageObj = this.imagelist.load(this.options.image.unselected, this.options.brokenImage, this.id);\n\n        if (this.options.image.selected !== undefined) {\n          this.imageObjAlt = this.imagelist.load(this.options.image.selected, this.options.brokenImage, this.id);\n        } else {\n          this.imageObjAlt = undefined;\n        }\n      }\n    }\n\n    /**\n     * Copy group option values into the node options.\n     *\n     * The group options override the global node options, so the copy of group options\n     *  must happen *after* the global node options have been set.\n     *\n     * This method must also be called also if the global node options have changed and the group options did not.\n     *\n     * @param {Object} parentOptions\n     * @param {Object} newOptions  new values for the options, currently only passed in for check\n     * @param {Object} groupList\n     */\n\n  }, {\n    key: 'getFormattingValues',\n\n\n    /**\n     *\n     * @returns {{color: *, borderWidth: *, borderColor: *, size: *, borderDashes: (boolean|Array|allOptions.nodes.shapeProperties.borderDashes|{boolean, array}), borderRadius: (number|allOptions.nodes.shapeProperties.borderRadius|{number}|Array), shadow: *, shadowColor: *, shadowSize: *, shadowX: *, shadowY: *}}\n     */\n    value: function getFormattingValues() {\n      var values = {\n        color: this.options.color.background,\n        borderWidth: this.options.borderWidth,\n        borderColor: this.options.color.border,\n        size: this.options.size,\n        borderDashes: this.options.shapeProperties.borderDashes,\n        borderRadius: this.options.shapeProperties.borderRadius,\n        shadow: this.options.shadow.enabled,\n        shadowColor: this.options.shadow.color,\n        shadowSize: this.options.shadow.size,\n        shadowX: this.options.shadow.x,\n        shadowY: this.options.shadow.y\n      };\n      if (this.selected || this.hover) {\n        if (this.chooser === true) {\n          if (this.selected) {\n            values.borderWidth *= 2;\n            values.color = this.options.color.highlight.background;\n            values.borderColor = this.options.color.highlight.border;\n            values.shadow = this.options.shadow.enabled;\n          } else if (this.hover) {\n            values.color = this.options.color.hover.background;\n            values.borderColor = this.options.color.hover.border;\n            values.shadow = this.options.shadow.enabled;\n          }\n        } else if (typeof this.chooser === 'function') {\n          this.chooser(values, this.options.id, this.selected, this.hover);\n          if (values.shadow === false) {\n            if (values.shadowColor !== this.options.shadow.color || values.shadowSize !== this.options.shadow.size || values.shadowX !== this.options.shadow.x || values.shadowY !== this.options.shadow.y) {\n              values.shadow = true;\n            }\n          }\n        }\n      } else {\n        values.shadow = this.options.shadow.enabled;\n      }\n      return values;\n    }\n\n    /**\n     *\n     * @param {Object} options\n     */\n\n  }, {\n    key: 'updateLabelModule',\n    value: function updateLabelModule(options) {\n      if (this.options.label === undefined || this.options.label === null) {\n        this.options.label = '';\n      }\n\n      Node.updateGroupOptions(this.options, options, this.grouplist);\n\n      //\n      // Note:The prototype chain for this.options is:\n      //\n      // this.options ->    NodesHandler.options    -> NodesHandler.defaultOptions\n      //                 (also: this.globalOptions)\n      //\n      // Note that the prototypes are mentioned explicitly in the pile list below;\n      // WE DON'T WANT THE ORDER OF THE PROTOTYPES!!!! At least, not for font handling of labels.\n      // This is a good indication that the prototype usage of options is deficient.\n      //\n      var currentGroup = this.grouplist.get(this.options.group, false);\n      var pile = [options, // new options\n      this.options, // current node options, see comment above for prototype\n      currentGroup, // group options, if any\n      this.globalOptions, // Currently set global node options\n      this.defaultOptions // Default global node options\n      ];\n      this.labelModule.update(this.options, pile);\n\n      if (this.labelModule.baseSize !== undefined) {\n        this.baseFontSize = this.labelModule.baseSize;\n      }\n    }\n\n    /**\n     *\n     * @param {string} currentShape\n     */\n\n  }, {\n    key: 'updateShape',\n    value: function updateShape(currentShape) {\n      if (currentShape === this.options.shape && this.shape) {\n        this.shape.setOptions(this.options, this.imageObj, this.imageObjAlt);\n      } else {\n        // choose draw method depending on the shape\n        switch (this.options.shape) {\n          case 'box':\n            this.shape = new Box(this.options, this.body, this.labelModule);\n            break;\n          case 'circle':\n            this.shape = new Circle(this.options, this.body, this.labelModule);\n            break;\n          case 'circularImage':\n            this.shape = new CircularImage(this.options, this.body, this.labelModule, this.imageObj, this.imageObjAlt);\n            break;\n          case 'database':\n            this.shape = new Database(this.options, this.body, this.labelModule);\n            break;\n          case 'diamond':\n            this.shape = new Diamond(this.options, this.body, this.labelModule);\n            break;\n          case 'dot':\n            this.shape = new Dot(this.options, this.body, this.labelModule);\n            break;\n          case 'ellipse':\n            this.shape = new Ellipse(this.options, this.body, this.labelModule);\n            break;\n          case 'icon':\n            this.shape = new Icon(this.options, this.body, this.labelModule);\n            break;\n          case 'image':\n            this.shape = new Image(this.options, this.body, this.labelModule, this.imageObj, this.imageObjAlt);\n            break;\n          case 'square':\n            this.shape = new Square(this.options, this.body, this.labelModule);\n            break;\n          case 'hexagon':\n            this.shape = new Hexagon(this.options, this.body, this.labelModule);\n            break;\n          case 'star':\n            this.shape = new Star(this.options, this.body, this.labelModule);\n            break;\n          case 'text':\n            this.shape = new Text(this.options, this.body, this.labelModule);\n            break;\n          case 'triangle':\n            this.shape = new Triangle(this.options, this.body, this.labelModule);\n            break;\n          case 'triangleDown':\n            this.shape = new TriangleDown(this.options, this.body, this.labelModule);\n            break;\n          default:\n            this.shape = new Ellipse(this.options, this.body, this.labelModule);\n            break;\n        }\n      }\n      this.needsRefresh();\n    }\n\n    /**\n     * select this node\n     */\n\n  }, {\n    key: 'select',\n    value: function select() {\n      this.selected = true;\n      this.needsRefresh();\n    }\n\n    /**\n     * unselect this node\n     */\n\n  }, {\n    key: 'unselect',\n    value: function unselect() {\n      this.selected = false;\n      this.needsRefresh();\n    }\n\n    /**\n     * Reset the calculated size of the node, forces it to recalculate its size\n     */\n\n  }, {\n    key: 'needsRefresh',\n    value: function needsRefresh() {\n      this.shape.refreshNeeded = true;\n    }\n\n    /**\n     * get the title of this node.\n     * @return {string} title    The title of the node, or undefined when no title\n     *                           has been set.\n     */\n\n  }, {\n    key: 'getTitle',\n    value: function getTitle() {\n      return this.options.title;\n    }\n\n    /**\n     * Calculate the distance to the border of the Node\n     * @param {CanvasRenderingContext2D}   ctx\n     * @param {number} angle        Angle in radians\n     * @returns {number} distance   Distance to the border in pixels\n     */\n\n  }, {\n    key: 'distanceToBorder',\n    value: function distanceToBorder(ctx, angle) {\n      return this.shape.distanceToBorder(ctx, angle);\n    }\n\n    /**\n     * Check if this node has a fixed x and y position\n     * @return {boolean}      true if fixed, false if not\n     */\n\n  }, {\n    key: 'isFixed',\n    value: function isFixed() {\n      return this.options.fixed.x && this.options.fixed.y;\n    }\n\n    /**\n     * check if this node is selecte\n     * @return {boolean} selected   True if node is selected, else false\n     */\n\n  }, {\n    key: 'isSelected',\n    value: function isSelected() {\n      return this.selected;\n    }\n\n    /**\n     * Retrieve the value of the node. Can be undefined\n     * @return {number} value\n     */\n\n  }, {\n    key: 'getValue',\n    value: function getValue() {\n      return this.options.value;\n    }\n\n    /**\n     * Get the current dimensions of the label\n     *\n     * @return {rect}\n     */\n\n  }, {\n    key: 'getLabelSize',\n    value: function getLabelSize() {\n      return this.labelModule.size();\n    }\n\n    /**\n     * Adjust the value range of the node. The node will adjust it's size\n     * based on its value.\n     * @param {number} min\n     * @param {number} max\n     * @param {number} total\n     */\n\n  }, {\n    key: 'setValueRange',\n    value: function setValueRange(min, max, total) {\n      if (this.options.value !== undefined) {\n        var scale = this.options.scaling.customScalingFunction(min, max, total, this.options.value);\n        var sizeDiff = this.options.scaling.max - this.options.scaling.min;\n        if (this.options.scaling.label.enabled === true) {\n          var fontDiff = this.options.scaling.label.max - this.options.scaling.label.min;\n          this.options.font.size = this.options.scaling.label.min + scale * fontDiff;\n        }\n        this.options.size = this.options.scaling.min + scale * sizeDiff;\n      } else {\n        this.options.size = this.baseSize;\n        this.options.font.size = this.baseFontSize;\n      }\n\n      this.updateLabelModule();\n    }\n\n    /**\n     * Draw this node in the given canvas\n     * The 2d context of a HTML canvas can be retrieved by canvas.getContext(\"2d\");\n     * @param {CanvasRenderingContext2D}   ctx\n     */\n\n  }, {\n    key: 'draw',\n    value: function draw(ctx) {\n      var values = this.getFormattingValues();\n      this.shape.draw(ctx, this.x, this.y, this.selected, this.hover, values);\n    }\n\n    /**\n     * Update the bounding box of the shape\n     * @param {CanvasRenderingContext2D}   ctx\n     */\n\n  }, {\n    key: 'updateBoundingBox',\n    value: function updateBoundingBox(ctx) {\n      this.shape.updateBoundingBox(this.x, this.y, ctx);\n    }\n\n    /**\n     * Recalculate the size of this node in the given canvas\n     * The 2d context of a HTML canvas can be retrieved by canvas.getContext(\"2d\");\n     * @param {CanvasRenderingContext2D}   ctx\n     */\n\n  }, {\n    key: 'resize',\n    value: function resize(ctx) {\n      var values = this.getFormattingValues();\n      this.shape.resize(ctx, this.selected, this.hover, values);\n    }\n\n    /**\n     * Determine all visual elements of this node instance, in which the given\n     * point falls within the bounding shape.\n     *\n     * @param {point} point\n     * @returns {Array.<nodeClickItem|nodeLabelClickItem>} list with the items which are on the point\n     */\n\n  }, {\n    key: 'getItemsOnPoint',\n    value: function getItemsOnPoint(point) {\n      var ret = [];\n\n      if (this.labelModule.visible()) {\n        if (ComponentUtil.pointInRect(this.labelModule.getSize(), point)) {\n          ret.push({ nodeId: this.id, labelId: 0 });\n        }\n      }\n\n      if (ComponentUtil.pointInRect(this.shape.boundingBox, point)) {\n        ret.push({ nodeId: this.id });\n      }\n\n      return ret;\n    }\n\n    /**\n     * Check if this object is overlapping with the provided object\n     * @param {Object} obj   an object with parameters left, top, right, bottom\n     * @return {boolean}     True if location is located on node\n     */\n\n  }, {\n    key: 'isOverlappingWith',\n    value: function isOverlappingWith(obj) {\n      return this.shape.left < obj.right && this.shape.left + this.shape.width > obj.left && this.shape.top < obj.bottom && this.shape.top + this.shape.height > obj.top;\n    }\n\n    /**\n     * Check if this object is overlapping with the provided object\n     * @param {Object} obj   an object with parameters left, top, right, bottom\n     * @return {boolean}     True if location is located on node\n     */\n\n  }, {\n    key: 'isBoundingBoxOverlappingWith',\n    value: function isBoundingBoxOverlappingWith(obj) {\n      return this.shape.boundingBox.left < obj.right && this.shape.boundingBox.right > obj.left && this.shape.boundingBox.top < obj.bottom && this.shape.boundingBox.bottom > obj.top;\n    }\n\n    /**\n     * Check valid values for mass\n     *\n     * The mass may not be negative or zero. If it is, reset to 1\n     *\n     * @param {object} options\n     * @param {Node.id} id\n     * @static\n     */\n\n  }], [{\n    key: 'updateGroupOptions',\n    value: function updateGroupOptions(parentOptions, newOptions, groupList) {\n      if (groupList === undefined) return; // No groups, nothing to do\n\n      var group = parentOptions.group;\n\n      // paranoia: the selected group is already merged into node options, check.\n      if (newOptions !== undefined && newOptions.group !== undefined && group !== newOptions.group) {\n        throw new Error(\"updateGroupOptions: group values in options don't match.\");\n      }\n\n      var hasGroup = typeof group === 'number' || typeof group === 'string' && group != '';\n      if (!hasGroup) return; // current node has no group, no need to merge\n\n      var groupObj = groupList.get(group);\n\n      // Skip merging of group font options into parent; these are required to be distinct for labels\n      // Also skip mergin of color IF it is already defined in the node itself. This is to avoid the color of the\n      // group overriding the color set at the node level\n      // TODO: It might not be a good idea either to merge the rest of the options, investigate this.\n      var skipProperties = ['font'];\n      if (newOptions !== undefined && newOptions.color !== undefined && newOptions.color != null) skipProperties.push('color');\n      util.selectiveNotDeepExtend(skipProperties, parentOptions, groupObj);\n\n      // the color object needs to be completely defined.\n      // Since groups can partially overwrite the colors, we parse it again, just in case.\n      parentOptions.color = util.parseColor(parentOptions.color);\n    }\n\n    /**\n     * This process all possible shorthands in the new options and makes sure that the parentOptions are fully defined.\n     * Static so it can also be used by the handler.\n     *\n     * @param {Object} parentOptions\n     * @param {Object} newOptions\n     * @param {boolean} [allowDeletion=false]\n     * @param {Object} [globalOptions={}]\n     * @param {Object} [groupList]\n     * @static\n     */\n\n  }, {\n    key: 'parseOptions',\n    value: function parseOptions(parentOptions, newOptions) {\n      var allowDeletion = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      var globalOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n      var groupList = arguments[4];\n\n      var fields = ['color', 'fixed', 'shadow'];\n      util.selectiveNotDeepExtend(fields, parentOptions, newOptions, allowDeletion);\n\n      Node.checkMass(newOptions);\n\n      // merge the shadow options into the parent.\n      util.mergeOptions(parentOptions, newOptions, 'shadow', globalOptions);\n\n      // individual shape newOptions\n      if (newOptions.color !== undefined && newOptions.color !== null) {\n        var parsedColor = util.parseColor(newOptions.color);\n        util.fillIfDefined(parentOptions.color, parsedColor);\n      } else if (allowDeletion === true && newOptions.color === null) {\n        parentOptions.color = util.bridgeObject(globalOptions.color); // set the object back to the global options\n      }\n\n      // handle the fixed options\n      if (newOptions.fixed !== undefined && newOptions.fixed !== null) {\n        if (typeof newOptions.fixed === 'boolean') {\n          parentOptions.fixed.x = newOptions.fixed;\n          parentOptions.fixed.y = newOptions.fixed;\n        } else {\n          if (newOptions.fixed.x !== undefined && typeof newOptions.fixed.x === 'boolean') {\n            parentOptions.fixed.x = newOptions.fixed.x;\n          }\n          if (newOptions.fixed.y !== undefined && typeof newOptions.fixed.y === 'boolean') {\n            parentOptions.fixed.y = newOptions.fixed.y;\n          }\n        }\n      }\n\n      if (allowDeletion === true && newOptions.font === null) {\n        parentOptions.font = util.bridgeObject(globalOptions.font); // set the object back to the global options\n      }\n\n      Node.updateGroupOptions(parentOptions, newOptions, groupList);\n\n      // handle the scaling options, specifically the label part\n      if (newOptions.scaling !== undefined) {\n        util.mergeOptions(parentOptions.scaling, newOptions.scaling, 'label', globalOptions.scaling);\n      }\n    }\n  }, {\n    key: 'checkMass',\n    value: function checkMass(options, id) {\n      if (options.mass !== undefined && options.mass <= 0) {\n        var strId = '';\n        if (id !== undefined) {\n          strId = ' in node id: ' + id;\n        }\n        console.log('%cNegative or zero mass disallowed' + strId + ', setting mass to 1.', printStyle);\n        options.mass = 1;\n      }\n    }\n  }]);\n  return Node;\n}();\n\nexports['default'] = Node;\n\n/***/ }),\n/* 35 */\n/***/ (function(module, exports, __nested_webpack_require_127443__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof2 = __nested_webpack_require_127443__(7);\n\nvar _typeof3 = _interopRequireDefault(_typeof2);\n\nvar _classCallCheck2 = __nested_webpack_require_127443__(0);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __nested_webpack_require_127443__(1);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar util = __nested_webpack_require_127443__(2);\n\n/**\n * Helper functions for components\n * @class\n */\n\nvar ComponentUtil = function () {\n  function ComponentUtil() {\n    (0, _classCallCheck3['default'])(this, ComponentUtil);\n  }\n\n  (0, _createClass3['default'])(ComponentUtil, null, [{\n    key: 'choosify',\n\n    /**\n     * Determine values to use for (sub)options of 'chosen'.\n     *\n     * This option is either a boolean or an object whose values should be examined further.\n     * The relevant structures are:\n     *\n     * - chosen: <boolean value>\n     * - chosen: { subOption: <boolean or function> }\n     *\n     * Where subOption is 'node', 'edge' or 'label'.\n     *\n     * The intention of this method appears to be to set a specific priority to the options;\n     * Since most properties are either bridged or merged into the local options objects, there\n     * is not much point in handling them separately.\n     * TODO: examine if 'most' in previous sentence can be replaced with 'all'. In that case, we\n     *       should be able to get rid of this method.\n     *\n     * @param {string}  subOption  option within object 'chosen' to consider; either 'node', 'edge' or 'label'\n     * @param {Object}  pile       array of options objects to consider\n     *\n     * @return {boolean|function}  value for passed subOption of 'chosen' to use\n     */\n    value: function choosify(subOption, pile) {\n      // allowed values for subOption\n      var allowed = ['node', 'edge', 'label'];\n      var value = true;\n\n      var chosen = util.topMost(pile, 'chosen');\n      if (typeof chosen === 'boolean') {\n        value = chosen;\n      } else if ((typeof chosen === 'undefined' ? 'undefined' : (0, _typeof3['default'])(chosen)) === 'object') {\n        if (allowed.indexOf(subOption) === -1) {\n          throw new Error(\"choosify: subOption '\" + subOption + \"' should be one of \" + \"'\" + allowed.join(\"', '\") + \"'\");\n        }\n\n        var chosenEdge = util.topMost(pile, ['chosen', subOption]);\n        if (typeof chosenEdge === 'boolean' || typeof chosenEdge === 'function') {\n          value = chosenEdge;\n        }\n      }\n\n      return value;\n    }\n\n    /**\n     * Check if the point falls within the given rectangle.\n     *\n     * @param {rect} rect\n     * @param {point} point\n     * @param {rotationPoint} [rotationPoint] if specified, the rotation that applies to the rectangle.\n     * @returns {boolean}  true if point within rectangle, false otherwise\n     * @static\n     */\n\n  }, {\n    key: 'pointInRect',\n    value: function pointInRect(rect, point, rotationPoint) {\n      if (rect.width <= 0 || rect.height <= 0) {\n        return false; // early out\n      }\n\n      if (rotationPoint !== undefined) {\n        // Rotate the point the same amount as the rectangle\n        var tmp = {\n          x: point.x - rotationPoint.x,\n          y: point.y - rotationPoint.y\n        };\n\n        if (rotationPoint.angle !== 0) {\n          // In order to get the coordinates the same, you need to\n          // rotate in the reverse direction\n          var angle = -rotationPoint.angle;\n\n          var tmp2 = {\n            x: Math.cos(angle) * tmp.x - Math.sin(angle) * tmp.y,\n            y: Math.sin(angle) * tmp.x + Math.cos(angle) * tmp.y\n          };\n          point = tmp2;\n        } else {\n          point = tmp;\n        }\n\n        // Note that if a rotation is specified, the rectangle coordinates\n        // are **not* the full canvas coordinates. They are relative to the\n        // rotationPoint. Hence, the point coordinates need not be translated\n        // back in this case.\n      }\n\n      var right = rect.x + rect.width;\n      var bottom = rect.y + rect.width;\n\n      return rect.left < point.x && right > point.x && rect.top < point.y && bottom > point.y;\n    }\n\n    /**\n     * Check if given value is acceptable as a label text.\n     *\n     * @param {*} text value to check; can be anything at this point\n     * @returns {boolean} true if valid label value, false otherwise\n     */\n\n  }, {\n    key: 'isValidLabel',\n    value: function isValidLabel(text) {\n      // Note that this is quite strict: types that *might* be converted to string are disallowed\n      return typeof text === 'string' && text !== '';\n    }\n  }]);\n  return ComponentUtil;\n}();\n\nexports['default'] = ComponentUtil;\n\n/***/ }),\n/* 36 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\n/**\n * Register a touch event, taking place before a gesture\n * @param {Hammer} hammer       A hammer instance\n * @param {function} callback   Callback, called as callback(event)\n */\nexports.onTouch = function (hammer, callback) {\n  callback.inputHandler = function (event) {\n    if (event.isFirst) {\n      callback(event);\n    }\n  };\n\n  hammer.on('hammer.input', callback.inputHandler);\n};\n\n/**\n * Register a release event, taking place after a gesture\n * @param {Hammer} hammer       A hammer instance\n * @param {function} callback   Callback, called as callback(event)\n * @returns {*}\n */\nexports.onRelease = function (hammer, callback) {\n  callback.inputHandler = function (event) {\n    if (event.isFinal) {\n      callback(event);\n    }\n  };\n\n  return hammer.on('hammer.input', callback.inputHandler);\n};\n\n/**\n * Unregister a touch event, taking place before a gesture\n * @param {Hammer} hammer       A hammer instance\n * @param {function} callback   Callback, called as callback(event)\n */\nexports.offTouch = function (hammer, callback) {\n  hammer.off('hammer.input', callback.inputHandler);\n};\n\n/**\n * Unregister a release event, taking place before a gesture\n * @param {Hammer} hammer       A hammer instance\n * @param {function} callback   Callback, called as callback(event)\n */\nexports.offRelease = exports.offTouch;\n\n/**\n * Hack the PinchRecognizer such that it doesn't prevent default behavior\n * for vertical panning.\n *\n * Yeah ... this is quite a hack ... see https://github.com/hammerjs/hammer.js/issues/932\n *\n * @param {Hammer.Pinch} pinchRecognizer\n * @return {Hammer.Pinch} returns the pinchRecognizer\n */\nexports.disablePreventDefaultVertically = function (pinchRecognizer) {\n  var TOUCH_ACTION_PAN_Y = 'pan-y';\n\n  pinchRecognizer.getTouchAction = function () {\n    // default method returns [TOUCH_ACTION_NONE]\n    return [TOUCH_ACTION_PAN_Y];\n  };\n\n  return pinchRecognizer;\n};\n\n/***/ }),\n/* 37 */\n/***/ (function(module, exports, __nested_webpack_require_134288__) {\n\n__nested_webpack_require_134288__(87);\nvar global = __nested_webpack_require_134288__(10);\nvar hide = __nested_webpack_require_134288__(19);\nvar Iterators = __nested_webpack_require_134288__(25);\nvar TO_STRING_TAG = __nested_webpack_require_134288__(8)('toStringTag');\n\nvar DOMIterables = ('CSSRuleList,CSSStyleDeclaration,CSSValueList,ClientRectList,DOMRectList,DOMStringList,' +\n  'DOMTokenList,DataTransferItemList,FileList,HTMLAllCollection,HTMLCollection,HTMLFormElement,HTMLSelectElement,' +\n  'MediaList,MimeTypeArray,NamedNodeMap,NodeList,PaintRequestList,Plugin,PluginArray,SVGLengthList,SVGNumberList,' +\n  'SVGPathSegList,SVGPointList,SVGStringList,SVGTransformList,SourceBufferList,StyleSheetList,TextTrackCueList,' +\n  'TextTrackList,TouchList').split(',');\n\nfor (var i = 0; i < DOMIterables.length; i++) {\n  var NAME = DOMIterables[i];\n  var Collection = global[NAME];\n  var proto = Collection && Collection.prototype;\n  if (proto && !proto[TO_STRING_TAG]) hide(proto, TO_STRING_TAG, NAME);\n  Iterators[NAME] = Iterators.Array;\n}\n\n\n/***/ }),\n/* 38 */\n/***/ (function(module, exports) {\n\nvar toString = {}.toString;\n\nmodule.exports = function (it) {\n  return toString.call(it).slice(8, -1);\n};\n\n\n/***/ }),\n/* 39 */\n/***/ (function(module, exports) {\n\n// 7.2.1 RequireObjectCoercible(argument)\nmodule.exports = function (it) {\n  if (it == undefined) throw TypeError(\"Can't call method on  \" + it);\n  return it;\n};\n\n\n/***/ }),\n/* 40 */\n/***/ (function(module, exports, __nested_webpack_require_135722__) {\n\n// 7.1.1 ToPrimitive(input [, PreferredType])\nvar isObject = __nested_webpack_require_135722__(21);\n// instead of the ES6 spec version, we didn't implement @@toPrimitive case\n// and the second argument - flag - preferred type is a string\nmodule.exports = function (it, S) {\n  if (!isObject(it)) return it;\n  var fn, val;\n  if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;\n  if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;\n  if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;\n  throw TypeError(\"Can't convert object to primitive value\");\n};\n\n\n/***/ }),\n/* 41 */\n/***/ (function(module, exports, __nested_webpack_require_136455__) {\n\n// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])\nvar anObject = __nested_webpack_require_136455__(20);\nvar dPs = __nested_webpack_require_136455__(92);\nvar enumBugKeys = __nested_webpack_require_136455__(45);\nvar IE_PROTO = __nested_webpack_require_136455__(43)('IE_PROTO');\nvar Empty = function () { /* empty */ };\nvar PROTOTYPE = 'prototype';\n\n// Create object with fake `null` prototype: use iframe Object with cleared prototype\nvar createDict = function () {\n  // Thrash, waste and sodomy: IE GC bug\n  var iframe = __nested_webpack_require_136455__(63)('iframe');\n  var i = enumBugKeys.length;\n  var lt = '<';\n  var gt = '>';\n  var iframeDocument;\n  iframe.style.display = 'none';\n  __nested_webpack_require_136455__(96).appendChild(iframe);\n  iframe.src = 'javascript:'; // eslint-disable-line no-script-url\n  // createDict = iframe.contentWindow.Object;\n  // html.removeChild(iframe);\n  iframeDocument = iframe.contentWindow.document;\n  iframeDocument.open();\n  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);\n  iframeDocument.close();\n  createDict = iframeDocument.F;\n  while (i--) delete createDict[PROTOTYPE][enumBugKeys[i]];\n  return createDict();\n};\n\nmodule.exports = Object.create || function create(O, Properties) {\n  var result;\n  if (O !== null) {\n    Empty[PROTOTYPE] = anObject(O);\n    result = new Empty();\n    Empty[PROTOTYPE] = null;\n    // add \"__proto__\" for Object.getPrototypeOf polyfill\n    result[IE_PROTO] = O;\n  } else result = createDict();\n  return Properties === undefined ? result : dPs(result, Properties);\n};\n\n\n/***/ }),\n/* 42 */\n/***/ (function(module, exports) {\n\n// 7.1.4 ToInteger\nvar ceil = Math.ceil;\nvar floor = Math.floor;\nmodule.exports = function (it) {\n  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);\n};\n\n\n/***/ }),\n/* 43 */\n/***/ (function(module, exports, __nested_webpack_require_138254__) {\n\nvar shared = __nested_webpack_require_138254__(44)('keys');\nvar uid = __nested_webpack_require_138254__(29);\nmodule.exports = function (key) {\n  return shared[key] || (shared[key] = uid(key));\n};\n\n\n/***/ }),\n/* 44 */\n/***/ (function(module, exports, __nested_webpack_require_138500__) {\n\nvar core = __nested_webpack_require_138500__(6);\nvar global = __nested_webpack_require_138500__(10);\nvar SHARED = '__core-js_shared__';\nvar store = global[SHARED] || (global[SHARED] = {});\n\n(module.exports = function (key, value) {\n  return store[key] || (store[key] = value !== undefined ? value : {});\n})('versions', []).push({\n  version: core.version,\n  mode: __nested_webpack_require_138500__(27) ? 'pure' : 'global',\n  copyright: '© 2018 Denis Pushkarev (zloirock.ru)'\n});\n\n\n/***/ }),\n/* 45 */\n/***/ (function(module, exports) {\n\n// IE 8- don't enum bug keys\nmodule.exports = (\n  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'\n).split(',');\n\n\n/***/ }),\n/* 46 */\n/***/ (function(module, exports, __nested_webpack_require_139231__) {\n\nvar def = __nested_webpack_require_139231__(12).f;\nvar has = __nested_webpack_require_139231__(14);\nvar TAG = __nested_webpack_require_139231__(8)('toStringTag');\n\nmodule.exports = function (it, tag, stat) {\n  if (it && !has(it = stat ? it : it.prototype, TAG)) def(it, TAG, { configurable: true, value: tag });\n};\n\n\n/***/ }),\n/* 47 */\n/***/ (function(module, exports, __nested_webpack_require_139582__) {\n\n\"use strict\";\n\nvar $at = __nested_webpack_require_139582__(97)(true);\n\n// 21.1.3.27 String.prototype[@@iterator]()\n__nested_webpack_require_139582__(60)(String, 'String', function (iterated) {\n  this._t = String(iterated); // target\n  this._i = 0;                // next index\n// 21.1.5.2.1 %StringIteratorPrototype%.next()\n}, function () {\n  var O = this._t;\n  var index = this._i;\n  var point;\n  if (index >= O.length) return { value: undefined, done: true };\n  point = $at(O, index);\n  this._i += point.length;\n  return { value: point, done: false };\n});\n\n\n/***/ }),\n/* 48 */\n/***/ (function(module, exports, __nested_webpack_require_140190__) {\n\nexports.f = __nested_webpack_require_140190__(8);\n\n\n/***/ }),\n/* 49 */\n/***/ (function(module, exports, __nested_webpack_require_140304__) {\n\nvar global = __nested_webpack_require_140304__(10);\nvar core = __nested_webpack_require_140304__(6);\nvar LIBRARY = __nested_webpack_require_140304__(27);\nvar wksExt = __nested_webpack_require_140304__(48);\nvar defineProperty = __nested_webpack_require_140304__(12).f;\nmodule.exports = function (name) {\n  var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});\n  if (name.charAt(0) != '_' && !(name in $Symbol)) defineProperty($Symbol, name, { value: wksExt.f(name) });\n};\n\n\n/***/ }),\n/* 50 */\n/***/ (function(module, exports) {\n\nexports.f = Object.getOwnPropertySymbols;\n\n\n/***/ }),\n/* 51 */\n/***/ (function(module, exports, __nested_webpack_require_140909__) {\n\n\"use strict\";\n\n\nvar _keys = __nested_webpack_require_140909__(9);\n\nvar _keys2 = _interopRequireDefault(_keys);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar util = __nested_webpack_require_140909__(2);\nvar DataSet = __nested_webpack_require_140909__(33);\n\n/**\n * DataView\n *\n * a dataview offers a filtered view on a dataset or an other dataview.\n *\n * @param {DataSet | DataView} data\n * @param {Object} [options]   Available options: see method get\n *\n * @constructor DataView\n */\nfunction DataView(data, options) {\n  this._data = null;\n  this._ids = {}; // ids of the items currently in memory (just contains a boolean true)\n  this.length = 0; // number of items in the DataView\n  this._options = options || {};\n  this._fieldId = 'id'; // name of the field containing id\n  this._subscribers = {}; // event subscribers\n\n  var me = this;\n  this.listener = function () {\n    me._onEvent.apply(me, arguments);\n  };\n\n  this.setData(data);\n}\n\n// TODO: implement a function .config() to dynamically update things like configured filter\n// and trigger changes accordingly\n\n/**\n * Set a data source for the view\n * @param {DataSet | DataView} data\n */\nDataView.prototype.setData = function (data) {\n  var ids, id, i, len, items;\n\n  if (this._data) {\n    // unsubscribe from current dataset\n    if (this._data.off) {\n      this._data.off('*', this.listener);\n    }\n\n    // trigger a remove of all items in memory\n    ids = this._data.getIds({ filter: this._options && this._options.filter });\n    items = [];\n\n    for (i = 0, len = ids.length; i < len; i++) {\n      items.push(this._data._data[ids[i]]);\n    }\n\n    this._ids = {};\n    this.length = 0;\n    this._trigger('remove', { items: ids, oldData: items });\n  }\n\n  this._data = data;\n\n  if (this._data) {\n    // update fieldId\n    this._fieldId = this._options.fieldId || this._data && this._data.options && this._data.options.fieldId || 'id';\n\n    // trigger an add of all added items\n    ids = this._data.getIds({ filter: this._options && this._options.filter });\n    for (i = 0, len = ids.length; i < len; i++) {\n      id = ids[i];\n      this._ids[id] = true;\n    }\n    this.length = ids.length;\n    this._trigger('add', { items: ids });\n\n    // subscribe to new dataset\n    if (this._data.on) {\n      this._data.on('*', this.listener);\n    }\n  }\n};\n\n/**\n * Refresh the DataView. Useful when the DataView has a filter function\n * containing a variable parameter.\n */\nDataView.prototype.refresh = function () {\n  var id, i, len;\n  var ids = this._data.getIds({\n    filter: this._options && this._options.filter\n  }),\n      oldIds = (0, _keys2['default'])(this._ids),\n      newIds = {},\n      addedIds = [],\n      removedIds = [],\n      removedItems = [];\n\n  // check for additions\n  for (i = 0, len = ids.length; i < len; i++) {\n    id = ids[i];\n    newIds[id] = true;\n    if (!this._ids[id]) {\n      addedIds.push(id);\n      this._ids[id] = true;\n    }\n  }\n\n  // check for removals\n  for (i = 0, len = oldIds.length; i < len; i++) {\n    id = oldIds[i];\n    if (!newIds[id]) {\n      removedIds.push(id);\n      removedItems.push(this._data._data[id]);\n      delete this._ids[id];\n    }\n  }\n\n  this.length += addedIds.length - removedIds.length;\n\n  // trigger events\n  if (addedIds.length) {\n    this._trigger('add', { items: addedIds });\n  }\n  if (removedIds.length) {\n    this._trigger('remove', { items: removedIds, oldData: removedItems });\n  }\n};\n\n// prettier-ignore\n/**\n * Get data from the data view\n *\n * Usage:\n *\n *     get()\n *     get(options: Object)\n *     get(options: Object, data: Array | DataTable)\n *\n *     get(id: Number)\n *     get(id: Number, options: Object)\n *     get(id: Number, options: Object, data: Array | DataTable)\n *\n *     get(ids: Number[])\n *     get(ids: Number[], options: Object)\n *     get(ids: Number[], options: Object, data: Array | DataTable)\n *\n * Where:\n *\n * {number | string} id         The id of an item\n * {number[] | string{}} ids    An array with ids of items\n * {Object} options             An Object with options. Available options:\n *                              {string} [type] Type of data to be returned. Can\n *                                              be 'DataTable' or 'Array' (default)\n *                              {Object.<string, string>} [convert]\n *                              {string[]} [fields] field names to be returned\n *                              {function} [filter] filter items\n *                              {string | function} [order] Order the items by\n *                                  a field name or custom sort function.\n * {Array | DataTable} [data]   If provided, items will be appended to this\n *                              array or table. Required in case of Google\n *                              DataTable.\n * @param {Array} args\n * @return {DataSet|DataView}\n */\nDataView.prototype.get = function (args) {\n  // eslint-disable-line no-unused-vars\n  var me = this;\n\n  // parse the arguments\n  var ids, options, data;\n  var firstType = util.getType(arguments[0]);\n  if (firstType == 'String' || firstType == 'Number' || firstType == 'Array') {\n    // get(id(s) [, options] [, data])\n    ids = arguments[0]; // can be a single id or an array with ids\n    options = arguments[1];\n    data = arguments[2];\n  } else {\n    // get([, options] [, data])\n    options = arguments[0];\n    data = arguments[1];\n  }\n\n  // extend the options with the default options and provided options\n  var viewOptions = util.extend({}, this._options, options);\n\n  // create a combined filter method when needed\n  if (this._options.filter && options && options.filter) {\n    viewOptions.filter = function (item) {\n      return me._options.filter(item) && options.filter(item);\n    };\n  }\n\n  // build up the call to the linked data set\n  var getArguments = [];\n  if (ids != undefined) {\n    getArguments.push(ids);\n  }\n  getArguments.push(viewOptions);\n  getArguments.push(data);\n\n  return this._data && this._data.get.apply(this._data, getArguments);\n};\n\n/**\n * Get ids of all items or from a filtered set of items.\n * @param {Object} [options]    An Object with options. Available options:\n *                              {function} [filter] filter items\n *                              {string | function} [order] Order the items by\n *                                  a field name or custom sort function.\n * @return {Array.<string|number>} ids\n */\nDataView.prototype.getIds = function (options) {\n  var ids;\n\n  if (this._data) {\n    var defaultFilter = this._options.filter;\n    var filter;\n\n    if (options && options.filter) {\n      if (defaultFilter) {\n        filter = function filter(item) {\n          return defaultFilter(item) && options.filter(item);\n        };\n      } else {\n        filter = options.filter;\n      }\n    } else {\n      filter = defaultFilter;\n    }\n\n    ids = this._data.getIds({\n      filter: filter,\n      order: options && options.order\n    });\n  } else {\n    ids = [];\n  }\n\n  return ids;\n};\n\n/**\n * Map every item in the dataset.\n * @param {function} callback\n * @param {Object} [options]    Available options:\n *                              {Object.<string, string>} [type]\n *                              {string[]} [fields] filter fields\n *                              {function} [filter] filter items\n *                              {string | function} [order] Order the items by\n *                                  a field name or custom sort function.\n * @return {Object[]} mappedItems\n */\nDataView.prototype.map = function (callback, options) {\n  var mappedItems = [];\n  if (this._data) {\n    var defaultFilter = this._options.filter;\n    var filter;\n\n    if (options && options.filter) {\n      if (defaultFilter) {\n        filter = function filter(item) {\n          return defaultFilter(item) && options.filter(item);\n        };\n      } else {\n        filter = options.filter;\n      }\n    } else {\n      filter = defaultFilter;\n    }\n\n    mappedItems = this._data.map(callback, {\n      filter: filter,\n      order: options && options.order\n    });\n  } else {\n    mappedItems = [];\n  }\n\n  return mappedItems;\n};\n\n/**\n * Get the DataSet to which this DataView is connected. In case there is a chain\n * of multiple DataViews, the root DataSet of this chain is returned.\n * @return {DataSet} dataSet\n */\nDataView.prototype.getDataSet = function () {\n  var dataSet = this;\n  while (dataSet instanceof DataView) {\n    dataSet = dataSet._data;\n  }\n  return dataSet || null;\n};\n\n/**\n * Event listener. Will propagate all events from the connected data set to\n * the subscribers of the DataView, but will filter the items and only trigger\n * when there are changes in the filtered data set.\n * @param {string} event\n * @param {Object | null} params\n * @param {string} senderId\n * @private\n */\nDataView.prototype._onEvent = function (event, params, senderId) {\n  var i, len, id, item;\n  var ids = params && params.items;\n  var addedIds = [],\n      updatedIds = [],\n      removedIds = [],\n      oldItems = [],\n      updatedItems = [],\n      removedItems = [];\n\n  if (ids && this._data) {\n    switch (event) {\n      case 'add':\n        // filter the ids of the added items\n        for (i = 0, len = ids.length; i < len; i++) {\n          id = ids[i];\n          item = this.get(id);\n          if (item) {\n            this._ids[id] = true;\n            addedIds.push(id);\n          }\n        }\n\n        break;\n\n      case 'update':\n        // determine the event from the views viewpoint: an updated\n        // item can be added, updated, or removed from this view.\n        for (i = 0, len = ids.length; i < len; i++) {\n          id = ids[i];\n          item = this.get(id);\n\n          if (item) {\n            if (this._ids[id]) {\n              updatedIds.push(id);\n              updatedItems.push(params.data[i]);\n              oldItems.push(params.oldData[i]);\n            } else {\n              this._ids[id] = true;\n              addedIds.push(id);\n            }\n          } else {\n            if (this._ids[id]) {\n              delete this._ids[id];\n              removedIds.push(id);\n              removedItems.push(params.oldData[i]);\n            } else {\n              // nothing interesting for me :-(\n            }\n          }\n        }\n\n        break;\n\n      case 'remove':\n        // filter the ids of the removed items\n        for (i = 0, len = ids.length; i < len; i++) {\n          id = ids[i];\n          if (this._ids[id]) {\n            delete this._ids[id];\n            removedIds.push(id);\n            removedItems.push(params.oldData[i]);\n          }\n        }\n\n        break;\n    }\n\n    this.length += addedIds.length - removedIds.length;\n\n    if (addedIds.length) {\n      this._trigger('add', { items: addedIds }, senderId);\n    }\n    if (updatedIds.length) {\n      this._trigger('update', { items: updatedIds, oldData: oldItems, data: updatedItems }, senderId);\n    }\n    if (removedIds.length) {\n      this._trigger('remove', { items: removedIds, oldData: removedItems }, senderId);\n    }\n  }\n};\n\n// copy subscription functionality from DataSet\nDataView.prototype.on = DataSet.prototype.on;\nDataView.prototype.off = DataSet.prototype.off;\nDataView.prototype._trigger = DataSet.prototype._trigger;\n\n// TODO: make these functions deprecated (replaced with `on` and `off` since version 0.5)\nDataView.prototype.subscribe = DataView.prototype.on;\nDataView.prototype.unsubscribe = DataView.prototype.off;\n\nmodule.exports = DataView;\n\n/***/ }),\n/* 52 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\nvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\r\n/**\r\n * Created by Alex on 11/6/2014.\r\n */\r\n\r\n// https://github.com/umdjs/umd/blob/master/returnExports.js#L40-L60\r\n// if the module has no dependencies, the above pattern can be simplified to\r\n(function (root, factory) {\r\n  if (true) {\r\n    // AMD. Register as an anonymous module.\r\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n  } else {}\r\n}(this, function () {\r\n\r\n  function keycharm(options) {\r\n    var preventDefault = options && options.preventDefault || false;\r\n\r\n    var container = options && options.container || window;\r\n\r\n    var _exportFunctions = {};\r\n    var _bound = {keydown:{}, keyup:{}};\r\n    var _keys = {};\r\n    var i;\r\n\r\n    // a - z\r\n    for (i = 97; i <= 122; i++) {_keys[String.fromCharCode(i)] = {code:65 + (i - 97), shift: false};}\r\n    // A - Z\r\n    for (i = 65; i <= 90; i++) {_keys[String.fromCharCode(i)] = {code:i, shift: true};}\r\n    // 0 - 9\r\n    for (i = 0;  i <= 9;   i++) {_keys['' + i] = {code:48 + i, shift: false};}\r\n    // F1 - F12\r\n    for (i = 1;  i <= 12;   i++) {_keys['F' + i] = {code:111 + i, shift: false};}\r\n    // num0 - num9\r\n    for (i = 0;  i <= 9;   i++) {_keys['num' + i] = {code:96 + i, shift: false};}\r\n\r\n    // numpad misc\r\n    _keys['num*'] = {code:106, shift: false};\r\n    _keys['num+'] = {code:107, shift: false};\r\n    _keys['num-'] = {code:109, shift: false};\r\n    _keys['num/'] = {code:111, shift: false};\r\n    _keys['num.'] = {code:110, shift: false};\r\n    // arrows\r\n    _keys['left']  = {code:37, shift: false};\r\n    _keys['up']    = {code:38, shift: false};\r\n    _keys['right'] = {code:39, shift: false};\r\n    _keys['down']  = {code:40, shift: false};\r\n    // extra keys\r\n    _keys['space'] = {code:32, shift: false};\r\n    _keys['enter'] = {code:13, shift: false};\r\n    _keys['shift'] = {code:16, shift: undefined};\r\n    _keys['esc']   = {code:27, shift: false};\r\n    _keys['backspace'] = {code:8, shift: false};\r\n    _keys['tab']       = {code:9, shift: false};\r\n    _keys['ctrl']      = {code:17, shift: false};\r\n    _keys['alt']       = {code:18, shift: false};\r\n    _keys['delete']    = {code:46, shift: false};\r\n    _keys['pageup']    = {code:33, shift: false};\r\n    _keys['pagedown']  = {code:34, shift: false};\r\n    // symbols\r\n    _keys['=']     = {code:187, shift: false};\r\n    _keys['-']     = {code:189, shift: false};\r\n    _keys[']']     = {code:221, shift: false};\r\n    _keys['[']     = {code:219, shift: false};\r\n\r\n\r\n\r\n    var down = function(event) {handleEvent(event,'keydown');};\r\n    var up = function(event) {handleEvent(event,'keyup');};\r\n\r\n    // handle the actualy bound key with the event\r\n    var handleEvent = function(event,type) {\r\n      if (_bound[type][event.keyCode] !== undefined) {\r\n        var bound = _bound[type][event.keyCode];\r\n        for (var i = 0; i < bound.length; i++) {\r\n          if (bound[i].shift === undefined) {\r\n            bound[i].fn(event);\r\n          }\r\n          else if (bound[i].shift == true && event.shiftKey == true) {\r\n            bound[i].fn(event);\r\n          }\r\n          else if (bound[i].shift == false && event.shiftKey == false) {\r\n            bound[i].fn(event);\r\n          }\r\n        }\r\n\r\n        if (preventDefault == true) {\r\n          event.preventDefault();\r\n        }\r\n      }\r\n    };\r\n\r\n    // bind a key to a callback\r\n    _exportFunctions.bind = function(key, callback, type) {\r\n      if (type === undefined) {\r\n        type = 'keydown';\r\n      }\r\n      if (_keys[key] === undefined) {\r\n        throw new Error(\"unsupported key: \" + key);\r\n      }\r\n      if (_bound[type][_keys[key].code] === undefined) {\r\n        _bound[type][_keys[key].code] = [];\r\n      }\r\n      _bound[type][_keys[key].code].push({fn:callback, shift:_keys[key].shift});\r\n    };\r\n\r\n\r\n    // bind all keys to a call back (demo purposes)\r\n    _exportFunctions.bindAll = function(callback, type) {\r\n      if (type === undefined) {\r\n        type = 'keydown';\r\n      }\r\n      for (var key in _keys) {\r\n        if (_keys.hasOwnProperty(key)) {\r\n          _exportFunctions.bind(key,callback,type);\r\n        }\r\n      }\r\n    };\r\n\r\n    // get the key label from an event\r\n    _exportFunctions.getKey = function(event) {\r\n      for (var key in _keys) {\r\n        if (_keys.hasOwnProperty(key)) {\r\n          if (event.shiftKey == true && _keys[key].shift == true && event.keyCode == _keys[key].code) {\r\n            return key;\r\n          }\r\n          else if (event.shiftKey == false && _keys[key].shift == false && event.keyCode == _keys[key].code) {\r\n            return key;\r\n          }\r\n          else if (event.keyCode == _keys[key].code && key == 'shift') {\r\n            return key;\r\n          }\r\n        }\r\n      }\r\n      return \"unknown key, currently not supported\";\r\n    };\r\n\r\n    // unbind either a specific callback from a key or all of them (by leaving callback undefined)\r\n    _exportFunctions.unbind = function(key, callback, type) {\r\n      if (type === undefined) {\r\n        type = 'keydown';\r\n      }\r\n      if (_keys[key] === undefined) {\r\n        throw new Error(\"unsupported key: \" + key);\r\n      }\r\n      if (callback !== undefined) {\r\n        var newBindings = [];\r\n        var bound = _bound[type][_keys[key].code];\r\n        if (bound !== undefined) {\r\n          for (var i = 0; i < bound.length; i++) {\r\n            if (!(bound[i].fn == callback && bound[i].shift == _keys[key].shift)) {\r\n              newBindings.push(_bound[type][_keys[key].code][i]);\r\n            }\r\n          }\r\n        }\r\n        _bound[type][_keys[key].code] = newBindings;\r\n      }\r\n      else {\r\n        _bound[type][_keys[key].code] = [];\r\n      }\r\n    };\r\n\r\n    // reset all bound variables.\r\n    _exportFunctions.reset = function() {\r\n      _bound = {keydown:{}, keyup:{}};\r\n    };\r\n\r\n    // unbind all listeners and reset all variables.\r\n    _exportFunctions.destroy = function() {\r\n      _bound = {keydown:{}, keyup:{}};\r\n      container.removeEventListener('keydown', down, true);\r\n      container.removeEventListener('keyup', up, true);\r\n    };\r\n\r\n    // create listeners.\r\n    container.addEventListener('keydown',down,true);\r\n    container.addEventListener('keyup',up,true);\r\n\r\n    // return the public functions.\r\n    return _exportFunctions;\r\n  }\r\n\r\n  return keycharm;\r\n}));\r\n\r\n\r\n\n\n/***/ }),\n/* 53 */\n/***/ (function(module, exports, __nested_webpack_require_159436__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _getPrototypeOf = __nested_webpack_require_159436__(3);\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _classCallCheck2 = __nested_webpack_require_159436__(0);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __nested_webpack_require_159436__(1);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = __nested_webpack_require_159436__(4);\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = __nested_webpack_require_159436__(5);\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _NodeBase2 = __nested_webpack_require_159436__(16);\n\nvar _NodeBase3 = _interopRequireDefault(_NodeBase2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\n/**\n * NOTE: This is a bad base class\n *\n * Child classes are:\n *\n *   Image       - uses *only* image methods\n *   Circle      - uses *only* _drawRawCircle\n *   CircleImage - uses all\n *\n * TODO: Refactor, move _drawRawCircle to different module, derive Circle from NodeBase\n *       Rename this to ImageBase\n *       Consolidate common code in Image and CircleImage to base class\n *\n * @extends NodeBase\n */\nvar CircleImageBase = function (_NodeBase) {\n  (0, _inherits3['default'])(CircleImageBase, _NodeBase);\n\n  /**\n   * @param {Object} options\n   * @param {Object} body\n   * @param {Label} labelModule\n   */\n  function CircleImageBase(options, body, labelModule) {\n    (0, _classCallCheck3['default'])(this, CircleImageBase);\n\n    var _this = (0, _possibleConstructorReturn3['default'])(this, (CircleImageBase.__proto__ || (0, _getPrototypeOf2['default'])(CircleImageBase)).call(this, options, body, labelModule));\n\n    _this.labelOffset = 0;\n    _this.selected = false;\n    return _this;\n  }\n\n  /**\n   *\n   * @param {Object} options\n   * @param {Object} [imageObj]\n   * @param {Object} [imageObjAlt]\n   */\n\n\n  (0, _createClass3['default'])(CircleImageBase, [{\n    key: 'setOptions',\n    value: function setOptions(options, imageObj, imageObjAlt) {\n      this.options = options;\n\n      if (!(imageObj === undefined && imageObjAlt === undefined)) {\n        this.setImages(imageObj, imageObjAlt);\n      }\n    }\n\n    /**\n     * Set the images for this node.\n     *\n     * The images can be updated after the initial setting of options;\n     * therefore, this method needs to be reentrant.\n     *\n     * For correct working in error cases, it is necessary to properly set\n     * field 'nodes.brokenImage' in the options.\n     *\n     * @param {Image} imageObj  required; main image to show for this node\n     * @param {Image|undefined} imageObjAlt optional; image to show when node is selected\n     */\n\n  }, {\n    key: 'setImages',\n    value: function setImages(imageObj, imageObjAlt) {\n      if (imageObjAlt && this.selected) {\n        this.imageObj = imageObjAlt;\n        this.imageObjAlt = imageObj;\n      } else {\n        this.imageObj = imageObj;\n        this.imageObjAlt = imageObjAlt;\n      }\n    }\n\n    /**\n     * Set selection and switch between the base and the selected image.\n     *\n     * Do the switch only if imageObjAlt exists.\n     *\n     * @param {boolean} selected value of new selected state for current node\n     */\n\n  }, {\n    key: 'switchImages',\n    value: function switchImages(selected) {\n      var selection_changed = selected && !this.selected || !selected && this.selected;\n      this.selected = selected; // Remember new selection\n\n      if (this.imageObjAlt !== undefined && selection_changed) {\n        var imageTmp = this.imageObj;\n        this.imageObj = this.imageObjAlt;\n        this.imageObjAlt = imageTmp;\n      }\n    }\n\n    /**\n     * Adjust the node dimensions for a loaded image.\n     *\n     * Pre: this.imageObj is valid\n     */\n\n  }, {\n    key: '_resizeImage',\n    value: function _resizeImage() {\n      var width, height;\n\n      if (this.options.shapeProperties.useImageSize === false) {\n        // Use the size property\n        var ratio_width = 1;\n        var ratio_height = 1;\n\n        // Only calculate the proper ratio if both width and height not zero\n        if (this.imageObj.width && this.imageObj.height) {\n          if (this.imageObj.width > this.imageObj.height) {\n            ratio_width = this.imageObj.width / this.imageObj.height;\n          } else {\n            ratio_height = this.imageObj.height / this.imageObj.width;\n          }\n        }\n\n        width = this.options.size * 2 * ratio_width;\n        height = this.options.size * 2 * ratio_height;\n      } else {\n        // Use the image size\n        width = this.imageObj.width;\n        height = this.imageObj.height;\n      }\n\n      this.width = width;\n      this.height = height;\n      this.radius = 0.5 * this.width;\n    }\n\n    /**\n     *\n     * @param {CanvasRenderingContext2D} ctx\n     * @param {number} x width\n     * @param {number} y height\n     * @param {ArrowOptions} values\n     * @private\n     */\n\n  }, {\n    key: '_drawRawCircle',\n    value: function _drawRawCircle(ctx, x, y, values) {\n      this.initContextForDraw(ctx, values);\n      ctx.circle(x, y, values.size);\n      this.performFill(ctx, values);\n    }\n\n    /**\n     *\n     * @param {CanvasRenderingContext2D} ctx\n     * @param {ArrowOptions} values\n     * @private\n     */\n\n  }, {\n    key: '_drawImageAtPosition',\n    value: function _drawImageAtPosition(ctx, values) {\n      if (this.imageObj.width != 0) {\n        // draw the image\n        ctx.globalAlpha = 1.0;\n\n        // draw shadow if enabled\n        this.enableShadow(ctx, values);\n\n        var factor = 1;\n        if (this.options.shapeProperties.interpolation === true) {\n          factor = this.imageObj.width / this.width / this.body.view.scale;\n        }\n\n        this.imageObj.drawImageAtPosition(ctx, factor, this.left, this.top, this.width, this.height);\n\n        // disable shadows for other elements.\n        this.disableShadow(ctx, values);\n      }\n    }\n\n    /**\n     *\n     * @param {CanvasRenderingContext2D} ctx\n     * @param {number} x width\n     * @param {number} y height\n     * @param {boolean} selected\n     * @param {boolean} hover\n     * @private\n     */\n\n  }, {\n    key: '_drawImageLabel',\n    value: function _drawImageLabel(ctx, x, y, selected, hover) {\n      var yLabel;\n      var offset = 0;\n\n      if (this.height !== undefined) {\n        offset = this.height * 0.5;\n        var labelDimensions = this.labelModule.getTextSize(ctx, selected, hover);\n        if (labelDimensions.lineCount >= 1) {\n          offset += labelDimensions.height / 2;\n        }\n      }\n\n      yLabel = y + offset;\n\n      if (this.options.label) {\n        this.labelOffset = offset;\n      }\n      this.labelModule.draw(ctx, x, yLabel, selected, hover, 'hanging');\n    }\n  }]);\n  return CircleImageBase;\n}(_NodeBase3['default']);\n\nexports['default'] = CircleImageBase;\n\n/***/ }),\n/* 54 */\n/***/ (function(module, exports, __nested_webpack_require_166380__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.printStyle = undefined;\n\nvar _stringify = __nested_webpack_require_166380__(23);\n\nvar _stringify2 = _interopRequireDefault(_stringify);\n\nvar _typeof2 = __nested_webpack_require_166380__(7);\n\nvar _typeof3 = _interopRequireDefault(_typeof2);\n\nvar _keys = __nested_webpack_require_166380__(9);\n\nvar _keys2 = _interopRequireDefault(_keys);\n\nvar _classCallCheck2 = __nested_webpack_require_166380__(0);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __nested_webpack_require_166380__(1);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar util = __nested_webpack_require_166380__(2);\n\nvar errorFound = false;\nvar allOptions = void 0;\nvar printStyle = 'background: #FFeeee; color: #dd0000';\n/**\n *  Used to validate options.\n */\n\nvar Validator = function () {\n  /**\n   * @ignore\n   */\n  function Validator() {\n    (0, _classCallCheck3['default'])(this, Validator);\n  }\n\n  /**\n   * Main function to be called\n   * @param {Object} options\n   * @param {Object} referenceOptions\n   * @param {Object} subObject\n   * @returns {boolean}\n   * @static\n   */\n\n\n  (0, _createClass3['default'])(Validator, null, [{\n    key: 'validate',\n    value: function validate(options, referenceOptions, subObject) {\n      errorFound = false;\n      allOptions = referenceOptions;\n      var usedOptions = referenceOptions;\n      if (subObject !== undefined) {\n        usedOptions = referenceOptions[subObject];\n      }\n      Validator.parse(options, usedOptions, []);\n      return errorFound;\n    }\n\n    /**\n     * Will traverse an object recursively and check every value\n     * @param {Object} options\n     * @param {Object} referenceOptions\n     * @param {array} path    | where to look for the actual option\n     * @static\n     */\n\n  }, {\n    key: 'parse',\n    value: function parse(options, referenceOptions, path) {\n      for (var option in options) {\n        if (options.hasOwnProperty(option)) {\n          Validator.check(option, options, referenceOptions, path);\n        }\n      }\n    }\n\n    /**\n     * Check every value. If the value is an object, call the parse function on that object.\n     * @param {string} option\n     * @param {Object} options\n     * @param {Object} referenceOptions\n     * @param {array} path    | where to look for the actual option\n     * @static\n     */\n\n  }, {\n    key: 'check',\n    value: function check(option, options, referenceOptions, path) {\n      if (referenceOptions[option] === undefined && referenceOptions.__any__ === undefined) {\n        Validator.getSuggestion(option, referenceOptions, path);\n        return;\n      }\n\n      var referenceOption = option;\n      var is_object = true;\n\n      if (referenceOptions[option] === undefined && referenceOptions.__any__ !== undefined) {\n        // NOTE: This only triggers if the __any__ is in the top level of the options object.\n        //       THAT'S A REALLY BAD PLACE TO ALLOW IT!!!!\n        // TODO: Examine if needed, remove if possible\n\n        // __any__ is a wildcard. Any value is accepted and will be further analysed by reference.\n        referenceOption = '__any__';\n\n        // if the any-subgroup is not a predefined object in the configurator,\n        // we do not look deeper into the object.\n        is_object = Validator.getType(options[option]) === 'object';\n      } else {\n        // Since all options in the reference are objects, we can check whether\n        // they are supposed to be the object to look for the __type__ field.\n        // if this is an object, we check if the correct type has been supplied to account for shorthand options.\n      }\n\n      var refOptionObj = referenceOptions[referenceOption];\n      if (is_object && refOptionObj.__type__ !== undefined) {\n        refOptionObj = refOptionObj.__type__;\n      }\n\n      Validator.checkFields(option, options, referenceOptions, referenceOption, refOptionObj, path);\n    }\n\n    /**\n     *\n     * @param {string}  option           | the option property\n     * @param {Object}  options          | The supplied options object\n     * @param {Object}  referenceOptions | The reference options containing all options and their allowed formats\n     * @param {string}  referenceOption  | Usually this is the same as option, except when handling an __any__ tag.\n     * @param {string}  refOptionObj     | This is the type object from the reference options\n     * @param {Array}   path             | where in the object is the option\n     * @static\n     */\n\n  }, {\n    key: 'checkFields',\n    value: function checkFields(option, options, referenceOptions, referenceOption, refOptionObj, path) {\n      var log = function log(message) {\n        console.log('%c' + message + Validator.printLocation(path, option), printStyle);\n      };\n\n      var optionType = Validator.getType(options[option]);\n      var refOptionType = refOptionObj[optionType];\n\n      if (refOptionType !== undefined) {\n        // if the type is correct, we check if it is supposed to be one of a few select values\n        if (Validator.getType(refOptionType) === 'array' && refOptionType.indexOf(options[option]) === -1) {\n          log('Invalid option detected in \"' + option + '\".' + ' Allowed values are:' + Validator.print(refOptionType) + ' not \"' + options[option] + '\". ');\n          errorFound = true;\n        } else if (optionType === 'object' && referenceOption !== '__any__') {\n          path = util.copyAndExtendArray(path, option);\n          Validator.parse(options[option], referenceOptions[referenceOption], path);\n        }\n      } else if (refOptionObj['any'] === undefined) {\n        // type of the field is incorrect and the field cannot be any\n        log('Invalid type received for \"' + option + '\". Expected: ' + Validator.print((0, _keys2['default'])(refOptionObj)) + '. Received [' + optionType + '] \"' + options[option] + '\"');\n        errorFound = true;\n      }\n    }\n\n    /**\n     *\n     * @param {Object|boolean|number|string|Array.<number>|Date|Node|Moment|undefined|null} object\n     * @returns {string}\n     * @static\n     */\n\n  }, {\n    key: 'getType',\n    value: function getType(object) {\n      var type = typeof object === 'undefined' ? 'undefined' : (0, _typeof3['default'])(object);\n\n      if (type === 'object') {\n        if (object === null) {\n          return 'null';\n        }\n        if (object instanceof Boolean) {\n          return 'boolean';\n        }\n        if (object instanceof Number) {\n          return 'number';\n        }\n        if (object instanceof String) {\n          return 'string';\n        }\n        if (Array.isArray(object)) {\n          return 'array';\n        }\n        if (object instanceof Date) {\n          return 'date';\n        }\n        if (object.nodeType !== undefined) {\n          return 'dom';\n        }\n        if (object._isAMomentObject === true) {\n          return 'moment';\n        }\n        return 'object';\n      } else if (type === 'number') {\n        return 'number';\n      } else if (type === 'boolean') {\n        return 'boolean';\n      } else if (type === 'string') {\n        return 'string';\n      } else if (type === undefined) {\n        return 'undefined';\n      }\n      return type;\n    }\n\n    /**\n     * @param {string} option\n     * @param {Object} options\n     * @param {Array.<string>} path\n     * @static\n     */\n\n  }, {\n    key: 'getSuggestion',\n    value: function getSuggestion(option, options, path) {\n      var localSearch = Validator.findInOptions(option, options, path, false);\n      var globalSearch = Validator.findInOptions(option, allOptions, [], true);\n\n      var localSearchThreshold = 8;\n      var globalSearchThreshold = 4;\n\n      var msg = void 0;\n      if (localSearch.indexMatch !== undefined) {\n        msg = ' in ' + Validator.printLocation(localSearch.path, option, '') + 'Perhaps it was incomplete? Did you mean: \"' + localSearch.indexMatch + '\"?\\n\\n';\n      } else if (globalSearch.distance <= globalSearchThreshold && localSearch.distance > globalSearch.distance) {\n        msg = ' in ' + Validator.printLocation(localSearch.path, option, '') + 'Perhaps it was misplaced? Matching option found at: ' + Validator.printLocation(globalSearch.path, globalSearch.closestMatch, '');\n      } else if (localSearch.distance <= localSearchThreshold) {\n        msg = '. Did you mean \"' + localSearch.closestMatch + '\"?' + Validator.printLocation(localSearch.path, option);\n      } else {\n        msg = '. Did you mean one of these: ' + Validator.print((0, _keys2['default'])(options)) + Validator.printLocation(path, option);\n      }\n\n      console.log('%cUnknown option detected: \"' + option + '\"' + msg, printStyle);\n      errorFound = true;\n    }\n\n    /**\n     * traverse the options in search for a match.\n     * @param {string} option\n     * @param {Object} options\n     * @param {Array} path    | where to look for the actual option\n     * @param {boolean} [recursive=false]\n     * @returns {{closestMatch: string, path: Array, distance: number}}\n     * @static\n     */\n\n  }, {\n    key: 'findInOptions',\n    value: function findInOptions(option, options, path) {\n      var recursive = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n\n      var min = 1e9;\n      var closestMatch = '';\n      var closestMatchPath = [];\n      var lowerCaseOption = option.toLowerCase();\n      var indexMatch = undefined;\n      // eslint-disable-next-line guard-for-in\n      for (var op in options) {\n        var distance = void 0;\n        if (options[op].__type__ !== undefined && recursive === true) {\n          var result = Validator.findInOptions(option, options[op], util.copyAndExtendArray(path, op));\n          if (min > result.distance) {\n            closestMatch = result.closestMatch;\n            closestMatchPath = result.path;\n            min = result.distance;\n            indexMatch = result.indexMatch;\n          }\n        } else {\n          if (op.toLowerCase().indexOf(lowerCaseOption) !== -1) {\n            indexMatch = op;\n          }\n          distance = Validator.levenshteinDistance(option, op);\n          if (min > distance) {\n            closestMatch = op;\n            closestMatchPath = util.copyArray(path);\n            min = distance;\n          }\n        }\n      }\n      return {\n        closestMatch: closestMatch,\n        path: closestMatchPath,\n        distance: min,\n        indexMatch: indexMatch\n      };\n    }\n\n    /**\n     * @param {Array.<string>} path\n     * @param {Object} option\n     * @param {string} prefix\n     * @returns {String}\n     * @static\n     */\n\n  }, {\n    key: 'printLocation',\n    value: function printLocation(path, option) {\n      var prefix = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'Problem value found at: \\n';\n\n      var str = '\\n\\n' + prefix + 'options = {\\n';\n      for (var i = 0; i < path.length; i++) {\n        for (var j = 0; j < i + 1; j++) {\n          str += '  ';\n        }\n        str += path[i] + ': {\\n';\n      }\n      for (var _j = 0; _j < path.length + 1; _j++) {\n        str += '  ';\n      }\n      str += option + '\\n';\n      for (var _i = 0; _i < path.length + 1; _i++) {\n        for (var _j2 = 0; _j2 < path.length - _i; _j2++) {\n          str += '  ';\n        }\n        str += '}\\n';\n      }\n      return str + '\\n\\n';\n    }\n\n    /**\n     * @param {Object} options\n     * @returns {String}\n     * @static\n     */\n\n  }, {\n    key: 'print',\n    value: function print(options) {\n      return (0, _stringify2['default'])(options).replace(/(\\\")|(\\[)|(\\])|(,\"__type__\")/g, '').replace(/(\\,)/g, ', ');\n    }\n\n    /**\n     *  Compute the edit distance between the two given strings\n     * http://en.wikibooks.org/wiki/Algorithm_Implementation/Strings/Levenshtein_distance#JavaScript\n     *\n     * Copyright (c) 2011 Andrei Mackenzie\n     *\n     * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n     *\n     * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n     *\n     * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n     *\n     * @param {string} a\n     * @param {string} b\n     * @returns {Array.<Array.<number>>}}\n     * @static\n     */\n\n  }, {\n    key: 'levenshteinDistance',\n    value: function levenshteinDistance(a, b) {\n      if (a.length === 0) return b.length;\n      if (b.length === 0) return a.length;\n\n      var matrix = [];\n\n      // increment along the first column of each row\n      var i;\n      for (i = 0; i <= b.length; i++) {\n        matrix[i] = [i];\n      }\n\n      // increment each column in the first row\n      var j;\n      for (j = 0; j <= a.length; j++) {\n        matrix[0][j] = j;\n      }\n\n      // Fill in the rest of the matrix\n      for (i = 1; i <= b.length; i++) {\n        for (j = 1; j <= a.length; j++) {\n          if (b.charAt(i - 1) == a.charAt(j - 1)) {\n            matrix[i][j] = matrix[i - 1][j - 1];\n          } else {\n            matrix[i][j] = Math.min(matrix[i - 1][j - 1] + 1, // substitution\n            Math.min(matrix[i][j - 1] + 1, // insertion\n            matrix[i - 1][j] + 1)); // deletion\n          }\n        }\n      }\n\n      return matrix[b.length][a.length];\n    }\n  }]);\n  return Validator;\n}();\n\nexports['default'] = Validator;\nexports.printStyle = printStyle;\n\n/***/ }),\n/* 55 */\n/***/ (function(module, exports, __nested_webpack_require_180531__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _stringify = __nested_webpack_require_180531__(23);\n\nvar _stringify2 = _interopRequireDefault(_stringify);\n\nvar _typeof2 = __nested_webpack_require_180531__(7);\n\nvar _typeof3 = _interopRequireDefault(_typeof2);\n\nvar _create = __nested_webpack_require_180531__(31);\n\nvar _create2 = _interopRequireDefault(_create);\n\nvar _classCallCheck2 = __nested_webpack_require_180531__(0);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __nested_webpack_require_180531__(1);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar util = __nested_webpack_require_180531__(2);\nvar Label = __nested_webpack_require_180531__(77)['default'];\nvar ComponentUtil = __nested_webpack_require_180531__(35)['default'];\nvar CubicBezierEdge = __nested_webpack_require_180531__(166)['default'];\nvar BezierEdgeDynamic = __nested_webpack_require_180531__(168)['default'];\nvar BezierEdgeStatic = __nested_webpack_require_180531__(169)['default'];\nvar StraightEdge = __nested_webpack_require_180531__(170)['default'];\n\n/**\n * An edge connects two nodes and has a specific direction.\n */\n\nvar Edge = function () {\n  /**\n   * @param {Object} options        values specific to this edge, must contain at least 'from' and 'to'\n   * @param {Object} body           shared state from Network instance\n   * @param {Object} globalOptions  options from the EdgesHandler instance\n   * @param {Object} defaultOptions default options from the EdgeHandler instance. Value and reference are constant\n   */\n  function Edge(options, body, globalOptions, defaultOptions) {\n    (0, _classCallCheck3['default'])(this, Edge);\n\n    if (body === undefined) {\n      throw new Error('No body provided');\n    }\n\n    // Since globalOptions is constant in values as well as reference,\n    // Following needs to be done only once.\n\n    this.options = util.bridgeObject(globalOptions);\n    this.globalOptions = globalOptions;\n    this.defaultOptions = defaultOptions;\n    this.body = body;\n\n    // initialize variables\n    this.id = undefined;\n    this.fromId = undefined;\n    this.toId = undefined;\n    this.selected = false;\n    this.hover = false;\n    this.labelDirty = true;\n\n    this.baseWidth = this.options.width;\n    this.baseFontSize = this.options.font.size;\n\n    this.from = undefined; // a node\n    this.to = undefined; // a node\n\n    this.edgeType = undefined;\n\n    this.connected = false;\n\n    this.labelModule = new Label(this.body, this.options, true /* It's an edge label */\n    );\n    this.setOptions(options);\n  }\n\n  /**\n   * Set or overwrite options for the edge\n   * @param {Object} options  an object with options\n   * @returns {null|boolean} null if no options, boolean if date changed\n   */\n\n\n  (0, _createClass3['default'])(Edge, [{\n    key: 'setOptions',\n    value: function setOptions(options) {\n      if (!options) {\n        return;\n      }\n\n      Edge.parseOptions(this.options, options, true, this.globalOptions);\n\n      if (options.id !== undefined) {\n        this.id = options.id;\n      }\n      if (options.from !== undefined) {\n        this.fromId = options.from;\n      }\n      if (options.to !== undefined) {\n        this.toId = options.to;\n      }\n      if (options.title !== undefined) {\n        this.title = options.title;\n      }\n      if (options.value !== undefined) {\n        options.value = parseFloat(options.value);\n      }\n\n      var pile = [options, this.options, this.defaultOptions];\n      this.chooser = ComponentUtil.choosify('edge', pile);\n\n      // update label Module\n      this.updateLabelModule(options);\n\n      var dataChanged = this.updateEdgeType();\n\n      // if anything has been updates, reset the selection width and the hover width\n      this._setInteractionWidths();\n\n      // A node is connected when it has a from and to node that both exist in the network.body.nodes.\n      this.connect();\n\n      if (options.hidden !== undefined || options.physics !== undefined) {\n        dataChanged = true;\n      }\n\n      return dataChanged;\n    }\n\n    /**\n     *\n     * @param {Object} parentOptions\n     * @param {Object} newOptions\n     * @param {boolean} [allowDeletion=false]\n     * @param {Object} [globalOptions={}]\n     * @param {boolean} [copyFromGlobals=false]\n     */\n\n  }, {\n    key: 'getFormattingValues',\n\n\n    /**\n     *\n     * @returns {ArrowOptions}\n     */\n    value: function getFormattingValues() {\n      var toArrow = this.options.arrows.to === true || this.options.arrows.to.enabled === true;\n      var fromArrow = this.options.arrows.from === true || this.options.arrows.from.enabled === true;\n      var middleArrow = this.options.arrows.middle === true || this.options.arrows.middle.enabled === true;\n      var inheritsColor = this.options.color.inherit;\n      var values = {\n        toArrow: toArrow,\n        toArrowScale: this.options.arrows.to.scaleFactor,\n        toArrowType: this.options.arrows.to.type,\n        middleArrow: middleArrow,\n        middleArrowScale: this.options.arrows.middle.scaleFactor,\n        middleArrowType: this.options.arrows.middle.type,\n        fromArrow: fromArrow,\n        fromArrowScale: this.options.arrows.from.scaleFactor,\n        fromArrowType: this.options.arrows.from.type,\n        arrowStrikethrough: this.options.arrowStrikethrough,\n        color: inheritsColor ? undefined : this.options.color.color,\n        inheritsColor: inheritsColor,\n        opacity: this.options.color.opacity,\n        hidden: this.options.hidden,\n        length: this.options.length,\n        shadow: this.options.shadow.enabled,\n        shadowColor: this.options.shadow.color,\n        shadowSize: this.options.shadow.size,\n        shadowX: this.options.shadow.x,\n        shadowY: this.options.shadow.y,\n        dashes: this.options.dashes,\n        width: this.options.width,\n        background: this.options.background.enabled,\n        backgroundColor: this.options.background.color,\n        backgroundSize: this.options.background.size,\n        backgroundDashes: this.options.background.dashes\n      };\n      if (this.selected || this.hover) {\n        if (this.chooser === true) {\n          if (this.selected) {\n            var selectedWidth = this.options.selectionWidth;\n            if (typeof selectedWidth === 'function') {\n              values.width = selectedWidth(values.width);\n            } else if (typeof selectedWidth === 'number') {\n              values.width += selectedWidth;\n            }\n            values.width = Math.max(values.width, 0.3 / this.body.view.scale);\n            values.color = this.options.color.highlight;\n            values.shadow = this.options.shadow.enabled;\n          } else if (this.hover) {\n            var hoverWidth = this.options.hoverWidth;\n            if (typeof hoverWidth === 'function') {\n              values.width = hoverWidth(values.width);\n            } else if (typeof hoverWidth === 'number') {\n              values.width += hoverWidth;\n            }\n            values.width = Math.max(values.width, 0.3 / this.body.view.scale);\n            values.color = this.options.color.hover;\n            values.shadow = this.options.shadow.enabled;\n          }\n        } else if (typeof this.chooser === 'function') {\n          this.chooser(values, this.options.id, this.selected, this.hover);\n          if (values.color !== undefined) {\n            values.inheritsColor = false;\n          }\n          if (values.shadow === false) {\n            if (values.shadowColor !== this.options.shadow.color || values.shadowSize !== this.options.shadow.size || values.shadowX !== this.options.shadow.x || values.shadowY !== this.options.shadow.y) {\n              values.shadow = true;\n            }\n          }\n        }\n      } else {\n        values.shadow = this.options.shadow.enabled;\n        values.width = Math.max(values.width, 0.3 / this.body.view.scale);\n      }\n      return values;\n    }\n\n    /**\n     * update the options in the label module\n     *\n     * @param {Object} options\n     */\n\n  }, {\n    key: 'updateLabelModule',\n    value: function updateLabelModule(options) {\n      var pile = [options, this.options, this.globalOptions, // Currently set global edge options\n      this.defaultOptions];\n\n      this.labelModule.update(this.options, pile);\n\n      if (this.labelModule.baseSize !== undefined) {\n        this.baseFontSize = this.labelModule.baseSize;\n      }\n    }\n\n    /**\n     * update the edge type, set the options\n     * @returns {boolean}\n     */\n\n  }, {\n    key: 'updateEdgeType',\n    value: function updateEdgeType() {\n      var smooth = this.options.smooth;\n      var dataChanged = false;\n      var changeInType = true;\n      if (this.edgeType !== undefined) {\n        if (this.edgeType instanceof BezierEdgeDynamic && smooth.enabled === true && smooth.type === 'dynamic' || this.edgeType instanceof CubicBezierEdge && smooth.enabled === true && smooth.type === 'cubicBezier' || this.edgeType instanceof BezierEdgeStatic && smooth.enabled === true && smooth.type !== 'dynamic' && smooth.type !== 'cubicBezier' || this.edgeType instanceof StraightEdge && smooth.type.enabled === false) {\n          changeInType = false;\n        }\n        if (changeInType === true) {\n          dataChanged = this.cleanup();\n        }\n      }\n      if (changeInType === true) {\n        if (smooth.enabled === true) {\n          if (smooth.type === 'dynamic') {\n            dataChanged = true;\n            this.edgeType = new BezierEdgeDynamic(this.options, this.body, this.labelModule);\n          } else if (smooth.type === 'cubicBezier') {\n            this.edgeType = new CubicBezierEdge(this.options, this.body, this.labelModule);\n          } else {\n            this.edgeType = new BezierEdgeStatic(this.options, this.body, this.labelModule);\n          }\n        } else {\n          this.edgeType = new StraightEdge(this.options, this.body, this.labelModule);\n        }\n      } else {\n        // if nothing changes, we just set the options.\n        this.edgeType.setOptions(this.options);\n      }\n      return dataChanged;\n    }\n\n    /**\n     * Connect an edge to its nodes\n     */\n\n  }, {\n    key: 'connect',\n    value: function connect() {\n      this.disconnect();\n\n      this.from = this.body.nodes[this.fromId] || undefined;\n      this.to = this.body.nodes[this.toId] || undefined;\n      this.connected = this.from !== undefined && this.to !== undefined;\n\n      if (this.connected === true) {\n        this.from.attachEdge(this);\n        this.to.attachEdge(this);\n      } else {\n        if (this.from) {\n          this.from.detachEdge(this);\n        }\n        if (this.to) {\n          this.to.detachEdge(this);\n        }\n      }\n\n      this.edgeType.connect();\n    }\n\n    /**\n     * Disconnect an edge from its nodes\n     */\n\n  }, {\n    key: 'disconnect',\n    value: function disconnect() {\n      if (this.from) {\n        this.from.detachEdge(this);\n        this.from = undefined;\n      }\n      if (this.to) {\n        this.to.detachEdge(this);\n        this.to = undefined;\n      }\n\n      this.connected = false;\n    }\n\n    /**\n     * get the title of this edge.\n     * @return {string} title    The title of the edge, or undefined when no title\n     *                           has been set.\n     */\n\n  }, {\n    key: 'getTitle',\n    value: function getTitle() {\n      return this.title;\n    }\n\n    /**\n     * check if this node is selecte\n     * @return {boolean} selected   True if node is selected, else false\n     */\n\n  }, {\n    key: 'isSelected',\n    value: function isSelected() {\n      return this.selected;\n    }\n\n    /**\n     * Retrieve the value of the edge. Can be undefined\n     * @return {number} value\n     */\n\n  }, {\n    key: 'getValue',\n    value: function getValue() {\n      return this.options.value;\n    }\n\n    /**\n     * Adjust the value range of the edge. The edge will adjust it's width\n     * based on its value.\n     * @param {number} min\n     * @param {number} max\n     * @param {number} total\n     */\n\n  }, {\n    key: 'setValueRange',\n    value: function setValueRange(min, max, total) {\n      if (this.options.value !== undefined) {\n        var scale = this.options.scaling.customScalingFunction(min, max, total, this.options.value);\n        var widthDiff = this.options.scaling.max - this.options.scaling.min;\n        if (this.options.scaling.label.enabled === true) {\n          var fontDiff = this.options.scaling.label.max - this.options.scaling.label.min;\n          this.options.font.size = this.options.scaling.label.min + scale * fontDiff;\n        }\n        this.options.width = this.options.scaling.min + scale * widthDiff;\n      } else {\n        this.options.width = this.baseWidth;\n        this.options.font.size = this.baseFontSize;\n      }\n\n      this._setInteractionWidths();\n      this.updateLabelModule();\n    }\n\n    /**\n     *\n     * @private\n     */\n\n  }, {\n    key: '_setInteractionWidths',\n    value: function _setInteractionWidths() {\n      if (typeof this.options.hoverWidth === 'function') {\n        this.edgeType.hoverWidth = this.options.hoverWidth(this.options.width);\n      } else {\n        this.edgeType.hoverWidth = this.options.hoverWidth + this.options.width;\n      }\n      if (typeof this.options.selectionWidth === 'function') {\n        this.edgeType.selectionWidth = this.options.selectionWidth(this.options.width);\n      } else {\n        this.edgeType.selectionWidth = this.options.selectionWidth + this.options.width;\n      }\n    }\n\n    /**\n     * Redraw a edge\n     * Draw this edge in the given canvas\n     * The 2d context of a HTML canvas can be retrieved by canvas.getContext(\"2d\");\n     * @param {CanvasRenderingContext2D}   ctx\n     */\n\n  }, {\n    key: 'draw',\n    value: function draw(ctx) {\n      var values = this.getFormattingValues();\n      if (values.hidden) {\n        return;\n      }\n\n      // get the via node from the edge type\n      var viaNode = this.edgeType.getViaNode();\n      var arrowData = {};\n\n      // restore edge targets to defaults\n      this.edgeType.fromPoint = this.edgeType.from;\n      this.edgeType.toPoint = this.edgeType.to;\n\n      // from and to arrows give a different end point for edges. we set them here\n      if (values.fromArrow) {\n        arrowData.from = this.edgeType.getArrowData(ctx, 'from', viaNode, this.selected, this.hover, values);\n        if (values.arrowStrikethrough === false) this.edgeType.fromPoint = arrowData.from.core;\n      }\n      if (values.toArrow) {\n        arrowData.to = this.edgeType.getArrowData(ctx, 'to', viaNode, this.selected, this.hover, values);\n        if (values.arrowStrikethrough === false) this.edgeType.toPoint = arrowData.to.core;\n      }\n\n      // the middle arrow depends on the line, which can depend on the to and from arrows so we do this one lastly.\n      if (values.middleArrow) {\n        arrowData.middle = this.edgeType.getArrowData(ctx, 'middle', viaNode, this.selected, this.hover, values);\n      }\n\n      // draw everything\n      this.edgeType.drawLine(ctx, values, this.selected, this.hover, viaNode);\n      this.drawArrows(ctx, arrowData, values);\n      this.drawLabel(ctx, viaNode);\n    }\n\n    /**\n     *\n     * @param {CanvasRenderingContext2D} ctx\n     * @param {Object} arrowData\n     * @param {ArrowOptions} values\n     */\n\n  }, {\n    key: 'drawArrows',\n    value: function drawArrows(ctx, arrowData, values) {\n      if (values.fromArrow) {\n        this.edgeType.drawArrowHead(ctx, values, this.selected, this.hover, arrowData.from);\n      }\n      if (values.middleArrow) {\n        this.edgeType.drawArrowHead(ctx, values, this.selected, this.hover, arrowData.middle);\n      }\n      if (values.toArrow) {\n        this.edgeType.drawArrowHead(ctx, values, this.selected, this.hover, arrowData.to);\n      }\n    }\n\n    /**\n     *\n     * @param {CanvasRenderingContext2D} ctx\n     * @param {Node} viaNode\n     */\n\n  }, {\n    key: 'drawLabel',\n    value: function drawLabel(ctx, viaNode) {\n      if (this.options.label !== undefined) {\n        // set style\n        var node1 = this.from;\n        var node2 = this.to;\n\n        if (this.labelModule.differentState(this.selected, this.hover)) {\n          this.labelModule.getTextSize(ctx, this.selected, this.hover);\n        }\n\n        if (node1.id != node2.id) {\n          this.labelModule.pointToSelf = false;\n          var point = this.edgeType.getPoint(0.5, viaNode);\n          ctx.save();\n\n          var rotationPoint = this._getRotation(ctx);\n          if (rotationPoint.angle != 0) {\n            ctx.translate(rotationPoint.x, rotationPoint.y);\n            ctx.rotate(rotationPoint.angle);\n          }\n\n          // draw the label\n          this.labelModule.draw(ctx, point.x, point.y, this.selected, this.hover);\n\n          /*\n          // Useful debug code: draw a border around the label\n          // This should **not** be enabled in production!\n          var size = this.labelModule.getSize();; // ;; intentional so lint catches it\n          ctx.strokeStyle = \"#ff0000\";\n          ctx.strokeRect(size.left, size.top, size.width, size.height);\n          // End  debug code\n          */\n\n          ctx.restore();\n        } else {\n          // Ignore the orientations.\n          this.labelModule.pointToSelf = true;\n          var x, y;\n          var radius = this.options.selfReferenceSize;\n          if (node1.shape.width > node1.shape.height) {\n            x = node1.x + node1.shape.width * 0.5;\n            y = node1.y - radius;\n          } else {\n            x = node1.x + radius;\n            y = node1.y - node1.shape.height * 0.5;\n          }\n          point = this._pointOnCircle(x, y, radius, 0.125);\n          this.labelModule.draw(ctx, point.x, point.y, this.selected, this.hover);\n        }\n      }\n    }\n\n    /**\n     * Determine all visual elements of this edge instance, in which the given\n     * point falls within the bounding shape.\n     *\n     * @param {point} point\n     * @returns {Array.<edgeClickItem|edgeLabelClickItem>} list with the items which are on the point\n     */\n\n  }, {\n    key: 'getItemsOnPoint',\n    value: function getItemsOnPoint(point) {\n      var ret = [];\n\n      if (this.labelModule.visible()) {\n        var rotationPoint = this._getRotation();\n        if (ComponentUtil.pointInRect(this.labelModule.getSize(), point, rotationPoint)) {\n          ret.push({ edgeId: this.id, labelId: 0 });\n        }\n      }\n\n      var obj = {\n        left: point.x,\n        top: point.y\n      };\n\n      if (this.isOverlappingWith(obj)) {\n        ret.push({ edgeId: this.id });\n      }\n\n      return ret;\n    }\n\n    /**\n     * Check if this object is overlapping with the provided object\n     * @param {Object} obj   an object with parameters left, top\n     * @return {boolean}     True if location is located on the edge\n     */\n\n  }, {\n    key: 'isOverlappingWith',\n    value: function isOverlappingWith(obj) {\n      if (this.connected) {\n        var distMax = 10;\n        var xFrom = this.from.x;\n        var yFrom = this.from.y;\n        var xTo = this.to.x;\n        var yTo = this.to.y;\n        var xObj = obj.left;\n        var yObj = obj.top;\n\n        var dist = this.edgeType.getDistanceToEdge(xFrom, yFrom, xTo, yTo, xObj, yObj);\n\n        return dist < distMax;\n      } else {\n        return false;\n      }\n    }\n\n    /**\n     * Determine the rotation point, if any.\n     *\n     * @param {CanvasRenderingContext2D} [ctx] if passed, do a recalculation of the label size\n     * @returns {rotationPoint} the point to rotate around and the angle in radians to rotate\n     * @private\n     */\n\n  }, {\n    key: '_getRotation',\n    value: function _getRotation(ctx) {\n      var viaNode = this.edgeType.getViaNode();\n      var point = this.edgeType.getPoint(0.5, viaNode);\n\n      if (ctx !== undefined) {\n        this.labelModule.calculateLabelSize(ctx, this.selected, this.hover, point.x, point.y);\n      }\n\n      var ret = {\n        x: point.x,\n        y: this.labelModule.size.yLine,\n        angle: 0\n      };\n\n      if (!this.labelModule.visible()) {\n        return ret; // Don't even bother doing the atan2, there's nothing to draw\n      }\n\n      if (this.options.font.align === 'horizontal') {\n        return ret; // No need to calculate angle\n      }\n\n      var dy = this.from.y - this.to.y;\n      var dx = this.from.x - this.to.x;\n      var angle = Math.atan2(dy, dx); // radians\n\n      // rotate so that label is readable\n      if (angle < -1 && dx < 0 || angle > 0 && dx < 0) {\n        angle += Math.PI;\n      }\n      ret.angle = angle;\n\n      return ret;\n    }\n\n    /**\n     * Get a point on a circle\n     * @param {number} x\n     * @param {number} y\n     * @param {number} radius\n     * @param {number} percentage Value between 0 (line start) and 1 (line end)\n     * @return {Object} point\n     * @private\n     */\n\n  }, {\n    key: '_pointOnCircle',\n    value: function _pointOnCircle(x, y, radius, percentage) {\n      var angle = percentage * 2 * Math.PI;\n      return {\n        x: x + radius * Math.cos(angle),\n        y: y - radius * Math.sin(angle)\n      };\n    }\n\n    /**\n     * Sets selected state to true\n     */\n\n  }, {\n    key: 'select',\n    value: function select() {\n      this.selected = true;\n    }\n\n    /**\n     * Sets selected state to false\n     */\n\n  }, {\n    key: 'unselect',\n    value: function unselect() {\n      this.selected = false;\n    }\n\n    /**\n     * cleans all required things on delete\n     * @returns {*}\n     */\n\n  }, {\n    key: 'cleanup',\n    value: function cleanup() {\n      return this.edgeType.cleanup();\n    }\n\n    /**\n     * Remove edge from the list and perform necessary cleanup.\n     */\n\n  }, {\n    key: 'remove',\n    value: function remove() {\n      this.cleanup();\n      this.disconnect();\n      delete this.body.edges[this.id];\n    }\n\n    /**\n     * Check if both connecting nodes exist\n     * @returns {boolean}\n     */\n\n  }, {\n    key: 'endPointsValid',\n    value: function endPointsValid() {\n      return this.body.nodes[this.fromId] !== undefined && this.body.nodes[this.toId] !== undefined;\n    }\n  }], [{\n    key: 'parseOptions',\n    value: function parseOptions(parentOptions, newOptions) {\n      var allowDeletion = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      var globalOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n      var copyFromGlobals = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n\n      var fields = ['arrowStrikethrough', 'id', 'from', 'hidden', 'hoverWidth', 'labelHighlightBold', 'length', 'line', 'opacity', 'physics', 'scaling', 'selectionWidth', 'selfReferenceSize', 'to', 'title', 'value', 'width', 'font', 'chosen', 'widthConstraint'];\n\n      // only deep extend the items in the field array. These do not have shorthand.\n      util.selectiveDeepExtend(fields, parentOptions, newOptions, allowDeletion);\n\n      // Only copy label if it's a legal value.\n      if (ComponentUtil.isValidLabel(newOptions.label)) {\n        parentOptions.label = newOptions.label;\n      } else {\n        parentOptions.label = undefined;\n      }\n\n      util.mergeOptions(parentOptions, newOptions, 'smooth', globalOptions);\n      util.mergeOptions(parentOptions, newOptions, 'shadow', globalOptions);\n      util.mergeOptions(parentOptions, newOptions, 'background', globalOptions);\n\n      if (newOptions.dashes !== undefined && newOptions.dashes !== null) {\n        parentOptions.dashes = newOptions.dashes;\n      } else if (allowDeletion === true && newOptions.dashes === null) {\n        parentOptions.dashes = (0, _create2['default'])(globalOptions.dashes); // this sets the pointer of the option back to the global option.\n      }\n\n      // set the scaling newOptions\n      if (newOptions.scaling !== undefined && newOptions.scaling !== null) {\n        if (newOptions.scaling.min !== undefined) {\n          parentOptions.scaling.min = newOptions.scaling.min;\n        }\n        if (newOptions.scaling.max !== undefined) {\n          parentOptions.scaling.max = newOptions.scaling.max;\n        }\n        util.mergeOptions(parentOptions.scaling, newOptions.scaling, 'label', globalOptions.scaling);\n      } else if (allowDeletion === true && newOptions.scaling === null) {\n        parentOptions.scaling = (0, _create2['default'])(globalOptions.scaling); // this sets the pointer of the option back to the global option.\n      }\n\n      // handle multiple input cases for arrows\n      if (newOptions.arrows !== undefined && newOptions.arrows !== null) {\n        if (typeof newOptions.arrows === 'string') {\n          var arrows = newOptions.arrows.toLowerCase();\n          parentOptions.arrows.to.enabled = arrows.indexOf('to') != -1;\n          parentOptions.arrows.middle.enabled = arrows.indexOf('middle') != -1;\n          parentOptions.arrows.from.enabled = arrows.indexOf('from') != -1;\n        } else if ((0, _typeof3['default'])(newOptions.arrows) === 'object') {\n          util.mergeOptions(parentOptions.arrows, newOptions.arrows, 'to', globalOptions.arrows);\n          util.mergeOptions(parentOptions.arrows, newOptions.arrows, 'middle', globalOptions.arrows);\n          util.mergeOptions(parentOptions.arrows, newOptions.arrows, 'from', globalOptions.arrows);\n        } else {\n          throw new Error('The arrow newOptions can only be an object or a string. Refer to the documentation. You used:' + (0, _stringify2['default'])(newOptions.arrows));\n        }\n      } else if (allowDeletion === true && newOptions.arrows === null) {\n        parentOptions.arrows = (0, _create2['default'])(globalOptions.arrows); // this sets the pointer of the option back to the global option.\n      }\n\n      // handle multiple input cases for color\n      if (newOptions.color !== undefined && newOptions.color !== null) {\n        var fromColor = newOptions.color;\n        var toColor = parentOptions.color;\n\n        // If passed, fill in values from default options - required in the case of no prototype bridging\n        if (copyFromGlobals) {\n          util.deepExtend(toColor, globalOptions.color, false, allowDeletion);\n        } else {\n          // Clear local properties - need to do it like this in order to retain prototype bridges\n          for (var i in toColor) {\n            if (toColor.hasOwnProperty(i)) {\n              delete toColor[i];\n            }\n          }\n        }\n\n        if (util.isString(toColor)) {\n          toColor.color = toColor;\n          toColor.highlight = toColor;\n          toColor.hover = toColor;\n          toColor.inherit = false;\n          if (fromColor.opacity === undefined) {\n            toColor.opacity = 1.0; // set default\n          }\n        } else {\n          var colorsDefined = false;\n          if (fromColor.color !== undefined) {\n            toColor.color = fromColor.color;\n            colorsDefined = true;\n          }\n          if (fromColor.highlight !== undefined) {\n            toColor.highlight = fromColor.highlight;\n            colorsDefined = true;\n          }\n          if (fromColor.hover !== undefined) {\n            toColor.hover = fromColor.hover;\n            colorsDefined = true;\n          }\n          if (fromColor.inherit !== undefined) {\n            toColor.inherit = fromColor.inherit;\n          }\n          if (fromColor.opacity !== undefined) {\n            toColor.opacity = Math.min(1, Math.max(0, fromColor.opacity));\n          }\n\n          if (colorsDefined === true) {\n            toColor.inherit = false;\n          } else {\n            if (toColor.inherit === undefined) {\n              toColor.inherit = 'from'; // Set default\n            }\n          }\n        }\n      } else if (allowDeletion === true && newOptions.color === null) {\n        parentOptions.color = util.bridgeObject(globalOptions.color); // set the object back to the global options\n      }\n\n      if (allowDeletion === true && newOptions.font === null) {\n        parentOptions.font = util.bridgeObject(globalOptions.font); // set the object back to the global options\n      }\n    }\n  }]);\n  return Edge;\n}();\n\nexports['default'] = Edge;\n\n/***/ }),\n/* 56 */\n/***/ (function(module, exports, __nested_webpack_require_208434__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _getPrototypeOf = __nested_webpack_require_208434__(3);\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _classCallCheck2 = __nested_webpack_require_208434__(0);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __nested_webpack_require_208434__(1);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = __nested_webpack_require_208434__(4);\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = __nested_webpack_require_208434__(5);\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _EdgeBase2 = __nested_webpack_require_208434__(79);\n\nvar _EdgeBase3 = _interopRequireDefault(_EdgeBase2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\n/**\n * The Base Class for all Bezier edges. Bezier curves are used to model smooth\n * gradual curves in paths between nodes.\n *\n * @extends EdgeBase\n */\nvar BezierEdgeBase = function (_EdgeBase) {\n  (0, _inherits3['default'])(BezierEdgeBase, _EdgeBase);\n\n  /**\n   * @param {Object} options\n   * @param {Object} body\n   * @param {Label} labelModule\n   */\n  function BezierEdgeBase(options, body, labelModule) {\n    (0, _classCallCheck3['default'])(this, BezierEdgeBase);\n    return (0, _possibleConstructorReturn3['default'])(this, (BezierEdgeBase.__proto__ || (0, _getPrototypeOf2['default'])(BezierEdgeBase)).call(this, options, body, labelModule));\n  }\n\n  /**\n   * This function uses binary search to look for the point where the bezier curve crosses the border of the node.\n   *\n   * @param {Node} nearNode\n   * @param {CanvasRenderingContext2D} ctx\n   * @param {Node} viaNode\n   * @returns {*}\n   * @private\n   */\n\n\n  (0, _createClass3['default'])(BezierEdgeBase, [{\n    key: '_findBorderPositionBezier',\n    value: function _findBorderPositionBezier(nearNode, ctx) {\n      var viaNode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this._getViaCoordinates();\n\n      var maxIterations = 10;\n      var iteration = 0;\n      var low = 0;\n      var high = 1;\n      var pos, angle, distanceToBorder, distanceToPoint, difference;\n      var threshold = 0.2;\n      var node = this.to;\n      var from = false;\n      if (nearNode.id === this.from.id) {\n        node = this.from;\n        from = true;\n      }\n\n      while (low <= high && iteration < maxIterations) {\n        var middle = (low + high) * 0.5;\n\n        pos = this.getPoint(middle, viaNode);\n        angle = Math.atan2(node.y - pos.y, node.x - pos.x);\n        distanceToBorder = node.distanceToBorder(ctx, angle);\n        distanceToPoint = Math.sqrt(Math.pow(pos.x - node.x, 2) + Math.pow(pos.y - node.y, 2));\n        difference = distanceToBorder - distanceToPoint;\n        if (Math.abs(difference) < threshold) {\n          break; // found\n        } else if (difference < 0) {\n          // distance to nodes is larger than distance to border --> t needs to be bigger if we're looking at the to node.\n          if (from === false) {\n            low = middle;\n          } else {\n            high = middle;\n          }\n        } else {\n          if (from === false) {\n            high = middle;\n          } else {\n            low = middle;\n          }\n        }\n\n        iteration++;\n      }\n      pos.t = middle;\n\n      return pos;\n    }\n\n    /**\n     * Calculate the distance between a point (x3,y3) and a line segment from\n     * (x1,y1) to (x2,y2).\n     * http://stackoverflow.com/questions/849211/shortest-distancae-between-a-point-and-a-line-segment\n     * @param {number} x1 from x\n     * @param {number} y1 from y\n     * @param {number} x2 to x\n     * @param {number} y2 to y\n     * @param {number} x3 point to check x\n     * @param {number} y3 point to check y\n     * @param {Node} via\n     * @returns {number}\n     * @private\n     */\n\n  }, {\n    key: '_getDistanceToBezierEdge',\n    value: function _getDistanceToBezierEdge(x1, y1, x2, y2, x3, y3, via) {\n      // x3,y3 is the point\n      var minDistance = 1e9;\n      var distance = void 0;\n      var i = void 0,\n          t = void 0,\n          x = void 0,\n          y = void 0;\n      var lastX = x1;\n      var lastY = y1;\n      for (i = 1; i < 10; i++) {\n        t = 0.1 * i;\n        x = Math.pow(1 - t, 2) * x1 + 2 * t * (1 - t) * via.x + Math.pow(t, 2) * x2;\n        y = Math.pow(1 - t, 2) * y1 + 2 * t * (1 - t) * via.y + Math.pow(t, 2) * y2;\n        if (i > 0) {\n          distance = this._getDistanceToLine(lastX, lastY, x, y, x3, y3);\n          minDistance = distance < minDistance ? distance : minDistance;\n        }\n        lastX = x;\n        lastY = y;\n      }\n\n      return minDistance;\n    }\n\n    /**\n     * Draw a bezier curve between two nodes\n     *\n     * The method accepts zero, one or two control points.\n     * Passing zero control points just draws a straight line\n     *\n     * @param {CanvasRenderingContext2D} ctx\n     * @param {Object}           values   | options for shadow drawing\n     * @param {Object|undefined} viaNode1 | first control point for curve drawing\n     * @param {Object|undefined} viaNode2 | second control point for curve drawing\n     *\n     * @protected\n     */\n\n  }, {\n    key: '_bezierCurve',\n    value: function _bezierCurve(ctx, values, viaNode1, viaNode2) {\n      var hasNode1 = viaNode1 !== undefined && viaNode1.x !== undefined;\n      var hasNode2 = viaNode2 !== undefined && viaNode2.x !== undefined;\n\n      ctx.beginPath();\n      ctx.moveTo(this.fromPoint.x, this.fromPoint.y);\n\n      if (hasNode1 && hasNode2) {\n        ctx.bezierCurveTo(viaNode1.x, viaNode1.y, viaNode2.x, viaNode2.y, this.toPoint.x, this.toPoint.y);\n      } else if (hasNode1) {\n        ctx.quadraticCurveTo(viaNode1.x, viaNode1.y, this.toPoint.x, this.toPoint.y);\n      } else {\n        // fallback to normal straight edge\n        ctx.lineTo(this.toPoint.x, this.toPoint.y);\n      }\n      // draw a background\n      this.drawBackground(ctx, values);\n\n      // draw shadow if enabled\n      this.enableShadow(ctx, values);\n      ctx.stroke();\n      this.disableShadow(ctx, values);\n    }\n\n    /**\n     *\n     * @returns {*|{x, y}|{x: undefined, y: undefined}}\n     */\n\n  }, {\n    key: 'getViaNode',\n    value: function getViaNode() {\n      return this._getViaCoordinates();\n    }\n  }]);\n  return BezierEdgeBase;\n}(_EdgeBase3['default']);\n\nexports['default'] = BezierEdgeBase;\n\n/***/ }),\n/* 57 */\n/***/ (function(module, exports, __nested_webpack_require_214899__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _classCallCheck2 = __nested_webpack_require_214899__(0);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __nested_webpack_require_214899__(1);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar util = __nested_webpack_require_214899__(2);\n\n/**\n * Utility Class\n */\n\nvar NetworkUtil = function () {\n  /**\n   * @ignore\n   */\n  function NetworkUtil() {\n    (0, _classCallCheck3['default'])(this, NetworkUtil);\n  }\n\n  /**\n   * Find the center position of the network considering the bounding boxes\n   *\n   * @param {Array.<Node>} allNodes\n   * @param {Array.<Node>} [specificNodes=[]]\n   * @returns {{minX: number, maxX: number, minY: number, maxY: number}}\n   * @static\n   */\n\n\n  (0, _createClass3['default'])(NetworkUtil, null, [{\n    key: 'getRange',\n    value: function getRange(allNodes) {\n      var specificNodes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n\n      var minY = 1e9,\n          maxY = -1e9,\n          minX = 1e9,\n          maxX = -1e9,\n          node;\n      if (specificNodes.length > 0) {\n        for (var i = 0; i < specificNodes.length; i++) {\n          node = allNodes[specificNodes[i]];\n          if (minX > node.shape.boundingBox.left) {\n            minX = node.shape.boundingBox.left;\n          }\n          if (maxX < node.shape.boundingBox.right) {\n            maxX = node.shape.boundingBox.right;\n          }\n          if (minY > node.shape.boundingBox.top) {\n            minY = node.shape.boundingBox.top;\n          } // top is negative, bottom is positive\n          if (maxY < node.shape.boundingBox.bottom) {\n            maxY = node.shape.boundingBox.bottom;\n          } // top is negative, bottom is positive\n        }\n      }\n\n      if (minX === 1e9 && maxX === -1e9 && minY === 1e9 && maxY === -1e9) {\n        ;minY = 0, maxY = 0, minX = 0, maxX = 0;\n      }\n      return { minX: minX, maxX: maxX, minY: minY, maxY: maxY };\n    }\n\n    /**\n     * Find the center position of the network\n     *\n     * @param {Array.<Node>} allNodes\n     * @param {Array.<Node>} [specificNodes=[]]\n     * @returns {{minX: number, maxX: number, minY: number, maxY: number}}\n     * @static\n     */\n\n  }, {\n    key: 'getRangeCore',\n    value: function getRangeCore(allNodes) {\n      var specificNodes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n\n      var minY = 1e9,\n          maxY = -1e9,\n          minX = 1e9,\n          maxX = -1e9,\n          node;\n      if (specificNodes.length > 0) {\n        for (var i = 0; i < specificNodes.length; i++) {\n          node = allNodes[specificNodes[i]];\n          if (minX > node.x) {\n            minX = node.x;\n          }\n          if (maxX < node.x) {\n            maxX = node.x;\n          }\n          if (minY > node.y) {\n            minY = node.y;\n          } // top is negative, bottom is positive\n          if (maxY < node.y) {\n            maxY = node.y;\n          } // top is negative, bottom is positive\n        }\n      }\n\n      if (minX === 1e9 && maxX === -1e9 && minY === 1e9 && maxY === -1e9) {\n        ;minY = 0, maxY = 0, minX = 0, maxX = 0;\n      }\n      return { minX: minX, maxX: maxX, minY: minY, maxY: maxY };\n    }\n\n    /**\n     * @param {object} range = {minX: minX, maxX: maxX, minY: minY, maxY: maxY};\n     * @returns {{x: number, y: number}}\n     * @static\n     */\n\n  }, {\n    key: 'findCenter',\n    value: function findCenter(range) {\n      return {\n        x: 0.5 * (range.maxX + range.minX),\n        y: 0.5 * (range.maxY + range.minY)\n      };\n    }\n\n    /**\n     * This returns a clone of the options or options of the edge or node to be used for construction of new edges or check functions for new nodes.\n     * @param {vis.Item} item\n     * @param {'node'|undefined} type\n     * @returns {{}}\n     * @static\n     */\n\n  }, {\n    key: 'cloneOptions',\n    value: function cloneOptions(item, type) {\n      var clonedOptions = {};\n      if (type === undefined || type === 'node') {\n        util.deepExtend(clonedOptions, item.options, true);\n        clonedOptions.x = item.x;\n        clonedOptions.y = item.y;\n        clonedOptions.amountOfConnections = item.edges.length;\n      } else {\n        util.deepExtend(clonedOptions, item.options, true);\n      }\n      return clonedOptions;\n    }\n  }]);\n  return NetworkUtil;\n}();\n\nexports['default'] = NetworkUtil;\n\n/***/ }),\n/* 58 */\n/***/ (function(module, exports, __nested_webpack_require_219462__) {\n\nmodule.exports = { \"default\": __nested_webpack_require_219462__(86), __esModule: true };\n\n/***/ }),\n/* 59 */\n/***/ (function(module, exports, __nested_webpack_require_219614__) {\n\n// fallback for non-array-like ES3 and non-enumerable old V8 strings\nvar cof = __nested_webpack_require_219614__(38);\n// eslint-disable-next-line no-prototype-builtins\nmodule.exports = Object('z').propertyIsEnumerable(0) ? Object : function (it) {\n  return cof(it) == 'String' ? it.split('') : Object(it);\n};\n\n\n/***/ }),\n/* 60 */\n/***/ (function(module, exports, __nested_webpack_require_219987__) {\n\n\"use strict\";\n\nvar LIBRARY = __nested_webpack_require_219987__(27);\nvar $export = __nested_webpack_require_219987__(11);\nvar redefine = __nested_webpack_require_219987__(64);\nvar hide = __nested_webpack_require_219987__(19);\nvar Iterators = __nested_webpack_require_219987__(25);\nvar $iterCreate = __nested_webpack_require_219987__(91);\nvar setToStringTag = __nested_webpack_require_219987__(46);\nvar getPrototypeOf = __nested_webpack_require_219987__(66);\nvar ITERATOR = __nested_webpack_require_219987__(8)('iterator');\nvar BUGGY = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`\nvar FF_ITERATOR = '@@iterator';\nvar KEYS = 'keys';\nvar VALUES = 'values';\n\nvar returnThis = function () { return this; };\n\nmodule.exports = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {\n  $iterCreate(Constructor, NAME, next);\n  var getMethod = function (kind) {\n    if (!BUGGY && kind in proto) return proto[kind];\n    switch (kind) {\n      case KEYS: return function keys() { return new Constructor(this, kind); };\n      case VALUES: return function values() { return new Constructor(this, kind); };\n    } return function entries() { return new Constructor(this, kind); };\n  };\n  var TAG = NAME + ' Iterator';\n  var DEF_VALUES = DEFAULT == VALUES;\n  var VALUES_BUG = false;\n  var proto = Base.prototype;\n  var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];\n  var $default = $native || getMethod(DEFAULT);\n  var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;\n  var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;\n  var methods, key, IteratorPrototype;\n  // Fix native\n  if ($anyNative) {\n    IteratorPrototype = getPrototypeOf($anyNative.call(new Base()));\n    if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {\n      // Set @@toStringTag to native iterators\n      setToStringTag(IteratorPrototype, TAG, true);\n      // fix for some old engines\n      if (!LIBRARY && typeof IteratorPrototype[ITERATOR] != 'function') hide(IteratorPrototype, ITERATOR, returnThis);\n    }\n  }\n  // fix Array#{values, @@iterator}.name in V8 / FF\n  if (DEF_VALUES && $native && $native.name !== VALUES) {\n    VALUES_BUG = true;\n    $default = function values() { return $native.call(this); };\n  }\n  // Define iterator\n  if ((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {\n    hide(proto, ITERATOR, $default);\n  }\n  // Plug for library\n  Iterators[NAME] = $default;\n  Iterators[TAG] = returnThis;\n  if (DEFAULT) {\n    methods = {\n      values: DEF_VALUES ? $default : getMethod(VALUES),\n      keys: IS_SET ? $default : getMethod(KEYS),\n      entries: $entries\n    };\n    if (FORCED) for (key in methods) {\n      if (!(key in proto)) redefine(proto, key, methods[key]);\n    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);\n  }\n  return methods;\n};\n\n\n/***/ }),\n/* 61 */\n/***/ (function(module, exports, __nested_webpack_require_222850__) {\n\n// optional / simple context binding\nvar aFunction = __nested_webpack_require_222850__(90);\nmodule.exports = function (fn, that, length) {\n  aFunction(fn);\n  if (that === undefined) return fn;\n  switch (length) {\n    case 1: return function (a) {\n      return fn.call(that, a);\n    };\n    case 2: return function (a, b) {\n      return fn.call(that, a, b);\n    };\n    case 3: return function (a, b, c) {\n      return fn.call(that, a, b, c);\n    };\n  }\n  return function (/* ...args */) {\n    return fn.apply(that, arguments);\n  };\n};\n\n\n/***/ }),\n/* 62 */\n/***/ (function(module, exports, __nested_webpack_require_223447__) {\n\nmodule.exports = !__nested_webpack_require_223447__(13) && !__nested_webpack_require_223447__(22)(function () {\n  return Object.defineProperty(__nested_webpack_require_223447__(63)('div'), 'a', { get: function () { return 7; } }).a != 7;\n});\n\n\n/***/ }),\n/* 63 */\n/***/ (function(module, exports, __nested_webpack_require_223725__) {\n\nvar isObject = __nested_webpack_require_223725__(21);\nvar document = __nested_webpack_require_223725__(10).document;\n// typeof document.createElement is 'object' in old IE\nvar is = isObject(document) && isObject(document.createElement);\nmodule.exports = function (it) {\n  return is ? document.createElement(it) : {};\n};\n\n\n/***/ }),\n/* 64 */\n/***/ (function(module, exports, __nested_webpack_require_224095__) {\n\nmodule.exports = __nested_webpack_require_224095__(19);\n\n\n/***/ }),\n/* 65 */\n/***/ (function(module, exports, __nested_webpack_require_224215__) {\n\nvar has = __nested_webpack_require_224215__(14);\nvar toIObject = __nested_webpack_require_224215__(18);\nvar arrayIndexOf = __nested_webpack_require_224215__(93)(false);\nvar IE_PROTO = __nested_webpack_require_224215__(43)('IE_PROTO');\n\nmodule.exports = function (object, names) {\n  var O = toIObject(object);\n  var i = 0;\n  var result = [];\n  var key;\n  for (key in O) if (key != IE_PROTO) has(O, key) && result.push(key);\n  // Don't enum bug & hidden keys\n  while (names.length > i) if (has(O, key = names[i++])) {\n    ~arrayIndexOf(result, key) || result.push(key);\n  }\n  return result;\n};\n\n\n/***/ }),\n/* 66 */\n/***/ (function(module, exports, __nested_webpack_require_224829__) {\n\n// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)\nvar has = __nested_webpack_require_224829__(14);\nvar toObject = __nested_webpack_require_224829__(30);\nvar IE_PROTO = __nested_webpack_require_224829__(43)('IE_PROTO');\nvar ObjectProto = Object.prototype;\n\nmodule.exports = Object.getPrototypeOf || function (O) {\n  O = toObject(O);\n  if (has(O, IE_PROTO)) return O[IE_PROTO];\n  if (typeof O.constructor == 'function' && O instanceof O.constructor) {\n    return O.constructor.prototype;\n  } return O instanceof Object ? ObjectProto : null;\n};\n\n\n/***/ }),\n/* 67 */\n/***/ (function(module, exports, __nested_webpack_require_225405__) {\n\n// getting tag from 19.1.3.6 Object.prototype.toString()\nvar cof = __nested_webpack_require_225405__(38);\nvar TAG = __nested_webpack_require_225405__(8)('toStringTag');\n// ES3 wrong here\nvar ARG = cof(function () { return arguments; }()) == 'Arguments';\n\n// fallback for IE11 Script Access Denied error\nvar tryGet = function (it, key) {\n  try {\n    return it[key];\n  } catch (e) { /* empty */ }\n};\n\nmodule.exports = function (it) {\n  var O, T, B;\n  return it === undefined ? 'Undefined' : it === null ? 'Null'\n    // @@toStringTag case\n    : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T\n    // builtinTag case\n    : ARG ? cof(O)\n    // ES3 arguments fallback\n    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;\n};\n\n\n/***/ }),\n/* 68 */\n/***/ (function(module, exports, __nested_webpack_require_226212__) {\n\n// most Object methods by ES6 should accept primitives\nvar $export = __nested_webpack_require_226212__(11);\nvar core = __nested_webpack_require_226212__(6);\nvar fails = __nested_webpack_require_226212__(22);\nmodule.exports = function (KEY, exec) {\n  var fn = (core.Object || {})[KEY] || Object[KEY];\n  var exp = {};\n  exp[KEY] = exec(fn);\n  $export($export.S + $export.F * fails(function () { fn(1); }), 'Object', exp);\n};\n\n\n/***/ }),\n/* 69 */\n/***/ (function(module, exports, __nested_webpack_require_226671__) {\n\n// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)\nvar $keys = __nested_webpack_require_226671__(65);\nvar hiddenKeys = __nested_webpack_require_226671__(45).concat('length', 'prototype');\n\nexports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {\n  return $keys(O, hiddenKeys);\n};\n\n\n/***/ }),\n/* 70 */\n/***/ (function(module, exports, __nested_webpack_require_227022__) {\n\nvar pIE = __nested_webpack_require_227022__(32);\nvar createDesc = __nested_webpack_require_227022__(28);\nvar toIObject = __nested_webpack_require_227022__(18);\nvar toPrimitive = __nested_webpack_require_227022__(40);\nvar has = __nested_webpack_require_227022__(14);\nvar IE8_DOM_DEFINE = __nested_webpack_require_227022__(62);\nvar gOPD = Object.getOwnPropertyDescriptor;\n\nexports.f = __nested_webpack_require_227022__(13) ? gOPD : function getOwnPropertyDescriptor(O, P) {\n  O = toIObject(O);\n  P = toPrimitive(P, true);\n  if (IE8_DOM_DEFINE) try {\n    return gOPD(O, P);\n  } catch (e) { /* empty */ }\n  if (has(O, P)) return createDesc(!pIE.f.call(O, P), O[P]);\n};\n\n\n/***/ }),\n/* 71 */\n/***/ (function(module, exports, __nested_webpack_require_227667__) {\n\n\"use strict\";\n\n\n// first check if moment.js is already loaded in the browser window, if so,\n// use this instance. Else, load via commonjs.\nmodule.exports = typeof window !== 'undefined' && window['moment'] || __nested_webpack_require_227667__(116);\n\n/***/ }),\n/* 72 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\n/**\n * A queue\n * @param {Object} options\n *            Available options:\n *            - delay: number    When provided, the queue will be flushed\n *                               automatically after an inactivity of this delay\n *                               in milliseconds.\n *                               Default value is null.\n *            - max: number      When the queue exceeds the given maximum number\n *                               of entries, the queue is flushed automatically.\n *                               Default value of max is Infinity.\n * @constructor Queue\n */\nfunction Queue(options) {\n  // options\n  this.delay = null;\n  this.max = Infinity;\n\n  // properties\n  this._queue = [];\n  this._timeout = null;\n  this._extended = null;\n\n  this.setOptions(options);\n}\n\n/**\n * Update the configuration of the queue\n * @param {Object} options\n *            Available options:\n *            - delay: number    When provided, the queue will be flushed\n *                               automatically after an inactivity of this delay\n *                               in milliseconds.\n *                               Default value is null.\n *            - max: number      When the queue exceeds the given maximum number\n *                               of entries, the queue is flushed automatically.\n *                               Default value of max is Infinity.\n */\nQueue.prototype.setOptions = function (options) {\n  if (options && typeof options.delay !== 'undefined') {\n    this.delay = options.delay;\n  }\n  if (options && typeof options.max !== 'undefined') {\n    this.max = options.max;\n  }\n\n  this._flushIfNeeded();\n};\n\n/**\n * Extend an object with queuing functionality.\n * The object will be extended with a function flush, and the methods provided\n * in options.replace will be replaced with queued ones.\n * @param {Object} object\n * @param {Object} options\n *            Available options:\n *            - replace: Array.<string>\n *                               A list with method names of the methods\n *                               on the object to be replaced with queued ones.\n *            - delay: number    When provided, the queue will be flushed\n *                               automatically after an inactivity of this delay\n *                               in milliseconds.\n *                               Default value is null.\n *            - max: number      When the queue exceeds the given maximum number\n *                               of entries, the queue is flushed automatically.\n *                               Default value of max is Infinity.\n * @return {Queue} Returns the created queue\n */\nQueue.extend = function (object, options) {\n  var queue = new Queue(options);\n\n  if (object.flush !== undefined) {\n    throw new Error('Target object already has a property flush');\n  }\n  object.flush = function () {\n    queue.flush();\n  };\n\n  var methods = [{\n    name: 'flush',\n    original: undefined\n  }];\n\n  if (options && options.replace) {\n    for (var i = 0; i < options.replace.length; i++) {\n      var name = options.replace[i];\n      methods.push({\n        name: name,\n        original: object[name]\n      });\n      queue.replace(object, name);\n    }\n  }\n\n  queue._extended = {\n    object: object,\n    methods: methods\n  };\n\n  return queue;\n};\n\n/**\n * Destroy the queue. The queue will first flush all queued actions, and in\n * case it has extended an object, will restore the original object.\n */\nQueue.prototype.destroy = function () {\n  this.flush();\n\n  if (this._extended) {\n    var object = this._extended.object;\n    var methods = this._extended.methods;\n    for (var i = 0; i < methods.length; i++) {\n      var method = methods[i];\n      if (method.original) {\n        object[method.name] = method.original;\n      } else {\n        delete object[method.name];\n      }\n    }\n    this._extended = null;\n  }\n};\n\n/**\n * Replace a method on an object with a queued version\n * @param {Object} object   Object having the method\n * @param {string} method   The method name\n */\nQueue.prototype.replace = function (object, method) {\n  var me = this;\n  var original = object[method];\n  if (!original) {\n    throw new Error('Method ' + method + ' undefined');\n  }\n\n  object[method] = function () {\n    // create an Array with the arguments\n    var args = [];\n    for (var i = 0; i < arguments.length; i++) {\n      args[i] = arguments[i];\n    }\n\n    // add this call to the queue\n    me.queue({\n      args: args,\n      fn: original,\n      context: this\n    });\n  };\n};\n\n/**\n * Queue a call\n * @param {function | {fn: function, args: Array} | {fn: function, args: Array, context: Object}} entry\n */\nQueue.prototype.queue = function (entry) {\n  if (typeof entry === 'function') {\n    this._queue.push({ fn: entry });\n  } else {\n    this._queue.push(entry);\n  }\n\n  this._flushIfNeeded();\n};\n\n/**\n * Check whether the queue needs to be flushed\n * @private\n */\nQueue.prototype._flushIfNeeded = function () {\n  // flush when the maximum is exceeded.\n  if (this._queue.length > this.max) {\n    this.flush();\n  }\n\n  // flush after a period of inactivity when a delay is configured\n  clearTimeout(this._timeout);\n  if (this.queue.length > 0 && typeof this.delay === 'number') {\n    var me = this;\n    this._timeout = setTimeout(function () {\n      me.flush();\n    }, this.delay);\n  }\n};\n\n/**\n * Flush all queued calls\n */\nQueue.prototype.flush = function () {\n  while (this._queue.length > 0) {\n    var entry = this._queue.shift();\n    entry.fn.apply(entry.context || entry.fn, entry.args || []);\n  }\n};\n\nmodule.exports = Queue;\n\n/***/ }),\n/* 73 */\n/***/ (function(module, exports) {\n\n\n/**\n * Expose `Emitter`.\n */\n\nmodule.exports = Emitter;\n\n/**\n * Initialize a new `Emitter`.\n *\n * @api public\n */\n\nfunction Emitter(obj) {\n  if (obj) return mixin(obj);\n};\n\n/**\n * Mixin the emitter properties.\n *\n * @param {Object} obj\n * @return {Object}\n * @api private\n */\n\nfunction mixin(obj) {\n  for (var key in Emitter.prototype) {\n    obj[key] = Emitter.prototype[key];\n  }\n  return obj;\n}\n\n/**\n * Listen on the given `event` with `fn`.\n *\n * @param {String} event\n * @param {Function} fn\n * @return {Emitter}\n * @api public\n */\n\nEmitter.prototype.on =\nEmitter.prototype.addEventListener = function(event, fn){\n  this._callbacks = this._callbacks || {};\n  (this._callbacks[event] = this._callbacks[event] || [])\n    .push(fn);\n  return this;\n};\n\n/**\n * Adds an `event` listener that will be invoked a single\n * time then automatically removed.\n *\n * @param {String} event\n * @param {Function} fn\n * @return {Emitter}\n * @api public\n */\n\nEmitter.prototype.once = function(event, fn){\n  var self = this;\n  this._callbacks = this._callbacks || {};\n\n  function on() {\n    self.off(event, on);\n    fn.apply(this, arguments);\n  }\n\n  on.fn = fn;\n  this.on(event, on);\n  return this;\n};\n\n/**\n * Remove the given callback for `event` or all\n * registered callbacks.\n *\n * @param {String} event\n * @param {Function} fn\n * @return {Emitter}\n * @api public\n */\n\nEmitter.prototype.off =\nEmitter.prototype.removeListener =\nEmitter.prototype.removeAllListeners =\nEmitter.prototype.removeEventListener = function(event, fn){\n  this._callbacks = this._callbacks || {};\n\n  // all\n  if (0 == arguments.length) {\n    this._callbacks = {};\n    return this;\n  }\n\n  // specific event\n  var callbacks = this._callbacks[event];\n  if (!callbacks) return this;\n\n  // remove all handlers\n  if (1 == arguments.length) {\n    delete this._callbacks[event];\n    return this;\n  }\n\n  // remove specific handler\n  var cb;\n  for (var i = 0; i < callbacks.length; i++) {\n    cb = callbacks[i];\n    if (cb === fn || cb.fn === fn) {\n      callbacks.splice(i, 1);\n      break;\n    }\n  }\n  return this;\n};\n\n/**\n * Emit `event` with the given args.\n *\n * @param {String} event\n * @param {Mixed} ...\n * @return {Emitter}\n */\n\nEmitter.prototype.emit = function(event){\n  this._callbacks = this._callbacks || {};\n  var args = [].slice.call(arguments, 1)\n    , callbacks = this._callbacks[event];\n\n  if (callbacks) {\n    callbacks = callbacks.slice(0);\n    for (var i = 0, len = callbacks.length; i < len; ++i) {\n      callbacks[i].apply(this, args);\n    }\n  }\n\n  return this;\n};\n\n/**\n * Return array of callbacks for `event`.\n *\n * @param {String} event\n * @return {Array}\n * @api public\n */\n\nEmitter.prototype.listeners = function(event){\n  this._callbacks = this._callbacks || {};\n  return this._callbacks[event] || [];\n};\n\n/**\n * Check if this emitter has `event` handlers.\n *\n * @param {String} event\n * @return {Boolean}\n * @api public\n */\n\nEmitter.prototype.hasListeners = function(event){\n  return !! this.listeners(event).length;\n};\n\n\n/***/ }),\n/* 74 */\n/***/ (function(module, exports, __nested_webpack_require_236714__) {\n\n\"use strict\";\n\n\nvar _create = __nested_webpack_require_236714__(31);\n\nvar _create2 = _interopRequireDefault(_create);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\n/**\n * Parse a text source containing data in DOT language into a JSON object.\n * The object contains two lists: one with nodes and one with edges.\n *\n * DOT language reference: http://www.graphviz.org/doc/info/lang.html\n *\n * DOT language attributes: http://graphviz.org/content/attrs\n *\n * @param {string} data     Text containing a graph in DOT-notation\n * @return {Object} graph   An object containing two parameters:\n *                          {Object[]} nodes\n *                          {Object[]} edges\n *\n * -------------------------------------------\n * TODO\n * ====\n *\n * For label handling, this is an incomplete implementation. From docs (quote #3015):\n *\n * > the escape sequences \"\\n\", \"\\l\" and \"\\r\" divide the label into lines, centered,\n * > left-justified, and right-justified, respectively.\n *\n * Source: http://www.graphviz.org/content/attrs#kescString\n *\n * > As another aid for readability, dot allows double-quoted strings to span multiple physical\n * > lines using the standard C convention of a backslash immediately preceding a newline\n * > character\n * > In addition, double-quoted strings can be concatenated using a '+' operator.\n * > As HTML strings can contain newline characters, which are used solely for formatting,\n * > the language does not allow escaped newlines or concatenation operators to be used\n * > within them.\n *\n * - Currently, only '\\\\n' is handled\n * - Note that text explicitly says 'labels'; the dot parser currently handles escape\n *   sequences in **all** strings.\n */\nfunction parseDOT(data) {\n  dot = data;\n  return parseGraph();\n}\n\n// mapping of attributes from DOT (the keys) to vis.js (the values)\nvar NODE_ATTR_MAPPING = {\n  fontsize: 'font.size',\n  fontcolor: 'font.color',\n  labelfontcolor: 'font.color',\n  fontname: 'font.face',\n  color: ['color.border', 'color.background'],\n  fillcolor: 'color.background',\n  tooltip: 'title',\n  labeltooltip: 'title'\n};\nvar EDGE_ATTR_MAPPING = (0, _create2['default'])(NODE_ATTR_MAPPING);\nEDGE_ATTR_MAPPING.color = 'color.color';\nEDGE_ATTR_MAPPING.style = 'dashes';\n\n// token types enumeration\nvar TOKENTYPE = {\n  NULL: 0,\n  DELIMITER: 1,\n  IDENTIFIER: 2,\n  UNKNOWN: 3\n\n  // map with all delimiters\n};var DELIMITERS = {\n  '{': true,\n  '}': true,\n  '[': true,\n  ']': true,\n  ';': true,\n  '=': true,\n  ',': true,\n\n  '->': true,\n  '--': true\n};\n\nvar dot = ''; // current dot file\nvar index = 0; // current index in dot file\nvar c = ''; // current token character in expr\nvar token = ''; // current token\nvar tokenType = TOKENTYPE.NULL; // type of the token\n\n/**\n * Get the first character from the dot file.\n * The character is stored into the char c. If the end of the dot file is\n * reached, the function puts an empty string in c.\n */\nfunction first() {\n  index = 0;\n  c = dot.charAt(0);\n}\n\n/**\n * Get the next character from the dot file.\n * The character is stored into the char c. If the end of the dot file is\n * reached, the function puts an empty string in c.\n */\nfunction next() {\n  index++;\n  c = dot.charAt(index);\n}\n\n/**\n * Preview the next character from the dot file.\n * @return {string} cNext\n */\nfunction nextPreview() {\n  return dot.charAt(index + 1);\n}\n\nvar regexAlphaNumeric = /[a-zA-Z_0-9.:#]/;\n/**\n * Test whether given character is alphabetic or numeric\n * @param {string} c\n * @return {Boolean} isAlphaNumeric\n */\nfunction isAlphaNumeric(c) {\n  return regexAlphaNumeric.test(c);\n}\n\n/**\n * Merge all options of object b into object b\n * @param {Object} a\n * @param {Object} b\n * @return {Object} a\n */\nfunction merge(a, b) {\n  if (!a) {\n    a = {};\n  }\n\n  if (b) {\n    for (var name in b) {\n      if (b.hasOwnProperty(name)) {\n        a[name] = b[name];\n      }\n    }\n  }\n  return a;\n}\n\n/**\n * Set a value in an object, where the provided parameter name can be a\n * path with nested parameters. For example:\n *\n *     var obj = {a: 2};\n *     setValue(obj, 'b.c', 3);     // obj = {a: 2, b: {c: 3}}\n *\n * @param {Object} obj\n * @param {string} path  A parameter name or dot-separated parameter path,\n *                      like \"color.highlight.border\".\n * @param {*} value\n */\nfunction setValue(obj, path, value) {\n  var keys = path.split('.');\n  var o = obj;\n  while (keys.length) {\n    var key = keys.shift();\n    if (keys.length) {\n      // this isn't the end point\n      if (!o[key]) {\n        o[key] = {};\n      }\n      o = o[key];\n    } else {\n      // this is the end point\n      o[key] = value;\n    }\n  }\n}\n\n/**\n * Add a node to a graph object. If there is already a node with\n * the same id, their attributes will be merged.\n * @param {Object} graph\n * @param {Object} node\n */\nfunction addNode(graph, node) {\n  var i, len;\n  var current = null;\n\n  // find root graph (in case of subgraph)\n  var graphs = [graph]; // list with all graphs from current graph to root graph\n  var root = graph;\n  while (root.parent) {\n    graphs.push(root.parent);\n    root = root.parent;\n  }\n\n  // find existing node (at root level) by its id\n  if (root.nodes) {\n    for (i = 0, len = root.nodes.length; i < len; i++) {\n      if (node.id === root.nodes[i].id) {\n        current = root.nodes[i];\n        break;\n      }\n    }\n  }\n\n  if (!current) {\n    // this is a new node\n    current = {\n      id: node.id\n    };\n    if (graph.node) {\n      // clone default attributes\n      current.attr = merge(current.attr, graph.node);\n    }\n  }\n\n  // add node to this (sub)graph and all its parent graphs\n  for (i = graphs.length - 1; i >= 0; i--) {\n    var g = graphs[i];\n\n    if (!g.nodes) {\n      g.nodes = [];\n    }\n    if (g.nodes.indexOf(current) === -1) {\n      g.nodes.push(current);\n    }\n  }\n\n  // merge attributes\n  if (node.attr) {\n    current.attr = merge(current.attr, node.attr);\n  }\n}\n\n/**\n * Add an edge to a graph object\n * @param {Object} graph\n * @param {Object} edge\n */\nfunction addEdge(graph, edge) {\n  if (!graph.edges) {\n    graph.edges = [];\n  }\n  graph.edges.push(edge);\n  if (graph.edge) {\n    var attr = merge({}, graph.edge); // clone default attributes\n    edge.attr = merge(attr, edge.attr); // merge attributes\n  }\n}\n\n/**\n * Create an edge to a graph object\n * @param {Object} graph\n * @param {string | number | Object} from\n * @param {string | number | Object} to\n * @param {string} type\n * @param {Object | null} attr\n * @return {Object} edge\n */\nfunction createEdge(graph, from, to, type, attr) {\n  var edge = {\n    from: from,\n    to: to,\n    type: type\n  };\n\n  if (graph.edge) {\n    edge.attr = merge({}, graph.edge); // clone default attributes\n  }\n  edge.attr = merge(edge.attr || {}, attr); // merge attributes\n\n  // Move arrows attribute from attr to edge temporally created in\n  // parseAttributeList().\n  if (attr != null) {\n    if (attr.hasOwnProperty('arrows')) {\n      edge['arrows'] = { to: { enabled: true, type: attr.arrows.type } };\n      attr['arrows'] = null;\n    }\n  }\n  return edge;\n}\n\n/**\n * Get next token in the current dot file.\n * The token and token type are available as token and tokenType\n */\nfunction getToken() {\n  tokenType = TOKENTYPE.NULL;\n  token = '';\n\n  // skip over whitespaces\n  while (c === ' ' || c === '\\t' || c === '\\n' || c === '\\r') {\n    // space, tab, enter\n    next();\n  }\n\n  do {\n    var isComment = false;\n\n    // skip comment\n    if (c === '#') {\n      // find the previous non-space character\n      var i = index - 1;\n      while (dot.charAt(i) === ' ' || dot.charAt(i) === '\\t') {\n        i--;\n      }\n      if (dot.charAt(i) === '\\n' || dot.charAt(i) === '') {\n        // the # is at the start of a line, this is indeed a line comment\n        while (c != '' && c != '\\n') {\n          next();\n        }\n        isComment = true;\n      }\n    }\n    if (c === '/' && nextPreview() === '/') {\n      // skip line comment\n      while (c != '' && c != '\\n') {\n        next();\n      }\n      isComment = true;\n    }\n    if (c === '/' && nextPreview() === '*') {\n      // skip block comment\n      while (c != '') {\n        if (c === '*' && nextPreview() === '/') {\n          // end of block comment found. skip these last two characters\n          next();\n          next();\n          break;\n        } else {\n          next();\n        }\n      }\n      isComment = true;\n    }\n\n    // skip over whitespaces\n    while (c === ' ' || c === '\\t' || c === '\\n' || c === '\\r') {\n      // space, tab, enter\n      next();\n    }\n  } while (isComment);\n\n  // check for end of dot file\n  if (c === '') {\n    // token is still empty\n    tokenType = TOKENTYPE.DELIMITER;\n    return;\n  }\n\n  // check for delimiters consisting of 2 characters\n  var c2 = c + nextPreview();\n  if (DELIMITERS[c2]) {\n    tokenType = TOKENTYPE.DELIMITER;\n    token = c2;\n    next();\n    next();\n    return;\n  }\n\n  // check for delimiters consisting of 1 character\n  if (DELIMITERS[c]) {\n    tokenType = TOKENTYPE.DELIMITER;\n    token = c;\n    next();\n    return;\n  }\n\n  // check for an identifier (number or string)\n  // TODO: more precise parsing of numbers/strings (and the port separator ':')\n  if (isAlphaNumeric(c) || c === '-') {\n    token += c;\n    next();\n\n    while (isAlphaNumeric(c)) {\n      token += c;\n      next();\n    }\n    if (token === 'false') {\n      token = false; // convert to boolean\n    } else if (token === 'true') {\n      token = true; // convert to boolean\n    } else if (!isNaN(Number(token))) {\n      token = Number(token); // convert to number\n    }\n    tokenType = TOKENTYPE.IDENTIFIER;\n    return;\n  }\n\n  // check for a string enclosed by double quotes\n  if (c === '\"') {\n    next();\n    while (c != '' && (c != '\"' || c === '\"' && nextPreview() === '\"')) {\n      if (c === '\"') {\n        // skip the escape character\n        token += c;\n        next();\n      } else if (c === '\\\\' && nextPreview() === 'n') {\n        // Honor a newline escape sequence\n        token += '\\n';\n        next();\n      } else {\n        token += c;\n      }\n      next();\n    }\n    if (c != '\"') {\n      throw newSyntaxError('End of string \" expected');\n    }\n    next();\n    tokenType = TOKENTYPE.IDENTIFIER;\n    return;\n  }\n\n  // something unknown is found, wrong characters, a syntax error\n  tokenType = TOKENTYPE.UNKNOWN;\n  while (c != '') {\n    token += c;\n    next();\n  }\n  throw new SyntaxError('Syntax error in part \"' + chop(token, 30) + '\"');\n}\n\n/**\n * Parse a graph.\n * @returns {Object} graph\n */\nfunction parseGraph() {\n  var graph = {};\n\n  first();\n  getToken();\n\n  // optional strict keyword\n  if (token === 'strict') {\n    graph.strict = true;\n    getToken();\n  }\n\n  // graph or digraph keyword\n  if (token === 'graph' || token === 'digraph') {\n    graph.type = token;\n    getToken();\n  }\n\n  // optional graph id\n  if (tokenType === TOKENTYPE.IDENTIFIER) {\n    graph.id = token;\n    getToken();\n  }\n\n  // open angle bracket\n  if (token != '{') {\n    throw newSyntaxError('Angle bracket { expected');\n  }\n  getToken();\n\n  // statements\n  parseStatements(graph);\n\n  // close angle bracket\n  if (token != '}') {\n    throw newSyntaxError('Angle bracket } expected');\n  }\n  getToken();\n\n  // end of file\n  if (token !== '') {\n    throw newSyntaxError('End of file expected');\n  }\n  getToken();\n\n  // remove temporary default options\n  delete graph.node;\n  delete graph.edge;\n  delete graph.graph;\n\n  return graph;\n}\n\n/**\n * Parse a list with statements.\n * @param {Object} graph\n */\nfunction parseStatements(graph) {\n  while (token !== '' && token != '}') {\n    parseStatement(graph);\n    if (token === ';') {\n      getToken();\n    }\n  }\n}\n\n/**\n * Parse a single statement. Can be a an attribute statement, node\n * statement, a series of node statements and edge statements, or a\n * parameter.\n * @param {Object} graph\n */\nfunction parseStatement(graph) {\n  // parse subgraph\n  var subgraph = parseSubgraph(graph);\n  if (subgraph) {\n    // edge statements\n    parseEdge(graph, subgraph);\n\n    return;\n  }\n\n  // parse an attribute statement\n  var attr = parseAttributeStatement(graph);\n  if (attr) {\n    return;\n  }\n\n  // parse node\n  if (tokenType != TOKENTYPE.IDENTIFIER) {\n    throw newSyntaxError('Identifier expected');\n  }\n  var id = token; // id can be a string or a number\n  getToken();\n\n  if (token === '=') {\n    // id statement\n    getToken();\n    if (tokenType != TOKENTYPE.IDENTIFIER) {\n      throw newSyntaxError('Identifier expected');\n    }\n    graph[id] = token;\n    getToken();\n    // TODO: implement comma separated list with \"a_list: ID=ID [','] [a_list] \"\n  } else {\n    parseNodeStatement(graph, id);\n  }\n}\n\n/**\n * Parse a subgraph\n * @param {Object} graph    parent graph object\n * @return {Object | null} subgraph\n */\nfunction parseSubgraph(graph) {\n  var subgraph = null;\n\n  // optional subgraph keyword\n  if (token === 'subgraph') {\n    subgraph = {};\n    subgraph.type = 'subgraph';\n    getToken();\n\n    // optional graph id\n    if (tokenType === TOKENTYPE.IDENTIFIER) {\n      subgraph.id = token;\n      getToken();\n    }\n  }\n\n  // open angle bracket\n  if (token === '{') {\n    getToken();\n\n    if (!subgraph) {\n      subgraph = {};\n    }\n    subgraph.parent = graph;\n    subgraph.node = graph.node;\n    subgraph.edge = graph.edge;\n    subgraph.graph = graph.graph;\n\n    // statements\n    parseStatements(subgraph);\n\n    // close angle bracket\n    if (token != '}') {\n      throw newSyntaxError('Angle bracket } expected');\n    }\n    getToken();\n\n    // remove temporary default options\n    delete subgraph.node;\n    delete subgraph.edge;\n    delete subgraph.graph;\n    delete subgraph.parent;\n\n    // register at the parent graph\n    if (!graph.subgraphs) {\n      graph.subgraphs = [];\n    }\n    graph.subgraphs.push(subgraph);\n  }\n\n  return subgraph;\n}\n\n/**\n * parse an attribute statement like \"node [shape=circle fontSize=16]\".\n * Available keywords are 'node', 'edge', 'graph'.\n * The previous list with default attributes will be replaced\n * @param {Object} graph\n * @returns {String | null} keyword Returns the name of the parsed attribute\n *                                  (node, edge, graph), or null if nothing\n *                                  is parsed.\n */\nfunction parseAttributeStatement(graph) {\n  // attribute statements\n  if (token === 'node') {\n    getToken();\n\n    // node attributes\n    graph.node = parseAttributeList();\n    return 'node';\n  } else if (token === 'edge') {\n    getToken();\n\n    // edge attributes\n    graph.edge = parseAttributeList();\n    return 'edge';\n  } else if (token === 'graph') {\n    getToken();\n\n    // graph attributes\n    graph.graph = parseAttributeList();\n    return 'graph';\n  }\n\n  return null;\n}\n\n/**\n * parse a node statement\n * @param {Object} graph\n * @param {string | number} id\n */\nfunction parseNodeStatement(graph, id) {\n  // node statement\n  var node = {\n    id: id\n  };\n  var attr = parseAttributeList();\n  if (attr) {\n    node.attr = attr;\n  }\n  addNode(graph, node);\n\n  // edge statements\n  parseEdge(graph, id);\n}\n\n/**\n * Parse an edge or a series of edges\n * @param {Object} graph\n * @param {string | number} from        Id of the from node\n */\nfunction parseEdge(graph, from) {\n  while (token === '->' || token === '--') {\n    var to;\n    var type = token;\n    getToken();\n\n    var subgraph = parseSubgraph(graph);\n    if (subgraph) {\n      to = subgraph;\n    } else {\n      if (tokenType != TOKENTYPE.IDENTIFIER) {\n        throw newSyntaxError('Identifier or subgraph expected');\n      }\n      to = token;\n      addNode(graph, {\n        id: to\n      });\n      getToken();\n    }\n\n    // parse edge attributes\n    var attr = parseAttributeList();\n\n    // create edge\n    var edge = createEdge(graph, from, to, type, attr);\n    addEdge(graph, edge);\n\n    from = to;\n  }\n}\n\n/**\n * As explained in [1], graphviz has limitations for combination of\n * arrow[head|tail] and dir. If attribute list includes 'dir',\n * following cases just be supported.\n *   1. both or none + arrowhead, arrowtail\n *   2. forward + arrowhead (arrowtail is not affedted)\n *   3. back + arrowtail (arrowhead is not affected)\n * [1] https://www.graphviz.org/doc/info/attrs.html#h:undir_note\n *\n * This function is called from parseAttributeList() to parse 'dir'\n * attribute with given 'attr_names' and 'attr_list'.\n * @param {Object} attr_names  Array of attribute names\n * @param {Object} attr_list  Array of objects of attribute set\n * @return {Object} attr_list  Updated attr_list\n */\nfunction parseDirAttribute(attr_names, attr_list) {\n  var i;\n  if (attr_names.includes('dir')) {\n    var idx = {}; // get index of 'arrows' and 'dir'\n    idx.arrows = {};\n    for (i = 0; i < attr_list.length; i++) {\n      if (attr_list[i].name === 'arrows') {\n        if (attr_list[i].value.to != null) {\n          idx.arrows.to = i;\n        } else if (attr_list[i].value.from != null) {\n          idx.arrows.from = i;\n        } else {\n          throw newSyntaxError('Invalid value of arrows');\n        }\n      } else if (attr_list[i].name === 'dir') {\n        idx.dir = i;\n      }\n    }\n\n    // first, add default arrow shape if it is not assigned to avoid error\n    var dir_type = attr_list[idx.dir].value;\n    if (!attr_names.includes('arrows')) {\n      if (dir_type === 'both') {\n        attr_list.push({\n          attr: attr_list[idx.dir].attr,\n          name: 'arrows',\n          value: { to: { enabled: true } }\n        });\n        idx.arrows.to = attr_list.length - 1;\n        attr_list.push({\n          attr: attr_list[idx.dir].attr,\n          name: 'arrows',\n          value: { from: { enabled: true } }\n        });\n        idx.arrows.from = attr_list.length - 1;\n      } else if (dir_type === 'forward') {\n        attr_list.push({\n          attr: attr_list[idx.dir].attr,\n          name: 'arrows',\n          value: { to: { enabled: true } }\n        });\n        idx.arrows.to = attr_list.length - 1;\n      } else if (dir_type === 'back') {\n        attr_list.push({\n          attr: attr_list[idx.dir].attr,\n          name: 'arrows',\n          value: { from: { enabled: true } }\n        });\n        idx.arrows.from = attr_list.length - 1;\n      } else if (dir_type === 'none') {\n        attr_list.push({\n          attr: attr_list[idx.dir].attr,\n          name: 'arrows',\n          value: ''\n        });\n        idx.arrows.to = attr_list.length - 1;\n      } else {\n        throw newSyntaxError('Invalid dir type \"' + dir_type + '\"');\n      }\n    }\n\n    var from_type;\n    var to_type;\n    // update 'arrows' attribute from 'dir'.\n    if (dir_type === 'both') {\n      // both of shapes of 'from' and 'to' are given\n      if (idx.arrows.to && idx.arrows.from) {\n        to_type = attr_list[idx.arrows.to].value.to.type;\n        from_type = attr_list[idx.arrows.from].value.from.type;\n        attr_list[idx.arrows.to] = {\n          attr: attr_list[idx.arrows.to].attr,\n          name: attr_list[idx.arrows.to].name,\n          value: {\n            to: { enabled: true, type: to_type },\n            from: { enabled: true, type: from_type }\n          }\n        };\n        attr_list.splice(idx.arrows.from, 1);\n\n        // shape of 'to' is assigned and use default to 'from'\n      } else if (idx.arrows.to) {\n        to_type = attr_list[idx.arrows.to].value.to.type;\n        from_type = 'arrow';\n        attr_list[idx.arrows.to] = {\n          attr: attr_list[idx.arrows.to].attr,\n          name: attr_list[idx.arrows.to].name,\n          value: {\n            to: { enabled: true, type: to_type },\n            from: { enabled: true, type: from_type }\n          }\n\n          // only shape of 'from' is assigned and use default for 'to'\n        };\n      } else if (idx.arrows.from) {\n        to_type = 'arrow';\n        from_type = attr_list[idx.arrows.from].value.from.type;\n        attr_list[idx.arrows.from] = {\n          attr: attr_list[idx.arrows.from].attr,\n          name: attr_list[idx.arrows.from].name,\n          value: {\n            to: { enabled: true, type: to_type },\n            from: { enabled: true, type: from_type }\n          }\n        };\n      }\n    } else if (dir_type === 'back') {\n      // given both of shapes, but use only 'from'\n      if (idx.arrows.to && idx.arrows.from) {\n        to_type = '';\n        from_type = attr_list[idx.arrows.from].value.from.type;\n        attr_list[idx.arrows.from] = {\n          attr: attr_list[idx.arrows.from].attr,\n          name: attr_list[idx.arrows.from].name,\n          value: {\n            to: { enabled: true, type: to_type },\n            from: { enabled: true, type: from_type }\n          }\n\n          // given shape of 'to', but does not use it\n        };\n      } else if (idx.arrows.to) {\n        to_type = '';\n        from_type = 'arrow';\n        idx.arrows.from = idx.arrows.to;\n        attr_list[idx.arrows.from] = {\n          attr: attr_list[idx.arrows.from].attr,\n          name: attr_list[idx.arrows.from].name,\n          value: {\n            to: { enabled: true, type: to_type },\n            from: { enabled: true, type: from_type }\n          }\n\n          // assign given 'from' shape\n        };\n      } else if (idx.arrows.from) {\n        to_type = '';\n        from_type = attr_list[idx.arrows.from].value.from.type;\n        attr_list[idx.arrows.to] = {\n          attr: attr_list[idx.arrows.from].attr,\n          name: attr_list[idx.arrows.from].name,\n          value: {\n            to: { enabled: true, type: to_type },\n            from: { enabled: true, type: from_type }\n          }\n        };\n      }\n\n      attr_list[idx.arrows.from] = {\n        attr: attr_list[idx.arrows.from].attr,\n        name: attr_list[idx.arrows.from].name,\n        value: {\n          from: {\n            enabled: true,\n            type: attr_list[idx.arrows.from].value.from.type\n          }\n        }\n      };\n    } else if (dir_type === 'none') {\n      var idx_arrow;\n      if (idx.arrows.to) {\n        idx_arrow = idx.arrows.to;\n      } else {\n        idx_arrow = idx.arrows.from;\n      }\n\n      attr_list[idx_arrow] = {\n        attr: attr_list[idx_arrow].attr,\n        name: attr_list[idx_arrow].name,\n        value: ''\n      };\n    } else if (dir_type === 'forward') {\n      // given both of shapes, but use only 'to'\n      if (idx.arrows.to && idx.arrows.from) {\n        to_type = attr_list[idx.arrows.to].value.to.type;\n        from_type = '';\n        attr_list[idx.arrows.to] = {\n          attr: attr_list[idx.arrows.to].attr,\n          name: attr_list[idx.arrows.to].name,\n          value: {\n            to: { enabled: true, type: to_type },\n            from: { enabled: true, type: from_type }\n          }\n\n          // assign given 'to' shape\n        };\n      } else if (idx.arrows.to) {\n        to_type = attr_list[idx.arrows.to].value.to.type;\n        from_type = '';\n        attr_list[idx.arrows.to] = {\n          attr: attr_list[idx.arrows.to].attr,\n          name: attr_list[idx.arrows.to].name,\n          value: {\n            to: { enabled: true, type: to_type },\n            from: { enabled: true, type: from_type }\n          }\n\n          // given shape of 'from', but does not use it\n        };\n      } else if (idx.arrows.from) {\n        to_type = 'arrow';\n        from_type = '';\n        idx.arrows.to = idx.arrows.from;\n        attr_list[idx.arrows.to] = {\n          attr: attr_list[idx.arrows.to].attr,\n          name: attr_list[idx.arrows.to].name,\n          value: {\n            to: { enabled: true, type: to_type },\n            from: { enabled: true, type: from_type }\n          }\n        };\n      }\n\n      attr_list[idx.arrows.to] = {\n        attr: attr_list[idx.arrows.to].attr,\n        name: attr_list[idx.arrows.to].name,\n        value: {\n          to: {\n            enabled: true,\n            type: attr_list[idx.arrows.to].value.to.type\n          }\n        }\n      };\n    } else {\n      throw newSyntaxError('Invalid dir type \"' + dir_type + '\"');\n    }\n\n    // remove 'dir' attribute no need anymore\n    attr_list.splice(idx.dir, 1);\n  }\n  return attr_list;\n}\n\n/**\n * Parse a set with attributes,\n * for example [label=\"1.000\", shape=solid]\n * @return {Object | null} attr\n */\nfunction parseAttributeList() {\n  var i;\n  var attr = null;\n\n  // edge styles of dot and vis\n  var edgeStyles = {\n    dashed: true,\n    solid: false,\n    dotted: [1, 5]\n\n    /**\n     * Define arrow types.\n     * vis currently supports types defined in 'arrowTypes'.\n     * Details of arrow shapes are described in\n     * http://www.graphviz.org/content/arrow-shapes\n     */\n  };var arrowTypes = {\n    dot: 'circle',\n    box: 'box',\n    crow: 'crow',\n    curve: 'curve',\n    icurve: 'inv_curve',\n    normal: 'triangle',\n    inv: 'inv_triangle',\n    diamond: 'diamond',\n    tee: 'bar',\n    vee: 'vee'\n\n    /**\n     * 'attr_list' contains attributes for checking if some of them are affected\n     * later. For instance, both of 'arrowhead' and 'dir' (edge style defined\n     * in DOT) make changes to 'arrows' attribute in vis.\n     */\n  };var attr_list = new Array();\n  var attr_names = new Array(); // used for checking the case.\n\n  // parse attributes\n  while (token === '[') {\n    getToken();\n    attr = {};\n    while (token !== '' && token != ']') {\n      if (tokenType != TOKENTYPE.IDENTIFIER) {\n        throw newSyntaxError('Attribute name expected');\n      }\n      var name = token;\n\n      getToken();\n      if (token != '=') {\n        throw newSyntaxError('Equal sign = expected');\n      }\n      getToken();\n\n      if (tokenType != TOKENTYPE.IDENTIFIER) {\n        throw newSyntaxError('Attribute value expected');\n      }\n      var value = token;\n\n      // convert from dot style to vis\n      if (name === 'style') {\n        value = edgeStyles[value];\n      }\n\n      var arrowType;\n      if (name === 'arrowhead') {\n        arrowType = arrowTypes[value];\n        name = 'arrows';\n        value = { to: { enabled: true, type: arrowType } };\n      }\n\n      if (name === 'arrowtail') {\n        arrowType = arrowTypes[value];\n        name = 'arrows';\n        value = { from: { enabled: true, type: arrowType } };\n      }\n\n      attr_list.push({ attr: attr, name: name, value: value });\n      attr_names.push(name);\n\n      getToken();\n      if (token == ',') {\n        getToken();\n      }\n    }\n\n    if (token != ']') {\n      throw newSyntaxError('Bracket ] expected');\n    }\n    getToken();\n  }\n\n  attr_list = parseDirAttribute(attr_names, attr_list);\n\n  // parse 'penwidth'\n  var nof_attr_list;\n  if (attr_names.includes('penwidth')) {\n    var tmp_attr_list = [];\n\n    nof_attr_list = attr_list.length;\n    for (i = 0; i < nof_attr_list; i++) {\n      // exclude 'width' from attr_list if 'penwidth' exists\n      if (attr_list[i].name !== 'width') {\n        if (attr_list[i].name === 'penwidth') {\n          attr_list[i].name = 'width';\n        }\n        tmp_attr_list.push(attr_list[i]);\n      }\n    }\n    attr_list = tmp_attr_list;\n  }\n\n  nof_attr_list = attr_list.length;\n  for (i = 0; i < nof_attr_list; i++) {\n    setValue(attr_list[i].attr, attr_list[i].name, attr_list[i].value);\n  }\n\n  return attr;\n}\n\n/**\n * Create a syntax error with extra information on current token and index.\n * @param {string} message\n * @returns {SyntaxError} err\n */\nfunction newSyntaxError(message) {\n  return new SyntaxError(message + ', got \"' + chop(token, 30) + '\" (char ' + index + ')');\n}\n\n/**\n * Chop off text after a maximum length\n * @param {string} text\n * @param {number} maxLength\n * @returns {String}\n */\nfunction chop(text, maxLength) {\n  return text.length <= maxLength ? text : text.substr(0, 27) + '...';\n}\n\n/**\n * Execute a function fn for each pair of elements in two arrays\n * @param {Array | *} array1\n * @param {Array | *} array2\n * @param {function} fn\n */\nfunction forEach2(array1, array2, fn) {\n  if (Array.isArray(array1)) {\n    array1.forEach(function (elem1) {\n      if (Array.isArray(array2)) {\n        array2.forEach(function (elem2) {\n          fn(elem1, elem2);\n        });\n      } else {\n        fn(elem1, array2);\n      }\n    });\n  } else {\n    if (Array.isArray(array2)) {\n      array2.forEach(function (elem2) {\n        fn(array1, elem2);\n      });\n    } else {\n      fn(array1, array2);\n    }\n  }\n}\n\n/**\n * Set a nested property on an object\n * When nested objects are missing, they will be created.\n * For example setProp({}, 'font.color', 'red') will return {font: {color: 'red'}}\n * @param {Object} object\n * @param {string} path   A dot separated string like 'font.color'\n * @param {*} value       Value for the property\n * @return {Object} Returns the original object, allows for chaining.\n */\nfunction setProp(object, path, value) {\n  var names = path.split('.');\n  var prop = names.pop();\n\n  // traverse over the nested objects\n  var obj = object;\n  for (var i = 0; i < names.length; i++) {\n    var name = names[i];\n    if (!(name in obj)) {\n      obj[name] = {};\n    }\n    obj = obj[name];\n  }\n\n  // set the property value\n  obj[prop] = value;\n\n  return object;\n}\n\n/**\n * Convert an object with DOT attributes to their vis.js equivalents.\n * @param {Object} attr     Object with DOT attributes\n * @param {Object} mapping\n * @return {Object}         Returns an object with vis.js attributes\n */\nfunction convertAttr(attr, mapping) {\n  var converted = {};\n\n  for (var prop in attr) {\n    if (attr.hasOwnProperty(prop)) {\n      var visProp = mapping[prop];\n      if (Array.isArray(visProp)) {\n        visProp.forEach(function (visPropI) {\n          setProp(converted, visPropI, attr[prop]);\n        });\n      } else if (typeof visProp === 'string') {\n        setProp(converted, visProp, attr[prop]);\n      } else {\n        setProp(converted, prop, attr[prop]);\n      }\n    }\n  }\n\n  return converted;\n}\n\n/**\n * Convert a string containing a graph in DOT language into a map containing\n * with nodes and edges in the format of graph.\n * @param {string} data         Text containing a graph in DOT-notation\n * @return {Object} graphData\n */\nfunction DOTToGraph(data) {\n  // parse the DOT file\n  var dotData = parseDOT(data);\n  var graphData = {\n    nodes: [],\n    edges: [],\n    options: {}\n\n    // copy the nodes\n  };if (dotData.nodes) {\n    dotData.nodes.forEach(function (dotNode) {\n      var graphNode = {\n        id: dotNode.id,\n        label: String(dotNode.label || dotNode.id)\n      };\n      merge(graphNode, convertAttr(dotNode.attr, NODE_ATTR_MAPPING));\n      if (graphNode.image) {\n        graphNode.shape = 'image';\n      }\n      graphData.nodes.push(graphNode);\n    });\n  }\n\n  // copy the edges\n  if (dotData.edges) {\n    /**\n     * Convert an edge in DOT format to an edge with VisGraph format\n     * @param {Object} dotEdge\n     * @returns {Object} graphEdge\n     */\n    var convertEdge = function convertEdge(dotEdge) {\n      var graphEdge = {\n        from: dotEdge.from,\n        to: dotEdge.to\n      };\n      merge(graphEdge, convertAttr(dotEdge.attr, EDGE_ATTR_MAPPING));\n\n      // Add arrows attribute to default styled arrow.\n      // The reason why default style is not added in parseAttributeList() is\n      // because only default is cleared before here.\n      if (graphEdge.arrows == null && dotEdge.type === '->') {\n        graphEdge.arrows = 'to';\n      }\n\n      return graphEdge;\n    };\n\n    dotData.edges.forEach(function (dotEdge) {\n      var from, to;\n      if (dotEdge.from instanceof Object) {\n        from = dotEdge.from.nodes;\n      } else {\n        from = {\n          id: dotEdge.from\n        };\n      }\n\n      if (dotEdge.to instanceof Object) {\n        to = dotEdge.to.nodes;\n      } else {\n        to = {\n          id: dotEdge.to\n        };\n      }\n\n      if (dotEdge.from instanceof Object && dotEdge.from.edges) {\n        dotEdge.from.edges.forEach(function (subEdge) {\n          var graphEdge = convertEdge(subEdge);\n          graphData.edges.push(graphEdge);\n        });\n      }\n\n      forEach2(from, to, function (from, to) {\n        var subEdge = createEdge(graphData, from.id, to.id, dotEdge.type, dotEdge.attr);\n        var graphEdge = convertEdge(subEdge);\n        graphData.edges.push(graphEdge);\n      });\n\n      if (dotEdge.to instanceof Object && dotEdge.to.edges) {\n        dotEdge.to.edges.forEach(function (subEdge) {\n          var graphEdge = convertEdge(subEdge);\n          graphData.edges.push(graphEdge);\n        });\n      }\n    });\n  }\n\n  // copy the options\n  if (dotData.attr) {\n    graphData.options = dotData.attr;\n  }\n\n  return graphData;\n}\n\n// exports\nexports.parseDOT = parseDOT;\nexports.DOTToGraph = DOTToGraph;\n\n/***/ }),\n/* 75 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\n/**\n *\n * @param {json} gephiJSON\n * @param {obj} optionsObj\n * @returns {{nodes: Array, edges: Array}}\n */\nfunction parseGephi(gephiJSON, optionsObj) {\n  var edges = [];\n  var nodes = [];\n  var options = {\n    edges: {\n      inheritColor: false\n    },\n    nodes: {\n      fixed: false,\n      parseColor: false\n    }\n  };\n\n  if (optionsObj !== undefined) {\n    if (optionsObj.fixed !== undefined) {\n      options.nodes.fixed = optionsObj.fixed;\n    }\n    if (optionsObj.parseColor !== undefined) {\n      options.nodes.parseColor = optionsObj.parseColor;\n    }\n    if (optionsObj.inheritColor !== undefined) {\n      options.edges.inheritColor = optionsObj.inheritColor;\n    }\n  }\n\n  var gEdges = gephiJSON.edges;\n  var gNodes = gephiJSON.nodes;\n  for (var i = 0; i < gEdges.length; i++) {\n    var edge = {};\n    var gEdge = gEdges[i];\n    edge['id'] = gEdge.id;\n    edge['from'] = gEdge.source;\n    edge['to'] = gEdge.target;\n    edge['attributes'] = gEdge.attributes;\n    edge['label'] = gEdge.label;\n    edge['title'] = gEdge.attributes !== undefined ? gEdge.attributes.title : undefined;\n    if (gEdge['type'] === 'Directed') {\n      edge['arrows'] = 'to';\n    }\n    //    edge['value'] = gEdge.attributes !== undefined ? gEdge.attributes.Weight : undefined;\n    //    edge['width'] = edge['value'] !== undefined ? undefined : edgegEdge.size;\n    if (gEdge.color && options.inheritColor === false) {\n      edge['color'] = gEdge.color;\n    }\n    edges.push(edge);\n  }\n\n  for (var j = 0; j < gNodes.length; j++) {\n    var node = {};\n    var gNode = gNodes[j];\n    node['id'] = gNode.id;\n    node['attributes'] = gNode.attributes;\n    node['x'] = gNode.x;\n    node['y'] = gNode.y;\n    node['label'] = gNode.label;\n    node['title'] = gNode.attributes !== undefined ? gNode.attributes.title : gNode.title;\n    if (options.nodes.parseColor === true) {\n      node['color'] = gNode.color;\n    } else {\n      node['color'] = gNode.color !== undefined ? {\n        background: gNode.color,\n        border: gNode.color,\n        highlight: { background: gNode.color, border: gNode.color },\n        hover: { background: gNode.color, border: gNode.color }\n      } : undefined;\n    }\n    node['size'] = gNode.size;\n    node['fixed'] = options.nodes.fixed && gNode.x !== undefined && gNode.y !== undefined;\n    nodes.push(node);\n  }\n\n  return { nodes: nodes, edges: edges };\n}\n\nexports.parseGephi = parseGephi;\n\n/***/ }),\n/* 76 */\n/***/ (function(module, exports, __nested_webpack_require_271567__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _classCallCheck2 = __nested_webpack_require_271567__(0);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __nested_webpack_require_271567__(1);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _CachedImage = __nested_webpack_require_271567__(133);\n\nvar _CachedImage2 = _interopRequireDefault(_CachedImage);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\n/**\n * This callback is a callback that accepts an Image.\n * @callback ImageCallback\n * @param {Image} image\n */\n\n/**\n * This class loads images and keeps them stored.\n *\n * @param {ImageCallback} callback\n */\nvar Images = function () {\n  /**\n   * @param {ImageCallback} callback\n   */\n  function Images(callback) {\n    (0, _classCallCheck3['default'])(this, Images);\n\n    this.images = {};\n    this.imageBroken = {};\n    this.callback = callback;\n  }\n\n  /**\n   * @param {string} url                      The original Url that failed to load, if the broken image is successfully loaded it will be added to the cache using this Url as the key so that subsequent requests for this Url will return the broken image\n   * @param {string} brokenUrl                Url the broken image to try and load\n   * @param {Image} imageToLoadBrokenUrlOn   The image object\n   */\n\n\n  (0, _createClass3['default'])(Images, [{\n    key: '_tryloadBrokenUrl',\n    value: function _tryloadBrokenUrl(url, brokenUrl, imageToLoadBrokenUrlOn) {\n      //If these parameters aren't specified then exit the function because nothing constructive can be done\n      if (url === undefined || imageToLoadBrokenUrlOn === undefined) return;\n      if (brokenUrl === undefined) {\n        console.warn('No broken url image defined');\n        return;\n      }\n\n      //Clear the old subscription to the error event and put a new in place that only handle errors in loading the brokenImageUrl\n      imageToLoadBrokenUrlOn.onerror = function () {\n        console.error('Could not load brokenImage:', brokenUrl);\n        // cache item will contain empty image, this should be OK for default\n      };\n\n      //Set the source of the image to the brokenUrl, this is actually what kicks off the loading of the broken image\n      imageToLoadBrokenUrlOn.image.src = brokenUrl;\n    }\n\n    /**\n     *\n     * @param {vis.Image} imageToRedrawWith\n     * @private\n     */\n\n  }, {\n    key: '_redrawWithImage',\n    value: function _redrawWithImage(imageToRedrawWith) {\n      if (this.callback) {\n        this.callback(imageToRedrawWith);\n      }\n    }\n\n    /**\n     * @param {string} url          Url of the image\n     * @param {string} brokenUrl    Url of an image to use if the url image is not found\n     * @return {Image} img          The image object\n     */\n\n  }, {\n    key: 'load',\n    value: function load(url, brokenUrl) {\n      var _this = this;\n\n      //Try and get the image from the cache, if successful then return the cached image\n      var cachedImage = this.images[url];\n      if (cachedImage) return cachedImage;\n\n      //Create a new image\n      var img = new _CachedImage2['default']();\n\n      // Need to add to cache here, otherwise final return will spawn different copies of the same image,\n      // Also, there will be multiple loads of the same image.\n      this.images[url] = img;\n\n      //Subscribe to the event that is raised if the image loads successfully\n      img.image.onload = function () {\n        // Properly init the cached item and then request a redraw\n        _this._fixImageCoordinates(img.image);\n        img.init();\n        _this._redrawWithImage(img);\n      };\n\n      //Subscribe to the event that is raised if the image fails to load\n      img.image.onerror = function () {\n        console.error('Could not load image:', url);\n        //Try and load the image specified by the brokenUrl using\n        _this._tryloadBrokenUrl(url, brokenUrl, img);\n      };\n\n      //Set the source of the image to the url, this is what actually kicks off the loading of the image\n      img.image.src = url;\n\n      //Return the new image\n      return img;\n    }\n\n    /**\n     * IE11 fix -- thanks dponch!\n     *\n     * Local helper function\n     * @param {vis.Image} imageToCache\n     * @private\n     */\n\n  }, {\n    key: '_fixImageCoordinates',\n    value: function _fixImageCoordinates(imageToCache) {\n      if (imageToCache.width === 0) {\n        document.body.appendChild(imageToCache);\n        imageToCache.width = imageToCache.offsetWidth;\n        imageToCache.height = imageToCache.offsetHeight;\n        document.body.removeChild(imageToCache);\n      }\n    }\n  }]);\n  return Images;\n}();\n\nexports['default'] = Images;\n\n/***/ }),\n/* 77 */\n/***/ (function(module, exports, __nested_webpack_require_276340__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _slicedToArray2 = __nested_webpack_require_276340__(15);\n\nvar _slicedToArray3 = _interopRequireDefault(_slicedToArray2);\n\nvar _typeof2 = __nested_webpack_require_276340__(7);\n\nvar _typeof3 = _interopRequireDefault(_typeof2);\n\nvar _classCallCheck2 = __nested_webpack_require_276340__(0);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __nested_webpack_require_276340__(1);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar util = __nested_webpack_require_276340__(2);\nvar ComponentUtil = __nested_webpack_require_276340__(35)['default'];\nvar LabelSplitter = __nested_webpack_require_276340__(139)['default'];\n\n/**\n * List of special styles for multi-fonts\n * @private\n */\nvar multiFontStyle = ['bold', 'ital', 'boldital', 'mono'];\n\n/**\n * A Label to be used for Nodes or Edges.\n */\n\nvar Label = function () {\n  /**\n   * @param {Object} body\n   * @param {Object} options\n   * @param {boolean} [edgelabel=false]\n   */\n  function Label(body, options) {\n    var edgelabel = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    (0, _classCallCheck3['default'])(this, Label);\n\n    this.body = body;\n    this.pointToSelf = false;\n    this.baseSize = undefined;\n    this.fontOptions = {}; // instance variable containing the *instance-local* font options\n    this.setOptions(options);\n    this.size = { top: 0, left: 0, width: 0, height: 0, yLine: 0 };\n    this.isEdgeLabel = edgelabel;\n  }\n\n  /**\n   * @param {Object} options the options of the parent Node-instance\n   */\n\n\n  (0, _createClass3['default'])(Label, [{\n    key: 'setOptions',\n    value: function setOptions(options) {\n      this.elementOptions = options; // Reference to the options of the parent Node-instance\n\n      this.initFontOptions(options.font);\n\n      if (ComponentUtil.isValidLabel(options.label)) {\n        this.labelDirty = true;\n      } else {\n        // Bad label! Change the option value to prevent bad stuff happening\n        options.label = '';\n      }\n\n      if (options.font !== undefined && options.font !== null) {\n        // font options can be deleted at various levels\n        if (typeof options.font === 'string') {\n          this.baseSize = this.fontOptions.size;\n        } else if ((0, _typeof3['default'])(options.font) === 'object') {\n          var size = options.font.size;\n\n          if (size !== undefined) {\n            this.baseSize = size;\n          }\n        }\n      }\n    }\n\n    /**\n     * Init the font Options structure.\n     *\n     * Member fontOptions serves as an accumulator for the current font options.\n     * As such, it needs to be completely separated from the node options.\n     *\n     * @param {Object} newFontOptions the new font options to process\n     * @private\n     */\n\n  }, {\n    key: 'initFontOptions',\n    value: function initFontOptions(newFontOptions) {\n      var _this = this;\n\n      // Prepare the multi-font option objects.\n      // These will be filled in propagateFonts(), if required\n      util.forEach(multiFontStyle, function (style) {\n        _this.fontOptions[style] = {};\n      });\n\n      // Handle shorthand option, if present\n      if (Label.parseFontString(this.fontOptions, newFontOptions)) {\n        this.fontOptions.vadjust = 0;\n        return;\n      }\n\n      // Copy over the non-multifont options, if specified\n      util.forEach(newFontOptions, function (prop, n) {\n        if (prop !== undefined && prop !== null && (typeof prop === 'undefined' ? 'undefined' : (0, _typeof3['default'])(prop)) !== 'object') {\n          _this.fontOptions[n] = prop;\n        }\n      });\n    }\n\n    /**\n     * If in-variable is a string, parse it as a font specifier.\n     *\n     * Note that following is not done here and have to be done after the call:\n     * - No number conversion (size)\n     * - Not all font options are set (vadjust, mod)\n     *\n     * @param {Object} outOptions  out-parameter, object in which to store the parse results (if any)\n     * @param {Object} inOptions  font options to parse\n     * @return {boolean} true if font parsed as string, false otherwise\n     * @static\n     */\n\n  }, {\n    key: 'constrain',\n\n\n    /**\n     * Set the width and height constraints based on 'nearest' value\n     *\n     * @param {Array} pile array of option objects to consider\n     * @returns {object} the actual constraint values to use\n     * @private\n     */\n    value: function constrain(pile) {\n      // NOTE: constrainWidth and  constrainHeight never set!\n      // NOTE: for edge labels, only 'maxWdt' set\n      // Node labels can set all the fields\n      var fontOptions = {\n        constrainWidth: false,\n        maxWdt: -1,\n        minWdt: -1,\n        constrainHeight: false,\n        minHgt: -1,\n        valign: 'middle'\n      };\n\n      var widthConstraint = util.topMost(pile, 'widthConstraint');\n      if (typeof widthConstraint === 'number') {\n        fontOptions.maxWdt = Number(widthConstraint);\n        fontOptions.minWdt = Number(widthConstraint);\n      } else if ((typeof widthConstraint === 'undefined' ? 'undefined' : (0, _typeof3['default'])(widthConstraint)) === 'object') {\n        var widthConstraintMaximum = util.topMost(pile, ['widthConstraint', 'maximum']);\n        if (typeof widthConstraintMaximum === 'number') {\n          fontOptions.maxWdt = Number(widthConstraintMaximum);\n        }\n        var widthConstraintMinimum = util.topMost(pile, ['widthConstraint', 'minimum']);\n        if (typeof widthConstraintMinimum === 'number') {\n          fontOptions.minWdt = Number(widthConstraintMinimum);\n        }\n      }\n\n      var heightConstraint = util.topMost(pile, 'heightConstraint');\n      if (typeof heightConstraint === 'number') {\n        fontOptions.minHgt = Number(heightConstraint);\n      } else if ((typeof heightConstraint === 'undefined' ? 'undefined' : (0, _typeof3['default'])(heightConstraint)) === 'object') {\n        var heightConstraintMinimum = util.topMost(pile, ['heightConstraint', 'minimum']);\n        if (typeof heightConstraintMinimum === 'number') {\n          fontOptions.minHgt = Number(heightConstraintMinimum);\n        }\n        var heightConstraintValign = util.topMost(pile, ['heightConstraint', 'valign']);\n        if (typeof heightConstraintValign === 'string') {\n          if (heightConstraintValign === 'top' || heightConstraintValign === 'bottom') {\n            fontOptions.valign = heightConstraintValign;\n          }\n        }\n      }\n\n      return fontOptions;\n    }\n\n    /**\n     * Set options and update internal state\n     *\n     * @param {Object} options  options to set\n     * @param {Array}  pile     array of option objects to consider for option 'chosen'\n     */\n\n  }, {\n    key: 'update',\n    value: function update(options, pile) {\n      this.setOptions(options, true);\n      this.propagateFonts(pile);\n      util.deepExtend(this.fontOptions, this.constrain(pile));\n      this.fontOptions.chooser = ComponentUtil.choosify('label', pile);\n    }\n\n    /**\n     * When margins are set in an element, adjust sizes is called to remove them\n     * from the width/height constraints. This must be done prior to label sizing.\n     *\n     * @param {{top: number, right: number, bottom: number, left: number}} margins\n     */\n\n  }, {\n    key: 'adjustSizes',\n    value: function adjustSizes(margins) {\n      var widthBias = margins ? margins.right + margins.left : 0;\n      if (this.fontOptions.constrainWidth) {\n        this.fontOptions.maxWdt -= widthBias;\n        this.fontOptions.minWdt -= widthBias;\n      }\n      var heightBias = margins ? margins.top + margins.bottom : 0;\n      if (this.fontOptions.constrainHeight) {\n        this.fontOptions.minHgt -= heightBias;\n      }\n    }\n\n    /////////////////////////////////////////////////////////\n    // Methods for handling options piles\n    // Eventually, these will be moved to a separate class\n    /////////////////////////////////////////////////////////\n\n    /**\n     * Add the font members of the passed list of option objects to the pile.\n     *\n     * @param {Pile} dstPile  pile of option objects add to\n     * @param {Pile} srcPile  pile of option objects to take font options from\n     * @private\n     */\n\n  }, {\n    key: 'addFontOptionsToPile',\n    value: function addFontOptionsToPile(dstPile, srcPile) {\n      for (var i = 0; i < srcPile.length; ++i) {\n        this.addFontToPile(dstPile, srcPile[i]);\n      }\n    }\n\n    /**\n     * Add given font option object to the list of objects (the 'pile') to consider for determining\n     * multi-font option values.\n     *\n     * @param {Pile} pile  pile of option objects to use\n     * @param {object} options  instance to add to pile\n     * @private\n     */\n\n  }, {\n    key: 'addFontToPile',\n    value: function addFontToPile(pile, options) {\n      if (options === undefined) return;\n      if (options.font === undefined || options.font === null) return;\n\n      var item = options.font;\n      pile.push(item);\n    }\n\n    /**\n     * Collect all own-property values from the font pile that aren't multi-font option objectss.\n     *\n     * @param {Pile} pile  pile of option objects to use\n     * @returns {object} object with all current own basic font properties\n     * @private\n     */\n\n  }, {\n    key: 'getBasicOptions',\n    value: function getBasicOptions(pile) {\n      var ret = {};\n\n      // Scans the whole pile to get all options present\n      for (var n = 0; n < pile.length; ++n) {\n        var fontOptions = pile[n];\n\n        // Convert shorthand if necessary\n        var tmpShorthand = {};\n        if (Label.parseFontString(tmpShorthand, fontOptions)) {\n          fontOptions = tmpShorthand;\n        }\n\n        util.forEach(fontOptions, function (opt, name) {\n          if (opt === undefined) return; // multi-font option need not be present\n          if (ret.hasOwnProperty(name)) return; // Keep first value we encounter\n\n          if (multiFontStyle.indexOf(name) !== -1) {\n            // Skip multi-font properties but we do need the structure\n            ret[name] = {};\n          } else {\n            ret[name] = opt;\n          }\n        });\n      }\n\n      return ret;\n    }\n\n    /**\n     * Return the value for given option for the given multi-font.\n     *\n     * All available option objects are trawled in the set order to construct the option values.\n     *\n     * ---------------------------------------------------------------------\n     * ## Traversal of pile for multi-fonts\n     *\n     * The determination of multi-font option values is a special case, because any values not\n     * present in the multi-font options should by definition be taken from the main font options,\n     * i.e. from the current 'parent' object of the multi-font option.\n     *\n     * ### Search order for multi-fonts\n     *\n     * 'bold' used as example:\n     *\n     *   - search in option group 'bold' in local properties\n     *   - search in main font option group in local properties\n     *\n     * ---------------------------------------------------------------------\n     *\n     * @param {Pile} pile  pile of option objects to use\n     * @param {MultiFontStyle} multiName sub path for the multi-font\n     * @param {string} option  the option to search for, for the given multi-font\n     * @returns {string|number} the value for the given option\n     * @private\n     */\n\n  }, {\n    key: 'getFontOption',\n    value: function getFontOption(pile, multiName, option) {\n      var multiFont = void 0;\n\n      // Search multi font in local properties\n      for (var n = 0; n < pile.length; ++n) {\n        var fontOptions = pile[n];\n\n        if (fontOptions.hasOwnProperty(multiName)) {\n          multiFont = fontOptions[multiName];\n          if (multiFont === undefined || multiFont === null) continue;\n\n          // Convert shorthand if necessary\n          // TODO: inefficient to do this conversion every time; find a better way.\n          var tmpShorthand = {};\n          if (Label.parseFontString(tmpShorthand, multiFont)) {\n            multiFont = tmpShorthand;\n          }\n\n          if (multiFont.hasOwnProperty(option)) {\n            return multiFont[option];\n          }\n        }\n      }\n\n      // Option is not mentioned in the multi font options; take it from the parent font options.\n      // These have already been converted with getBasicOptions(), so use the converted values.\n      if (this.fontOptions.hasOwnProperty(option)) {\n        return this.fontOptions[option];\n      }\n\n      // A value **must** be found; you should never get here.\n      throw new Error(\"Did not find value for multi-font for property: '\" + option + \"'\");\n    }\n\n    /**\n     * Return all options values for the given multi-font.\n     *\n     * All available option objects are trawled in the set order to construct the option values.\n     *\n     * @param {Pile} pile  pile of option objects to use\n     * @param {MultiFontStyle} multiName sub path for the mod-font\n     * @returns {MultiFontOptions}\n     * @private\n     */\n\n  }, {\n    key: 'getFontOptions',\n    value: function getFontOptions(pile, multiName) {\n      var result = {};\n      var optionNames = ['color', 'size', 'face', 'mod', 'vadjust']; // List of allowed options per multi-font\n\n      for (var i = 0; i < optionNames.length; ++i) {\n        var mod = optionNames[i];\n        result[mod] = this.getFontOption(pile, multiName, mod);\n      }\n\n      return result;\n    }\n\n    /////////////////////////////////////////////////////////\n    // End methods for handling options piles\n    /////////////////////////////////////////////////////////\n\n    /**\n     * Collapse the font options for the multi-font to single objects, from\n     * the chain of option objects passed (the 'pile').\n     *\n     * @param {Pile} pile  sequence of option objects to consider.\n     *                     First item in list assumed to be the newly set options.\n     */\n\n  }, {\n    key: 'propagateFonts',\n    value: function propagateFonts(pile) {\n      var _this2 = this;\n\n      var fontPile = []; // sequence of font objects to consider, order important\n\n      // Note that this.elementOptions is not used here.\n      this.addFontOptionsToPile(fontPile, pile);\n      this.fontOptions = this.getBasicOptions(fontPile);\n\n      // We set multifont values even if multi === false, for consistency (things break otherwise)\n\n      var _loop = function _loop(i) {\n        var mod = multiFontStyle[i];\n        var modOptions = _this2.fontOptions[mod];\n        var tmpMultiFontOptions = _this2.getFontOptions(fontPile, mod);\n\n        // Copy over found values\n        util.forEach(tmpMultiFontOptions, function (option, n) {\n          modOptions[n] = option;\n        });\n\n        modOptions.size = Number(modOptions.size);\n        modOptions.vadjust = Number(modOptions.vadjust);\n      };\n\n      for (var i = 0; i < multiFontStyle.length; ++i) {\n        _loop(i);\n      }\n    }\n\n    /**\n     * Main function. This is called from anything that wants to draw a label.\n     * @param {CanvasRenderingContext2D} ctx\n     * @param {number} x\n     * @param {number} y\n     * @param {boolean} selected\n     * @param {boolean} hover\n     * @param {string} [baseline='middle']\n     */\n\n  }, {\n    key: 'draw',\n    value: function draw(ctx, x, y, selected, hover) {\n      var baseline = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 'middle';\n\n      // if no label, return\n      if (this.elementOptions.label === undefined) return;\n\n      // check if we have to render the label\n      var viewFontSize = this.fontOptions.size * this.body.view.scale;\n      if (this.elementOptions.label && viewFontSize < this.elementOptions.scaling.label.drawThreshold - 1) return;\n\n      // This ensures that there will not be HUGE letters on screen\n      // by setting an upper limit on the visible text size (regardless of zoomLevel)\n      if (viewFontSize >= this.elementOptions.scaling.label.maxVisible) {\n        viewFontSize = Number(this.elementOptions.scaling.label.maxVisible) / this.body.view.scale;\n      }\n\n      // update the size cache if required\n      this.calculateLabelSize(ctx, selected, hover, x, y, baseline);\n      this._drawBackground(ctx);\n      this._drawText(ctx, x, this.size.yLine, baseline, viewFontSize);\n    }\n\n    /**\n     * Draws the label background\n     * @param {CanvasRenderingContext2D} ctx\n     * @private\n     */\n\n  }, {\n    key: '_drawBackground',\n    value: function _drawBackground(ctx) {\n      if (this.fontOptions.background !== undefined && this.fontOptions.background !== 'none') {\n        ctx.fillStyle = this.fontOptions.background;\n        var size = this.getSize();\n        ctx.fillRect(size.left, size.top, size.width, size.height);\n      }\n    }\n\n    /**\n     *\n     * @param {CanvasRenderingContext2D} ctx\n     * @param {number} x\n     * @param {number} y\n     * @param {string} [baseline='middle']\n     * @param {number} viewFontSize\n     * @private\n     */\n\n  }, {\n    key: '_drawText',\n    value: function _drawText(ctx, x, y) {\n      var baseline = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'middle';\n      var viewFontSize = arguments[4];\n\n      ;\n      var _setAlignment2 = this._setAlignment(ctx, x, y, baseline);\n\n      var _setAlignment3 = (0, _slicedToArray3['default'])(_setAlignment2, 2);\n\n      x = _setAlignment3[0];\n      y = _setAlignment3[1];\n\n\n      ctx.textAlign = 'left';\n      x = x - this.size.width / 2; // Shift label 1/2-distance to the left\n      if (this.fontOptions.valign && this.size.height > this.size.labelHeight) {\n        if (this.fontOptions.valign === 'top') {\n          y -= (this.size.height - this.size.labelHeight) / 2;\n        }\n        if (this.fontOptions.valign === 'bottom') {\n          y += (this.size.height - this.size.labelHeight) / 2;\n        }\n      }\n\n      // draw the text\n      for (var i = 0; i < this.lineCount; i++) {\n        var line = this.lines[i];\n        if (line && line.blocks) {\n          var width = 0;\n          if (this.isEdgeLabel || this.fontOptions.align === 'center') {\n            width += (this.size.width - line.width) / 2;\n          } else if (this.fontOptions.align === 'right') {\n            width += this.size.width - line.width;\n          }\n          for (var j = 0; j < line.blocks.length; j++) {\n            var block = line.blocks[j];\n            ctx.font = block.font;\n\n            var _getColor2 = this._getColor(block.color, viewFontSize, block.strokeColor),\n                _getColor3 = (0, _slicedToArray3['default'])(_getColor2, 2),\n                fontColor = _getColor3[0],\n                strokeColor = _getColor3[1];\n\n            if (block.strokeWidth > 0) {\n              ctx.lineWidth = block.strokeWidth;\n              ctx.strokeStyle = strokeColor;\n              ctx.lineJoin = 'round';\n            }\n            ctx.fillStyle = fontColor;\n\n            if (block.strokeWidth > 0) {\n              ctx.strokeText(block.text, x + width, y + block.vadjust);\n            }\n            ctx.fillText(block.text, x + width, y + block.vadjust);\n            width += block.width;\n          }\n          y += line.height;\n        }\n      }\n    }\n\n    /**\n     *\n     * @param {CanvasRenderingContext2D} ctx\n     * @param {number} x\n     * @param {number} y\n     * @param {string} baseline\n     * @returns {Array.<number>}\n     * @private\n     */\n\n  }, {\n    key: '_setAlignment',\n    value: function _setAlignment(ctx, x, y, baseline) {\n      // check for label alignment (for edges)\n      // TODO: make alignment for nodes\n      if (this.isEdgeLabel && this.fontOptions.align !== 'horizontal' && this.pointToSelf === false) {\n        x = 0;\n        y = 0;\n\n        var lineMargin = 2;\n        if (this.fontOptions.align === 'top') {\n          ctx.textBaseline = 'alphabetic';\n          y -= 2 * lineMargin; // distance from edge, required because we use alphabetic. Alphabetic has less difference between browsers\n        } else if (this.fontOptions.align === 'bottom') {\n          ctx.textBaseline = 'hanging';\n          y += 2 * lineMargin; // distance from edge, required because we use hanging. Hanging has less difference between browsers\n        } else {\n          ctx.textBaseline = 'middle';\n        }\n      } else {\n        ctx.textBaseline = baseline;\n      }\n      return [x, y];\n    }\n\n    /**\n     * fade in when relative scale is between threshold and threshold - 1.\n     * If the relative scale would be smaller than threshold -1 the draw function would have returned before coming here.\n     *\n     * @param {string} color  The font color to use\n     * @param {number} viewFontSize\n     * @param {string} initialStrokeColor\n     * @returns {Array.<string>} An array containing the font color and stroke color\n     * @private\n     */\n\n  }, {\n    key: '_getColor',\n    value: function _getColor(color, viewFontSize, initialStrokeColor) {\n      var fontColor = color || '#000000';\n      var strokeColor = initialStrokeColor || '#ffffff';\n      if (viewFontSize <= this.elementOptions.scaling.label.drawThreshold) {\n        var opacity = Math.max(0, Math.min(1, 1 - (this.elementOptions.scaling.label.drawThreshold - viewFontSize)));\n        fontColor = util.overrideOpacity(fontColor, opacity);\n        strokeColor = util.overrideOpacity(strokeColor, opacity);\n      }\n      return [fontColor, strokeColor];\n    }\n\n    /**\n     *\n     * @param {CanvasRenderingContext2D} ctx\n     * @param {boolean} selected\n     * @param {boolean} hover\n     * @returns {{width: number, height: number}}\n     */\n\n  }, {\n    key: 'getTextSize',\n    value: function getTextSize(ctx) {\n      var selected = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var hover = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n      this._processLabel(ctx, selected, hover);\n      return {\n        width: this.size.width,\n        height: this.size.height,\n        lineCount: this.lineCount\n      };\n    }\n\n    /**\n     * Get the current dimensions of the label\n     *\n     * @return {rect}\n     */\n\n  }, {\n    key: 'getSize',\n    value: function getSize() {\n      var lineMargin = 2;\n      var x = this.size.left; // default values which might be overridden below\n      var y = this.size.top - 0.5 * lineMargin; // idem\n\n      if (this.isEdgeLabel) {\n        var x2 = -this.size.width * 0.5;\n\n        switch (this.fontOptions.align) {\n          case 'middle':\n            x = x2;\n            y = -this.size.height * 0.5;\n            break;\n          case 'top':\n            x = x2;\n            y = -(this.size.height + lineMargin);\n            break;\n          case 'bottom':\n            x = x2;\n            y = lineMargin;\n            break;\n        }\n      }\n\n      var ret = {\n        left: x,\n        top: y,\n        width: this.size.width,\n        height: this.size.height\n      };\n\n      return ret;\n    }\n\n    /**\n     *\n     * @param {CanvasRenderingContext2D} ctx\n     * @param {boolean} selected\n     * @param {boolean} hover\n     * @param {number} [x=0]\n     * @param {number} [y=0]\n     * @param {'middle'|'hanging'} [baseline='middle']\n     */\n\n  }, {\n    key: 'calculateLabelSize',\n    value: function calculateLabelSize(ctx, selected, hover) {\n      var x = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n      var y = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;\n      var baseline = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 'middle';\n\n      this._processLabel(ctx, selected, hover);\n      this.size.left = x - this.size.width * 0.5;\n      this.size.top = y - this.size.height * 0.5;\n      this.size.yLine = y + (1 - this.lineCount) * 0.5 * this.fontOptions.size;\n      if (baseline === 'hanging') {\n        this.size.top += 0.5 * this.fontOptions.size;\n        this.size.top += 4; // distance from node, required because we use hanging. Hanging has less difference between browsers\n        this.size.yLine += 4; // distance from node\n      }\n    }\n\n    /**\n     *\n     * @param {CanvasRenderingContext2D} ctx\n     * @param {boolean} selected\n     * @param {boolean} hover\n     * @param {string} mod\n     * @returns {{color, size, face, mod, vadjust, strokeWidth: *, strokeColor: (*|string|allOptions.edges.font.strokeColor|{string}|allOptions.nodes.font.strokeColor|Array)}}\n     */\n\n  }, {\n    key: 'getFormattingValues',\n    value: function getFormattingValues(ctx, selected, hover, mod) {\n      var getValue = function getValue(fontOptions, mod, option) {\n        if (mod === 'normal') {\n          if (option === 'mod') return '';\n          return fontOptions[option];\n        }\n\n        if (fontOptions[mod][option] !== undefined) {\n          // Grumbl leaving out test on undefined equals false for \"\"\n          return fontOptions[mod][option];\n        } else {\n          // Take from parent font option\n          return fontOptions[option];\n        }\n      };\n\n      var values = {\n        color: getValue(this.fontOptions, mod, 'color'),\n        size: getValue(this.fontOptions, mod, 'size'),\n        face: getValue(this.fontOptions, mod, 'face'),\n        mod: getValue(this.fontOptions, mod, 'mod'),\n        vadjust: getValue(this.fontOptions, mod, 'vadjust'),\n        strokeWidth: this.fontOptions.strokeWidth,\n        strokeColor: this.fontOptions.strokeColor\n      };\n      if (selected || hover) {\n        if (mod === 'normal' && this.fontOptions.chooser === true && this.elementOptions.labelHighlightBold) {\n          values.mod = 'bold';\n        } else {\n          if (typeof this.fontOptions.chooser === 'function') {\n            this.fontOptions.chooser(values, this.elementOptions.id, selected, hover);\n          }\n        }\n      }\n\n      var fontString = '';\n      if (values.mod !== undefined && values.mod !== '') {\n        // safeguard for undefined - this happened\n        fontString += values.mod + ' ';\n      }\n      fontString += values.size + 'px ' + values.face;\n\n      ctx.font = fontString.replace(/\"/g, '');\n      values.font = ctx.font;\n      values.height = values.size;\n      return values;\n    }\n\n    /**\n     *\n     * @param {boolean} selected\n     * @param {boolean} hover\n     * @returns {boolean}\n     */\n\n  }, {\n    key: 'differentState',\n    value: function differentState(selected, hover) {\n      return selected !== this.selectedState || hover !== this.hoverState;\n    }\n\n    /**\n     * This explodes the passed text into lines and determines the width, height and number of lines.\n     *\n     * @param {CanvasRenderingContext2D} ctx\n     * @param {boolean} selected\n     * @param {boolean} hover\n     * @param {string} inText  the text to explode\n     * @returns {{width, height, lines}|*}\n     * @private\n     */\n\n  }, {\n    key: '_processLabelText',\n    value: function _processLabelText(ctx, selected, hover, inText) {\n      var splitter = new LabelSplitter(ctx, this, selected, hover);\n      return splitter.process(inText);\n    }\n\n    /**\n     * This explodes the label string into lines and sets the width, height and number of lines.\n     * @param {CanvasRenderingContext2D} ctx\n     * @param {boolean} selected\n     * @param {boolean} hover\n     * @private\n     */\n\n  }, {\n    key: '_processLabel',\n    value: function _processLabel(ctx, selected, hover) {\n      if (this.labelDirty === false && !this.differentState(selected, hover)) return;\n\n      var state = this._processLabelText(ctx, selected, hover, this.elementOptions.label);\n\n      if (this.fontOptions.minWdt > 0 && state.width < this.fontOptions.minWdt) {\n        state.width = this.fontOptions.minWdt;\n      }\n\n      this.size.labelHeight = state.height;\n      if (this.fontOptions.minHgt > 0 && state.height < this.fontOptions.minHgt) {\n        state.height = this.fontOptions.minHgt;\n      }\n\n      this.lines = state.lines;\n      this.lineCount = state.lines.length;\n      this.size.width = state.width;\n      this.size.height = state.height;\n      this.selectedState = selected;\n      this.hoverState = hover;\n\n      this.labelDirty = false;\n    }\n\n    /**\n     * Check if this label is visible\n     *\n     * @return {boolean} true if this label will be show, false otherwise\n     */\n\n  }, {\n    key: 'visible',\n    value: function visible() {\n      if (this.size.width === 0 || this.size.height === 0 || this.elementOptions.label === undefined) {\n        return false; // nothing to display\n      }\n\n      var viewFontSize = this.fontOptions.size * this.body.view.scale;\n      if (viewFontSize < this.elementOptions.scaling.label.drawThreshold - 1) {\n        return false; // Too small or too far away to show\n      }\n\n      return true;\n    }\n  }], [{\n    key: 'parseFontString',\n    value: function parseFontString(outOptions, inOptions) {\n      if (!inOptions || typeof inOptions !== 'string') return false;\n\n      var newOptionsArray = inOptions.split(' ');\n\n      outOptions.size = newOptionsArray[0].replace('px', '');\n      outOptions.face = newOptionsArray[1];\n      outOptions.color = newOptionsArray[2];\n\n      return true;\n    }\n  }]);\n  return Label;\n}();\n\nexports['default'] = Label;\n\n/***/ }),\n/* 78 */\n/***/ (function(module, exports, __nested_webpack_require_305424__) {\n\nmodule.exports = { \"default\": __nested_webpack_require_305424__(141), __esModule: true };\n\n/***/ }),\n/* 79 */\n/***/ (function(module, exports, __nested_webpack_require_305577__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _slicedToArray2 = __nested_webpack_require_305577__(15);\n\nvar _slicedToArray3 = _interopRequireDefault(_slicedToArray2);\n\nvar _classCallCheck2 = __nested_webpack_require_305577__(0);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __nested_webpack_require_305577__(1);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar util = __nested_webpack_require_305577__(2);\nvar EndPoints = __nested_webpack_require_305577__(80)['default'];\n\n/**\n * The Base Class for all edges.\n *\n */\n\nvar EdgeBase = function () {\n  /**\n   * @param {Object} options\n   * @param {Object} body\n   * @param {Label} labelModule\n   */\n  function EdgeBase(options, body, labelModule) {\n    (0, _classCallCheck3['default'])(this, EdgeBase);\n\n    this.body = body;\n    this.labelModule = labelModule;\n    this.options = {};\n    this.setOptions(options);\n    this.colorDirty = true;\n    this.color = {};\n    this.selectionWidth = 2;\n    this.hoverWidth = 1.5;\n    this.fromPoint = this.from;\n    this.toPoint = this.to;\n  }\n\n  /**\n   * Connects a node to itself\n   */\n\n\n  (0, _createClass3['default'])(EdgeBase, [{\n    key: 'connect',\n    value: function connect() {\n      this.from = this.body.nodes[this.options.from];\n      this.to = this.body.nodes[this.options.to];\n    }\n\n    /**\n     *\n     * @returns {boolean} always false\n     */\n\n  }, {\n    key: 'cleanup',\n    value: function cleanup() {\n      return false;\n    }\n\n    /**\n     *\n     * @param {Object} options\n     */\n\n  }, {\n    key: 'setOptions',\n    value: function setOptions(options) {\n      this.options = options;\n      this.from = this.body.nodes[this.options.from];\n      this.to = this.body.nodes[this.options.to];\n      this.id = this.options.id;\n    }\n\n    /**\n     * Redraw a edge as a line\n     * Draw this edge in the given canvas\n     * The 2d context of a HTML canvas can be retrieved by canvas.getContext(\"2d\");\n     *\n     * @param {CanvasRenderingContext2D}   ctx\n     * @param {Array} values\n     * @param {boolean} selected\n     * @param {boolean} hover\n     * @param {Node} viaNode\n     * @private\n     */\n\n  }, {\n    key: 'drawLine',\n    value: function drawLine(ctx, values, selected, hover, viaNode) {\n      // set style\n      ctx.strokeStyle = this.getColor(ctx, values, selected, hover);\n      ctx.lineWidth = values.width;\n\n      if (values.dashes !== false) {\n        this._drawDashedLine(ctx, values, viaNode);\n      } else {\n        this._drawLine(ctx, values, viaNode);\n      }\n    }\n\n    /**\n     *\n     * @param {CanvasRenderingContext2D}   ctx\n     * @param {Array} values\n     * @param {Node} viaNode\n     * @param {{x: number, y: number}} [fromPoint]\n     * @param {{x: number, y: number}} [toPoint]\n     * @private\n     */\n\n  }, {\n    key: '_drawLine',\n    value: function _drawLine(ctx, values, viaNode, fromPoint, toPoint) {\n      if (this.from != this.to) {\n        // draw line\n        this._line(ctx, values, viaNode, fromPoint, toPoint);\n      } else {\n        var _getCircleData2 = this._getCircleData(ctx),\n            _getCircleData3 = (0, _slicedToArray3['default'])(_getCircleData2, 3),\n            x = _getCircleData3[0],\n            y = _getCircleData3[1],\n            radius = _getCircleData3[2];\n\n        this._circle(ctx, values, x, y, radius);\n      }\n    }\n\n    // prettier-ignore\n    /**\n     *\n     * @param {CanvasRenderingContext2D} ctx\n     * @param {Array} values\n     * @param {Node} viaNode\n     * @param {{x: number, y: number}} [fromPoint]  TODO: Remove in next major release\n     * @param {{x: number, y: number}} [toPoint]    TODO: Remove in next major release\n     * @private\n     */\n\n  }, {\n    key: '_drawDashedLine',\n    value: function _drawDashedLine(ctx, values, viaNode, fromPoint, toPoint) {\n      // eslint-disable-line no-unused-vars\n      ctx.lineCap = 'round';\n      var pattern = [5, 5];\n      if (Array.isArray(values.dashes) === true) {\n        pattern = values.dashes;\n      }\n\n      // only firefox and chrome support this method, else we use the legacy one.\n      if (ctx.setLineDash !== undefined) {\n        ctx.save();\n\n        // set dash settings for chrome or firefox\n        ctx.setLineDash(pattern);\n        ctx.lineDashOffset = 0;\n\n        // draw the line\n        if (this.from != this.to) {\n          // draw line\n          this._line(ctx, values, viaNode);\n        } else {\n          var _getCircleData4 = this._getCircleData(ctx),\n              _getCircleData5 = (0, _slicedToArray3['default'])(_getCircleData4, 3),\n              x = _getCircleData5[0],\n              y = _getCircleData5[1],\n              radius = _getCircleData5[2];\n\n          this._circle(ctx, values, x, y, radius);\n        }\n\n        // restore the dash settings.\n        ctx.setLineDash([0]);\n        ctx.lineDashOffset = 0;\n        ctx.restore();\n      } else {\n        // unsupporting smooth lines\n        if (this.from != this.to) {\n          // draw line\n          ctx.dashedLine(this.from.x, this.from.y, this.to.x, this.to.y, pattern);\n        } else {\n          var _getCircleData6 = this._getCircleData(ctx),\n              _getCircleData7 = (0, _slicedToArray3['default'])(_getCircleData6, 3),\n              _x = _getCircleData7[0],\n              _y = _getCircleData7[1],\n              _radius = _getCircleData7[2];\n\n          this._circle(ctx, values, _x, _y, _radius);\n        }\n        // draw shadow if enabled\n        this.enableShadow(ctx, values);\n\n        ctx.stroke();\n\n        // disable shadows for other elements.\n        this.disableShadow(ctx, values);\n      }\n    }\n\n    /**\n     *\n     * @param {Node} nearNode\n     * @param {CanvasRenderingContext2D} ctx\n     * @param {Object} options\n     * @returns {{x: number, y: number}}\n     */\n\n  }, {\n    key: 'findBorderPosition',\n    value: function findBorderPosition(nearNode, ctx, options) {\n      if (this.from != this.to) {\n        return this._findBorderPosition(nearNode, ctx, options);\n      } else {\n        return this._findBorderPositionCircle(nearNode, ctx, options);\n      }\n    }\n\n    /**\n     *\n     * @param {CanvasRenderingContext2D} ctx\n     * @returns {{from: ({x: number, y: number, t: number}|*), to: ({x: number, y: number, t: number}|*)}}\n     */\n\n  }, {\n    key: 'findBorderPositions',\n    value: function findBorderPositions(ctx) {\n      var from = {};\n      var to = {};\n      if (this.from != this.to) {\n        from = this._findBorderPosition(this.from, ctx);\n        to = this._findBorderPosition(this.to, ctx);\n      } else {\n        var _getCircleData$slice = this._getCircleData(ctx).slice(0, 2),\n            _getCircleData$slice2 = (0, _slicedToArray3['default'])(_getCircleData$slice, 2),\n            x = _getCircleData$slice2[0],\n            y = _getCircleData$slice2[1];\n\n        from = this._findBorderPositionCircle(this.from, ctx, {\n          x: x,\n          y: y,\n          low: 0.25,\n          high: 0.6,\n          direction: -1\n        });\n        to = this._findBorderPositionCircle(this.from, ctx, {\n          x: x,\n          y: y,\n          low: 0.6,\n          high: 0.8,\n          direction: 1\n        });\n      }\n      return { from: from, to: to };\n    }\n\n    /**\n     *\n     * @param {CanvasRenderingContext2D} ctx\n     * @returns {Array.<number>} x, y, radius\n     * @private\n     */\n\n  }, {\n    key: '_getCircleData',\n    value: function _getCircleData(ctx) {\n      var x = void 0,\n          y = void 0;\n      var node = this.from;\n      var radius = this.options.selfReferenceSize;\n\n      if (ctx !== undefined) {\n        if (node.shape.width === undefined) {\n          node.shape.resize(ctx);\n        }\n      }\n\n      // get circle coordinates\n      if (node.shape.width > node.shape.height) {\n        x = node.x + node.shape.width * 0.5;\n        y = node.y - radius;\n      } else {\n        x = node.x + radius;\n        y = node.y - node.shape.height * 0.5;\n      }\n      return [x, y, radius];\n    }\n\n    /**\n     * Get a point on a circle\n     * @param {number} x\n     * @param {number} y\n     * @param {number} radius\n     * @param {number} percentage - Value between 0 (line start) and 1 (line end)\n     * @return {Object} point\n     * @private\n     */\n\n  }, {\n    key: '_pointOnCircle',\n    value: function _pointOnCircle(x, y, radius, percentage) {\n      var angle = percentage * 2 * Math.PI;\n      return {\n        x: x + radius * Math.cos(angle),\n        y: y - radius * Math.sin(angle)\n      };\n    }\n\n    /**\n     * This function uses binary search to look for the point where the circle crosses the border of the node.\n     * @param {Node} node\n     * @param {CanvasRenderingContext2D} ctx\n     * @param {Object} options\n     * @returns {*}\n     * @private\n     */\n\n  }, {\n    key: '_findBorderPositionCircle',\n    value: function _findBorderPositionCircle(node, ctx, options) {\n      var x = options.x;\n      var y = options.y;\n      var low = options.low;\n      var high = options.high;\n      var direction = options.direction;\n\n      var maxIterations = 10;\n      var iteration = 0;\n      var radius = this.options.selfReferenceSize;\n      var pos = void 0,\n          angle = void 0,\n          distanceToBorder = void 0,\n          distanceToPoint = void 0,\n          difference = void 0;\n      var threshold = 0.05;\n      var middle = (low + high) * 0.5;\n\n      while (low <= high && iteration < maxIterations) {\n        middle = (low + high) * 0.5;\n\n        pos = this._pointOnCircle(x, y, radius, middle);\n        angle = Math.atan2(node.y - pos.y, node.x - pos.x);\n        distanceToBorder = node.distanceToBorder(ctx, angle);\n        distanceToPoint = Math.sqrt(Math.pow(pos.x - node.x, 2) + Math.pow(pos.y - node.y, 2));\n        difference = distanceToBorder - distanceToPoint;\n        if (Math.abs(difference) < threshold) {\n          break; // found\n        } else if (difference > 0) {\n          // distance to nodes is larger than distance to border --> t needs to be bigger if we're looking at the to node.\n          if (direction > 0) {\n            low = middle;\n          } else {\n            high = middle;\n          }\n        } else {\n          if (direction > 0) {\n            high = middle;\n          } else {\n            low = middle;\n          }\n        }\n        iteration++;\n      }\n      pos.t = middle;\n\n      return pos;\n    }\n\n    /**\n     * Get the line width of the edge. Depends on width and whether one of the\n     * connected nodes is selected.\n     * @param {boolean} selected\n     * @param {boolean} hover\n     * @returns {number} width\n     * @private\n     */\n\n  }, {\n    key: 'getLineWidth',\n    value: function getLineWidth(selected, hover) {\n      if (selected === true) {\n        return Math.max(this.selectionWidth, 0.3 / this.body.view.scale);\n      } else {\n        if (hover === true) {\n          return Math.max(this.hoverWidth, 0.3 / this.body.view.scale);\n        } else {\n          return Math.max(this.options.width, 0.3 / this.body.view.scale);\n        }\n      }\n    }\n\n    // prettier-ignore\n    /**\n     *\n     * @param {CanvasRenderingContext2D} ctx\n     * @param {ArrowOptions} values\n     * @param {boolean} selected - Unused\n     * @param {boolean} hover - Unused\n     * @returns {string}\n     */\n\n  }, {\n    key: 'getColor',\n    value: function getColor(ctx, values, selected, hover) {\n      // eslint-disable-line no-unused-vars\n      if (values.inheritsColor !== false) {\n        // when this is a loop edge, just use the 'from' method\n        if (values.inheritsColor === 'both' && this.from.id !== this.to.id) {\n          var grd = ctx.createLinearGradient(this.from.x, this.from.y, this.to.x, this.to.y);\n          var fromColor = void 0,\n              toColor = void 0;\n          fromColor = this.from.options.color.highlight.border;\n          toColor = this.to.options.color.highlight.border;\n\n          if (this.from.selected === false && this.to.selected === false) {\n            fromColor = util.overrideOpacity(this.from.options.color.border, values.opacity);\n            toColor = util.overrideOpacity(this.to.options.color.border, values.opacity);\n          } else if (this.from.selected === true && this.to.selected === false) {\n            toColor = this.to.options.color.border;\n          } else if (this.from.selected === false && this.to.selected === true) {\n            fromColor = this.from.options.color.border;\n          }\n          grd.addColorStop(0, fromColor);\n          grd.addColorStop(1, toColor);\n\n          // -------------------- this returns -------------------- //\n          return grd;\n        }\n\n        if (values.inheritsColor === 'to') {\n          return util.overrideOpacity(this.to.options.color.border, values.opacity);\n        } else {\n          // \"from\"\n          return util.overrideOpacity(this.from.options.color.border, values.opacity);\n        }\n      } else {\n        return util.overrideOpacity(values.color, values.opacity);\n      }\n    }\n\n    /**\n     * Draw a line from a node to itself, a circle\n     *\n     * @param {CanvasRenderingContext2D} ctx\n     * @param {Array} values\n     * @param {number} x\n     * @param {number} y\n     * @param {number} radius\n     * @private\n     */\n\n  }, {\n    key: '_circle',\n    value: function _circle(ctx, values, x, y, radius) {\n      // draw shadow if enabled\n      this.enableShadow(ctx, values);\n\n      // draw a circle\n      ctx.beginPath();\n      ctx.arc(x, y, radius, 0, 2 * Math.PI, false);\n      ctx.stroke();\n\n      // disable shadows for other elements.\n      this.disableShadow(ctx, values);\n    }\n\n    // prettier-ignore\n    /**\n     * Calculate the distance between a point (x3,y3) and a line segment from (x1,y1) to (x2,y2).\n     * (x3,y3) is the point.\n     *\n     * http://stackoverflow.com/questions/849211/shortest-distancae-between-a-point-and-a-line-segment\n     *\n     * @param {number} x1\n     * @param {number} y1\n     * @param {number} x2\n     * @param {number} y2\n     * @param {number} x3\n     * @param {number} y3\n     * @param {Node} via\n     * @param {Array} values\n     * @returns {number}\n     */\n\n  }, {\n    key: 'getDistanceToEdge',\n    value: function getDistanceToEdge(x1, y1, x2, y2, x3, y3, via, values) {\n      // eslint-disable-line no-unused-vars\n      var returnValue = 0;\n      if (this.from != this.to) {\n        returnValue = this._getDistanceToEdge(x1, y1, x2, y2, x3, y3, via);\n      } else {\n        var _getCircleData8 = this._getCircleData(undefined),\n            _getCircleData9 = (0, _slicedToArray3['default'])(_getCircleData8, 3),\n            x = _getCircleData9[0],\n            y = _getCircleData9[1],\n            radius = _getCircleData9[2];\n\n        var dx = x - x3;\n        var dy = y - y3;\n        returnValue = Math.abs(Math.sqrt(dx * dx + dy * dy) - radius);\n      }\n\n      return returnValue;\n    }\n\n    /**\n     *\n     * @param {number} x1\n     * @param {number} y1\n     * @param {number} x2\n     * @param {number} y2\n     * @param {number} x3\n     * @param {number} y3\n     * @returns {number}\n     * @private\n     */\n\n  }, {\n    key: '_getDistanceToLine',\n    value: function _getDistanceToLine(x1, y1, x2, y2, x3, y3) {\n      var px = x2 - x1;\n      var py = y2 - y1;\n      var something = px * px + py * py;\n      var u = ((x3 - x1) * px + (y3 - y1) * py) / something;\n\n      if (u > 1) {\n        u = 1;\n      } else if (u < 0) {\n        u = 0;\n      }\n\n      var x = x1 + u * px;\n      var y = y1 + u * py;\n      var dx = x - x3;\n      var dy = y - y3;\n\n      //# Note: If the actual distance does not matter,\n      //# if you only want to compare what this function\n      //# returns to other results of this function, you\n      //# can just return the squared distance instead\n      //# (i.e. remove the sqrt) to gain a little performance\n\n      return Math.sqrt(dx * dx + dy * dy);\n    }\n\n    /**\n     * @param {CanvasRenderingContext2D} ctx\n     * @param {string} position\n     * @param {Node} viaNode\n     * @param {boolean} selected\n     * @param {boolean} hover\n     * @param {Array} values\n     * @returns {{point: *, core: {x: number, y: number}, angle: *, length: number, type: *}}\n     */\n\n  }, {\n    key: 'getArrowData',\n    value: function getArrowData(ctx, position, viaNode, selected, hover, values) {\n      // set lets\n      var angle = void 0;\n      var arrowPoint = void 0;\n      var node1 = void 0;\n      var node2 = void 0;\n      var guideOffset = void 0;\n      var scaleFactor = void 0;\n      var type = void 0;\n      var lineWidth = values.width;\n\n      if (position === 'from') {\n        node1 = this.from;\n        node2 = this.to;\n        guideOffset = 0.1;\n        scaleFactor = values.fromArrowScale;\n        type = values.fromArrowType;\n      } else if (position === 'to') {\n        node1 = this.to;\n        node2 = this.from;\n        guideOffset = -0.1;\n        scaleFactor = values.toArrowScale;\n        type = values.toArrowType;\n      } else {\n        node1 = this.to;\n        node2 = this.from;\n        scaleFactor = values.middleArrowScale;\n        type = values.middleArrowType;\n      }\n\n      // if not connected to itself\n      if (node1 != node2) {\n        if (position !== 'middle') {\n          // draw arrow head\n          if (this.options.smooth.enabled === true) {\n            arrowPoint = this.findBorderPosition(node1, ctx, { via: viaNode });\n            var guidePos = this.getPoint(Math.max(0.0, Math.min(1.0, arrowPoint.t + guideOffset)), viaNode);\n            angle = Math.atan2(arrowPoint.y - guidePos.y, arrowPoint.x - guidePos.x);\n          } else {\n            angle = Math.atan2(node1.y - node2.y, node1.x - node2.x);\n            arrowPoint = this.findBorderPosition(node1, ctx);\n          }\n        } else {\n          angle = Math.atan2(node1.y - node2.y, node1.x - node2.x);\n          arrowPoint = this.getPoint(0.5, viaNode); // this is 0.6 to account for the size of the arrow.\n        }\n      } else {\n        // draw circle\n        var _getCircleData10 = this._getCircleData(ctx),\n            _getCircleData11 = (0, _slicedToArray3['default'])(_getCircleData10, 3),\n            x = _getCircleData11[0],\n            y = _getCircleData11[1],\n            radius = _getCircleData11[2];\n\n        if (position === 'from') {\n          arrowPoint = this.findBorderPosition(this.from, ctx, {\n            x: x,\n            y: y,\n            low: 0.25,\n            high: 0.6,\n            direction: -1\n          });\n          angle = arrowPoint.t * -2 * Math.PI + 1.5 * Math.PI + 0.1 * Math.PI;\n        } else if (position === 'to') {\n          arrowPoint = this.findBorderPosition(this.from, ctx, {\n            x: x,\n            y: y,\n            low: 0.6,\n            high: 1.0,\n            direction: 1\n          });\n          angle = arrowPoint.t * -2 * Math.PI + 1.5 * Math.PI - 1.1 * Math.PI;\n        } else {\n          arrowPoint = this._pointOnCircle(x, y, radius, 0.175);\n          angle = 3.9269908169872414; // === 0.175 * -2 * Math.PI + 1.5 * Math.PI + 0.1 * Math.PI;\n        }\n      }\n\n      if (position === 'middle' && scaleFactor < 0) lineWidth *= -1; // reversed middle arrow\n      var length = 15 * scaleFactor + 3 * lineWidth; // 3* lineWidth is the width of the edge.\n\n      var xi = arrowPoint.x - length * 0.9 * Math.cos(angle);\n      var yi = arrowPoint.y - length * 0.9 * Math.sin(angle);\n      var arrowCore = { x: xi, y: yi };\n\n      return {\n        point: arrowPoint,\n        core: arrowCore,\n        angle: angle,\n        length: length,\n        type: type\n      };\n    }\n\n    /**\n     *\n     * @param {CanvasRenderingContext2D} ctx\n     * @param {ArrowOptions} values\n     * @param {boolean} selected\n     * @param {boolean} hover\n     * @param {Object} arrowData\n     */\n\n  }, {\n    key: 'drawArrowHead',\n    value: function drawArrowHead(ctx, values, selected, hover, arrowData) {\n      // set style\n      ctx.strokeStyle = this.getColor(ctx, values, selected, hover);\n      ctx.fillStyle = ctx.strokeStyle;\n      ctx.lineWidth = values.width;\n\n      EndPoints.draw(ctx, arrowData);\n\n      // draw shadow if enabled\n      this.enableShadow(ctx, values);\n      ctx.fill();\n      // disable shadows for other elements.\n      this.disableShadow(ctx, values);\n    }\n\n    /**\n     *\n     * @param {CanvasRenderingContext2D} ctx\n     * @param {ArrowOptions} values\n     */\n\n  }, {\n    key: 'enableShadow',\n    value: function enableShadow(ctx, values) {\n      if (values.shadow === true) {\n        ctx.shadowColor = values.shadowColor;\n        ctx.shadowBlur = values.shadowSize;\n        ctx.shadowOffsetX = values.shadowX;\n        ctx.shadowOffsetY = values.shadowY;\n      }\n    }\n\n    /**\n     *\n     * @param {CanvasRenderingContext2D} ctx\n     * @param {ArrowOptions} values\n     */\n\n  }, {\n    key: 'disableShadow',\n    value: function disableShadow(ctx, values) {\n      if (values.shadow === true) {\n        ctx.shadowColor = 'rgba(0,0,0,0)';\n        ctx.shadowBlur = 0;\n        ctx.shadowOffsetX = 0;\n        ctx.shadowOffsetY = 0;\n      }\n    }\n\n    /**\n     *\n     * @param {CanvasRenderingContext2D} ctx\n     * @param {{toArrow: boolean, toArrowScale: (allOptions.edges.arrows.to.scaleFactor|{number}|allOptions.edges.arrows.middle.scaleFactor|allOptions.edges.arrows.from.scaleFactor|Array|number), toArrowType: *, middleArrow: boolean, middleArrowScale: (number|allOptions.edges.arrows.middle.scaleFactor|{number}|Array), middleArrowType: (allOptions.edges.arrows.middle.type|{string}|string|*), fromArrow: boolean, fromArrowScale: (allOptions.edges.arrows.to.scaleFactor|{number}|allOptions.edges.arrows.middle.scaleFactor|allOptions.edges.arrows.from.scaleFactor|Array|number), fromArrowType: *, arrowStrikethrough: (*|boolean|allOptions.edges.arrowStrikethrough|{boolean}), color: undefined, inheritsColor: (string|string|string|allOptions.edges.color.inherit|{string, boolean}|Array|*), opacity: *, hidden: *, length: *, shadow: *, shadowColor: *, shadowSize: *, shadowX: *, shadowY: *, dashes: (*|boolean|Array|allOptions.edges.dashes|{boolean, array}), width: *}} values\n     */\n\n  }, {\n    key: 'drawBackground',\n    value: function drawBackground(ctx, values) {\n      if (values.background !== false) {\n        var attrs = ['strokeStyle', 'lineWidth', 'dashes'];\n        var origCtxAttr = {};\n        // save original line attrs\n        attrs.forEach(function (attrname) {\n          origCtxAttr[attrname] = ctx[attrname];\n        });\n\n        ctx.strokeStyle = values.backgroundColor;\n        ctx.lineWidth = values.backgroundSize;\n        this.setStrokeDashed(ctx, values.backgroundDashes);\n\n        ctx.stroke();\n\n        // restore original line attrs\n        attrs.forEach(function (attrname) {\n          ctx[attrname] = origCtxAttr[attrname];\n        });\n        this.setStrokeDashed(ctx, values.dashes);\n      }\n    }\n\n    /**\n     *\n     * @param {CanvasRenderingContext2D} ctx\n     * @param {boolean|Array} dashes\n     */\n\n  }, {\n    key: 'setStrokeDashed',\n    value: function setStrokeDashed(ctx, dashes) {\n      if (dashes !== false) {\n        if (ctx.setLineDash !== undefined) {\n          var pattern = [5, 5];\n          if (Array.isArray(dashes) === true) {\n            pattern = dashes;\n          }\n          ctx.setLineDash(pattern);\n        } else {\n          console.warn('setLineDash is not supported in this browser. The dashed stroke cannot be used.');\n        }\n      } else {\n        if (ctx.setLineDash !== undefined) {\n          ctx.setLineDash([]);\n        } else {\n          console.warn('setLineDash is not supported in this browser. The dashed stroke cannot be used.');\n        }\n      }\n    }\n  }]);\n  return EdgeBase;\n}();\n\nexports['default'] = EdgeBase;\n\n/***/ }),\n/* 80 */\n/***/ (function(module, exports, __nested_webpack_require_329252__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _getPrototypeOf = __nested_webpack_require_329252__(3);\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _possibleConstructorReturn2 = __nested_webpack_require_329252__(4);\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = __nested_webpack_require_329252__(5);\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _classCallCheck2 = __nested_webpack_require_329252__(0);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __nested_webpack_require_329252__(1);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\n/** ============================================================================\n * Location of all the endpoint drawing routines.\n *\n * Every endpoint has its own drawing routine, which contains an endpoint definition.\n *\n * The endpoint definitions must have the following properies:\n *\n * - (0,0) is the connection point to the node it attaches to\n * - The endpoints are orientated to the positive x-direction\n * - The length of the endpoint is at most 1\n *\n * As long as the endpoint classes remain simple and not too numerous, they will\n * be contained within this module.\n * All classes here except `EndPoints` should be considered as private to this module.\n *\n * -----------------------------------------------------------------------------\n * ### Further Actions\n *\n * After adding a new endpoint here, you also need to do the following things:\n *\n * - Add the new endpoint name to `network/options.js` in array `endPoints`.\n * - Add the new endpoint name to the documentation.\n *   Scan for 'arrows.to.type` and add it to the description.\n * - Add the endpoint to the examples. At the very least, add it to example\n *   `edgeStyles/arrowTypes`.\n * ============================================================================= */\n\n/**\n * Common methods for endpoints\n *\n * @class\n */\nvar EndPoint = function () {\n  function EndPoint() {\n    (0, _classCallCheck3['default'])(this, EndPoint);\n  }\n\n  (0, _createClass3['default'])(EndPoint, null, [{\n    key: 'transform',\n\n    /**\n     * Apply transformation on points for display.\n     *\n     * The following is done:\n     * - rotate by the specified angle\n     * - multiply the (normalized) coordinates by the passed length\n     * - offset by the target coordinates\n     *\n     * @param {Array<Point>} points\n     * @param {ArrowData} arrowData\n     * @static\n     */\n    value: function transform(points, arrowData) {\n      if (!(points instanceof Array)) {\n        points = [points];\n      }\n\n      var x = arrowData.point.x;\n      var y = arrowData.point.y;\n      var angle = arrowData.angle;\n      var length = arrowData.length;\n\n      for (var i = 0; i < points.length; ++i) {\n        var p = points[i];\n        var xt = p.x * Math.cos(angle) - p.y * Math.sin(angle);\n        var yt = p.x * Math.sin(angle) + p.y * Math.cos(angle);\n\n        p.x = x + length * xt;\n        p.y = y + length * yt;\n      }\n    }\n\n    /**\n     * Draw a closed path using the given real coordinates.\n     *\n     * @param {CanvasRenderingContext2D} ctx\n     * @param {Array.<Point>} points\n     * @static\n     */\n\n  }, {\n    key: 'drawPath',\n    value: function drawPath(ctx, points) {\n      ctx.beginPath();\n      ctx.moveTo(points[0].x, points[0].y);\n      for (var i = 1; i < points.length; ++i) {\n        ctx.lineTo(points[i].x, points[i].y);\n      }\n      ctx.closePath();\n    }\n  }]);\n  return EndPoint;\n}();\n\n/**\n * Drawing methods for the arrow endpoint.\n * @extends EndPoint\n */\n\n\nvar Arrow = function (_EndPoint) {\n  (0, _inherits3['default'])(Arrow, _EndPoint);\n\n  function Arrow() {\n    (0, _classCallCheck3['default'])(this, Arrow);\n    return (0, _possibleConstructorReturn3['default'])(this, (Arrow.__proto__ || (0, _getPrototypeOf2['default'])(Arrow)).apply(this, arguments));\n  }\n\n  (0, _createClass3['default'])(Arrow, null, [{\n    key: 'draw',\n\n    /**\n     * Draw this shape at the end of a line.\n     *\n     * @param {CanvasRenderingContext2D} ctx\n     * @param {ArrowData} arrowData\n     * @static\n     */\n    value: function draw(ctx, arrowData) {\n      // Normalized points of closed path, in the order that they should be drawn.\n      // (0, 0) is the attachment point, and the point around which should be rotated\n      var points = [{ x: 0, y: 0 }, { x: -1, y: 0.3 }, { x: -0.9, y: 0 }, { x: -1, y: -0.3 }];\n\n      EndPoint.transform(points, arrowData);\n      EndPoint.drawPath(ctx, points);\n    }\n  }]);\n  return Arrow;\n}(EndPoint);\n\n/**\n * Drawing methods for the crow endpoint.\n * @extends EndPoint\n */\n\n\nvar Crow = function () {\n  function Crow() {\n    (0, _classCallCheck3['default'])(this, Crow);\n  }\n\n  (0, _createClass3['default'])(Crow, null, [{\n    key: 'draw',\n\n    /**\n     * Draw this shape at the end of a line.\n     *\n     * @param {CanvasRenderingContext2D} ctx\n     * @param {ArrowData} arrowData\n     * @static\n     */\n    value: function draw(ctx, arrowData) {\n      // Normalized points of closed path, in the order that they should be drawn.\n      // (0, 0) is the attachment point, and the point around which should be rotated\n      var points = [{ x: -1, y: 0 }, { x: 0, y: 0.3 }, { x: -0.4, y: 0 }, { x: 0, y: -0.3 }];\n\n      EndPoint.transform(points, arrowData);\n      EndPoint.drawPath(ctx, points);\n    }\n  }]);\n  return Crow;\n}();\n\n/**\n * Drawing methods for the curve endpoint.\n * @extends EndPoint\n */\n\n\nvar Curve = function () {\n  function Curve() {\n    (0, _classCallCheck3['default'])(this, Curve);\n  }\n\n  (0, _createClass3['default'])(Curve, null, [{\n    key: 'draw',\n\n    /**\n     * Draw this shape at the end of a line.\n     *\n     * @param {CanvasRenderingContext2D} ctx\n     * @param {ArrowData} arrowData\n     * @static\n     */\n    value: function draw(ctx, arrowData) {\n      // Normalized points of closed path, in the order that they should be drawn.\n      // (0, 0) is the attachment point, and the point around which should be rotated\n      var point = { x: -0.4, y: 0 };\n      EndPoint.transform(point, arrowData);\n\n      // Update endpoint style for drawing transparent arc.\n      ctx.strokeStyle = ctx.fillStyle;\n      ctx.fillStyle = 'rgba(0, 0, 0, 0)';\n\n      // Define curve endpoint as semicircle.\n      var pi = Math.PI;\n      var start_angle = arrowData.angle - pi / 2;\n      var end_angle = arrowData.angle + pi / 2;\n      ctx.beginPath();\n      ctx.arc(point.x, point.y, arrowData.length * 0.4, start_angle, end_angle, false);\n      ctx.stroke();\n    }\n  }]);\n  return Curve;\n}();\n\n/**\n * Drawing methods for the inverted curve endpoint.\n * @extends EndPoint\n */\n\n\nvar InvertedCurve = function () {\n  function InvertedCurve() {\n    (0, _classCallCheck3['default'])(this, InvertedCurve);\n  }\n\n  (0, _createClass3['default'])(InvertedCurve, null, [{\n    key: 'draw',\n\n    /**\n     * Draw this shape at the end of a line.\n     *\n     * @param {CanvasRenderingContext2D} ctx\n     * @param {ArrowData} arrowData\n     * @static\n     */\n    value: function draw(ctx, arrowData) {\n      // Normalized points of closed path, in the order that they should be drawn.\n      // (0, 0) is the attachment point, and the point around which should be rotated\n      var point = { x: -0.3, y: 0 };\n      EndPoint.transform(point, arrowData);\n\n      // Update endpoint style for drawing transparent arc.\n      ctx.strokeStyle = ctx.fillStyle;\n      ctx.fillStyle = 'rgba(0, 0, 0, 0)';\n\n      // Define inverted curve endpoint as semicircle.\n      var pi = Math.PI;\n      var start_angle = arrowData.angle + pi / 2;\n      var end_angle = arrowData.angle + 3 * pi / 2;\n      ctx.beginPath();\n      ctx.arc(point.x, point.y, arrowData.length * 0.4, start_angle, end_angle, false);\n      ctx.stroke();\n    }\n  }]);\n  return InvertedCurve;\n}();\n\n/**\n * Drawing methods for the trinagle endpoint.\n * @extends EndPoint\n */\n\n\nvar Triangle = function () {\n  function Triangle() {\n    (0, _classCallCheck3['default'])(this, Triangle);\n  }\n\n  (0, _createClass3['default'])(Triangle, null, [{\n    key: 'draw',\n\n    /**\n     * Draw this shape at the end of a line.\n     *\n     * @param {CanvasRenderingContext2D} ctx\n     * @param {ArrowData} arrowData\n     * @static\n     */\n    value: function draw(ctx, arrowData) {\n      // Normalized points of closed path, in the order that they should be drawn.\n      // (0, 0) is the attachment point, and the point around which should be rotated\n      var points = [{ x: 0.02, y: 0 }, { x: -1, y: 0.3 }, { x: -1, y: -0.3 }];\n\n      EndPoint.transform(points, arrowData);\n      EndPoint.drawPath(ctx, points);\n    }\n  }]);\n  return Triangle;\n}();\n\n/**\n * Drawing methods for the inverted trinagle endpoint.\n * @extends EndPoint\n */\n\n\nvar InvertedTriangle = function () {\n  function InvertedTriangle() {\n    (0, _classCallCheck3['default'])(this, InvertedTriangle);\n  }\n\n  (0, _createClass3['default'])(InvertedTriangle, null, [{\n    key: 'draw',\n\n    /**\n     * Draw this shape at the end of a line.\n     *\n     * @param {CanvasRenderingContext2D} ctx\n     * @param {ArrowData} arrowData\n     * @static\n     */\n    value: function draw(ctx, arrowData) {\n      // Normalized points of closed path, in the order that they should be drawn.\n      // (0, 0) is the attachment point, and the point around which should be rotated\n      var points = [{ x: 0, y: 0.3 }, { x: 0, y: -0.3 }, { x: -1, y: 0 }];\n\n      EndPoint.transform(points, arrowData);\n      EndPoint.drawPath(ctx, points);\n    }\n  }]);\n  return InvertedTriangle;\n}();\n\n/**\n * Drawing methods for the circle endpoint.\n */\n\n\nvar Circle = function () {\n  function Circle() {\n    (0, _classCallCheck3['default'])(this, Circle);\n  }\n\n  (0, _createClass3['default'])(Circle, null, [{\n    key: 'draw',\n\n    /**\n     * Draw this shape at the end of a line.\n     *\n     * @param {CanvasRenderingContext2D} ctx\n     * @param {ArrowData} arrowData\n     * @static\n     */\n    value: function draw(ctx, arrowData) {\n      var point = { x: -0.4, y: 0 };\n\n      EndPoint.transform(point, arrowData);\n      ctx.circle(point.x, point.y, arrowData.length * 0.4);\n    }\n  }]);\n  return Circle;\n}();\n\n/**\n * Drawing methods for the bar endpoint.\n */\n\n\nvar Bar = function () {\n  function Bar() {\n    (0, _classCallCheck3['default'])(this, Bar);\n  }\n\n  (0, _createClass3['default'])(Bar, null, [{\n    key: 'draw',\n\n    /**\n     * Draw this shape at the end of a line.\n     *\n     * @param {CanvasRenderingContext2D} ctx\n     * @param {ArrowData} arrowData\n     * @static\n     */\n    value: function draw(ctx, arrowData) {\n      /*\n      var points = [\n        {x:0, y:0.5},\n        {x:0, y:-0.5}\n      ];\n       EndPoint.transform(points, arrowData);\n      ctx.beginPath();\n      ctx.moveTo(points[0].x, points[0].y);\n      ctx.lineTo(points[1].x, points[1].y);\n      ctx.stroke();\n      */\n\n      var points = [{ x: 0, y: 0.5 }, { x: 0, y: -0.5 }, { x: -0.15, y: -0.5 }, { x: -0.15, y: 0.5 }];\n\n      EndPoint.transform(points, arrowData);\n      EndPoint.drawPath(ctx, points);\n    }\n  }]);\n  return Bar;\n}();\n\n/**\n * Drawing methods for the box endpoint.\n */\n\n\nvar Box = function () {\n  function Box() {\n    (0, _classCallCheck3['default'])(this, Box);\n  }\n\n  (0, _createClass3['default'])(Box, null, [{\n    key: 'draw',\n\n    /**\n     * Draw this shape at the end of a line.\n     *\n     * @param {CanvasRenderingContext2D} ctx\n     * @param {ArrowData} arrowData\n     * @static\n     */\n    value: function draw(ctx, arrowData) {\n      var points = [{ x: 0, y: 0.3 }, { x: 0, y: -0.3 }, { x: -0.6, y: -0.3 }, { x: -0.6, y: 0.3 }];\n\n      EndPoint.transform(points, arrowData);\n      EndPoint.drawPath(ctx, points);\n    }\n  }]);\n  return Box;\n}();\n\n/**\n * Drawing methods for the diamond endpoint.\n */\n\n\nvar Diamond = function () {\n  function Diamond() {\n    (0, _classCallCheck3['default'])(this, Diamond);\n  }\n\n  (0, _createClass3['default'])(Diamond, null, [{\n    key: 'draw',\n\n    /**\n     * Draw this shape at the end of a line.\n     *\n     * @param {CanvasRenderingContext2D} ctx\n     * @param {ArrowData} arrowData\n     * @static\n     */\n    value: function draw(ctx, arrowData) {\n      var points = [{ x: 0, y: 0 }, { x: -0.5, y: -0.3 }, { x: -1, y: 0 }, { x: -0.5, y: 0.3 }];\n\n      EndPoint.transform(points, arrowData);\n      EndPoint.drawPath(ctx, points);\n    }\n  }]);\n  return Diamond;\n}();\n\n/**\n * Drawing methods for the vee endpoint.\n * @extends EndPoint\n */\n\n\nvar Vee = function () {\n  function Vee() {\n    (0, _classCallCheck3['default'])(this, Vee);\n  }\n\n  (0, _createClass3['default'])(Vee, null, [{\n    key: 'draw',\n\n    /**\n     * Draw this shape at the end of a line.\n     *\n     * @param {CanvasRenderingContext2D} ctx\n     * @param {ArrowData} arrowData\n     * @static\n     */\n    value: function draw(ctx, arrowData) {\n      // Normalized points of closed path, in the order that they should be drawn.\n      // (0, 0) is the attachment point, and the point around which should be rotated\n      var points = [{ x: -1, y: 0.3 }, { x: -0.5, y: 0 }, { x: -1, y: -0.3 }, { x: 0, y: 0 }];\n\n      EndPoint.transform(points, arrowData);\n      EndPoint.drawPath(ctx, points);\n    }\n  }]);\n  return Vee;\n}();\n\n/**\n * Drawing methods for the endpoints.\n */\n\n\nvar EndPoints = function () {\n  function EndPoints() {\n    (0, _classCallCheck3['default'])(this, EndPoints);\n  }\n\n  (0, _createClass3['default'])(EndPoints, null, [{\n    key: 'draw',\n\n    /**\n     * Draw an endpoint\n     *\n     * @param {CanvasRenderingContext2D} ctx\n     * @param {ArrowData} arrowData\n     * @static\n     */\n    value: function draw(ctx, arrowData) {\n      var type;\n      if (arrowData.type) {\n        type = arrowData.type.toLowerCase();\n      }\n\n      switch (type) {\n        case 'circle':\n          Circle.draw(ctx, arrowData);\n          break;\n        case 'box':\n          Box.draw(ctx, arrowData);\n          break;\n        case 'crow':\n          Crow.draw(ctx, arrowData);\n          break;\n        case 'curve':\n          Curve.draw(ctx, arrowData);\n          break;\n        case 'diamond':\n          Diamond.draw(ctx, arrowData);\n          break;\n        case 'inv_curve':\n          InvertedCurve.draw(ctx, arrowData);\n          break;\n        case 'triangle':\n          Triangle.draw(ctx, arrowData);\n          break;\n        case 'inv_triangle':\n          InvertedTriangle.draw(ctx, arrowData);\n          break;\n        case 'bar':\n          Bar.draw(ctx, arrowData);\n          break;\n        case 'vee':\n          Vee.draw(ctx, arrowData);\n          break;\n        case 'arrow': // fall-through\n        default:\n          Arrow.draw(ctx, arrowData);\n      }\n    }\n  }]);\n  return EndPoints;\n}();\n\nexports['default'] = EndPoints;\n\n/***/ }),\n/* 81 */\n/***/ (function(module, exports, __nested_webpack_require_344088__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _classCallCheck2 = __nested_webpack_require_344088__(0);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __nested_webpack_require_344088__(1);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\n/**\n * Barnes Hut Solver\n */\nvar BarnesHutSolver = function () {\n  /**\n   * @param {Object} body\n   * @param {{physicsNodeIndices: Array, physicsEdgeIndices: Array, forces: {}, velocities: {}}} physicsBody\n   * @param {Object} options\n   */\n  function BarnesHutSolver(body, physicsBody, options) {\n    (0, _classCallCheck3['default'])(this, BarnesHutSolver);\n\n    this.body = body;\n    this.physicsBody = physicsBody;\n    this.barnesHutTree;\n    this.setOptions(options);\n    this.randomSeed = 5;\n\n    // debug: show grid\n    // this.body.emitter.on(\"afterDrawing\", (ctx) => {this._debug(ctx,'#ff0000')})\n  }\n\n  /**\n   *\n   * @param {Object} options\n   */\n\n\n  (0, _createClass3['default'])(BarnesHutSolver, [{\n    key: 'setOptions',\n    value: function setOptions(options) {\n      this.options = options;\n      this.thetaInversed = 1 / this.options.theta;\n\n      // if 1 then min distance = 0.5, if 0.5 then min distance = 0.5 + 0.5*node.shape.radius\n      this.overlapAvoidanceFactor = 1 - Math.max(0, Math.min(1, this.options.avoidOverlap));\n    }\n\n    /**\n     *\n     * @returns {number} random integer\n     */\n\n  }, {\n    key: 'seededRandom',\n    value: function seededRandom() {\n      var x = Math.sin(this.randomSeed++) * 10000;\n      return x - Math.floor(x);\n    }\n\n    /**\n     * This function calculates the forces the nodes apply on each other based on a gravitational model.\n     * The Barnes Hut method is used to speed up this N-body simulation.\n     *\n     * @private\n     */\n\n  }, {\n    key: 'solve',\n    value: function solve() {\n      if (this.options.gravitationalConstant !== 0 && this.physicsBody.physicsNodeIndices.length > 0) {\n        var node = void 0;\n        var nodes = this.body.nodes;\n        var nodeIndices = this.physicsBody.physicsNodeIndices;\n        var nodeCount = nodeIndices.length;\n\n        // create the tree\n        var barnesHutTree = this._formBarnesHutTree(nodes, nodeIndices);\n\n        // for debugging\n        this.barnesHutTree = barnesHutTree;\n\n        // place the nodes one by one recursively\n        for (var i = 0; i < nodeCount; i++) {\n          node = nodes[nodeIndices[i]];\n          if (node.options.mass > 0) {\n            // starting with root is irrelevant, it never passes the BarnesHutSolver condition\n            this._getForceContributions(barnesHutTree.root, node);\n          }\n        }\n      }\n    }\n\n    /**\n     * @param {Object} parentBranch\n     * @param {Node} node\n     * @private\n     */\n\n  }, {\n    key: '_getForceContributions',\n    value: function _getForceContributions(parentBranch, node) {\n      this._getForceContribution(parentBranch.children.NW, node);\n      this._getForceContribution(parentBranch.children.NE, node);\n      this._getForceContribution(parentBranch.children.SW, node);\n      this._getForceContribution(parentBranch.children.SE, node);\n    }\n\n    /**\n     * This function traverses the barnesHutTree. It checks when it can approximate distant nodes with their center of mass.\n     * If a region contains a single node, we check if it is not itself, then we apply the force.\n     *\n     * @param {Object} parentBranch\n     * @param {Node} node\n     * @private\n     */\n\n  }, {\n    key: '_getForceContribution',\n    value: function _getForceContribution(parentBranch, node) {\n      // we get no force contribution from an empty region\n      if (parentBranch.childrenCount > 0) {\n        var dx = void 0,\n            dy = void 0,\n            distance = void 0;\n\n        // get the distance from the center of mass to the node.\n        dx = parentBranch.centerOfMass.x - node.x;\n        dy = parentBranch.centerOfMass.y - node.y;\n        distance = Math.sqrt(dx * dx + dy * dy);\n\n        // BarnesHutSolver condition\n        // original condition : s/d < theta = passed  ===  d/s > 1/theta = passed\n        // calcSize = 1/s --> d * 1/s > 1/theta = passed\n        if (distance * parentBranch.calcSize > this.thetaInversed) {\n          this._calculateForces(distance, dx, dy, node, parentBranch);\n        } else {\n          // Did not pass the condition, go into children if available\n          if (parentBranch.childrenCount === 4) {\n            this._getForceContributions(parentBranch, node);\n          } else {\n            // parentBranch must have only one node, if it was empty we wouldnt be here\n            if (parentBranch.children.data.id != node.id) {\n              // if it is not self\n              this._calculateForces(distance, dx, dy, node, parentBranch);\n            }\n          }\n        }\n      }\n    }\n\n    /**\n     * Calculate the forces based on the distance.\n     *\n     * @param {number} distance\n     * @param {number} dx\n     * @param {number} dy\n     * @param {Node} node\n     * @param {Object} parentBranch\n     * @private\n     */\n\n  }, {\n    key: '_calculateForces',\n    value: function _calculateForces(distance, dx, dy, node, parentBranch) {\n      if (distance === 0) {\n        distance = 0.1;\n        dx = distance;\n      }\n\n      if (this.overlapAvoidanceFactor < 1 && node.shape.radius) {\n        distance = Math.max(0.1 + this.overlapAvoidanceFactor * node.shape.radius, distance - node.shape.radius);\n      }\n\n      // the dividing by the distance cubed instead of squared allows us to get the fx and fy components without sines and cosines\n      // it is shorthand for gravityforce with distance squared and fx = dx/distance * gravityForce\n      var gravityForce = this.options.gravitationalConstant * parentBranch.mass * node.options.mass / Math.pow(distance, 3);\n      var fx = dx * gravityForce;\n      var fy = dy * gravityForce;\n\n      this.physicsBody.forces[node.id].x += fx;\n      this.physicsBody.forces[node.id].y += fy;\n    }\n\n    /**\n     * This function constructs the barnesHut tree recursively. It creates the root, splits it and starts placing the nodes.\n     *\n     * @param {Array.<Node>} nodes\n     * @param {Array.<number>} nodeIndices\n     * @returns {{root: {centerOfMass: {x: number, y: number}, mass: number, range: {minX: number, maxX: number, minY: number, maxY: number}, size: number, calcSize: number, children: {data: null}, maxWidth: number, level: number, childrenCount: number}}} BarnesHutTree\n     * @private\n     */\n\n  }, {\n    key: '_formBarnesHutTree',\n    value: function _formBarnesHutTree(nodes, nodeIndices) {\n      var node = void 0;\n      var nodeCount = nodeIndices.length;\n\n      var minX = nodes[nodeIndices[0]].x;\n      var minY = nodes[nodeIndices[0]].y;\n      var maxX = nodes[nodeIndices[0]].x;\n      var maxY = nodes[nodeIndices[0]].y;\n\n      // get the range of the nodes\n      for (var i = 1; i < nodeCount; i++) {\n        var _node = nodes[nodeIndices[i]];\n        var x = _node.x;\n        var y = _node.y;\n        if (_node.options.mass > 0) {\n          if (x < minX) {\n            minX = x;\n          }\n          if (x > maxX) {\n            maxX = x;\n          }\n          if (y < minY) {\n            minY = y;\n          }\n          if (y > maxY) {\n            maxY = y;\n          }\n        }\n      }\n      // make the range a square\n      var sizeDiff = Math.abs(maxX - minX) - Math.abs(maxY - minY); // difference between X and Y\n      if (sizeDiff > 0) {\n        minY -= 0.5 * sizeDiff;\n        maxY += 0.5 * sizeDiff;\n      } // xSize > ySize\n      else {\n          minX += 0.5 * sizeDiff;\n          maxX -= 0.5 * sizeDiff;\n        } // xSize < ySize\n\n      var minimumTreeSize = 1e-5;\n      var rootSize = Math.max(minimumTreeSize, Math.abs(maxX - minX));\n      var halfRootSize = 0.5 * rootSize;\n      var centerX = 0.5 * (minX + maxX),\n          centerY = 0.5 * (minY + maxY);\n\n      // construct the barnesHutTree\n      var barnesHutTree = {\n        root: {\n          centerOfMass: { x: 0, y: 0 },\n          mass: 0,\n          range: {\n            minX: centerX - halfRootSize,\n            maxX: centerX + halfRootSize,\n            minY: centerY - halfRootSize,\n            maxY: centerY + halfRootSize\n          },\n          size: rootSize,\n          calcSize: 1 / rootSize,\n          children: { data: null },\n          maxWidth: 0,\n          level: 0,\n          childrenCount: 4\n        }\n      };\n      this._splitBranch(barnesHutTree.root);\n\n      // place the nodes one by one recursively\n      for (var _i = 0; _i < nodeCount; _i++) {\n        node = nodes[nodeIndices[_i]];\n        if (node.options.mass > 0) {\n          this._placeInTree(barnesHutTree.root, node);\n        }\n      }\n\n      // make global\n      return barnesHutTree;\n    }\n\n    /**\n     * this updates the mass of a branch. this is increased by adding a node.\n     *\n     * @param {Object} parentBranch\n     * @param {Node} node\n     * @private\n     */\n\n  }, {\n    key: '_updateBranchMass',\n    value: function _updateBranchMass(parentBranch, node) {\n      var centerOfMass = parentBranch.centerOfMass;\n      var totalMass = parentBranch.mass + node.options.mass;\n      var totalMassInv = 1 / totalMass;\n\n      centerOfMass.x = centerOfMass.x * parentBranch.mass + node.x * node.options.mass;\n      centerOfMass.x *= totalMassInv;\n\n      centerOfMass.y = centerOfMass.y * parentBranch.mass + node.y * node.options.mass;\n      centerOfMass.y *= totalMassInv;\n\n      parentBranch.mass = totalMass;\n      var biggestSize = Math.max(Math.max(node.height, node.radius), node.width);\n      parentBranch.maxWidth = parentBranch.maxWidth < biggestSize ? biggestSize : parentBranch.maxWidth;\n    }\n\n    /**\n     * determine in which branch the node will be placed.\n     *\n     * @param {Object} parentBranch\n     * @param {Node} node\n     * @param {boolean} skipMassUpdate\n     * @private\n     */\n\n  }, {\n    key: '_placeInTree',\n    value: function _placeInTree(parentBranch, node, skipMassUpdate) {\n      if (skipMassUpdate != true || skipMassUpdate === undefined) {\n        // update the mass of the branch.\n        this._updateBranchMass(parentBranch, node);\n      }\n\n      var range = parentBranch.children.NW.range;\n      var region = void 0;\n      if (range.maxX > node.x) {\n        // in NW or SW\n        if (range.maxY > node.y) {\n          region = 'NW';\n        } else {\n          region = 'SW';\n        }\n      } else {\n        // in NE or SE\n        if (range.maxY > node.y) {\n          region = 'NE';\n        } else {\n          region = 'SE';\n        }\n      }\n\n      this._placeInRegion(parentBranch, node, region);\n    }\n\n    /**\n     * actually place the node in a region (or branch)\n     *\n     * @param {Object} parentBranch\n     * @param {Node} node\n     * @param {'NW'| 'NE' | 'SW' | 'SE'} region\n     * @private\n     */\n\n  }, {\n    key: '_placeInRegion',\n    value: function _placeInRegion(parentBranch, node, region) {\n      var children = parentBranch.children[region];\n\n      switch (children.childrenCount) {\n        case 0:\n          // place node here\n          children.children.data = node;\n          children.childrenCount = 1;\n          this._updateBranchMass(children, node);\n          break;\n        case 1:\n          // convert into children\n          // if there are two nodes exactly overlapping (on init, on opening of cluster etc.)\n          // we move one node a little bit and we do not put it in the tree.\n          if (children.children.data.x === node.x && children.children.data.y === node.y) {\n            node.x += this.seededRandom();\n            node.y += this.seededRandom();\n          } else {\n            this._splitBranch(children);\n            this._placeInTree(children, node);\n          }\n          break;\n        case 4:\n          // place in branch\n          this._placeInTree(children, node);\n          break;\n      }\n    }\n\n    /**\n     * this function splits a branch into 4 sub branches. If the branch contained a node, we place it in the subbranch\n     * after the split is complete.\n     *\n     * @param {Object} parentBranch\n     * @private\n     */\n\n  }, {\n    key: '_splitBranch',\n    value: function _splitBranch(parentBranch) {\n      // if the branch is shaded with a node, replace the node in the new subset.\n      var containedNode = null;\n      if (parentBranch.childrenCount === 1) {\n        containedNode = parentBranch.children.data;\n        parentBranch.mass = 0;\n        parentBranch.centerOfMass.x = 0;\n        parentBranch.centerOfMass.y = 0;\n      }\n      parentBranch.childrenCount = 4;\n      parentBranch.children.data = null;\n      this._insertRegion(parentBranch, 'NW');\n      this._insertRegion(parentBranch, 'NE');\n      this._insertRegion(parentBranch, 'SW');\n      this._insertRegion(parentBranch, 'SE');\n\n      if (containedNode != null) {\n        this._placeInTree(parentBranch, containedNode);\n      }\n    }\n\n    /**\n     * This function subdivides the region into four new segments.\n     * Specifically, this inserts a single new segment.\n     * It fills the children section of the parentBranch\n     *\n     * @param {Object} parentBranch\n     * @param {'NW'| 'NE' | 'SW' | 'SE'} region\n     * @private\n     */\n\n  }, {\n    key: '_insertRegion',\n    value: function _insertRegion(parentBranch, region) {\n      var minX = void 0,\n          maxX = void 0,\n          minY = void 0,\n          maxY = void 0;\n      var childSize = 0.5 * parentBranch.size;\n      switch (region) {\n        case 'NW':\n          minX = parentBranch.range.minX;\n          maxX = parentBranch.range.minX + childSize;\n          minY = parentBranch.range.minY;\n          maxY = parentBranch.range.minY + childSize;\n          break;\n        case 'NE':\n          minX = parentBranch.range.minX + childSize;\n          maxX = parentBranch.range.maxX;\n          minY = parentBranch.range.minY;\n          maxY = parentBranch.range.minY + childSize;\n          break;\n        case 'SW':\n          minX = parentBranch.range.minX;\n          maxX = parentBranch.range.minX + childSize;\n          minY = parentBranch.range.minY + childSize;\n          maxY = parentBranch.range.maxY;\n          break;\n        case 'SE':\n          minX = parentBranch.range.minX + childSize;\n          maxX = parentBranch.range.maxX;\n          minY = parentBranch.range.minY + childSize;\n          maxY = parentBranch.range.maxY;\n          break;\n      }\n\n      parentBranch.children[region] = {\n        centerOfMass: { x: 0, y: 0 },\n        mass: 0,\n        range: { minX: minX, maxX: maxX, minY: minY, maxY: maxY },\n        size: 0.5 * parentBranch.size,\n        calcSize: 2 * parentBranch.calcSize,\n        children: { data: null },\n        maxWidth: 0,\n        level: parentBranch.level + 1,\n        childrenCount: 0\n      };\n    }\n\n    //---------------------------  DEBUGGING BELOW  ---------------------------//\n\n    /**\n     * This function is for debugging purposed, it draws the tree.\n     *\n     * @param {CanvasRenderingContext2D} ctx\n     * @param {string} color\n     * @private\n     */\n\n  }, {\n    key: '_debug',\n    value: function _debug(ctx, color) {\n      if (this.barnesHutTree !== undefined) {\n        ctx.lineWidth = 1;\n\n        this._drawBranch(this.barnesHutTree.root, ctx, color);\n      }\n    }\n\n    /**\n     * This function is for debugging purposes. It draws the branches recursively.\n     *\n     * @param {Object} branch\n     * @param {CanvasRenderingContext2D} ctx\n     * @param {string} color\n     * @private\n     */\n\n  }, {\n    key: '_drawBranch',\n    value: function _drawBranch(branch, ctx, color) {\n      if (color === undefined) {\n        color = '#FF0000';\n      }\n\n      if (branch.childrenCount === 4) {\n        this._drawBranch(branch.children.NW, ctx);\n        this._drawBranch(branch.children.NE, ctx);\n        this._drawBranch(branch.children.SE, ctx);\n        this._drawBranch(branch.children.SW, ctx);\n      }\n      ctx.strokeStyle = color;\n      ctx.beginPath();\n      ctx.moveTo(branch.range.minX, branch.range.minY);\n      ctx.lineTo(branch.range.maxX, branch.range.minY);\n      ctx.stroke();\n\n      ctx.beginPath();\n      ctx.moveTo(branch.range.maxX, branch.range.minY);\n      ctx.lineTo(branch.range.maxX, branch.range.maxY);\n      ctx.stroke();\n\n      ctx.beginPath();\n      ctx.moveTo(branch.range.maxX, branch.range.maxY);\n      ctx.lineTo(branch.range.minX, branch.range.maxY);\n      ctx.stroke();\n\n      ctx.beginPath();\n      ctx.moveTo(branch.range.minX, branch.range.maxY);\n      ctx.lineTo(branch.range.minX, branch.range.minY);\n      ctx.stroke();\n\n      /*\n       if (branch.mass > 0) {\n       ctx.circle(branch.centerOfMass.x, branch.centerOfMass.y, 3*branch.mass);\n       ctx.stroke();\n       }\n       */\n    }\n  }]);\n  return BarnesHutSolver;\n}();\n\nexports['default'] = BarnesHutSolver;\n\n/***/ }),\n/* 82 */\n/***/ (function(module, exports, __nested_webpack_require_361002__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _classCallCheck2 = __nested_webpack_require_361002__(0);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __nested_webpack_require_361002__(1);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\n/**\n * Central Gravity Solver\n */\nvar CentralGravitySolver = function () {\n  /**\n   * @param {Object} body\n   * @param {{physicsNodeIndices: Array, physicsEdgeIndices: Array, forces: {}, velocities: {}}} physicsBody\n   * @param {Object} options\n   */\n  function CentralGravitySolver(body, physicsBody, options) {\n    (0, _classCallCheck3[\"default\"])(this, CentralGravitySolver);\n\n    this.body = body;\n    this.physicsBody = physicsBody;\n    this.setOptions(options);\n  }\n\n  /**\n   *\n   * @param {Object} options\n   */\n\n\n  (0, _createClass3[\"default\"])(CentralGravitySolver, [{\n    key: \"setOptions\",\n    value: function setOptions(options) {\n      this.options = options;\n    }\n\n    /**\n     * Calculates forces for each node\n     */\n\n  }, {\n    key: \"solve\",\n    value: function solve() {\n      var dx = void 0,\n          dy = void 0,\n          distance = void 0,\n          node = void 0;\n      var nodes = this.body.nodes;\n      var nodeIndices = this.physicsBody.physicsNodeIndices;\n      var forces = this.physicsBody.forces;\n\n      for (var i = 0; i < nodeIndices.length; i++) {\n        var nodeId = nodeIndices[i];\n        node = nodes[nodeId];\n        dx = -node.x;\n        dy = -node.y;\n        distance = Math.sqrt(dx * dx + dy * dy);\n\n        this._calculateForces(distance, dx, dy, forces, node);\n      }\n    }\n\n    /**\n     * Calculate the forces based on the distance.\n     * @param {number} distance\n     * @param {number} dx\n     * @param {number} dy\n     * @param {Object<Node.id, vis.Node>} forces\n     * @param {Node} node\n     * @private\n     */\n\n  }, {\n    key: \"_calculateForces\",\n    value: function _calculateForces(distance, dx, dy, forces, node) {\n      var gravityForce = distance === 0 ? 0 : this.options.centralGravity / distance;\n      forces[node.id].x = dx * gravityForce;\n      forces[node.id].y = dy * gravityForce;\n    }\n  }]);\n  return CentralGravitySolver;\n}();\n\nexports[\"default\"] = CentralGravitySolver;\n\n/***/ }),\n/* 83 */\n/***/ (function(module, exports, __nested_webpack_require_363422__) {\n\nmodule.exports = __nested_webpack_require_363422__(188);\n\n/***/ }),\n/* 84 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * This object contains all possible options. It will check if the types are correct, if required if the option is one\n * of the allowed values.\n *\n * __any__ means that the name of the property does not matter.\n * __type__ is a required field for all objects and contains the allowed types of all objects\n */\nvar string = 'string';\nvar bool = 'boolean';\nvar number = 'number';\nvar array = 'array';\nvar object = 'object'; // should only be in a __type__ property\nvar dom = 'dom';\nvar any = 'any';\n\n// List of endpoints\nvar endPoints = ['arrow', 'circle', 'bar'];\n\nvar allOptions = {\n  configure: {\n    enabled: { boolean: bool },\n    filter: { boolean: bool, string: string, array: array, 'function': 'function' },\n    container: { dom: dom },\n    showButton: { boolean: bool },\n    __type__: { object: object, boolean: bool, string: string, array: array, 'function': 'function' }\n  },\n  edges: {\n    arrows: {\n      to: {\n        enabled: { boolean: bool },\n        scaleFactor: { number: number },\n        type: { string: endPoints },\n        __type__: { object: object, boolean: bool }\n      },\n      middle: {\n        enabled: { boolean: bool },\n        scaleFactor: { number: number },\n        type: { string: endPoints },\n        __type__: { object: object, boolean: bool }\n      },\n      from: {\n        enabled: { boolean: bool },\n        scaleFactor: { number: number },\n        type: { string: endPoints },\n        __type__: { object: object, boolean: bool }\n      },\n      __type__: { string: ['from', 'to', 'middle'], object: object }\n    },\n    arrowStrikethrough: { boolean: bool },\n    background: {\n      enabled: { boolean: bool },\n      color: { string: string },\n      size: { number: number },\n      dashes: { boolean: bool, array: array },\n      __type__: { object: object, boolean: bool }\n    },\n    chosen: {\n      label: { boolean: bool, 'function': 'function' },\n      edge: { boolean: bool, 'function': 'function' },\n      __type__: { object: object, boolean: bool }\n    },\n    color: {\n      color: { string: string },\n      highlight: { string: string },\n      hover: { string: string },\n      inherit: { string: ['from', 'to', 'both'], boolean: bool },\n      opacity: { number: number },\n      __type__: { object: object, string: string }\n    },\n    dashes: { boolean: bool, array: array },\n    font: {\n      color: { string: string },\n      size: { number: number }, // px\n      face: { string: string },\n      background: { string: string },\n      strokeWidth: { number: number }, // px\n      strokeColor: { string: string },\n      align: { string: ['horizontal', 'top', 'middle', 'bottom'] },\n      vadjust: { number: number },\n      multi: { boolean: bool, string: string },\n      bold: {\n        color: { string: string },\n        size: { number: number }, // px\n        face: { string: string },\n        mod: { string: string },\n        vadjust: { number: number },\n        __type__: { object: object, string: string }\n      },\n      boldital: {\n        color: { string: string },\n        size: { number: number }, // px\n        face: { string: string },\n        mod: { string: string },\n        vadjust: { number: number },\n        __type__: { object: object, string: string }\n      },\n      ital: {\n        color: { string: string },\n        size: { number: number }, // px\n        face: { string: string },\n        mod: { string: string },\n        vadjust: { number: number },\n        __type__: { object: object, string: string }\n      },\n      mono: {\n        color: { string: string },\n        size: { number: number }, // px\n        face: { string: string },\n        mod: { string: string },\n        vadjust: { number: number },\n        __type__: { object: object, string: string }\n      },\n      __type__: { object: object, string: string }\n    },\n    hidden: { boolean: bool },\n    hoverWidth: { 'function': 'function', number: number },\n    label: { string: string, undefined: 'undefined' },\n    labelHighlightBold: { boolean: bool },\n    length: { number: number, undefined: 'undefined' },\n    physics: { boolean: bool },\n    scaling: {\n      min: { number: number },\n      max: { number: number },\n      label: {\n        enabled: { boolean: bool },\n        min: { number: number },\n        max: { number: number },\n        maxVisible: { number: number },\n        drawThreshold: { number: number },\n        __type__: { object: object, boolean: bool }\n      },\n      customScalingFunction: { 'function': 'function' },\n      __type__: { object: object }\n    },\n    selectionWidth: { 'function': 'function', number: number },\n    selfReferenceSize: { number: number },\n    shadow: {\n      enabled: { boolean: bool },\n      color: { string: string },\n      size: { number: number },\n      x: { number: number },\n      y: { number: number },\n      __type__: { object: object, boolean: bool }\n    },\n    smooth: {\n      enabled: { boolean: bool },\n      type: {\n        string: ['dynamic', 'continuous', 'discrete', 'diagonalCross', 'straightCross', 'horizontal', 'vertical', 'curvedCW', 'curvedCCW', 'cubicBezier']\n      },\n      roundness: { number: number },\n      forceDirection: {\n        string: ['horizontal', 'vertical', 'none'],\n        boolean: bool\n      },\n      __type__: { object: object, boolean: bool }\n    },\n    title: { string: string, undefined: 'undefined' },\n    width: { number: number },\n    widthConstraint: {\n      maximum: { number: number },\n      __type__: { object: object, boolean: bool, number: number }\n    },\n    value: { number: number, undefined: 'undefined' },\n    __type__: { object: object }\n  },\n  groups: {\n    useDefaultGroups: { boolean: bool },\n    __any__: 'get from nodes, will be overwritten below',\n    __type__: { object: object }\n  },\n  interaction: {\n    dragNodes: { boolean: bool },\n    dragView: { boolean: bool },\n    hideEdgesOnDrag: { boolean: bool },\n    hideEdgesOnZoom: { boolean: bool },\n    hideNodesOnDrag: { boolean: bool },\n    hover: { boolean: bool },\n    keyboard: {\n      enabled: { boolean: bool },\n      speed: {\n        x: { number: number },\n        y: { number: number },\n        zoom: { number: number },\n        __type__: { object: object }\n      },\n      bindToWindow: { boolean: bool },\n      __type__: { object: object, boolean: bool }\n    },\n    multiselect: { boolean: bool },\n    navigationButtons: { boolean: bool },\n    selectable: { boolean: bool },\n    selectConnectedEdges: { boolean: bool },\n    hoverConnectedEdges: { boolean: bool },\n    tooltipDelay: { number: number },\n    zoomView: { boolean: bool },\n    zoomSpeed: { number: number },\n    __type__: { object: object }\n  },\n  layout: {\n    randomSeed: { undefined: 'undefined', number: number },\n    improvedLayout: { boolean: bool },\n    hierarchical: {\n      enabled: { boolean: bool },\n      levelSeparation: { number: number },\n      nodeSpacing: { number: number },\n      treeSpacing: { number: number },\n      blockShifting: { boolean: bool },\n      edgeMinimization: { boolean: bool },\n      parentCentralization: { boolean: bool },\n      direction: { string: ['UD', 'DU', 'LR', 'RL'] }, // UD, DU, LR, RL\n      sortMethod: { string: ['hubsize', 'directed'] }, // hubsize, directed\n      __type__: { object: object, boolean: bool }\n    },\n    __type__: { object: object }\n  },\n  manipulation: {\n    enabled: { boolean: bool },\n    initiallyActive: { boolean: bool },\n    addNode: { boolean: bool, 'function': 'function' },\n    addEdge: { boolean: bool, 'function': 'function' },\n    editNode: { 'function': 'function' },\n    editEdge: {\n      editWithoutDrag: { 'function': 'function' },\n      __type__: { object: object, boolean: bool, 'function': 'function' }\n    },\n    deleteNode: { boolean: bool, 'function': 'function' },\n    deleteEdge: { boolean: bool, 'function': 'function' },\n    controlNodeStyle: 'get from nodes, will be overwritten below',\n    __type__: { object: object, boolean: bool }\n  },\n  nodes: {\n    borderWidth: { number: number },\n    borderWidthSelected: { number: number, undefined: 'undefined' },\n    brokenImage: { string: string, undefined: 'undefined' },\n    chosen: {\n      label: { boolean: bool, 'function': 'function' },\n      node: { boolean: bool, 'function': 'function' },\n      __type__: { object: object, boolean: bool }\n    },\n    color: {\n      border: { string: string },\n      background: { string: string },\n      highlight: {\n        border: { string: string },\n        background: { string: string },\n        __type__: { object: object, string: string }\n      },\n      hover: {\n        border: { string: string },\n        background: { string: string },\n        __type__: { object: object, string: string }\n      },\n      __type__: { object: object, string: string }\n    },\n    fixed: {\n      x: { boolean: bool },\n      y: { boolean: bool },\n      __type__: { object: object, boolean: bool }\n    },\n    font: {\n      align: { string: string },\n      color: { string: string },\n      size: { number: number }, // px\n      face: { string: string },\n      background: { string: string },\n      strokeWidth: { number: number }, // px\n      strokeColor: { string: string },\n      vadjust: { number: number },\n      multi: { boolean: bool, string: string },\n      bold: {\n        color: { string: string },\n        size: { number: number }, // px\n        face: { string: string },\n        mod: { string: string },\n        vadjust: { number: number },\n        __type__: { object: object, string: string }\n      },\n      boldital: {\n        color: { string: string },\n        size: { number: number }, // px\n        face: { string: string },\n        mod: { string: string },\n        vadjust: { number: number },\n        __type__: { object: object, string: string }\n      },\n      ital: {\n        color: { string: string },\n        size: { number: number }, // px\n        face: { string: string },\n        mod: { string: string },\n        vadjust: { number: number },\n        __type__: { object: object, string: string }\n      },\n      mono: {\n        color: { string: string },\n        size: { number: number }, // px\n        face: { string: string },\n        mod: { string: string },\n        vadjust: { number: number },\n        __type__: { object: object, string: string }\n      },\n      __type__: { object: object, string: string }\n    },\n    group: { string: string, number: number, undefined: 'undefined' },\n    heightConstraint: {\n      minimum: { number: number },\n      valign: { string: string },\n      __type__: { object: object, boolean: bool, number: number }\n    },\n    hidden: { boolean: bool },\n    icon: {\n      face: { string: string },\n      code: { string: string }, //'\\uf007',\n      size: { number: number }, //50,\n      color: { string: string },\n      __type__: { object: object }\n    },\n    id: { string: string, number: number },\n    image: {\n      selected: { string: string, undefined: 'undefined' }, // --> URL\n      unselected: { string: string, undefined: 'undefined' }, // --> URL\n      __type__: { object: object, string: string }\n    },\n    label: { string: string, undefined: 'undefined' },\n    labelHighlightBold: { boolean: bool },\n    level: { number: number, undefined: 'undefined' },\n    margin: {\n      top: { number: number },\n      right: { number: number },\n      bottom: { number: number },\n      left: { number: number },\n      __type__: { object: object, number: number }\n    },\n    mass: { number: number },\n    physics: { boolean: bool },\n    scaling: {\n      min: { number: number },\n      max: { number: number },\n      label: {\n        enabled: { boolean: bool },\n        min: { number: number },\n        max: { number: number },\n        maxVisible: { number: number },\n        drawThreshold: { number: number },\n        __type__: { object: object, boolean: bool }\n      },\n      customScalingFunction: { 'function': 'function' },\n      __type__: { object: object }\n    },\n    shadow: {\n      enabled: { boolean: bool },\n      color: { string: string },\n      size: { number: number },\n      x: { number: number },\n      y: { number: number },\n      __type__: { object: object, boolean: bool }\n    },\n    shape: {\n      string: ['ellipse', 'circle', 'database', 'box', 'text', 'image', 'circularImage', 'diamond', 'dot', 'star', 'triangle', 'triangleDown', 'square', 'icon', 'hexagon']\n    },\n    shapeProperties: {\n      borderDashes: { boolean: bool, array: array },\n      borderRadius: { number: number },\n      interpolation: { boolean: bool },\n      useImageSize: { boolean: bool },\n      useBorderWithImage: { boolean: bool },\n      __type__: { object: object }\n    },\n    size: { number: number },\n    title: { string: string, dom: dom, undefined: 'undefined' },\n    value: { number: number, undefined: 'undefined' },\n    widthConstraint: {\n      minimum: { number: number },\n      maximum: { number: number },\n      __type__: { object: object, boolean: bool, number: number }\n    },\n    x: { number: number },\n    y: { number: number },\n    __type__: { object: object }\n  },\n  physics: {\n    enabled: { boolean: bool },\n    barnesHut: {\n      gravitationalConstant: { number: number },\n      centralGravity: { number: number },\n      springLength: { number: number },\n      springConstant: { number: number },\n      damping: { number: number },\n      avoidOverlap: { number: number },\n      __type__: { object: object }\n    },\n    forceAtlas2Based: {\n      gravitationalConstant: { number: number },\n      centralGravity: { number: number },\n      springLength: { number: number },\n      springConstant: { number: number },\n      damping: { number: number },\n      avoidOverlap: { number: number },\n      __type__: { object: object }\n    },\n    repulsion: {\n      centralGravity: { number: number },\n      springLength: { number: number },\n      springConstant: { number: number },\n      nodeDistance: { number: number },\n      damping: { number: number },\n      __type__: { object: object }\n    },\n    hierarchicalRepulsion: {\n      centralGravity: { number: number },\n      springLength: { number: number },\n      springConstant: { number: number },\n      nodeDistance: { number: number },\n      damping: { number: number },\n      __type__: { object: object }\n    },\n    maxVelocity: { number: number },\n    minVelocity: { number: number }, // px/s\n    solver: {\n      string: ['barnesHut', 'repulsion', 'hierarchicalRepulsion', 'forceAtlas2Based']\n    },\n    stabilization: {\n      enabled: { boolean: bool },\n      iterations: { number: number }, // maximum number of iteration to stabilize\n      updateInterval: { number: number },\n      onlyDynamicEdges: { boolean: bool },\n      fit: { boolean: bool },\n      __type__: { object: object, boolean: bool }\n    },\n    timestep: { number: number },\n    adaptiveTimestep: { boolean: bool },\n    __type__: { object: object, boolean: bool }\n  },\n\n  //globals :\n  autoResize: { boolean: bool },\n  clickToUse: { boolean: bool },\n  locale: { string: string },\n  locales: {\n    __any__: { any: any },\n    __type__: { object: object }\n  },\n  height: { string: string },\n  width: { string: string },\n  __type__: { object: object }\n};\n\nallOptions.groups.__any__ = allOptions.nodes;\nallOptions.manipulation.controlNodeStyle = allOptions.nodes;\n\nvar configureOptions = {\n  nodes: {\n    borderWidth: [1, 0, 10, 1],\n    borderWidthSelected: [2, 0, 10, 1],\n    color: {\n      border: ['color', '#2B7CE9'],\n      background: ['color', '#97C2FC'],\n      highlight: {\n        border: ['color', '#2B7CE9'],\n        background: ['color', '#D2E5FF']\n      },\n      hover: {\n        border: ['color', '#2B7CE9'],\n        background: ['color', '#D2E5FF']\n      }\n    },\n    fixed: {\n      x: false,\n      y: false\n    },\n    font: {\n      color: ['color', '#343434'],\n      size: [14, 0, 100, 1], // px\n      face: ['arial', 'verdana', 'tahoma'],\n      background: ['color', 'none'],\n      strokeWidth: [0, 0, 50, 1], // px\n      strokeColor: ['color', '#ffffff']\n    },\n    //group: 'string',\n    hidden: false,\n    labelHighlightBold: true,\n    //icon: {\n    //  face: 'string',  //'FontAwesome',\n    //  code: 'string',  //'\\uf007',\n    //  size: [50, 0, 200, 1],  //50,\n    //  color: ['color','#2B7CE9']   //'#aa00ff'\n    //},\n    //image: 'string', // --> URL\n    physics: true,\n    scaling: {\n      min: [10, 0, 200, 1],\n      max: [30, 0, 200, 1],\n      label: {\n        enabled: false,\n        min: [14, 0, 200, 1],\n        max: [30, 0, 200, 1],\n        maxVisible: [30, 0, 200, 1],\n        drawThreshold: [5, 0, 20, 1]\n      }\n    },\n    shadow: {\n      enabled: false,\n      color: 'rgba(0,0,0,0.5)',\n      size: [10, 0, 20, 1],\n      x: [5, -30, 30, 1],\n      y: [5, -30, 30, 1]\n    },\n    shape: ['ellipse', 'box', 'circle', 'database', 'diamond', 'dot', 'square', 'star', 'text', 'triangle', 'triangleDown', 'hexagon'],\n    shapeProperties: {\n      borderDashes: false,\n      borderRadius: [6, 0, 20, 1],\n      interpolation: true,\n      useImageSize: false\n    },\n    size: [25, 0, 200, 1]\n  },\n  edges: {\n    arrows: {\n      to: { enabled: false, scaleFactor: [1, 0, 3, 0.05], type: 'arrow' },\n      middle: { enabled: false, scaleFactor: [1, 0, 3, 0.05], type: 'arrow' },\n      from: { enabled: false, scaleFactor: [1, 0, 3, 0.05], type: 'arrow' }\n    },\n    arrowStrikethrough: true,\n    color: {\n      color: ['color', '#848484'],\n      highlight: ['color', '#848484'],\n      hover: ['color', '#848484'],\n      inherit: ['from', 'to', 'both', true, false],\n      opacity: [1, 0, 1, 0.05]\n    },\n    dashes: false,\n    font: {\n      color: ['color', '#343434'],\n      size: [14, 0, 100, 1], // px\n      face: ['arial', 'verdana', 'tahoma'],\n      background: ['color', 'none'],\n      strokeWidth: [2, 0, 50, 1], // px\n      strokeColor: ['color', '#ffffff'],\n      align: ['horizontal', 'top', 'middle', 'bottom']\n    },\n    hidden: false,\n    hoverWidth: [1.5, 0, 5, 0.1],\n    labelHighlightBold: true,\n    physics: true,\n    scaling: {\n      min: [1, 0, 100, 1],\n      max: [15, 0, 100, 1],\n      label: {\n        enabled: true,\n        min: [14, 0, 200, 1],\n        max: [30, 0, 200, 1],\n        maxVisible: [30, 0, 200, 1],\n        drawThreshold: [5, 0, 20, 1]\n      }\n    },\n    selectionWidth: [1.5, 0, 5, 0.1],\n    selfReferenceSize: [20, 0, 200, 1],\n    shadow: {\n      enabled: false,\n      color: 'rgba(0,0,0,0.5)',\n      size: [10, 0, 20, 1],\n      x: [5, -30, 30, 1],\n      y: [5, -30, 30, 1]\n    },\n    smooth: {\n      enabled: true,\n      type: ['dynamic', 'continuous', 'discrete', 'diagonalCross', 'straightCross', 'horizontal', 'vertical', 'curvedCW', 'curvedCCW', 'cubicBezier'],\n      forceDirection: ['horizontal', 'vertical', 'none'],\n      roundness: [0.5, 0, 1, 0.05]\n    },\n    width: [1, 0, 30, 1]\n  },\n  layout: {\n    //randomSeed: [0, 0, 500, 1],\n    //improvedLayout: true,\n    hierarchical: {\n      enabled: false,\n      levelSeparation: [150, 20, 500, 5],\n      nodeSpacing: [100, 20, 500, 5],\n      treeSpacing: [200, 20, 500, 5],\n      blockShifting: true,\n      edgeMinimization: true,\n      parentCentralization: true,\n      direction: ['UD', 'DU', 'LR', 'RL'], // UD, DU, LR, RL\n      sortMethod: ['hubsize', 'directed'] // hubsize, directed\n    }\n  },\n  interaction: {\n    dragNodes: true,\n    dragView: true,\n    hideEdgesOnDrag: false,\n    hideEdgesOnZoom: false,\n    hideNodesOnDrag: false,\n    hover: false,\n    keyboard: {\n      enabled: false,\n      speed: {\n        x: [10, 0, 40, 1],\n        y: [10, 0, 40, 1],\n        zoom: [0.02, 0, 0.1, 0.005]\n      },\n      bindToWindow: true\n    },\n    multiselect: false,\n    navigationButtons: false,\n    selectable: true,\n    selectConnectedEdges: true,\n    hoverConnectedEdges: true,\n    tooltipDelay: [300, 0, 1000, 25],\n    zoomView: true,\n    zoomSpeed: 1\n  },\n  manipulation: {\n    enabled: false,\n    initiallyActive: false\n  },\n  physics: {\n    enabled: true,\n    barnesHut: {\n      //theta: [0.5, 0.1, 1, 0.05],\n      gravitationalConstant: [-2000, -30000, 0, 50],\n      centralGravity: [0.3, 0, 10, 0.05],\n      springLength: [95, 0, 500, 5],\n      springConstant: [0.04, 0, 1.2, 0.005],\n      damping: [0.09, 0, 1, 0.01],\n      avoidOverlap: [0, 0, 1, 0.01]\n    },\n    forceAtlas2Based: {\n      //theta: [0.5, 0.1, 1, 0.05],\n      gravitationalConstant: [-50, -500, 0, 1],\n      centralGravity: [0.01, 0, 1, 0.005],\n      springLength: [95, 0, 500, 5],\n      springConstant: [0.08, 0, 1.2, 0.005],\n      damping: [0.4, 0, 1, 0.01],\n      avoidOverlap: [0, 0, 1, 0.01]\n    },\n    repulsion: {\n      centralGravity: [0.2, 0, 10, 0.05],\n      springLength: [200, 0, 500, 5],\n      springConstant: [0.05, 0, 1.2, 0.005],\n      nodeDistance: [100, 0, 500, 5],\n      damping: [0.09, 0, 1, 0.01]\n    },\n    hierarchicalRepulsion: {\n      centralGravity: [0.2, 0, 10, 0.05],\n      springLength: [100, 0, 500, 5],\n      springConstant: [0.01, 0, 1.2, 0.005],\n      nodeDistance: [120, 0, 500, 5],\n      damping: [0.09, 0, 1, 0.01]\n    },\n    maxVelocity: [50, 0, 150, 1],\n    minVelocity: [0.1, 0.01, 0.5, 0.01],\n    solver: ['barnesHut', 'forceAtlas2Based', 'repulsion', 'hierarchicalRepulsion'],\n    timestep: [0.5, 0.01, 1, 0.01]\n    //adaptiveTimestep: true\n  }\n};\n\nexports.allOptions = allOptions;\nexports.configureOptions = configureOptions;\n\n/***/ }),\n/* 85 */\n/***/ (function(module, exports, __nested_webpack_require_384874__) {\n\n\"use strict\";\n\n\nvar util = __nested_webpack_require_384874__(2);\n\n// Network\nutil.extend(exports, __nested_webpack_require_384874__(121));\n\n/***/ }),\n/* 86 */\n/***/ (function(module, exports, __nested_webpack_require_385062__) {\n\n__nested_webpack_require_385062__(37);\n__nested_webpack_require_385062__(47);\nmodule.exports = __nested_webpack_require_385062__(98);\n\n\n/***/ }),\n/* 87 */\n/***/ (function(module, exports, __nested_webpack_require_385232__) {\n\n\"use strict\";\n\nvar addToUnscopables = __nested_webpack_require_385232__(88);\nvar step = __nested_webpack_require_385232__(89);\nvar Iterators = __nested_webpack_require_385232__(25);\nvar toIObject = __nested_webpack_require_385232__(18);\n\n// 22.1.3.4 Array.prototype.entries()\n// 22.1.3.13 Array.prototype.keys()\n// 22.1.3.29 Array.prototype.values()\n// 22.1.3.30 Array.prototype[@@iterator]()\nmodule.exports = __nested_webpack_require_385232__(60)(Array, 'Array', function (iterated, kind) {\n  this._t = toIObject(iterated); // target\n  this._i = 0;                   // next index\n  this._k = kind;                // kind\n// 22.1.5.2.1 %ArrayIteratorPrototype%.next()\n}, function () {\n  var O = this._t;\n  var kind = this._k;\n  var index = this._i++;\n  if (!O || index >= O.length) {\n    this._t = undefined;\n    return step(1);\n  }\n  if (kind == 'keys') return step(0, index);\n  if (kind == 'values') return step(0, O[index]);\n  return step(0, [index, O[index]]);\n}, 'values');\n\n// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)\nIterators.Arguments = Iterators.Array;\n\naddToUnscopables('keys');\naddToUnscopables('values');\naddToUnscopables('entries');\n\n\n/***/ }),\n/* 88 */\n/***/ (function(module, exports) {\n\nmodule.exports = function () { /* empty */ };\n\n\n/***/ }),\n/* 89 */\n/***/ (function(module, exports) {\n\nmodule.exports = function (done, value) {\n  return { value: value, done: !!done };\n};\n\n\n/***/ }),\n/* 90 */\n/***/ (function(module, exports) {\n\nmodule.exports = function (it) {\n  if (typeof it != 'function') throw TypeError(it + ' is not a function!');\n  return it;\n};\n\n\n/***/ }),\n/* 91 */\n/***/ (function(module, exports, __nested_webpack_require_386843__) {\n\n\"use strict\";\n\nvar create = __nested_webpack_require_386843__(41);\nvar descriptor = __nested_webpack_require_386843__(28);\nvar setToStringTag = __nested_webpack_require_386843__(46);\nvar IteratorPrototype = {};\n\n// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()\n__nested_webpack_require_386843__(19)(IteratorPrototype, __nested_webpack_require_386843__(8)('iterator'), function () { return this; });\n\nmodule.exports = function (Constructor, NAME, next) {\n  Constructor.prototype = create(IteratorPrototype, { next: descriptor(1, next) });\n  setToStringTag(Constructor, NAME + ' Iterator');\n};\n\n\n/***/ }),\n/* 92 */\n/***/ (function(module, exports, __nested_webpack_require_387442__) {\n\nvar dP = __nested_webpack_require_387442__(12);\nvar anObject = __nested_webpack_require_387442__(20);\nvar getKeys = __nested_webpack_require_387442__(26);\n\nmodule.exports = __nested_webpack_require_387442__(13) ? Object.defineProperties : function defineProperties(O, Properties) {\n  anObject(O);\n  var keys = getKeys(Properties);\n  var length = keys.length;\n  var i = 0;\n  var P;\n  while (length > i) dP.f(O, P = keys[i++], Properties[P]);\n  return O;\n};\n\n\n/***/ }),\n/* 93 */\n/***/ (function(module, exports, __nested_webpack_require_387920__) {\n\n// false -> Array#indexOf\n// true  -> Array#includes\nvar toIObject = __nested_webpack_require_387920__(18);\nvar toLength = __nested_webpack_require_387920__(94);\nvar toAbsoluteIndex = __nested_webpack_require_387920__(95);\nmodule.exports = function (IS_INCLUDES) {\n  return function ($this, el, fromIndex) {\n    var O = toIObject($this);\n    var length = toLength(O.length);\n    var index = toAbsoluteIndex(fromIndex, length);\n    var value;\n    // Array#includes uses SameValueZero equality algorithm\n    // eslint-disable-next-line no-self-compare\n    if (IS_INCLUDES && el != el) while (length > index) {\n      value = O[index++];\n      // eslint-disable-next-line no-self-compare\n      if (value != value) return true;\n    // Array#indexOf ignores holes, Array#includes - not\n    } else for (;length > index; index++) if (IS_INCLUDES || index in O) {\n      if (O[index] === el) return IS_INCLUDES || index || 0;\n    } return !IS_INCLUDES && -1;\n  };\n};\n\n\n/***/ }),\n/* 94 */\n/***/ (function(module, exports, __nested_webpack_require_388913__) {\n\n// 7.1.15 ToLength\nvar toInteger = __nested_webpack_require_388913__(42);\nvar min = Math.min;\nmodule.exports = function (it) {\n  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991\n};\n\n\n/***/ }),\n/* 95 */\n/***/ (function(module, exports, __nested_webpack_require_389205__) {\n\nvar toInteger = __nested_webpack_require_389205__(42);\nvar max = Math.max;\nvar min = Math.min;\nmodule.exports = function (index, length) {\n  index = toInteger(index);\n  return index < 0 ? max(index + length, 0) : min(index, length);\n};\n\n\n/***/ }),\n/* 96 */\n/***/ (function(module, exports, __nested_webpack_require_389505__) {\n\nvar document = __nested_webpack_require_389505__(10).document;\nmodule.exports = document && document.documentElement;\n\n\n/***/ }),\n/* 97 */\n/***/ (function(module, exports, __nested_webpack_require_389687__) {\n\nvar toInteger = __nested_webpack_require_389687__(42);\nvar defined = __nested_webpack_require_389687__(39);\n// true  -> String#at\n// false -> String#codePointAt\nmodule.exports = function (TO_STRING) {\n  return function (that, pos) {\n    var s = String(defined(that));\n    var i = toInteger(pos);\n    var l = s.length;\n    var a, b;\n    if (i < 0 || i >= l) return TO_STRING ? '' : undefined;\n    a = s.charCodeAt(i);\n    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff\n      ? TO_STRING ? s.charAt(i) : a\n      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;\n  };\n};\n\n\n/***/ }),\n/* 98 */\n/***/ (function(module, exports, __nested_webpack_require_390386__) {\n\nvar anObject = __nested_webpack_require_390386__(20);\nvar get = __nested_webpack_require_390386__(99);\nmodule.exports = __nested_webpack_require_390386__(6).getIterator = function (it) {\n  var iterFn = get(it);\n  if (typeof iterFn != 'function') throw TypeError(it + ' is not iterable!');\n  return anObject(iterFn.call(it));\n};\n\n\n/***/ }),\n/* 99 */\n/***/ (function(module, exports, __nested_webpack_require_390750__) {\n\nvar classof = __nested_webpack_require_390750__(67);\nvar ITERATOR = __nested_webpack_require_390750__(8)('iterator');\nvar Iterators = __nested_webpack_require_390750__(25);\nmodule.exports = __nested_webpack_require_390750__(6).getIteratorMethod = function (it) {\n  if (it != undefined) return it[ITERATOR]\n    || it['@@iterator']\n    || Iterators[classof(it)];\n};\n\n\n/***/ }),\n/* 100 */\n/***/ (function(module, exports, __nested_webpack_require_391137__) {\n\n__nested_webpack_require_391137__(101);\nvar $Object = __nested_webpack_require_391137__(6).Object;\nmodule.exports = function create(P, D) {\n  return $Object.create(P, D);\n};\n\n\n/***/ }),\n/* 101 */\n/***/ (function(module, exports, __nested_webpack_require_391362__) {\n\nvar $export = __nested_webpack_require_391362__(11);\n// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])\n$export($export.S, 'Object', { create: __nested_webpack_require_391362__(41) });\n\n\n/***/ }),\n/* 102 */\n/***/ (function(module, exports, __nested_webpack_require_391602__) {\n\n__nested_webpack_require_391602__(103);\nmodule.exports = __nested_webpack_require_391602__(6).Object.keys;\n\n\n/***/ }),\n/* 103 */\n/***/ (function(module, exports, __nested_webpack_require_391760__) {\n\n// 19.1.2.14 Object.keys(O)\nvar toObject = __nested_webpack_require_391760__(30);\nvar $keys = __nested_webpack_require_391760__(26);\n\n__nested_webpack_require_391760__(68)('keys', function () {\n  return function keys(it) {\n    return $keys(toObject(it));\n  };\n});\n\n\n/***/ }),\n/* 104 */\n/***/ (function(module, exports, __nested_webpack_require_392061__) {\n\nmodule.exports = { \"default\": __nested_webpack_require_392061__(105), __esModule: true };\n\n/***/ }),\n/* 105 */\n/***/ (function(module, exports, __nested_webpack_require_392215__) {\n\n__nested_webpack_require_392215__(47);\n__nested_webpack_require_392215__(37);\nmodule.exports = __nested_webpack_require_392215__(48).f('iterator');\n\n\n/***/ }),\n/* 106 */\n/***/ (function(module, exports, __nested_webpack_require_392400__) {\n\nmodule.exports = { \"default\": __nested_webpack_require_392400__(107), __esModule: true };\n\n/***/ }),\n/* 107 */\n/***/ (function(module, exports, __nested_webpack_require_392554__) {\n\n__nested_webpack_require_392554__(108);\n__nested_webpack_require_392554__(113);\n__nested_webpack_require_392554__(114);\n__nested_webpack_require_392554__(115);\nmodule.exports = __nested_webpack_require_392554__(6).Symbol;\n\n\n/***/ }),\n/* 108 */\n/***/ (function(module, exports, __nested_webpack_require_392785__) {\n\n\"use strict\";\n\n// ECMAScript 6 symbols shim\nvar global = __nested_webpack_require_392785__(10);\nvar has = __nested_webpack_require_392785__(14);\nvar DESCRIPTORS = __nested_webpack_require_392785__(13);\nvar $export = __nested_webpack_require_392785__(11);\nvar redefine = __nested_webpack_require_392785__(64);\nvar META = __nested_webpack_require_392785__(109).KEY;\nvar $fails = __nested_webpack_require_392785__(22);\nvar shared = __nested_webpack_require_392785__(44);\nvar setToStringTag = __nested_webpack_require_392785__(46);\nvar uid = __nested_webpack_require_392785__(29);\nvar wks = __nested_webpack_require_392785__(8);\nvar wksExt = __nested_webpack_require_392785__(48);\nvar wksDefine = __nested_webpack_require_392785__(49);\nvar enumKeys = __nested_webpack_require_392785__(110);\nvar isArray = __nested_webpack_require_392785__(111);\nvar anObject = __nested_webpack_require_392785__(20);\nvar isObject = __nested_webpack_require_392785__(21);\nvar toIObject = __nested_webpack_require_392785__(18);\nvar toPrimitive = __nested_webpack_require_392785__(40);\nvar createDesc = __nested_webpack_require_392785__(28);\nvar _create = __nested_webpack_require_392785__(41);\nvar gOPNExt = __nested_webpack_require_392785__(112);\nvar $GOPD = __nested_webpack_require_392785__(70);\nvar $DP = __nested_webpack_require_392785__(12);\nvar $keys = __nested_webpack_require_392785__(26);\nvar gOPD = $GOPD.f;\nvar dP = $DP.f;\nvar gOPN = gOPNExt.f;\nvar $Symbol = global.Symbol;\nvar $JSON = global.JSON;\nvar _stringify = $JSON && $JSON.stringify;\nvar PROTOTYPE = 'prototype';\nvar HIDDEN = wks('_hidden');\nvar TO_PRIMITIVE = wks('toPrimitive');\nvar isEnum = {}.propertyIsEnumerable;\nvar SymbolRegistry = shared('symbol-registry');\nvar AllSymbols = shared('symbols');\nvar OPSymbols = shared('op-symbols');\nvar ObjectProto = Object[PROTOTYPE];\nvar USE_NATIVE = typeof $Symbol == 'function';\nvar QObject = global.QObject;\n// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173\nvar setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;\n\n// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687\nvar setSymbolDesc = DESCRIPTORS && $fails(function () {\n  return _create(dP({}, 'a', {\n    get: function () { return dP(this, 'a', { value: 7 }).a; }\n  })).a != 7;\n}) ? function (it, key, D) {\n  var protoDesc = gOPD(ObjectProto, key);\n  if (protoDesc) delete ObjectProto[key];\n  dP(it, key, D);\n  if (protoDesc && it !== ObjectProto) dP(ObjectProto, key, protoDesc);\n} : dP;\n\nvar wrap = function (tag) {\n  var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);\n  sym._k = tag;\n  return sym;\n};\n\nvar isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function (it) {\n  return typeof it == 'symbol';\n} : function (it) {\n  return it instanceof $Symbol;\n};\n\nvar $defineProperty = function defineProperty(it, key, D) {\n  if (it === ObjectProto) $defineProperty(OPSymbols, key, D);\n  anObject(it);\n  key = toPrimitive(key, true);\n  anObject(D);\n  if (has(AllSymbols, key)) {\n    if (!D.enumerable) {\n      if (!has(it, HIDDEN)) dP(it, HIDDEN, createDesc(1, {}));\n      it[HIDDEN][key] = true;\n    } else {\n      if (has(it, HIDDEN) && it[HIDDEN][key]) it[HIDDEN][key] = false;\n      D = _create(D, { enumerable: createDesc(0, false) });\n    } return setSymbolDesc(it, key, D);\n  } return dP(it, key, D);\n};\nvar $defineProperties = function defineProperties(it, P) {\n  anObject(it);\n  var keys = enumKeys(P = toIObject(P));\n  var i = 0;\n  var l = keys.length;\n  var key;\n  while (l > i) $defineProperty(it, key = keys[i++], P[key]);\n  return it;\n};\nvar $create = function create(it, P) {\n  return P === undefined ? _create(it) : $defineProperties(_create(it), P);\n};\nvar $propertyIsEnumerable = function propertyIsEnumerable(key) {\n  var E = isEnum.call(this, key = toPrimitive(key, true));\n  if (this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return false;\n  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;\n};\nvar $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {\n  it = toIObject(it);\n  key = toPrimitive(key, true);\n  if (it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return;\n  var D = gOPD(it, key);\n  if (D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) D.enumerable = true;\n  return D;\n};\nvar $getOwnPropertyNames = function getOwnPropertyNames(it) {\n  var names = gOPN(toIObject(it));\n  var result = [];\n  var i = 0;\n  var key;\n  while (names.length > i) {\n    if (!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META) result.push(key);\n  } return result;\n};\nvar $getOwnPropertySymbols = function getOwnPropertySymbols(it) {\n  var IS_OP = it === ObjectProto;\n  var names = gOPN(IS_OP ? OPSymbols : toIObject(it));\n  var result = [];\n  var i = 0;\n  var key;\n  while (names.length > i) {\n    if (has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true)) result.push(AllSymbols[key]);\n  } return result;\n};\n\n// 19.4.1.1 Symbol([description])\nif (!USE_NATIVE) {\n  $Symbol = function Symbol() {\n    if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor!');\n    var tag = uid(arguments.length > 0 ? arguments[0] : undefined);\n    var $set = function (value) {\n      if (this === ObjectProto) $set.call(OPSymbols, value);\n      if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;\n      setSymbolDesc(this, tag, createDesc(1, value));\n    };\n    if (DESCRIPTORS && setter) setSymbolDesc(ObjectProto, tag, { configurable: true, set: $set });\n    return wrap(tag);\n  };\n  redefine($Symbol[PROTOTYPE], 'toString', function toString() {\n    return this._k;\n  });\n\n  $GOPD.f = $getOwnPropertyDescriptor;\n  $DP.f = $defineProperty;\n  __nested_webpack_require_392785__(69).f = gOPNExt.f = $getOwnPropertyNames;\n  __nested_webpack_require_392785__(32).f = $propertyIsEnumerable;\n  __nested_webpack_require_392785__(50).f = $getOwnPropertySymbols;\n\n  if (DESCRIPTORS && !__nested_webpack_require_392785__(27)) {\n    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);\n  }\n\n  wksExt.f = function (name) {\n    return wrap(wks(name));\n  };\n}\n\n$export($export.G + $export.W + $export.F * !USE_NATIVE, { Symbol: $Symbol });\n\nfor (var es6Symbols = (\n  // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14\n  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'\n).split(','), j = 0; es6Symbols.length > j;)wks(es6Symbols[j++]);\n\nfor (var wellKnownSymbols = $keys(wks.store), k = 0; wellKnownSymbols.length > k;) wksDefine(wellKnownSymbols[k++]);\n\n$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {\n  // 19.4.2.1 Symbol.for(key)\n  'for': function (key) {\n    return has(SymbolRegistry, key += '')\n      ? SymbolRegistry[key]\n      : SymbolRegistry[key] = $Symbol(key);\n  },\n  // 19.4.2.5 Symbol.keyFor(sym)\n  keyFor: function keyFor(sym) {\n    if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol!');\n    for (var key in SymbolRegistry) if (SymbolRegistry[key] === sym) return key;\n  },\n  useSetter: function () { setter = true; },\n  useSimple: function () { setter = false; }\n});\n\n$export($export.S + $export.F * !USE_NATIVE, 'Object', {\n  // 19.1.2.2 Object.create(O [, Properties])\n  create: $create,\n  // 19.1.2.4 Object.defineProperty(O, P, Attributes)\n  defineProperty: $defineProperty,\n  // 19.1.2.3 Object.defineProperties(O, Properties)\n  defineProperties: $defineProperties,\n  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)\n  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,\n  // 19.1.2.7 Object.getOwnPropertyNames(O)\n  getOwnPropertyNames: $getOwnPropertyNames,\n  // 19.1.2.8 Object.getOwnPropertySymbols(O)\n  getOwnPropertySymbols: $getOwnPropertySymbols\n});\n\n// 24.3.2 JSON.stringify(value [, replacer [, space]])\n$JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function () {\n  var S = $Symbol();\n  // MS Edge converts symbol values to JSON as {}\n  // WebKit converts symbol values to JSON as null\n  // V8 throws on boxed symbols\n  return _stringify([S]) != '[null]' || _stringify({ a: S }) != '{}' || _stringify(Object(S)) != '{}';\n})), 'JSON', {\n  stringify: function stringify(it) {\n    var args = [it];\n    var i = 1;\n    var replacer, $replacer;\n    while (arguments.length > i) args.push(arguments[i++]);\n    $replacer = replacer = args[1];\n    if (!isObject(replacer) && it === undefined || isSymbol(it)) return; // IE8 returns string on undefined\n    if (!isArray(replacer)) replacer = function (key, value) {\n      if (typeof $replacer == 'function') value = $replacer.call(this, key, value);\n      if (!isSymbol(value)) return value;\n    };\n    args[1] = replacer;\n    return _stringify.apply($JSON, args);\n  }\n});\n\n// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)\n$Symbol[PROTOTYPE][TO_PRIMITIVE] || __nested_webpack_require_392785__(19)($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);\n// 19.4.3.5 Symbol.prototype[@@toStringTag]\nsetToStringTag($Symbol, 'Symbol');\n// 20.2.1.9 Math[@@toStringTag]\nsetToStringTag(Math, 'Math', true);\n// 24.3.3 JSON[@@toStringTag]\nsetToStringTag(global.JSON, 'JSON', true);\n\n\n/***/ }),\n/* 109 */\n/***/ (function(module, exports, __nested_webpack_require_401728__) {\n\nvar META = __nested_webpack_require_401728__(29)('meta');\nvar isObject = __nested_webpack_require_401728__(21);\nvar has = __nested_webpack_require_401728__(14);\nvar setDesc = __nested_webpack_require_401728__(12).f;\nvar id = 0;\nvar isExtensible = Object.isExtensible || function () {\n  return true;\n};\nvar FREEZE = !__nested_webpack_require_401728__(22)(function () {\n  return isExtensible(Object.preventExtensions({}));\n});\nvar setMeta = function (it) {\n  setDesc(it, META, { value: {\n    i: 'O' + ++id, // object ID\n    w: {}          // weak collections IDs\n  } });\n};\nvar fastKey = function (it, create) {\n  // return primitive with prefix\n  if (!isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;\n  if (!has(it, META)) {\n    // can't set metadata to uncaught frozen object\n    if (!isExtensible(it)) return 'F';\n    // not necessary to add metadata\n    if (!create) return 'E';\n    // add missing metadata\n    setMeta(it);\n  // return object ID\n  } return it[META].i;\n};\nvar getWeak = function (it, create) {\n  if (!has(it, META)) {\n    // can't set metadata to uncaught frozen object\n    if (!isExtensible(it)) return true;\n    // not necessary to add metadata\n    if (!create) return false;\n    // add missing metadata\n    setMeta(it);\n  // return hash weak collections IDs\n  } return it[META].w;\n};\n// add metadata on freeze-family methods calling\nvar onFreeze = function (it) {\n  if (FREEZE && meta.NEED && isExtensible(it) && !has(it, META)) setMeta(it);\n  return it;\n};\nvar meta = module.exports = {\n  KEY: META,\n  NEED: false,\n  fastKey: fastKey,\n  getWeak: getWeak,\n  onFreeze: onFreeze\n};\n\n\n/***/ }),\n/* 110 */\n/***/ (function(module, exports, __nested_webpack_require_403381__) {\n\n// all enumerable object keys, includes symbols\nvar getKeys = __nested_webpack_require_403381__(26);\nvar gOPS = __nested_webpack_require_403381__(50);\nvar pIE = __nested_webpack_require_403381__(32);\nmodule.exports = function (it) {\n  var result = getKeys(it);\n  var getSymbols = gOPS.f;\n  if (getSymbols) {\n    var symbols = getSymbols(it);\n    var isEnum = pIE.f;\n    var i = 0;\n    var key;\n    while (symbols.length > i) if (isEnum.call(it, key = symbols[i++])) result.push(key);\n  } return result;\n};\n\n\n/***/ }),\n/* 111 */\n/***/ (function(module, exports, __nested_webpack_require_403924__) {\n\n// 7.2.2 IsArray(argument)\nvar cof = __nested_webpack_require_403924__(38);\nmodule.exports = Array.isArray || function isArray(arg) {\n  return cof(arg) == 'Array';\n};\n\n\n/***/ }),\n/* 112 */\n/***/ (function(module, exports, __nested_webpack_require_404156__) {\n\n// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window\nvar toIObject = __nested_webpack_require_404156__(18);\nvar gOPN = __nested_webpack_require_404156__(69).f;\nvar toString = {}.toString;\n\nvar windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames\n  ? Object.getOwnPropertyNames(window) : [];\n\nvar getWindowNames = function (it) {\n  try {\n    return gOPN(it);\n  } catch (e) {\n    return windowNames.slice();\n  }\n};\n\nmodule.exports.f = function getOwnPropertyNames(it) {\n  return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));\n};\n\n\n/***/ }),\n/* 113 */\n/***/ (function(module, exports) {\n\n\n\n/***/ }),\n/* 114 */\n/***/ (function(module, exports, __nested_webpack_require_404894__) {\n\n__nested_webpack_require_404894__(49)('asyncIterator');\n\n\n/***/ }),\n/* 115 */\n/***/ (function(module, exports, __nested_webpack_require_405015__) {\n\n__nested_webpack_require_405015__(49)('observable');\n\n\n/***/ }),\n/* 116 */\n/***/ (function(module, exports, __nested_webpack_require_405133__) {\n\n/* WEBPACK VAR INJECTION */(function(module) {var require;//! moment.js\n\n;(function (global, factory) {\n      true ? module.exports = factory() :\n    0\n}(this, (function () { 'use strict';\n\n    var hookCallback;\n\n    function hooks () {\n        return hookCallback.apply(null, arguments);\n    }\n\n    // This is done to register the method called with moment()\n    // without creating circular dependencies.\n    function setHookCallback (callback) {\n        hookCallback = callback;\n    }\n\n    function isArray(input) {\n        return input instanceof Array || Object.prototype.toString.call(input) === '[object Array]';\n    }\n\n    function isObject(input) {\n        // IE8 will treat undefined and null as object if it wasn't for\n        // input != null\n        return input != null && Object.prototype.toString.call(input) === '[object Object]';\n    }\n\n    function isObjectEmpty(obj) {\n        if (Object.getOwnPropertyNames) {\n            return (Object.getOwnPropertyNames(obj).length === 0);\n        } else {\n            var k;\n            for (k in obj) {\n                if (obj.hasOwnProperty(k)) {\n                    return false;\n                }\n            }\n            return true;\n        }\n    }\n\n    function isUndefined(input) {\n        return input === void 0;\n    }\n\n    function isNumber(input) {\n        return typeof input === 'number' || Object.prototype.toString.call(input) === '[object Number]';\n    }\n\n    function isDate(input) {\n        return input instanceof Date || Object.prototype.toString.call(input) === '[object Date]';\n    }\n\n    function map(arr, fn) {\n        var res = [], i;\n        for (i = 0; i < arr.length; ++i) {\n            res.push(fn(arr[i], i));\n        }\n        return res;\n    }\n\n    function hasOwnProp(a, b) {\n        return Object.prototype.hasOwnProperty.call(a, b);\n    }\n\n    function extend(a, b) {\n        for (var i in b) {\n            if (hasOwnProp(b, i)) {\n                a[i] = b[i];\n            }\n        }\n\n        if (hasOwnProp(b, 'toString')) {\n            a.toString = b.toString;\n        }\n\n        if (hasOwnProp(b, 'valueOf')) {\n            a.valueOf = b.valueOf;\n        }\n\n        return a;\n    }\n\n    function createUTC (input, format, locale, strict) {\n        return createLocalOrUTC(input, format, locale, strict, true).utc();\n    }\n\n    function defaultParsingFlags() {\n        // We need to deep clone this object.\n        return {\n            empty           : false,\n            unusedTokens    : [],\n            unusedInput     : [],\n            overflow        : -2,\n            charsLeftOver   : 0,\n            nullInput       : false,\n            invalidMonth    : null,\n            invalidFormat   : false,\n            userInvalidated : false,\n            iso             : false,\n            parsedDateParts : [],\n            meridiem        : null,\n            rfc2822         : false,\n            weekdayMismatch : false\n        };\n    }\n\n    function getParsingFlags(m) {\n        if (m._pf == null) {\n            m._pf = defaultParsingFlags();\n        }\n        return m._pf;\n    }\n\n    var some;\n    if (Array.prototype.some) {\n        some = Array.prototype.some;\n    } else {\n        some = function (fun) {\n            var t = Object(this);\n            var len = t.length >>> 0;\n\n            for (var i = 0; i < len; i++) {\n                if (i in t && fun.call(this, t[i], i, t)) {\n                    return true;\n                }\n            }\n\n            return false;\n        };\n    }\n\n    function isValid(m) {\n        if (m._isValid == null) {\n            var flags = getParsingFlags(m);\n            var parsedParts = some.call(flags.parsedDateParts, function (i) {\n                return i != null;\n            });\n            var isNowValid = !isNaN(m._d.getTime()) &&\n                flags.overflow < 0 &&\n                !flags.empty &&\n                !flags.invalidMonth &&\n                !flags.invalidWeekday &&\n                !flags.weekdayMismatch &&\n                !flags.nullInput &&\n                !flags.invalidFormat &&\n                !flags.userInvalidated &&\n                (!flags.meridiem || (flags.meridiem && parsedParts));\n\n            if (m._strict) {\n                isNowValid = isNowValid &&\n                    flags.charsLeftOver === 0 &&\n                    flags.unusedTokens.length === 0 &&\n                    flags.bigHour === undefined;\n            }\n\n            if (Object.isFrozen == null || !Object.isFrozen(m)) {\n                m._isValid = isNowValid;\n            }\n            else {\n                return isNowValid;\n            }\n        }\n        return m._isValid;\n    }\n\n    function createInvalid (flags) {\n        var m = createUTC(NaN);\n        if (flags != null) {\n            extend(getParsingFlags(m), flags);\n        }\n        else {\n            getParsingFlags(m).userInvalidated = true;\n        }\n\n        return m;\n    }\n\n    // Plugins that add properties should also add the key here (null value),\n    // so we can properly clone ourselves.\n    var momentProperties = hooks.momentProperties = [];\n\n    function copyConfig(to, from) {\n        var i, prop, val;\n\n        if (!isUndefined(from._isAMomentObject)) {\n            to._isAMomentObject = from._isAMomentObject;\n        }\n        if (!isUndefined(from._i)) {\n            to._i = from._i;\n        }\n        if (!isUndefined(from._f)) {\n            to._f = from._f;\n        }\n        if (!isUndefined(from._l)) {\n            to._l = from._l;\n        }\n        if (!isUndefined(from._strict)) {\n            to._strict = from._strict;\n        }\n        if (!isUndefined(from._tzm)) {\n            to._tzm = from._tzm;\n        }\n        if (!isUndefined(from._isUTC)) {\n            to._isUTC = from._isUTC;\n        }\n        if (!isUndefined(from._offset)) {\n            to._offset = from._offset;\n        }\n        if (!isUndefined(from._pf)) {\n            to._pf = getParsingFlags(from);\n        }\n        if (!isUndefined(from._locale)) {\n            to._locale = from._locale;\n        }\n\n        if (momentProperties.length > 0) {\n            for (i = 0; i < momentProperties.length; i++) {\n                prop = momentProperties[i];\n                val = from[prop];\n                if (!isUndefined(val)) {\n                    to[prop] = val;\n                }\n            }\n        }\n\n        return to;\n    }\n\n    var updateInProgress = false;\n\n    // Moment prototype object\n    function Moment(config) {\n        copyConfig(this, config);\n        this._d = new Date(config._d != null ? config._d.getTime() : NaN);\n        if (!this.isValid()) {\n            this._d = new Date(NaN);\n        }\n        // Prevent infinite loop in case updateOffset creates new moment\n        // objects.\n        if (updateInProgress === false) {\n            updateInProgress = true;\n            hooks.updateOffset(this);\n            updateInProgress = false;\n        }\n    }\n\n    function isMoment (obj) {\n        return obj instanceof Moment || (obj != null && obj._isAMomentObject != null);\n    }\n\n    function absFloor (number) {\n        if (number < 0) {\n            // -0 -> 0\n            return Math.ceil(number) || 0;\n        } else {\n            return Math.floor(number);\n        }\n    }\n\n    function toInt(argumentForCoercion) {\n        var coercedNumber = +argumentForCoercion,\n            value = 0;\n\n        if (coercedNumber !== 0 && isFinite(coercedNumber)) {\n            value = absFloor(coercedNumber);\n        }\n\n        return value;\n    }\n\n    // compare two arrays, return the number of differences\n    function compareArrays(array1, array2, dontConvert) {\n        var len = Math.min(array1.length, array2.length),\n            lengthDiff = Math.abs(array1.length - array2.length),\n            diffs = 0,\n            i;\n        for (i = 0; i < len; i++) {\n            if ((dontConvert && array1[i] !== array2[i]) ||\n                (!dontConvert && toInt(array1[i]) !== toInt(array2[i]))) {\n                diffs++;\n            }\n        }\n        return diffs + lengthDiff;\n    }\n\n    function warn(msg) {\n        if (hooks.suppressDeprecationWarnings === false &&\n                (typeof console !==  'undefined') && console.warn) {\n            console.warn('Deprecation warning: ' + msg);\n        }\n    }\n\n    function deprecate(msg, fn) {\n        var firstTime = true;\n\n        return extend(function () {\n            if (hooks.deprecationHandler != null) {\n                hooks.deprecationHandler(null, msg);\n            }\n            if (firstTime) {\n                var args = [];\n                var arg;\n                for (var i = 0; i < arguments.length; i++) {\n                    arg = '';\n                    if (typeof arguments[i] === 'object') {\n                        arg += '\\n[' + i + '] ';\n                        for (var key in arguments[0]) {\n                            arg += key + ': ' + arguments[0][key] + ', ';\n                        }\n                        arg = arg.slice(0, -2); // Remove trailing comma and space\n                    } else {\n                        arg = arguments[i];\n                    }\n                    args.push(arg);\n                }\n                warn(msg + '\\nArguments: ' + Array.prototype.slice.call(args).join('') + '\\n' + (new Error()).stack);\n                firstTime = false;\n            }\n            return fn.apply(this, arguments);\n        }, fn);\n    }\n\n    var deprecations = {};\n\n    function deprecateSimple(name, msg) {\n        if (hooks.deprecationHandler != null) {\n            hooks.deprecationHandler(name, msg);\n        }\n        if (!deprecations[name]) {\n            warn(msg);\n            deprecations[name] = true;\n        }\n    }\n\n    hooks.suppressDeprecationWarnings = false;\n    hooks.deprecationHandler = null;\n\n    function isFunction(input) {\n        return input instanceof Function || Object.prototype.toString.call(input) === '[object Function]';\n    }\n\n    function set (config) {\n        var prop, i;\n        for (i in config) {\n            prop = config[i];\n            if (isFunction(prop)) {\n                this[i] = prop;\n            } else {\n                this['_' + i] = prop;\n            }\n        }\n        this._config = config;\n        // Lenient ordinal parsing accepts just a number in addition to\n        // number + (possibly) stuff coming from _dayOfMonthOrdinalParse.\n        // TODO: Remove \"ordinalParse\" fallback in next major release.\n        this._dayOfMonthOrdinalParseLenient = new RegExp(\n            (this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) +\n                '|' + (/\\d{1,2}/).source);\n    }\n\n    function mergeConfigs(parentConfig, childConfig) {\n        var res = extend({}, parentConfig), prop;\n        for (prop in childConfig) {\n            if (hasOwnProp(childConfig, prop)) {\n                if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {\n                    res[prop] = {};\n                    extend(res[prop], parentConfig[prop]);\n                    extend(res[prop], childConfig[prop]);\n                } else if (childConfig[prop] != null) {\n                    res[prop] = childConfig[prop];\n                } else {\n                    delete res[prop];\n                }\n            }\n        }\n        for (prop in parentConfig) {\n            if (hasOwnProp(parentConfig, prop) &&\n                    !hasOwnProp(childConfig, prop) &&\n                    isObject(parentConfig[prop])) {\n                // make sure changes to properties don't modify parent config\n                res[prop] = extend({}, res[prop]);\n            }\n        }\n        return res;\n    }\n\n    function Locale(config) {\n        if (config != null) {\n            this.set(config);\n        }\n    }\n\n    var keys;\n\n    if (Object.keys) {\n        keys = Object.keys;\n    } else {\n        keys = function (obj) {\n            var i, res = [];\n            for (i in obj) {\n                if (hasOwnProp(obj, i)) {\n                    res.push(i);\n                }\n            }\n            return res;\n        };\n    }\n\n    var defaultCalendar = {\n        sameDay : '[Today at] LT',\n        nextDay : '[Tomorrow at] LT',\n        nextWeek : 'dddd [at] LT',\n        lastDay : '[Yesterday at] LT',\n        lastWeek : '[Last] dddd [at] LT',\n        sameElse : 'L'\n    };\n\n    function calendar (key, mom, now) {\n        var output = this._calendar[key] || this._calendar['sameElse'];\n        return isFunction(output) ? output.call(mom, now) : output;\n    }\n\n    var defaultLongDateFormat = {\n        LTS  : 'h:mm:ss A',\n        LT   : 'h:mm A',\n        L    : 'MM/DD/YYYY',\n        LL   : 'MMMM D, YYYY',\n        LLL  : 'MMMM D, YYYY h:mm A',\n        LLLL : 'dddd, MMMM D, YYYY h:mm A'\n    };\n\n    function longDateFormat (key) {\n        var format = this._longDateFormat[key],\n            formatUpper = this._longDateFormat[key.toUpperCase()];\n\n        if (format || !formatUpper) {\n            return format;\n        }\n\n        this._longDateFormat[key] = formatUpper.replace(/MMMM|MM|DD|dddd/g, function (val) {\n            return val.slice(1);\n        });\n\n        return this._longDateFormat[key];\n    }\n\n    var defaultInvalidDate = 'Invalid date';\n\n    function invalidDate () {\n        return this._invalidDate;\n    }\n\n    var defaultOrdinal = '%d';\n    var defaultDayOfMonthOrdinalParse = /\\d{1,2}/;\n\n    function ordinal (number) {\n        return this._ordinal.replace('%d', number);\n    }\n\n    var defaultRelativeTime = {\n        future : 'in %s',\n        past   : '%s ago',\n        s  : 'a few seconds',\n        ss : '%d seconds',\n        m  : 'a minute',\n        mm : '%d minutes',\n        h  : 'an hour',\n        hh : '%d hours',\n        d  : 'a day',\n        dd : '%d days',\n        M  : 'a month',\n        MM : '%d months',\n        y  : 'a year',\n        yy : '%d years'\n    };\n\n    function relativeTime (number, withoutSuffix, string, isFuture) {\n        var output = this._relativeTime[string];\n        return (isFunction(output)) ?\n            output(number, withoutSuffix, string, isFuture) :\n            output.replace(/%d/i, number);\n    }\n\n    function pastFuture (diff, output) {\n        var format = this._relativeTime[diff > 0 ? 'future' : 'past'];\n        return isFunction(format) ? format(output) : format.replace(/%s/i, output);\n    }\n\n    var aliases = {};\n\n    function addUnitAlias (unit, shorthand) {\n        var lowerCase = unit.toLowerCase();\n        aliases[lowerCase] = aliases[lowerCase + 's'] = aliases[shorthand] = unit;\n    }\n\n    function normalizeUnits(units) {\n        return typeof units === 'string' ? aliases[units] || aliases[units.toLowerCase()] : undefined;\n    }\n\n    function normalizeObjectUnits(inputObject) {\n        var normalizedInput = {},\n            normalizedProp,\n            prop;\n\n        for (prop in inputObject) {\n            if (hasOwnProp(inputObject, prop)) {\n                normalizedProp = normalizeUnits(prop);\n                if (normalizedProp) {\n                    normalizedInput[normalizedProp] = inputObject[prop];\n                }\n            }\n        }\n\n        return normalizedInput;\n    }\n\n    var priorities = {};\n\n    function addUnitPriority(unit, priority) {\n        priorities[unit] = priority;\n    }\n\n    function getPrioritizedUnits(unitsObj) {\n        var units = [];\n        for (var u in unitsObj) {\n            units.push({unit: u, priority: priorities[u]});\n        }\n        units.sort(function (a, b) {\n            return a.priority - b.priority;\n        });\n        return units;\n    }\n\n    function zeroFill(number, targetLength, forceSign) {\n        var absNumber = '' + Math.abs(number),\n            zerosToFill = targetLength - absNumber.length,\n            sign = number >= 0;\n        return (sign ? (forceSign ? '+' : '') : '-') +\n            Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;\n    }\n\n    var formattingTokens = /(\\[[^\\[]*\\])|(\\\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g;\n\n    var localFormattingTokens = /(\\[[^\\[]*\\])|(\\\\)?(LTS|LT|LL?L?L?|l{1,4})/g;\n\n    var formatFunctions = {};\n\n    var formatTokenFunctions = {};\n\n    // token:    'M'\n    // padded:   ['MM', 2]\n    // ordinal:  'Mo'\n    // callback: function () { this.month() + 1 }\n    function addFormatToken (token, padded, ordinal, callback) {\n        var func = callback;\n        if (typeof callback === 'string') {\n            func = function () {\n                return this[callback]();\n            };\n        }\n        if (token) {\n            formatTokenFunctions[token] = func;\n        }\n        if (padded) {\n            formatTokenFunctions[padded[0]] = function () {\n                return zeroFill(func.apply(this, arguments), padded[1], padded[2]);\n            };\n        }\n        if (ordinal) {\n            formatTokenFunctions[ordinal] = function () {\n                return this.localeData().ordinal(func.apply(this, arguments), token);\n            };\n        }\n    }\n\n    function removeFormattingTokens(input) {\n        if (input.match(/\\[[\\s\\S]/)) {\n            return input.replace(/^\\[|\\]$/g, '');\n        }\n        return input.replace(/\\\\/g, '');\n    }\n\n    function makeFormatFunction(format) {\n        var array = format.match(formattingTokens), i, length;\n\n        for (i = 0, length = array.length; i < length; i++) {\n            if (formatTokenFunctions[array[i]]) {\n                array[i] = formatTokenFunctions[array[i]];\n            } else {\n                array[i] = removeFormattingTokens(array[i]);\n            }\n        }\n\n        return function (mom) {\n            var output = '', i;\n            for (i = 0; i < length; i++) {\n                output += isFunction(array[i]) ? array[i].call(mom, format) : array[i];\n            }\n            return output;\n        };\n    }\n\n    // format date using native date object\n    function formatMoment(m, format) {\n        if (!m.isValid()) {\n            return m.localeData().invalidDate();\n        }\n\n        format = expandFormat(format, m.localeData());\n        formatFunctions[format] = formatFunctions[format] || makeFormatFunction(format);\n\n        return formatFunctions[format](m);\n    }\n\n    function expandFormat(format, locale) {\n        var i = 5;\n\n        function replaceLongDateFormatTokens(input) {\n            return locale.longDateFormat(input) || input;\n        }\n\n        localFormattingTokens.lastIndex = 0;\n        while (i >= 0 && localFormattingTokens.test(format)) {\n            format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);\n            localFormattingTokens.lastIndex = 0;\n            i -= 1;\n        }\n\n        return format;\n    }\n\n    var match1         = /\\d/;            //       0 - 9\n    var match2         = /\\d\\d/;          //      00 - 99\n    var match3         = /\\d{3}/;         //     000 - 999\n    var match4         = /\\d{4}/;         //    0000 - 9999\n    var match6         = /[+-]?\\d{6}/;    // -999999 - 999999\n    var match1to2      = /\\d\\d?/;         //       0 - 99\n    var match3to4      = /\\d\\d\\d\\d?/;     //     999 - 9999\n    var match5to6      = /\\d\\d\\d\\d\\d\\d?/; //   99999 - 999999\n    var match1to3      = /\\d{1,3}/;       //       0 - 999\n    var match1to4      = /\\d{1,4}/;       //       0 - 9999\n    var match1to6      = /[+-]?\\d{1,6}/;  // -999999 - 999999\n\n    var matchUnsigned  = /\\d+/;           //       0 - inf\n    var matchSigned    = /[+-]?\\d+/;      //    -inf - inf\n\n    var matchOffset    = /Z|[+-]\\d\\d:?\\d\\d/gi; // +00:00 -00:00 +0000 -0000 or Z\n    var matchShortOffset = /Z|[+-]\\d\\d(?::?\\d\\d)?/gi; // +00 -00 +00:00 -00:00 +0000 -0000 or Z\n\n    var matchTimestamp = /[+-]?\\d+(\\.\\d{1,3})?/; // 123456789 123456789.123\n\n    // any word (or two) characters or numbers including two/three word month in arabic.\n    // includes scottish gaelic two word and hyphenated months\n    var matchWord = /[0-9]{0,256}['a-z\\u00A0-\\u05FF\\u0700-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFF07\\uFF10-\\uFFEF]{1,256}|[\\u0600-\\u06FF\\/]{1,256}(\\s*?[\\u0600-\\u06FF]{1,256}){1,2}/i;\n\n    var regexes = {};\n\n    function addRegexToken (token, regex, strictRegex) {\n        regexes[token] = isFunction(regex) ? regex : function (isStrict, localeData) {\n            return (isStrict && strictRegex) ? strictRegex : regex;\n        };\n    }\n\n    function getParseRegexForToken (token, config) {\n        if (!hasOwnProp(regexes, token)) {\n            return new RegExp(unescapeFormat(token));\n        }\n\n        return regexes[token](config._strict, config._locale);\n    }\n\n    // Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript\n    function unescapeFormat(s) {\n        return regexEscape(s.replace('\\\\', '').replace(/\\\\(\\[)|\\\\(\\])|\\[([^\\]\\[]*)\\]|\\\\(.)/g, function (matched, p1, p2, p3, p4) {\n            return p1 || p2 || p3 || p4;\n        }));\n    }\n\n    function regexEscape(s) {\n        return s.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\n    }\n\n    var tokens = {};\n\n    function addParseToken (token, callback) {\n        var i, func = callback;\n        if (typeof token === 'string') {\n            token = [token];\n        }\n        if (isNumber(callback)) {\n            func = function (input, array) {\n                array[callback] = toInt(input);\n            };\n        }\n        for (i = 0; i < token.length; i++) {\n            tokens[token[i]] = func;\n        }\n    }\n\n    function addWeekParseToken (token, callback) {\n        addParseToken(token, function (input, array, config, token) {\n            config._w = config._w || {};\n            callback(input, config._w, config, token);\n        });\n    }\n\n    function addTimeToArrayFromToken(token, input, config) {\n        if (input != null && hasOwnProp(tokens, token)) {\n            tokens[token](input, config._a, config, token);\n        }\n    }\n\n    var YEAR = 0;\n    var MONTH = 1;\n    var DATE = 2;\n    var HOUR = 3;\n    var MINUTE = 4;\n    var SECOND = 5;\n    var MILLISECOND = 6;\n    var WEEK = 7;\n    var WEEKDAY = 8;\n\n    // FORMATTING\n\n    addFormatToken('Y', 0, 0, function () {\n        var y = this.year();\n        return y <= 9999 ? '' + y : '+' + y;\n    });\n\n    addFormatToken(0, ['YY', 2], 0, function () {\n        return this.year() % 100;\n    });\n\n    addFormatToken(0, ['YYYY',   4],       0, 'year');\n    addFormatToken(0, ['YYYYY',  5],       0, 'year');\n    addFormatToken(0, ['YYYYYY', 6, true], 0, 'year');\n\n    // ALIASES\n\n    addUnitAlias('year', 'y');\n\n    // PRIORITIES\n\n    addUnitPriority('year', 1);\n\n    // PARSING\n\n    addRegexToken('Y',      matchSigned);\n    addRegexToken('YY',     match1to2, match2);\n    addRegexToken('YYYY',   match1to4, match4);\n    addRegexToken('YYYYY',  match1to6, match6);\n    addRegexToken('YYYYYY', match1to6, match6);\n\n    addParseToken(['YYYYY', 'YYYYYY'], YEAR);\n    addParseToken('YYYY', function (input, array) {\n        array[YEAR] = input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);\n    });\n    addParseToken('YY', function (input, array) {\n        array[YEAR] = hooks.parseTwoDigitYear(input);\n    });\n    addParseToken('Y', function (input, array) {\n        array[YEAR] = parseInt(input, 10);\n    });\n\n    // HELPERS\n\n    function daysInYear(year) {\n        return isLeapYear(year) ? 366 : 365;\n    }\n\n    function isLeapYear(year) {\n        return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;\n    }\n\n    // HOOKS\n\n    hooks.parseTwoDigitYear = function (input) {\n        return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);\n    };\n\n    // MOMENTS\n\n    var getSetYear = makeGetSet('FullYear', true);\n\n    function getIsLeapYear () {\n        return isLeapYear(this.year());\n    }\n\n    function makeGetSet (unit, keepTime) {\n        return function (value) {\n            if (value != null) {\n                set$1(this, unit, value);\n                hooks.updateOffset(this, keepTime);\n                return this;\n            } else {\n                return get(this, unit);\n            }\n        };\n    }\n\n    function get (mom, unit) {\n        return mom.isValid() ?\n            mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]() : NaN;\n    }\n\n    function set$1 (mom, unit, value) {\n        if (mom.isValid() && !isNaN(value)) {\n            if (unit === 'FullYear' && isLeapYear(mom.year()) && mom.month() === 1 && mom.date() === 29) {\n                mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value, mom.month(), daysInMonth(value, mom.month()));\n            }\n            else {\n                mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);\n            }\n        }\n    }\n\n    // MOMENTS\n\n    function stringGet (units) {\n        units = normalizeUnits(units);\n        if (isFunction(this[units])) {\n            return this[units]();\n        }\n        return this;\n    }\n\n\n    function stringSet (units, value) {\n        if (typeof units === 'object') {\n            units = normalizeObjectUnits(units);\n            var prioritized = getPrioritizedUnits(units);\n            for (var i = 0; i < prioritized.length; i++) {\n                this[prioritized[i].unit](units[prioritized[i].unit]);\n            }\n        } else {\n            units = normalizeUnits(units);\n            if (isFunction(this[units])) {\n                return this[units](value);\n            }\n        }\n        return this;\n    }\n\n    function mod(n, x) {\n        return ((n % x) + x) % x;\n    }\n\n    var indexOf;\n\n    if (Array.prototype.indexOf) {\n        indexOf = Array.prototype.indexOf;\n    } else {\n        indexOf = function (o) {\n            // I know\n            var i;\n            for (i = 0; i < this.length; ++i) {\n                if (this[i] === o) {\n                    return i;\n                }\n            }\n            return -1;\n        };\n    }\n\n    function daysInMonth(year, month) {\n        if (isNaN(year) || isNaN(month)) {\n            return NaN;\n        }\n        var modMonth = mod(month, 12);\n        year += (month - modMonth) / 12;\n        return modMonth === 1 ? (isLeapYear(year) ? 29 : 28) : (31 - modMonth % 7 % 2);\n    }\n\n    // FORMATTING\n\n    addFormatToken('M', ['MM', 2], 'Mo', function () {\n        return this.month() + 1;\n    });\n\n    addFormatToken('MMM', 0, 0, function (format) {\n        return this.localeData().monthsShort(this, format);\n    });\n\n    addFormatToken('MMMM', 0, 0, function (format) {\n        return this.localeData().months(this, format);\n    });\n\n    // ALIASES\n\n    addUnitAlias('month', 'M');\n\n    // PRIORITY\n\n    addUnitPriority('month', 8);\n\n    // PARSING\n\n    addRegexToken('M',    match1to2);\n    addRegexToken('MM',   match1to2, match2);\n    addRegexToken('MMM',  function (isStrict, locale) {\n        return locale.monthsShortRegex(isStrict);\n    });\n    addRegexToken('MMMM', function (isStrict, locale) {\n        return locale.monthsRegex(isStrict);\n    });\n\n    addParseToken(['M', 'MM'], function (input, array) {\n        array[MONTH] = toInt(input) - 1;\n    });\n\n    addParseToken(['MMM', 'MMMM'], function (input, array, config, token) {\n        var month = config._locale.monthsParse(input, token, config._strict);\n        // if we didn't find a month name, mark the date as invalid.\n        if (month != null) {\n            array[MONTH] = month;\n        } else {\n            getParsingFlags(config).invalidMonth = input;\n        }\n    });\n\n    // LOCALES\n\n    var MONTHS_IN_FORMAT = /D[oD]?(\\[[^\\[\\]]*\\]|\\s)+MMMM?/;\n    var defaultLocaleMonths = 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_');\n    function localeMonths (m, format) {\n        if (!m) {\n            return isArray(this._months) ? this._months :\n                this._months['standalone'];\n        }\n        return isArray(this._months) ? this._months[m.month()] :\n            this._months[(this._months.isFormat || MONTHS_IN_FORMAT).test(format) ? 'format' : 'standalone'][m.month()];\n    }\n\n    var defaultLocaleMonthsShort = 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_');\n    function localeMonthsShort (m, format) {\n        if (!m) {\n            return isArray(this._monthsShort) ? this._monthsShort :\n                this._monthsShort['standalone'];\n        }\n        return isArray(this._monthsShort) ? this._monthsShort[m.month()] :\n            this._monthsShort[MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone'][m.month()];\n    }\n\n    function handleStrictParse(monthName, format, strict) {\n        var i, ii, mom, llc = monthName.toLocaleLowerCase();\n        if (!this._monthsParse) {\n            // this is not used\n            this._monthsParse = [];\n            this._longMonthsParse = [];\n            this._shortMonthsParse = [];\n            for (i = 0; i < 12; ++i) {\n                mom = createUTC([2000, i]);\n                this._shortMonthsParse[i] = this.monthsShort(mom, '').toLocaleLowerCase();\n                this._longMonthsParse[i] = this.months(mom, '').toLocaleLowerCase();\n            }\n        }\n\n        if (strict) {\n            if (format === 'MMM') {\n                ii = indexOf.call(this._shortMonthsParse, llc);\n                return ii !== -1 ? ii : null;\n            } else {\n                ii = indexOf.call(this._longMonthsParse, llc);\n                return ii !== -1 ? ii : null;\n            }\n        } else {\n            if (format === 'MMM') {\n                ii = indexOf.call(this._shortMonthsParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._longMonthsParse, llc);\n                return ii !== -1 ? ii : null;\n            } else {\n                ii = indexOf.call(this._longMonthsParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._shortMonthsParse, llc);\n                return ii !== -1 ? ii : null;\n            }\n        }\n    }\n\n    function localeMonthsParse (monthName, format, strict) {\n        var i, mom, regex;\n\n        if (this._monthsParseExact) {\n            return handleStrictParse.call(this, monthName, format, strict);\n        }\n\n        if (!this._monthsParse) {\n            this._monthsParse = [];\n            this._longMonthsParse = [];\n            this._shortMonthsParse = [];\n        }\n\n        // TODO: add sorting\n        // Sorting makes sure if one month (or abbr) is a prefix of another\n        // see sorting in computeMonthsParse\n        for (i = 0; i < 12; i++) {\n            // make the regex if we don't have it already\n            mom = createUTC([2000, i]);\n            if (strict && !this._longMonthsParse[i]) {\n                this._longMonthsParse[i] = new RegExp('^' + this.months(mom, '').replace('.', '') + '$', 'i');\n                this._shortMonthsParse[i] = new RegExp('^' + this.monthsShort(mom, '').replace('.', '') + '$', 'i');\n            }\n            if (!strict && !this._monthsParse[i]) {\n                regex = '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');\n                this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');\n            }\n            // test the regex\n            if (strict && format === 'MMMM' && this._longMonthsParse[i].test(monthName)) {\n                return i;\n            } else if (strict && format === 'MMM' && this._shortMonthsParse[i].test(monthName)) {\n                return i;\n            } else if (!strict && this._monthsParse[i].test(monthName)) {\n                return i;\n            }\n        }\n    }\n\n    // MOMENTS\n\n    function setMonth (mom, value) {\n        var dayOfMonth;\n\n        if (!mom.isValid()) {\n            // No op\n            return mom;\n        }\n\n        if (typeof value === 'string') {\n            if (/^\\d+$/.test(value)) {\n                value = toInt(value);\n            } else {\n                value = mom.localeData().monthsParse(value);\n                // TODO: Another silent failure?\n                if (!isNumber(value)) {\n                    return mom;\n                }\n            }\n        }\n\n        dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));\n        mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);\n        return mom;\n    }\n\n    function getSetMonth (value) {\n        if (value != null) {\n            setMonth(this, value);\n            hooks.updateOffset(this, true);\n            return this;\n        } else {\n            return get(this, 'Month');\n        }\n    }\n\n    function getDaysInMonth () {\n        return daysInMonth(this.year(), this.month());\n    }\n\n    var defaultMonthsShortRegex = matchWord;\n    function monthsShortRegex (isStrict) {\n        if (this._monthsParseExact) {\n            if (!hasOwnProp(this, '_monthsRegex')) {\n                computeMonthsParse.call(this);\n            }\n            if (isStrict) {\n                return this._monthsShortStrictRegex;\n            } else {\n                return this._monthsShortRegex;\n            }\n        } else {\n            if (!hasOwnProp(this, '_monthsShortRegex')) {\n                this._monthsShortRegex = defaultMonthsShortRegex;\n            }\n            return this._monthsShortStrictRegex && isStrict ?\n                this._monthsShortStrictRegex : this._monthsShortRegex;\n        }\n    }\n\n    var defaultMonthsRegex = matchWord;\n    function monthsRegex (isStrict) {\n        if (this._monthsParseExact) {\n            if (!hasOwnProp(this, '_monthsRegex')) {\n                computeMonthsParse.call(this);\n            }\n            if (isStrict) {\n                return this._monthsStrictRegex;\n            } else {\n                return this._monthsRegex;\n            }\n        } else {\n            if (!hasOwnProp(this, '_monthsRegex')) {\n                this._monthsRegex = defaultMonthsRegex;\n            }\n            return this._monthsStrictRegex && isStrict ?\n                this._monthsStrictRegex : this._monthsRegex;\n        }\n    }\n\n    function computeMonthsParse () {\n        function cmpLenRev(a, b) {\n            return b.length - a.length;\n        }\n\n        var shortPieces = [], longPieces = [], mixedPieces = [],\n            i, mom;\n        for (i = 0; i < 12; i++) {\n            // make the regex if we don't have it already\n            mom = createUTC([2000, i]);\n            shortPieces.push(this.monthsShort(mom, ''));\n            longPieces.push(this.months(mom, ''));\n            mixedPieces.push(this.months(mom, ''));\n            mixedPieces.push(this.monthsShort(mom, ''));\n        }\n        // Sorting makes sure if one month (or abbr) is a prefix of another it\n        // will match the longer piece.\n        shortPieces.sort(cmpLenRev);\n        longPieces.sort(cmpLenRev);\n        mixedPieces.sort(cmpLenRev);\n        for (i = 0; i < 12; i++) {\n            shortPieces[i] = regexEscape(shortPieces[i]);\n            longPieces[i] = regexEscape(longPieces[i]);\n        }\n        for (i = 0; i < 24; i++) {\n            mixedPieces[i] = regexEscape(mixedPieces[i]);\n        }\n\n        this._monthsRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');\n        this._monthsShortRegex = this._monthsRegex;\n        this._monthsStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');\n        this._monthsShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');\n    }\n\n    function createDate (y, m, d, h, M, s, ms) {\n        // can't just apply() to create a date:\n        // https://stackoverflow.com/q/181348\n        var date = new Date(y, m, d, h, M, s, ms);\n\n        // the date constructor remaps years 0-99 to 1900-1999\n        if (y < 100 && y >= 0 && isFinite(date.getFullYear())) {\n            date.setFullYear(y);\n        }\n        return date;\n    }\n\n    function createUTCDate (y) {\n        var date = new Date(Date.UTC.apply(null, arguments));\n\n        // the Date.UTC function remaps years 0-99 to 1900-1999\n        if (y < 100 && y >= 0 && isFinite(date.getUTCFullYear())) {\n            date.setUTCFullYear(y);\n        }\n        return date;\n    }\n\n    // start-of-first-week - start-of-year\n    function firstWeekOffset(year, dow, doy) {\n        var // first-week day -- which january is always in the first week (4 for iso, 1 for other)\n            fwd = 7 + dow - doy,\n            // first-week day local weekday -- which local weekday is fwd\n            fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;\n\n        return -fwdlw + fwd - 1;\n    }\n\n    // https://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday\n    function dayOfYearFromWeeks(year, week, weekday, dow, doy) {\n        var localWeekday = (7 + weekday - dow) % 7,\n            weekOffset = firstWeekOffset(year, dow, doy),\n            dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset,\n            resYear, resDayOfYear;\n\n        if (dayOfYear <= 0) {\n            resYear = year - 1;\n            resDayOfYear = daysInYear(resYear) + dayOfYear;\n        } else if (dayOfYear > daysInYear(year)) {\n            resYear = year + 1;\n            resDayOfYear = dayOfYear - daysInYear(year);\n        } else {\n            resYear = year;\n            resDayOfYear = dayOfYear;\n        }\n\n        return {\n            year: resYear,\n            dayOfYear: resDayOfYear\n        };\n    }\n\n    function weekOfYear(mom, dow, doy) {\n        var weekOffset = firstWeekOffset(mom.year(), dow, doy),\n            week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1,\n            resWeek, resYear;\n\n        if (week < 1) {\n            resYear = mom.year() - 1;\n            resWeek = week + weeksInYear(resYear, dow, doy);\n        } else if (week > weeksInYear(mom.year(), dow, doy)) {\n            resWeek = week - weeksInYear(mom.year(), dow, doy);\n            resYear = mom.year() + 1;\n        } else {\n            resYear = mom.year();\n            resWeek = week;\n        }\n\n        return {\n            week: resWeek,\n            year: resYear\n        };\n    }\n\n    function weeksInYear(year, dow, doy) {\n        var weekOffset = firstWeekOffset(year, dow, doy),\n            weekOffsetNext = firstWeekOffset(year + 1, dow, doy);\n        return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;\n    }\n\n    // FORMATTING\n\n    addFormatToken('w', ['ww', 2], 'wo', 'week');\n    addFormatToken('W', ['WW', 2], 'Wo', 'isoWeek');\n\n    // ALIASES\n\n    addUnitAlias('week', 'w');\n    addUnitAlias('isoWeek', 'W');\n\n    // PRIORITIES\n\n    addUnitPriority('week', 5);\n    addUnitPriority('isoWeek', 5);\n\n    // PARSING\n\n    addRegexToken('w',  match1to2);\n    addRegexToken('ww', match1to2, match2);\n    addRegexToken('W',  match1to2);\n    addRegexToken('WW', match1to2, match2);\n\n    addWeekParseToken(['w', 'ww', 'W', 'WW'], function (input, week, config, token) {\n        week[token.substr(0, 1)] = toInt(input);\n    });\n\n    // HELPERS\n\n    // LOCALES\n\n    function localeWeek (mom) {\n        return weekOfYear(mom, this._week.dow, this._week.doy).week;\n    }\n\n    var defaultLocaleWeek = {\n        dow : 0, // Sunday is the first day of the week.\n        doy : 6  // The week that contains Jan 1st is the first week of the year.\n    };\n\n    function localeFirstDayOfWeek () {\n        return this._week.dow;\n    }\n\n    function localeFirstDayOfYear () {\n        return this._week.doy;\n    }\n\n    // MOMENTS\n\n    function getSetWeek (input) {\n        var week = this.localeData().week(this);\n        return input == null ? week : this.add((input - week) * 7, 'd');\n    }\n\n    function getSetISOWeek (input) {\n        var week = weekOfYear(this, 1, 4).week;\n        return input == null ? week : this.add((input - week) * 7, 'd');\n    }\n\n    // FORMATTING\n\n    addFormatToken('d', 0, 'do', 'day');\n\n    addFormatToken('dd', 0, 0, function (format) {\n        return this.localeData().weekdaysMin(this, format);\n    });\n\n    addFormatToken('ddd', 0, 0, function (format) {\n        return this.localeData().weekdaysShort(this, format);\n    });\n\n    addFormatToken('dddd', 0, 0, function (format) {\n        return this.localeData().weekdays(this, format);\n    });\n\n    addFormatToken('e', 0, 0, 'weekday');\n    addFormatToken('E', 0, 0, 'isoWeekday');\n\n    // ALIASES\n\n    addUnitAlias('day', 'd');\n    addUnitAlias('weekday', 'e');\n    addUnitAlias('isoWeekday', 'E');\n\n    // PRIORITY\n    addUnitPriority('day', 11);\n    addUnitPriority('weekday', 11);\n    addUnitPriority('isoWeekday', 11);\n\n    // PARSING\n\n    addRegexToken('d',    match1to2);\n    addRegexToken('e',    match1to2);\n    addRegexToken('E',    match1to2);\n    addRegexToken('dd',   function (isStrict, locale) {\n        return locale.weekdaysMinRegex(isStrict);\n    });\n    addRegexToken('ddd',   function (isStrict, locale) {\n        return locale.weekdaysShortRegex(isStrict);\n    });\n    addRegexToken('dddd',   function (isStrict, locale) {\n        return locale.weekdaysRegex(isStrict);\n    });\n\n    addWeekParseToken(['dd', 'ddd', 'dddd'], function (input, week, config, token) {\n        var weekday = config._locale.weekdaysParse(input, token, config._strict);\n        // if we didn't get a weekday name, mark the date as invalid\n        if (weekday != null) {\n            week.d = weekday;\n        } else {\n            getParsingFlags(config).invalidWeekday = input;\n        }\n    });\n\n    addWeekParseToken(['d', 'e', 'E'], function (input, week, config, token) {\n        week[token] = toInt(input);\n    });\n\n    // HELPERS\n\n    function parseWeekday(input, locale) {\n        if (typeof input !== 'string') {\n            return input;\n        }\n\n        if (!isNaN(input)) {\n            return parseInt(input, 10);\n        }\n\n        input = locale.weekdaysParse(input);\n        if (typeof input === 'number') {\n            return input;\n        }\n\n        return null;\n    }\n\n    function parseIsoWeekday(input, locale) {\n        if (typeof input === 'string') {\n            return locale.weekdaysParse(input) % 7 || 7;\n        }\n        return isNaN(input) ? null : input;\n    }\n\n    // LOCALES\n\n    var defaultLocaleWeekdays = 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_');\n    function localeWeekdays (m, format) {\n        if (!m) {\n            return isArray(this._weekdays) ? this._weekdays :\n                this._weekdays['standalone'];\n        }\n        return isArray(this._weekdays) ? this._weekdays[m.day()] :\n            this._weekdays[this._weekdays.isFormat.test(format) ? 'format' : 'standalone'][m.day()];\n    }\n\n    var defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_');\n    function localeWeekdaysShort (m) {\n        return (m) ? this._weekdaysShort[m.day()] : this._weekdaysShort;\n    }\n\n    var defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_');\n    function localeWeekdaysMin (m) {\n        return (m) ? this._weekdaysMin[m.day()] : this._weekdaysMin;\n    }\n\n    function handleStrictParse$1(weekdayName, format, strict) {\n        var i, ii, mom, llc = weekdayName.toLocaleLowerCase();\n        if (!this._weekdaysParse) {\n            this._weekdaysParse = [];\n            this._shortWeekdaysParse = [];\n            this._minWeekdaysParse = [];\n\n            for (i = 0; i < 7; ++i) {\n                mom = createUTC([2000, 1]).day(i);\n                this._minWeekdaysParse[i] = this.weekdaysMin(mom, '').toLocaleLowerCase();\n                this._shortWeekdaysParse[i] = this.weekdaysShort(mom, '').toLocaleLowerCase();\n                this._weekdaysParse[i] = this.weekdays(mom, '').toLocaleLowerCase();\n            }\n        }\n\n        if (strict) {\n            if (format === 'dddd') {\n                ii = indexOf.call(this._weekdaysParse, llc);\n                return ii !== -1 ? ii : null;\n            } else if (format === 'ddd') {\n                ii = indexOf.call(this._shortWeekdaysParse, llc);\n                return ii !== -1 ? ii : null;\n            } else {\n                ii = indexOf.call(this._minWeekdaysParse, llc);\n                return ii !== -1 ? ii : null;\n            }\n        } else {\n            if (format === 'dddd') {\n                ii = indexOf.call(this._weekdaysParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._shortWeekdaysParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._minWeekdaysParse, llc);\n                return ii !== -1 ? ii : null;\n            } else if (format === 'ddd') {\n                ii = indexOf.call(this._shortWeekdaysParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._weekdaysParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._minWeekdaysParse, llc);\n                return ii !== -1 ? ii : null;\n            } else {\n                ii = indexOf.call(this._minWeekdaysParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._weekdaysParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._shortWeekdaysParse, llc);\n                return ii !== -1 ? ii : null;\n            }\n        }\n    }\n\n    function localeWeekdaysParse (weekdayName, format, strict) {\n        var i, mom, regex;\n\n        if (this._weekdaysParseExact) {\n            return handleStrictParse$1.call(this, weekdayName, format, strict);\n        }\n\n        if (!this._weekdaysParse) {\n            this._weekdaysParse = [];\n            this._minWeekdaysParse = [];\n            this._shortWeekdaysParse = [];\n            this._fullWeekdaysParse = [];\n        }\n\n        for (i = 0; i < 7; i++) {\n            // make the regex if we don't have it already\n\n            mom = createUTC([2000, 1]).day(i);\n            if (strict && !this._fullWeekdaysParse[i]) {\n                this._fullWeekdaysParse[i] = new RegExp('^' + this.weekdays(mom, '').replace('.', '\\\\.?') + '$', 'i');\n                this._shortWeekdaysParse[i] = new RegExp('^' + this.weekdaysShort(mom, '').replace('.', '\\\\.?') + '$', 'i');\n                this._minWeekdaysParse[i] = new RegExp('^' + this.weekdaysMin(mom, '').replace('.', '\\\\.?') + '$', 'i');\n            }\n            if (!this._weekdaysParse[i]) {\n                regex = '^' + this.weekdays(mom, '') + '|^' + this.weekdaysShort(mom, '') + '|^' + this.weekdaysMin(mom, '');\n                this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');\n            }\n            // test the regex\n            if (strict && format === 'dddd' && this._fullWeekdaysParse[i].test(weekdayName)) {\n                return i;\n            } else if (strict && format === 'ddd' && this._shortWeekdaysParse[i].test(weekdayName)) {\n                return i;\n            } else if (strict && format === 'dd' && this._minWeekdaysParse[i].test(weekdayName)) {\n                return i;\n            } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {\n                return i;\n            }\n        }\n    }\n\n    // MOMENTS\n\n    function getSetDayOfWeek (input) {\n        if (!this.isValid()) {\n            return input != null ? this : NaN;\n        }\n        var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();\n        if (input != null) {\n            input = parseWeekday(input, this.localeData());\n            return this.add(input - day, 'd');\n        } else {\n            return day;\n        }\n    }\n\n    function getSetLocaleDayOfWeek (input) {\n        if (!this.isValid()) {\n            return input != null ? this : NaN;\n        }\n        var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;\n        return input == null ? weekday : this.add(input - weekday, 'd');\n    }\n\n    function getSetISODayOfWeek (input) {\n        if (!this.isValid()) {\n            return input != null ? this : NaN;\n        }\n\n        // behaves the same as moment#day except\n        // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)\n        // as a setter, sunday should belong to the previous week.\n\n        if (input != null) {\n            var weekday = parseIsoWeekday(input, this.localeData());\n            return this.day(this.day() % 7 ? weekday : weekday - 7);\n        } else {\n            return this.day() || 7;\n        }\n    }\n\n    var defaultWeekdaysRegex = matchWord;\n    function weekdaysRegex (isStrict) {\n        if (this._weekdaysParseExact) {\n            if (!hasOwnProp(this, '_weekdaysRegex')) {\n                computeWeekdaysParse.call(this);\n            }\n            if (isStrict) {\n                return this._weekdaysStrictRegex;\n            } else {\n                return this._weekdaysRegex;\n            }\n        } else {\n            if (!hasOwnProp(this, '_weekdaysRegex')) {\n                this._weekdaysRegex = defaultWeekdaysRegex;\n            }\n            return this._weekdaysStrictRegex && isStrict ?\n                this._weekdaysStrictRegex : this._weekdaysRegex;\n        }\n    }\n\n    var defaultWeekdaysShortRegex = matchWord;\n    function weekdaysShortRegex (isStrict) {\n        if (this._weekdaysParseExact) {\n            if (!hasOwnProp(this, '_weekdaysRegex')) {\n                computeWeekdaysParse.call(this);\n            }\n            if (isStrict) {\n                return this._weekdaysShortStrictRegex;\n            } else {\n                return this._weekdaysShortRegex;\n            }\n        } else {\n            if (!hasOwnProp(this, '_weekdaysShortRegex')) {\n                this._weekdaysShortRegex = defaultWeekdaysShortRegex;\n            }\n            return this._weekdaysShortStrictRegex && isStrict ?\n                this._weekdaysShortStrictRegex : this._weekdaysShortRegex;\n        }\n    }\n\n    var defaultWeekdaysMinRegex = matchWord;\n    function weekdaysMinRegex (isStrict) {\n        if (this._weekdaysParseExact) {\n            if (!hasOwnProp(this, '_weekdaysRegex')) {\n                computeWeekdaysParse.call(this);\n            }\n            if (isStrict) {\n                return this._weekdaysMinStrictRegex;\n            } else {\n                return this._weekdaysMinRegex;\n            }\n        } else {\n            if (!hasOwnProp(this, '_weekdaysMinRegex')) {\n                this._weekdaysMinRegex = defaultWeekdaysMinRegex;\n            }\n            return this._weekdaysMinStrictRegex && isStrict ?\n                this._weekdaysMinStrictRegex : this._weekdaysMinRegex;\n        }\n    }\n\n\n    function computeWeekdaysParse () {\n        function cmpLenRev(a, b) {\n            return b.length - a.length;\n        }\n\n        var minPieces = [], shortPieces = [], longPieces = [], mixedPieces = [],\n            i, mom, minp, shortp, longp;\n        for (i = 0; i < 7; i++) {\n            // make the regex if we don't have it already\n            mom = createUTC([2000, 1]).day(i);\n            minp = this.weekdaysMin(mom, '');\n            shortp = this.weekdaysShort(mom, '');\n            longp = this.weekdays(mom, '');\n            minPieces.push(minp);\n            shortPieces.push(shortp);\n            longPieces.push(longp);\n            mixedPieces.push(minp);\n            mixedPieces.push(shortp);\n            mixedPieces.push(longp);\n        }\n        // Sorting makes sure if one weekday (or abbr) is a prefix of another it\n        // will match the longer piece.\n        minPieces.sort(cmpLenRev);\n        shortPieces.sort(cmpLenRev);\n        longPieces.sort(cmpLenRev);\n        mixedPieces.sort(cmpLenRev);\n        for (i = 0; i < 7; i++) {\n            shortPieces[i] = regexEscape(shortPieces[i]);\n            longPieces[i] = regexEscape(longPieces[i]);\n            mixedPieces[i] = regexEscape(mixedPieces[i]);\n        }\n\n        this._weekdaysRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');\n        this._weekdaysShortRegex = this._weekdaysRegex;\n        this._weekdaysMinRegex = this._weekdaysRegex;\n\n        this._weekdaysStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');\n        this._weekdaysShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');\n        this._weekdaysMinStrictRegex = new RegExp('^(' + minPieces.join('|') + ')', 'i');\n    }\n\n    // FORMATTING\n\n    function hFormat() {\n        return this.hours() % 12 || 12;\n    }\n\n    function kFormat() {\n        return this.hours() || 24;\n    }\n\n    addFormatToken('H', ['HH', 2], 0, 'hour');\n    addFormatToken('h', ['hh', 2], 0, hFormat);\n    addFormatToken('k', ['kk', 2], 0, kFormat);\n\n    addFormatToken('hmm', 0, 0, function () {\n        return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2);\n    });\n\n    addFormatToken('hmmss', 0, 0, function () {\n        return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2) +\n            zeroFill(this.seconds(), 2);\n    });\n\n    addFormatToken('Hmm', 0, 0, function () {\n        return '' + this.hours() + zeroFill(this.minutes(), 2);\n    });\n\n    addFormatToken('Hmmss', 0, 0, function () {\n        return '' + this.hours() + zeroFill(this.minutes(), 2) +\n            zeroFill(this.seconds(), 2);\n    });\n\n    function meridiem (token, lowercase) {\n        addFormatToken(token, 0, 0, function () {\n            return this.localeData().meridiem(this.hours(), this.minutes(), lowercase);\n        });\n    }\n\n    meridiem('a', true);\n    meridiem('A', false);\n\n    // ALIASES\n\n    addUnitAlias('hour', 'h');\n\n    // PRIORITY\n    addUnitPriority('hour', 13);\n\n    // PARSING\n\n    function matchMeridiem (isStrict, locale) {\n        return locale._meridiemParse;\n    }\n\n    addRegexToken('a',  matchMeridiem);\n    addRegexToken('A',  matchMeridiem);\n    addRegexToken('H',  match1to2);\n    addRegexToken('h',  match1to2);\n    addRegexToken('k',  match1to2);\n    addRegexToken('HH', match1to2, match2);\n    addRegexToken('hh', match1to2, match2);\n    addRegexToken('kk', match1to2, match2);\n\n    addRegexToken('hmm', match3to4);\n    addRegexToken('hmmss', match5to6);\n    addRegexToken('Hmm', match3to4);\n    addRegexToken('Hmmss', match5to6);\n\n    addParseToken(['H', 'HH'], HOUR);\n    addParseToken(['k', 'kk'], function (input, array, config) {\n        var kInput = toInt(input);\n        array[HOUR] = kInput === 24 ? 0 : kInput;\n    });\n    addParseToken(['a', 'A'], function (input, array, config) {\n        config._isPm = config._locale.isPM(input);\n        config._meridiem = input;\n    });\n    addParseToken(['h', 'hh'], function (input, array, config) {\n        array[HOUR] = toInt(input);\n        getParsingFlags(config).bigHour = true;\n    });\n    addParseToken('hmm', function (input, array, config) {\n        var pos = input.length - 2;\n        array[HOUR] = toInt(input.substr(0, pos));\n        array[MINUTE] = toInt(input.substr(pos));\n        getParsingFlags(config).bigHour = true;\n    });\n    addParseToken('hmmss', function (input, array, config) {\n        var pos1 = input.length - 4;\n        var pos2 = input.length - 2;\n        array[HOUR] = toInt(input.substr(0, pos1));\n        array[MINUTE] = toInt(input.substr(pos1, 2));\n        array[SECOND] = toInt(input.substr(pos2));\n        getParsingFlags(config).bigHour = true;\n    });\n    addParseToken('Hmm', function (input, array, config) {\n        var pos = input.length - 2;\n        array[HOUR] = toInt(input.substr(0, pos));\n        array[MINUTE] = toInt(input.substr(pos));\n    });\n    addParseToken('Hmmss', function (input, array, config) {\n        var pos1 = input.length - 4;\n        var pos2 = input.length - 2;\n        array[HOUR] = toInt(input.substr(0, pos1));\n        array[MINUTE] = toInt(input.substr(pos1, 2));\n        array[SECOND] = toInt(input.substr(pos2));\n    });\n\n    // LOCALES\n\n    function localeIsPM (input) {\n        // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays\n        // Using charAt should be more compatible.\n        return ((input + '').toLowerCase().charAt(0) === 'p');\n    }\n\n    var defaultLocaleMeridiemParse = /[ap]\\.?m?\\.?/i;\n    function localeMeridiem (hours, minutes, isLower) {\n        if (hours > 11) {\n            return isLower ? 'pm' : 'PM';\n        } else {\n            return isLower ? 'am' : 'AM';\n        }\n    }\n\n\n    // MOMENTS\n\n    // Setting the hour should keep the time, because the user explicitly\n    // specified which hour they want. So trying to maintain the same hour (in\n    // a new timezone) makes sense. Adding/subtracting hours does not follow\n    // this rule.\n    var getSetHour = makeGetSet('Hours', true);\n\n    var baseConfig = {\n        calendar: defaultCalendar,\n        longDateFormat: defaultLongDateFormat,\n        invalidDate: defaultInvalidDate,\n        ordinal: defaultOrdinal,\n        dayOfMonthOrdinalParse: defaultDayOfMonthOrdinalParse,\n        relativeTime: defaultRelativeTime,\n\n        months: defaultLocaleMonths,\n        monthsShort: defaultLocaleMonthsShort,\n\n        week: defaultLocaleWeek,\n\n        weekdays: defaultLocaleWeekdays,\n        weekdaysMin: defaultLocaleWeekdaysMin,\n        weekdaysShort: defaultLocaleWeekdaysShort,\n\n        meridiemParse: defaultLocaleMeridiemParse\n    };\n\n    // internal storage for locale config files\n    var locales = {};\n    var localeFamilies = {};\n    var globalLocale;\n\n    function normalizeLocale(key) {\n        return key ? key.toLowerCase().replace('_', '-') : key;\n    }\n\n    // pick the locale from the array\n    // try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each\n    // substring from most specific to least, but move to the next array item if it's a more specific variant than the current root\n    function chooseLocale(names) {\n        var i = 0, j, next, locale, split;\n\n        while (i < names.length) {\n            split = normalizeLocale(names[i]).split('-');\n            j = split.length;\n            next = normalizeLocale(names[i + 1]);\n            next = next ? next.split('-') : null;\n            while (j > 0) {\n                locale = loadLocale(split.slice(0, j).join('-'));\n                if (locale) {\n                    return locale;\n                }\n                if (next && next.length >= j && compareArrays(split, next, true) >= j - 1) {\n                    //the next array item is better than a shallower substring of this one\n                    break;\n                }\n                j--;\n            }\n            i++;\n        }\n        return globalLocale;\n    }\n\n    function loadLocale(name) {\n        var oldLocale = null;\n        // TODO: Find a better way to register and load all the locales in Node\n        if (!locales[name] && (typeof module !== 'undefined') &&\n                module && module.exports) {\n            try {\n                oldLocale = globalLocale._abbr;\n                var aliasedRequire = require;\n                !(function webpackMissingModule() { var e = new Error(\"Cannot find module \\\"./locale\\\"\"); e.code = 'MODULE_NOT_FOUND'; throw e; }());\n                getSetGlobalLocale(oldLocale);\n            } catch (e) {}\n        }\n        return locales[name];\n    }\n\n    // This function will load locale and then set the global locale.  If\n    // no arguments are passed in, it will simply return the current global\n    // locale key.\n    function getSetGlobalLocale (key, values) {\n        var data;\n        if (key) {\n            if (isUndefined(values)) {\n                data = getLocale(key);\n            }\n            else {\n                data = defineLocale(key, values);\n            }\n\n            if (data) {\n                // moment.duration._locale = moment._locale = data;\n                globalLocale = data;\n            }\n            else {\n                if ((typeof console !==  'undefined') && console.warn) {\n                    //warn user if arguments are passed but the locale could not be set\n                    console.warn('Locale ' + key +  ' not found. Did you forget to load it?');\n                }\n            }\n        }\n\n        return globalLocale._abbr;\n    }\n\n    function defineLocale (name, config) {\n        if (config !== null) {\n            var locale, parentConfig = baseConfig;\n            config.abbr = name;\n            if (locales[name] != null) {\n                deprecateSimple('defineLocaleOverride',\n                        'use moment.updateLocale(localeName, config) to change ' +\n                        'an existing locale. moment.defineLocale(localeName, ' +\n                        'config) should only be used for creating a new locale ' +\n                        'See http://momentjs.com/guides/#/warnings/define-locale/ for more info.');\n                parentConfig = locales[name]._config;\n            } else if (config.parentLocale != null) {\n                if (locales[config.parentLocale] != null) {\n                    parentConfig = locales[config.parentLocale]._config;\n                } else {\n                    locale = loadLocale(config.parentLocale);\n                    if (locale != null) {\n                        parentConfig = locale._config;\n                    } else {\n                        if (!localeFamilies[config.parentLocale]) {\n                            localeFamilies[config.parentLocale] = [];\n                        }\n                        localeFamilies[config.parentLocale].push({\n                            name: name,\n                            config: config\n                        });\n                        return null;\n                    }\n                }\n            }\n            locales[name] = new Locale(mergeConfigs(parentConfig, config));\n\n            if (localeFamilies[name]) {\n                localeFamilies[name].forEach(function (x) {\n                    defineLocale(x.name, x.config);\n                });\n            }\n\n            // backwards compat for now: also set the locale\n            // make sure we set the locale AFTER all child locales have been\n            // created, so we won't end up with the child locale set.\n            getSetGlobalLocale(name);\n\n\n            return locales[name];\n        } else {\n            // useful for testing\n            delete locales[name];\n            return null;\n        }\n    }\n\n    function updateLocale(name, config) {\n        if (config != null) {\n            var locale, tmpLocale, parentConfig = baseConfig;\n            // MERGE\n            tmpLocale = loadLocale(name);\n            if (tmpLocale != null) {\n                parentConfig = tmpLocale._config;\n            }\n            config = mergeConfigs(parentConfig, config);\n            locale = new Locale(config);\n            locale.parentLocale = locales[name];\n            locales[name] = locale;\n\n            // backwards compat for now: also set the locale\n            getSetGlobalLocale(name);\n        } else {\n            // pass null for config to unupdate, useful for tests\n            if (locales[name] != null) {\n                if (locales[name].parentLocale != null) {\n                    locales[name] = locales[name].parentLocale;\n                } else if (locales[name] != null) {\n                    delete locales[name];\n                }\n            }\n        }\n        return locales[name];\n    }\n\n    // returns locale data\n    function getLocale (key) {\n        var locale;\n\n        if (key && key._locale && key._locale._abbr) {\n            key = key._locale._abbr;\n        }\n\n        if (!key) {\n            return globalLocale;\n        }\n\n        if (!isArray(key)) {\n            //short-circuit everything else\n            locale = loadLocale(key);\n            if (locale) {\n                return locale;\n            }\n            key = [key];\n        }\n\n        return chooseLocale(key);\n    }\n\n    function listLocales() {\n        return keys(locales);\n    }\n\n    function checkOverflow (m) {\n        var overflow;\n        var a = m._a;\n\n        if (a && getParsingFlags(m).overflow === -2) {\n            overflow =\n                a[MONTH]       < 0 || a[MONTH]       > 11  ? MONTH :\n                a[DATE]        < 1 || a[DATE]        > daysInMonth(a[YEAR], a[MONTH]) ? DATE :\n                a[HOUR]        < 0 || a[HOUR]        > 24 || (a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0)) ? HOUR :\n                a[MINUTE]      < 0 || a[MINUTE]      > 59  ? MINUTE :\n                a[SECOND]      < 0 || a[SECOND]      > 59  ? SECOND :\n                a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND :\n                -1;\n\n            if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {\n                overflow = DATE;\n            }\n            if (getParsingFlags(m)._overflowWeeks && overflow === -1) {\n                overflow = WEEK;\n            }\n            if (getParsingFlags(m)._overflowWeekday && overflow === -1) {\n                overflow = WEEKDAY;\n            }\n\n            getParsingFlags(m).overflow = overflow;\n        }\n\n        return m;\n    }\n\n    // Pick the first defined of two or three arguments.\n    function defaults(a, b, c) {\n        if (a != null) {\n            return a;\n        }\n        if (b != null) {\n            return b;\n        }\n        return c;\n    }\n\n    function currentDateArray(config) {\n        // hooks is actually the exported moment object\n        var nowValue = new Date(hooks.now());\n        if (config._useUTC) {\n            return [nowValue.getUTCFullYear(), nowValue.getUTCMonth(), nowValue.getUTCDate()];\n        }\n        return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];\n    }\n\n    // convert an array to a date.\n    // the array should mirror the parameters below\n    // note: all values past the year are optional and will default to the lowest possible value.\n    // [year, month, day , hour, minute, second, millisecond]\n    function configFromArray (config) {\n        var i, date, input = [], currentDate, expectedWeekday, yearToUse;\n\n        if (config._d) {\n            return;\n        }\n\n        currentDate = currentDateArray(config);\n\n        //compute day of the year from weeks and weekdays\n        if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {\n            dayOfYearFromWeekInfo(config);\n        }\n\n        //if the day of the year is set, figure out what it is\n        if (config._dayOfYear != null) {\n            yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);\n\n            if (config._dayOfYear > daysInYear(yearToUse) || config._dayOfYear === 0) {\n                getParsingFlags(config)._overflowDayOfYear = true;\n            }\n\n            date = createUTCDate(yearToUse, 0, config._dayOfYear);\n            config._a[MONTH] = date.getUTCMonth();\n            config._a[DATE] = date.getUTCDate();\n        }\n\n        // Default to current date.\n        // * if no year, month, day of month are given, default to today\n        // * if day of month is given, default month and year\n        // * if month is given, default only year\n        // * if year is given, don't default anything\n        for (i = 0; i < 3 && config._a[i] == null; ++i) {\n            config._a[i] = input[i] = currentDate[i];\n        }\n\n        // Zero out whatever was not defaulted, including time\n        for (; i < 7; i++) {\n            config._a[i] = input[i] = (config._a[i] == null) ? (i === 2 ? 1 : 0) : config._a[i];\n        }\n\n        // Check for 24:00:00.000\n        if (config._a[HOUR] === 24 &&\n                config._a[MINUTE] === 0 &&\n                config._a[SECOND] === 0 &&\n                config._a[MILLISECOND] === 0) {\n            config._nextDay = true;\n            config._a[HOUR] = 0;\n        }\n\n        config._d = (config._useUTC ? createUTCDate : createDate).apply(null, input);\n        expectedWeekday = config._useUTC ? config._d.getUTCDay() : config._d.getDay();\n\n        // Apply timezone offset from input. The actual utcOffset can be changed\n        // with parseZone.\n        if (config._tzm != null) {\n            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);\n        }\n\n        if (config._nextDay) {\n            config._a[HOUR] = 24;\n        }\n\n        // check for mismatching day of week\n        if (config._w && typeof config._w.d !== 'undefined' && config._w.d !== expectedWeekday) {\n            getParsingFlags(config).weekdayMismatch = true;\n        }\n    }\n\n    function dayOfYearFromWeekInfo(config) {\n        var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow;\n\n        w = config._w;\n        if (w.GG != null || w.W != null || w.E != null) {\n            dow = 1;\n            doy = 4;\n\n            // TODO: We need to take the current isoWeekYear, but that depends on\n            // how we interpret now (local, utc, fixed offset). So create\n            // a now version of current config (take local/utc/offset flags, and\n            // create now).\n            weekYear = defaults(w.GG, config._a[YEAR], weekOfYear(createLocal(), 1, 4).year);\n            week = defaults(w.W, 1);\n            weekday = defaults(w.E, 1);\n            if (weekday < 1 || weekday > 7) {\n                weekdayOverflow = true;\n            }\n        } else {\n            dow = config._locale._week.dow;\n            doy = config._locale._week.doy;\n\n            var curWeek = weekOfYear(createLocal(), dow, doy);\n\n            weekYear = defaults(w.gg, config._a[YEAR], curWeek.year);\n\n            // Default to current week.\n            week = defaults(w.w, curWeek.week);\n\n            if (w.d != null) {\n                // weekday -- low day numbers are considered next week\n                weekday = w.d;\n                if (weekday < 0 || weekday > 6) {\n                    weekdayOverflow = true;\n                }\n            } else if (w.e != null) {\n                // local weekday -- counting starts from begining of week\n                weekday = w.e + dow;\n                if (w.e < 0 || w.e > 6) {\n                    weekdayOverflow = true;\n                }\n            } else {\n                // default to begining of week\n                weekday = dow;\n            }\n        }\n        if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {\n            getParsingFlags(config)._overflowWeeks = true;\n        } else if (weekdayOverflow != null) {\n            getParsingFlags(config)._overflowWeekday = true;\n        } else {\n            temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);\n            config._a[YEAR] = temp.year;\n            config._dayOfYear = temp.dayOfYear;\n        }\n    }\n\n    // iso 8601 regex\n    // 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)\n    var extendedIsoRegex = /^\\s*((?:[+-]\\d{6}|\\d{4})-(?:\\d\\d-\\d\\d|W\\d\\d-\\d|W\\d\\d|\\d\\d\\d|\\d\\d))(?:(T| )(\\d\\d(?::\\d\\d(?::\\d\\d(?:[.,]\\d+)?)?)?)([\\+\\-]\\d\\d(?::?\\d\\d)?|\\s*Z)?)?$/;\n    var basicIsoRegex = /^\\s*((?:[+-]\\d{6}|\\d{4})(?:\\d\\d\\d\\d|W\\d\\d\\d|W\\d\\d|\\d\\d\\d|\\d\\d))(?:(T| )(\\d\\d(?:\\d\\d(?:\\d\\d(?:[.,]\\d+)?)?)?)([\\+\\-]\\d\\d(?::?\\d\\d)?|\\s*Z)?)?$/;\n\n    var tzRegex = /Z|[+-]\\d\\d(?::?\\d\\d)?/;\n\n    var isoDates = [\n        ['YYYYYY-MM-DD', /[+-]\\d{6}-\\d\\d-\\d\\d/],\n        ['YYYY-MM-DD', /\\d{4}-\\d\\d-\\d\\d/],\n        ['GGGG-[W]WW-E', /\\d{4}-W\\d\\d-\\d/],\n        ['GGGG-[W]WW', /\\d{4}-W\\d\\d/, false],\n        ['YYYY-DDD', /\\d{4}-\\d{3}/],\n        ['YYYY-MM', /\\d{4}-\\d\\d/, false],\n        ['YYYYYYMMDD', /[+-]\\d{10}/],\n        ['YYYYMMDD', /\\d{8}/],\n        // YYYYMM is NOT allowed by the standard\n        ['GGGG[W]WWE', /\\d{4}W\\d{3}/],\n        ['GGGG[W]WW', /\\d{4}W\\d{2}/, false],\n        ['YYYYDDD', /\\d{7}/]\n    ];\n\n    // iso time formats and regexes\n    var isoTimes = [\n        ['HH:mm:ss.SSSS', /\\d\\d:\\d\\d:\\d\\d\\.\\d+/],\n        ['HH:mm:ss,SSSS', /\\d\\d:\\d\\d:\\d\\d,\\d+/],\n        ['HH:mm:ss', /\\d\\d:\\d\\d:\\d\\d/],\n        ['HH:mm', /\\d\\d:\\d\\d/],\n        ['HHmmss.SSSS', /\\d\\d\\d\\d\\d\\d\\.\\d+/],\n        ['HHmmss,SSSS', /\\d\\d\\d\\d\\d\\d,\\d+/],\n        ['HHmmss', /\\d\\d\\d\\d\\d\\d/],\n        ['HHmm', /\\d\\d\\d\\d/],\n        ['HH', /\\d\\d/]\n    ];\n\n    var aspNetJsonRegex = /^\\/?Date\\((\\-?\\d+)/i;\n\n    // date from iso format\n    function configFromISO(config) {\n        var i, l,\n            string = config._i,\n            match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string),\n            allowTime, dateFormat, timeFormat, tzFormat;\n\n        if (match) {\n            getParsingFlags(config).iso = true;\n\n            for (i = 0, l = isoDates.length; i < l; i++) {\n                if (isoDates[i][1].exec(match[1])) {\n                    dateFormat = isoDates[i][0];\n                    allowTime = isoDates[i][2] !== false;\n                    break;\n                }\n            }\n            if (dateFormat == null) {\n                config._isValid = false;\n                return;\n            }\n            if (match[3]) {\n                for (i = 0, l = isoTimes.length; i < l; i++) {\n                    if (isoTimes[i][1].exec(match[3])) {\n                        // match[2] should be 'T' or space\n                        timeFormat = (match[2] || ' ') + isoTimes[i][0];\n                        break;\n                    }\n                }\n                if (timeFormat == null) {\n                    config._isValid = false;\n                    return;\n                }\n            }\n            if (!allowTime && timeFormat != null) {\n                config._isValid = false;\n                return;\n            }\n            if (match[4]) {\n                if (tzRegex.exec(match[4])) {\n                    tzFormat = 'Z';\n                } else {\n                    config._isValid = false;\n                    return;\n                }\n            }\n            config._f = dateFormat + (timeFormat || '') + (tzFormat || '');\n            configFromStringAndFormat(config);\n        } else {\n            config._isValid = false;\n        }\n    }\n\n    // RFC 2822 regex: For details see https://tools.ietf.org/html/rfc2822#section-3.3\n    var rfc2822 = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\\s)?(\\d{1,2})\\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\\s(\\d{2,4})\\s(\\d\\d):(\\d\\d)(?::(\\d\\d))?\\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\\d{4}))$/;\n\n    function extractFromRFC2822Strings(yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr) {\n        var result = [\n            untruncateYear(yearStr),\n            defaultLocaleMonthsShort.indexOf(monthStr),\n            parseInt(dayStr, 10),\n            parseInt(hourStr, 10),\n            parseInt(minuteStr, 10)\n        ];\n\n        if (secondStr) {\n            result.push(parseInt(secondStr, 10));\n        }\n\n        return result;\n    }\n\n    function untruncateYear(yearStr) {\n        var year = parseInt(yearStr, 10);\n        if (year <= 49) {\n            return 2000 + year;\n        } else if (year <= 999) {\n            return 1900 + year;\n        }\n        return year;\n    }\n\n    function preprocessRFC2822(s) {\n        // Remove comments and folding whitespace and replace multiple-spaces with a single space\n        return s.replace(/\\([^)]*\\)|[\\n\\t]/g, ' ').replace(/(\\s\\s+)/g, ' ').replace(/^\\s\\s*/, '').replace(/\\s\\s*$/, '');\n    }\n\n    function checkWeekday(weekdayStr, parsedInput, config) {\n        if (weekdayStr) {\n            // TODO: Replace the vanilla JS Date object with an indepentent day-of-week check.\n            var weekdayProvided = defaultLocaleWeekdaysShort.indexOf(weekdayStr),\n                weekdayActual = new Date(parsedInput[0], parsedInput[1], parsedInput[2]).getDay();\n            if (weekdayProvided !== weekdayActual) {\n                getParsingFlags(config).weekdayMismatch = true;\n                config._isValid = false;\n                return false;\n            }\n        }\n        return true;\n    }\n\n    var obsOffsets = {\n        UT: 0,\n        GMT: 0,\n        EDT: -4 * 60,\n        EST: -5 * 60,\n        CDT: -5 * 60,\n        CST: -6 * 60,\n        MDT: -6 * 60,\n        MST: -7 * 60,\n        PDT: -7 * 60,\n        PST: -8 * 60\n    };\n\n    function calculateOffset(obsOffset, militaryOffset, numOffset) {\n        if (obsOffset) {\n            return obsOffsets[obsOffset];\n        } else if (militaryOffset) {\n            // the only allowed military tz is Z\n            return 0;\n        } else {\n            var hm = parseInt(numOffset, 10);\n            var m = hm % 100, h = (hm - m) / 100;\n            return h * 60 + m;\n        }\n    }\n\n    // date and time from ref 2822 format\n    function configFromRFC2822(config) {\n        var match = rfc2822.exec(preprocessRFC2822(config._i));\n        if (match) {\n            var parsedArray = extractFromRFC2822Strings(match[4], match[3], match[2], match[5], match[6], match[7]);\n            if (!checkWeekday(match[1], parsedArray, config)) {\n                return;\n            }\n\n            config._a = parsedArray;\n            config._tzm = calculateOffset(match[8], match[9], match[10]);\n\n            config._d = createUTCDate.apply(null, config._a);\n            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);\n\n            getParsingFlags(config).rfc2822 = true;\n        } else {\n            config._isValid = false;\n        }\n    }\n\n    // date from iso format or fallback\n    function configFromString(config) {\n        var matched = aspNetJsonRegex.exec(config._i);\n\n        if (matched !== null) {\n            config._d = new Date(+matched[1]);\n            return;\n        }\n\n        configFromISO(config);\n        if (config._isValid === false) {\n            delete config._isValid;\n        } else {\n            return;\n        }\n\n        configFromRFC2822(config);\n        if (config._isValid === false) {\n            delete config._isValid;\n        } else {\n            return;\n        }\n\n        // Final attempt, use Input Fallback\n        hooks.createFromInputFallback(config);\n    }\n\n    hooks.createFromInputFallback = deprecate(\n        'value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), ' +\n        'which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are ' +\n        'discouraged and will be removed in an upcoming major release. Please refer to ' +\n        'http://momentjs.com/guides/#/warnings/js-date/ for more info.',\n        function (config) {\n            config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));\n        }\n    );\n\n    // constant that refers to the ISO standard\n    hooks.ISO_8601 = function () {};\n\n    // constant that refers to the RFC 2822 form\n    hooks.RFC_2822 = function () {};\n\n    // date from string and format string\n    function configFromStringAndFormat(config) {\n        // TODO: Move this to another part of the creation flow to prevent circular deps\n        if (config._f === hooks.ISO_8601) {\n            configFromISO(config);\n            return;\n        }\n        if (config._f === hooks.RFC_2822) {\n            configFromRFC2822(config);\n            return;\n        }\n        config._a = [];\n        getParsingFlags(config).empty = true;\n\n        // This array is used to make a Date, either with `new Date` or `Date.UTC`\n        var string = '' + config._i,\n            i, parsedInput, tokens, token, skipped,\n            stringLength = string.length,\n            totalParsedInputLength = 0;\n\n        tokens = expandFormat(config._f, config._locale).match(formattingTokens) || [];\n\n        for (i = 0; i < tokens.length; i++) {\n            token = tokens[i];\n            parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0];\n            // console.log('token', token, 'parsedInput', parsedInput,\n            //         'regex', getParseRegexForToken(token, config));\n            if (parsedInput) {\n                skipped = string.substr(0, string.indexOf(parsedInput));\n                if (skipped.length > 0) {\n                    getParsingFlags(config).unusedInput.push(skipped);\n                }\n                string = string.slice(string.indexOf(parsedInput) + parsedInput.length);\n                totalParsedInputLength += parsedInput.length;\n            }\n            // don't parse if it's not a known token\n            if (formatTokenFunctions[token]) {\n                if (parsedInput) {\n                    getParsingFlags(config).empty = false;\n                }\n                else {\n                    getParsingFlags(config).unusedTokens.push(token);\n                }\n                addTimeToArrayFromToken(token, parsedInput, config);\n            }\n            else if (config._strict && !parsedInput) {\n                getParsingFlags(config).unusedTokens.push(token);\n            }\n        }\n\n        // add remaining unparsed input length to the string\n        getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;\n        if (string.length > 0) {\n            getParsingFlags(config).unusedInput.push(string);\n        }\n\n        // clear _12h flag if hour is <= 12\n        if (config._a[HOUR] <= 12 &&\n            getParsingFlags(config).bigHour === true &&\n            config._a[HOUR] > 0) {\n            getParsingFlags(config).bigHour = undefined;\n        }\n\n        getParsingFlags(config).parsedDateParts = config._a.slice(0);\n        getParsingFlags(config).meridiem = config._meridiem;\n        // handle meridiem\n        config._a[HOUR] = meridiemFixWrap(config._locale, config._a[HOUR], config._meridiem);\n\n        configFromArray(config);\n        checkOverflow(config);\n    }\n\n\n    function meridiemFixWrap (locale, hour, meridiem) {\n        var isPm;\n\n        if (meridiem == null) {\n            // nothing to do\n            return hour;\n        }\n        if (locale.meridiemHour != null) {\n            return locale.meridiemHour(hour, meridiem);\n        } else if (locale.isPM != null) {\n            // Fallback\n            isPm = locale.isPM(meridiem);\n            if (isPm && hour < 12) {\n                hour += 12;\n            }\n            if (!isPm && hour === 12) {\n                hour = 0;\n            }\n            return hour;\n        } else {\n            // this is not supposed to happen\n            return hour;\n        }\n    }\n\n    // date from string and array of format strings\n    function configFromStringAndArray(config) {\n        var tempConfig,\n            bestMoment,\n\n            scoreToBeat,\n            i,\n            currentScore;\n\n        if (config._f.length === 0) {\n            getParsingFlags(config).invalidFormat = true;\n            config._d = new Date(NaN);\n            return;\n        }\n\n        for (i = 0; i < config._f.length; i++) {\n            currentScore = 0;\n            tempConfig = copyConfig({}, config);\n            if (config._useUTC != null) {\n                tempConfig._useUTC = config._useUTC;\n            }\n            tempConfig._f = config._f[i];\n            configFromStringAndFormat(tempConfig);\n\n            if (!isValid(tempConfig)) {\n                continue;\n            }\n\n            // if there is any input that was not parsed add a penalty for that format\n            currentScore += getParsingFlags(tempConfig).charsLeftOver;\n\n            //or tokens\n            currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;\n\n            getParsingFlags(tempConfig).score = currentScore;\n\n            if (scoreToBeat == null || currentScore < scoreToBeat) {\n                scoreToBeat = currentScore;\n                bestMoment = tempConfig;\n            }\n        }\n\n        extend(config, bestMoment || tempConfig);\n    }\n\n    function configFromObject(config) {\n        if (config._d) {\n            return;\n        }\n\n        var i = normalizeObjectUnits(config._i);\n        config._a = map([i.year, i.month, i.day || i.date, i.hour, i.minute, i.second, i.millisecond], function (obj) {\n            return obj && parseInt(obj, 10);\n        });\n\n        configFromArray(config);\n    }\n\n    function createFromConfig (config) {\n        var res = new Moment(checkOverflow(prepareConfig(config)));\n        if (res._nextDay) {\n            // Adding is smart enough around DST\n            res.add(1, 'd');\n            res._nextDay = undefined;\n        }\n\n        return res;\n    }\n\n    function prepareConfig (config) {\n        var input = config._i,\n            format = config._f;\n\n        config._locale = config._locale || getLocale(config._l);\n\n        if (input === null || (format === undefined && input === '')) {\n            return createInvalid({nullInput: true});\n        }\n\n        if (typeof input === 'string') {\n            config._i = input = config._locale.preparse(input);\n        }\n\n        if (isMoment(input)) {\n            return new Moment(checkOverflow(input));\n        } else if (isDate(input)) {\n            config._d = input;\n        } else if (isArray(format)) {\n            configFromStringAndArray(config);\n        } else if (format) {\n            configFromStringAndFormat(config);\n        }  else {\n            configFromInput(config);\n        }\n\n        if (!isValid(config)) {\n            config._d = null;\n        }\n\n        return config;\n    }\n\n    function configFromInput(config) {\n        var input = config._i;\n        if (isUndefined(input)) {\n            config._d = new Date(hooks.now());\n        } else if (isDate(input)) {\n            config._d = new Date(input.valueOf());\n        } else if (typeof input === 'string') {\n            configFromString(config);\n        } else if (isArray(input)) {\n            config._a = map(input.slice(0), function (obj) {\n                return parseInt(obj, 10);\n            });\n            configFromArray(config);\n        } else if (isObject(input)) {\n            configFromObject(config);\n        } else if (isNumber(input)) {\n            // from milliseconds\n            config._d = new Date(input);\n        } else {\n            hooks.createFromInputFallback(config);\n        }\n    }\n\n    function createLocalOrUTC (input, format, locale, strict, isUTC) {\n        var c = {};\n\n        if (locale === true || locale === false) {\n            strict = locale;\n            locale = undefined;\n        }\n\n        if ((isObject(input) && isObjectEmpty(input)) ||\n                (isArray(input) && input.length === 0)) {\n            input = undefined;\n        }\n        // object construction must be done this way.\n        // https://github.com/moment/moment/issues/1423\n        c._isAMomentObject = true;\n        c._useUTC = c._isUTC = isUTC;\n        c._l = locale;\n        c._i = input;\n        c._f = format;\n        c._strict = strict;\n\n        return createFromConfig(c);\n    }\n\n    function createLocal (input, format, locale, strict) {\n        return createLocalOrUTC(input, format, locale, strict, false);\n    }\n\n    var prototypeMin = deprecate(\n        'moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/',\n        function () {\n            var other = createLocal.apply(null, arguments);\n            if (this.isValid() && other.isValid()) {\n                return other < this ? this : other;\n            } else {\n                return createInvalid();\n            }\n        }\n    );\n\n    var prototypeMax = deprecate(\n        'moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/',\n        function () {\n            var other = createLocal.apply(null, arguments);\n            if (this.isValid() && other.isValid()) {\n                return other > this ? this : other;\n            } else {\n                return createInvalid();\n            }\n        }\n    );\n\n    // Pick a moment m from moments so that m[fn](other) is true for all\n    // other. This relies on the function fn to be transitive.\n    //\n    // moments should either be an array of moment objects or an array, whose\n    // first element is an array of moment objects.\n    function pickBy(fn, moments) {\n        var res, i;\n        if (moments.length === 1 && isArray(moments[0])) {\n            moments = moments[0];\n        }\n        if (!moments.length) {\n            return createLocal();\n        }\n        res = moments[0];\n        for (i = 1; i < moments.length; ++i) {\n            if (!moments[i].isValid() || moments[i][fn](res)) {\n                res = moments[i];\n            }\n        }\n        return res;\n    }\n\n    // TODO: Use [].sort instead?\n    function min () {\n        var args = [].slice.call(arguments, 0);\n\n        return pickBy('isBefore', args);\n    }\n\n    function max () {\n        var args = [].slice.call(arguments, 0);\n\n        return pickBy('isAfter', args);\n    }\n\n    var now = function () {\n        return Date.now ? Date.now() : +(new Date());\n    };\n\n    var ordering = ['year', 'quarter', 'month', 'week', 'day', 'hour', 'minute', 'second', 'millisecond'];\n\n    function isDurationValid(m) {\n        for (var key in m) {\n            if (!(indexOf.call(ordering, key) !== -1 && (m[key] == null || !isNaN(m[key])))) {\n                return false;\n            }\n        }\n\n        var unitHasDecimal = false;\n        for (var i = 0; i < ordering.length; ++i) {\n            if (m[ordering[i]]) {\n                if (unitHasDecimal) {\n                    return false; // only allow non-integers for smallest unit\n                }\n                if (parseFloat(m[ordering[i]]) !== toInt(m[ordering[i]])) {\n                    unitHasDecimal = true;\n                }\n            }\n        }\n\n        return true;\n    }\n\n    function isValid$1() {\n        return this._isValid;\n    }\n\n    function createInvalid$1() {\n        return createDuration(NaN);\n    }\n\n    function Duration (duration) {\n        var normalizedInput = normalizeObjectUnits(duration),\n            years = normalizedInput.year || 0,\n            quarters = normalizedInput.quarter || 0,\n            months = normalizedInput.month || 0,\n            weeks = normalizedInput.week || 0,\n            days = normalizedInput.day || 0,\n            hours = normalizedInput.hour || 0,\n            minutes = normalizedInput.minute || 0,\n            seconds = normalizedInput.second || 0,\n            milliseconds = normalizedInput.millisecond || 0;\n\n        this._isValid = isDurationValid(normalizedInput);\n\n        // representation for dateAddRemove\n        this._milliseconds = +milliseconds +\n            seconds * 1e3 + // 1000\n            minutes * 6e4 + // 1000 * 60\n            hours * 1000 * 60 * 60; //using 1000 * 60 * 60 instead of 36e5 to avoid floating point rounding errors https://github.com/moment/moment/issues/2978\n        // Because of dateAddRemove treats 24 hours as different from a\n        // day when working around DST, we need to store them separately\n        this._days = +days +\n            weeks * 7;\n        // It is impossible to translate months into days without knowing\n        // which months you are are talking about, so we have to store\n        // it separately.\n        this._months = +months +\n            quarters * 3 +\n            years * 12;\n\n        this._data = {};\n\n        this._locale = getLocale();\n\n        this._bubble();\n    }\n\n    function isDuration (obj) {\n        return obj instanceof Duration;\n    }\n\n    function absRound (number) {\n        if (number < 0) {\n            return Math.round(-1 * number) * -1;\n        } else {\n            return Math.round(number);\n        }\n    }\n\n    // FORMATTING\n\n    function offset (token, separator) {\n        addFormatToken(token, 0, 0, function () {\n            var offset = this.utcOffset();\n            var sign = '+';\n            if (offset < 0) {\n                offset = -offset;\n                sign = '-';\n            }\n            return sign + zeroFill(~~(offset / 60), 2) + separator + zeroFill(~~(offset) % 60, 2);\n        });\n    }\n\n    offset('Z', ':');\n    offset('ZZ', '');\n\n    // PARSING\n\n    addRegexToken('Z',  matchShortOffset);\n    addRegexToken('ZZ', matchShortOffset);\n    addParseToken(['Z', 'ZZ'], function (input, array, config) {\n        config._useUTC = true;\n        config._tzm = offsetFromString(matchShortOffset, input);\n    });\n\n    // HELPERS\n\n    // timezone chunker\n    // '+10:00' > ['10',  '00']\n    // '-1530'  > ['-15', '30']\n    var chunkOffset = /([\\+\\-]|\\d\\d)/gi;\n\n    function offsetFromString(matcher, string) {\n        var matches = (string || '').match(matcher);\n\n        if (matches === null) {\n            return null;\n        }\n\n        var chunk   = matches[matches.length - 1] || [];\n        var parts   = (chunk + '').match(chunkOffset) || ['-', 0, 0];\n        var minutes = +(parts[1] * 60) + toInt(parts[2]);\n\n        return minutes === 0 ?\n          0 :\n          parts[0] === '+' ? minutes : -minutes;\n    }\n\n    // Return a moment from input, that is local/utc/zone equivalent to model.\n    function cloneWithOffset(input, model) {\n        var res, diff;\n        if (model._isUTC) {\n            res = model.clone();\n            diff = (isMoment(input) || isDate(input) ? input.valueOf() : createLocal(input).valueOf()) - res.valueOf();\n            // Use low-level api, because this fn is low-level api.\n            res._d.setTime(res._d.valueOf() + diff);\n            hooks.updateOffset(res, false);\n            return res;\n        } else {\n            return createLocal(input).local();\n        }\n    }\n\n    function getDateOffset (m) {\n        // On Firefox.24 Date#getTimezoneOffset returns a floating point.\n        // https://github.com/moment/moment/pull/1871\n        return -Math.round(m._d.getTimezoneOffset() / 15) * 15;\n    }\n\n    // HOOKS\n\n    // This function will be called whenever a moment is mutated.\n    // It is intended to keep the offset in sync with the timezone.\n    hooks.updateOffset = function () {};\n\n    // MOMENTS\n\n    // keepLocalTime = true means only change the timezone, without\n    // affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->\n    // 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset\n    // +0200, so we adjust the time as needed, to be valid.\n    //\n    // Keeping the time actually adds/subtracts (one hour)\n    // from the actual represented time. That is why we call updateOffset\n    // a second time. In case it wants us to change the offset again\n    // _changeInProgress == true case, then we have to adjust, because\n    // there is no such time in the given timezone.\n    function getSetOffset (input, keepLocalTime, keepMinutes) {\n        var offset = this._offset || 0,\n            localAdjust;\n        if (!this.isValid()) {\n            return input != null ? this : NaN;\n        }\n        if (input != null) {\n            if (typeof input === 'string') {\n                input = offsetFromString(matchShortOffset, input);\n                if (input === null) {\n                    return this;\n                }\n            } else if (Math.abs(input) < 16 && !keepMinutes) {\n                input = input * 60;\n            }\n            if (!this._isUTC && keepLocalTime) {\n                localAdjust = getDateOffset(this);\n            }\n            this._offset = input;\n            this._isUTC = true;\n            if (localAdjust != null) {\n                this.add(localAdjust, 'm');\n            }\n            if (offset !== input) {\n                if (!keepLocalTime || this._changeInProgress) {\n                    addSubtract(this, createDuration(input - offset, 'm'), 1, false);\n                } else if (!this._changeInProgress) {\n                    this._changeInProgress = true;\n                    hooks.updateOffset(this, true);\n                    this._changeInProgress = null;\n                }\n            }\n            return this;\n        } else {\n            return this._isUTC ? offset : getDateOffset(this);\n        }\n    }\n\n    function getSetZone (input, keepLocalTime) {\n        if (input != null) {\n            if (typeof input !== 'string') {\n                input = -input;\n            }\n\n            this.utcOffset(input, keepLocalTime);\n\n            return this;\n        } else {\n            return -this.utcOffset();\n        }\n    }\n\n    function setOffsetToUTC (keepLocalTime) {\n        return this.utcOffset(0, keepLocalTime);\n    }\n\n    function setOffsetToLocal (keepLocalTime) {\n        if (this._isUTC) {\n            this.utcOffset(0, keepLocalTime);\n            this._isUTC = false;\n\n            if (keepLocalTime) {\n                this.subtract(getDateOffset(this), 'm');\n            }\n        }\n        return this;\n    }\n\n    function setOffsetToParsedOffset () {\n        if (this._tzm != null) {\n            this.utcOffset(this._tzm, false, true);\n        } else if (typeof this._i === 'string') {\n            var tZone = offsetFromString(matchOffset, this._i);\n            if (tZone != null) {\n                this.utcOffset(tZone);\n            }\n            else {\n                this.utcOffset(0, true);\n            }\n        }\n        return this;\n    }\n\n    function hasAlignedHourOffset (input) {\n        if (!this.isValid()) {\n            return false;\n        }\n        input = input ? createLocal(input).utcOffset() : 0;\n\n        return (this.utcOffset() - input) % 60 === 0;\n    }\n\n    function isDaylightSavingTime () {\n        return (\n            this.utcOffset() > this.clone().month(0).utcOffset() ||\n            this.utcOffset() > this.clone().month(5).utcOffset()\n        );\n    }\n\n    function isDaylightSavingTimeShifted () {\n        if (!isUndefined(this._isDSTShifted)) {\n            return this._isDSTShifted;\n        }\n\n        var c = {};\n\n        copyConfig(c, this);\n        c = prepareConfig(c);\n\n        if (c._a) {\n            var other = c._isUTC ? createUTC(c._a) : createLocal(c._a);\n            this._isDSTShifted = this.isValid() &&\n                compareArrays(c._a, other.toArray()) > 0;\n        } else {\n            this._isDSTShifted = false;\n        }\n\n        return this._isDSTShifted;\n    }\n\n    function isLocal () {\n        return this.isValid() ? !this._isUTC : false;\n    }\n\n    function isUtcOffset () {\n        return this.isValid() ? this._isUTC : false;\n    }\n\n    function isUtc () {\n        return this.isValid() ? this._isUTC && this._offset === 0 : false;\n    }\n\n    // ASP.NET json date format regex\n    var aspNetRegex = /^(\\-|\\+)?(?:(\\d*)[. ])?(\\d+)\\:(\\d+)(?:\\:(\\d+)(\\.\\d*)?)?$/;\n\n    // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html\n    // somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere\n    // and further modified to allow for strings containing both week and day\n    var isoRegex = /^(-|\\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;\n\n    function createDuration (input, key) {\n        var duration = input,\n            // matching against regexp is expensive, do it on demand\n            match = null,\n            sign,\n            ret,\n            diffRes;\n\n        if (isDuration(input)) {\n            duration = {\n                ms : input._milliseconds,\n                d  : input._days,\n                M  : input._months\n            };\n        } else if (isNumber(input)) {\n            duration = {};\n            if (key) {\n                duration[key] = input;\n            } else {\n                duration.milliseconds = input;\n            }\n        } else if (!!(match = aspNetRegex.exec(input))) {\n            sign = (match[1] === '-') ? -1 : 1;\n            duration = {\n                y  : 0,\n                d  : toInt(match[DATE])                         * sign,\n                h  : toInt(match[HOUR])                         * sign,\n                m  : toInt(match[MINUTE])                       * sign,\n                s  : toInt(match[SECOND])                       * sign,\n                ms : toInt(absRound(match[MILLISECOND] * 1000)) * sign // the millisecond decimal point is included in the match\n            };\n        } else if (!!(match = isoRegex.exec(input))) {\n            sign = (match[1] === '-') ? -1 : (match[1] === '+') ? 1 : 1;\n            duration = {\n                y : parseIso(match[2], sign),\n                M : parseIso(match[3], sign),\n                w : parseIso(match[4], sign),\n                d : parseIso(match[5], sign),\n                h : parseIso(match[6], sign),\n                m : parseIso(match[7], sign),\n                s : parseIso(match[8], sign)\n            };\n        } else if (duration == null) {// checks for null or undefined\n            duration = {};\n        } else if (typeof duration === 'object' && ('from' in duration || 'to' in duration)) {\n            diffRes = momentsDifference(createLocal(duration.from), createLocal(duration.to));\n\n            duration = {};\n            duration.ms = diffRes.milliseconds;\n            duration.M = diffRes.months;\n        }\n\n        ret = new Duration(duration);\n\n        if (isDuration(input) && hasOwnProp(input, '_locale')) {\n            ret._locale = input._locale;\n        }\n\n        return ret;\n    }\n\n    createDuration.fn = Duration.prototype;\n    createDuration.invalid = createInvalid$1;\n\n    function parseIso (inp, sign) {\n        // We'd normally use ~~inp for this, but unfortunately it also\n        // converts floats to ints.\n        // inp may be undefined, so careful calling replace on it.\n        var res = inp && parseFloat(inp.replace(',', '.'));\n        // apply sign while we're at it\n        return (isNaN(res) ? 0 : res) * sign;\n    }\n\n    function positiveMomentsDifference(base, other) {\n        var res = {milliseconds: 0, months: 0};\n\n        res.months = other.month() - base.month() +\n            (other.year() - base.year()) * 12;\n        if (base.clone().add(res.months, 'M').isAfter(other)) {\n            --res.months;\n        }\n\n        res.milliseconds = +other - +(base.clone().add(res.months, 'M'));\n\n        return res;\n    }\n\n    function momentsDifference(base, other) {\n        var res;\n        if (!(base.isValid() && other.isValid())) {\n            return {milliseconds: 0, months: 0};\n        }\n\n        other = cloneWithOffset(other, base);\n        if (base.isBefore(other)) {\n            res = positiveMomentsDifference(base, other);\n        } else {\n            res = positiveMomentsDifference(other, base);\n            res.milliseconds = -res.milliseconds;\n            res.months = -res.months;\n        }\n\n        return res;\n    }\n\n    // TODO: remove 'name' arg after deprecation is removed\n    function createAdder(direction, name) {\n        return function (val, period) {\n            var dur, tmp;\n            //invert the arguments, but complain about it\n            if (period !== null && !isNaN(+period)) {\n                deprecateSimple(name, 'moment().' + name  + '(period, number) is deprecated. Please use moment().' + name + '(number, period). ' +\n                'See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.');\n                tmp = val; val = period; period = tmp;\n            }\n\n            val = typeof val === 'string' ? +val : val;\n            dur = createDuration(val, period);\n            addSubtract(this, dur, direction);\n            return this;\n        };\n    }\n\n    function addSubtract (mom, duration, isAdding, updateOffset) {\n        var milliseconds = duration._milliseconds,\n            days = absRound(duration._days),\n            months = absRound(duration._months);\n\n        if (!mom.isValid()) {\n            // No op\n            return;\n        }\n\n        updateOffset = updateOffset == null ? true : updateOffset;\n\n        if (months) {\n            setMonth(mom, get(mom, 'Month') + months * isAdding);\n        }\n        if (days) {\n            set$1(mom, 'Date', get(mom, 'Date') + days * isAdding);\n        }\n        if (milliseconds) {\n            mom._d.setTime(mom._d.valueOf() + milliseconds * isAdding);\n        }\n        if (updateOffset) {\n            hooks.updateOffset(mom, days || months);\n        }\n    }\n\n    var add      = createAdder(1, 'add');\n    var subtract = createAdder(-1, 'subtract');\n\n    function getCalendarFormat(myMoment, now) {\n        var diff = myMoment.diff(now, 'days', true);\n        return diff < -6 ? 'sameElse' :\n                diff < -1 ? 'lastWeek' :\n                diff < 0 ? 'lastDay' :\n                diff < 1 ? 'sameDay' :\n                diff < 2 ? 'nextDay' :\n                diff < 7 ? 'nextWeek' : 'sameElse';\n    }\n\n    function calendar$1 (time, formats) {\n        // We want to compare the start of today, vs this.\n        // Getting start-of-today depends on whether we're local/utc/offset or not.\n        var now = time || createLocal(),\n            sod = cloneWithOffset(now, this).startOf('day'),\n            format = hooks.calendarFormat(this, sod) || 'sameElse';\n\n        var output = formats && (isFunction(formats[format]) ? formats[format].call(this, now) : formats[format]);\n\n        return this.format(output || this.localeData().calendar(format, this, createLocal(now)));\n    }\n\n    function clone () {\n        return new Moment(this);\n    }\n\n    function isAfter (input, units) {\n        var localInput = isMoment(input) ? input : createLocal(input);\n        if (!(this.isValid() && localInput.isValid())) {\n            return false;\n        }\n        units = normalizeUnits(!isUndefined(units) ? units : 'millisecond');\n        if (units === 'millisecond') {\n            return this.valueOf() > localInput.valueOf();\n        } else {\n            return localInput.valueOf() < this.clone().startOf(units).valueOf();\n        }\n    }\n\n    function isBefore (input, units) {\n        var localInput = isMoment(input) ? input : createLocal(input);\n        if (!(this.isValid() && localInput.isValid())) {\n            return false;\n        }\n        units = normalizeUnits(!isUndefined(units) ? units : 'millisecond');\n        if (units === 'millisecond') {\n            return this.valueOf() < localInput.valueOf();\n        } else {\n            return this.clone().endOf(units).valueOf() < localInput.valueOf();\n        }\n    }\n\n    function isBetween (from, to, units, inclusivity) {\n        inclusivity = inclusivity || '()';\n        return (inclusivity[0] === '(' ? this.isAfter(from, units) : !this.isBefore(from, units)) &&\n            (inclusivity[1] === ')' ? this.isBefore(to, units) : !this.isAfter(to, units));\n    }\n\n    function isSame (input, units) {\n        var localInput = isMoment(input) ? input : createLocal(input),\n            inputMs;\n        if (!(this.isValid() && localInput.isValid())) {\n            return false;\n        }\n        units = normalizeUnits(units || 'millisecond');\n        if (units === 'millisecond') {\n            return this.valueOf() === localInput.valueOf();\n        } else {\n            inputMs = localInput.valueOf();\n            return this.clone().startOf(units).valueOf() <= inputMs && inputMs <= this.clone().endOf(units).valueOf();\n        }\n    }\n\n    function isSameOrAfter (input, units) {\n        return this.isSame(input, units) || this.isAfter(input,units);\n    }\n\n    function isSameOrBefore (input, units) {\n        return this.isSame(input, units) || this.isBefore(input,units);\n    }\n\n    function diff (input, units, asFloat) {\n        var that,\n            zoneDelta,\n            output;\n\n        if (!this.isValid()) {\n            return NaN;\n        }\n\n        that = cloneWithOffset(input, this);\n\n        if (!that.isValid()) {\n            return NaN;\n        }\n\n        zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;\n\n        units = normalizeUnits(units);\n\n        switch (units) {\n            case 'year': output = monthDiff(this, that) / 12; break;\n            case 'month': output = monthDiff(this, that); break;\n            case 'quarter': output = monthDiff(this, that) / 3; break;\n            case 'second': output = (this - that) / 1e3; break; // 1000\n            case 'minute': output = (this - that) / 6e4; break; // 1000 * 60\n            case 'hour': output = (this - that) / 36e5; break; // 1000 * 60 * 60\n            case 'day': output = (this - that - zoneDelta) / 864e5; break; // 1000 * 60 * 60 * 24, negate dst\n            case 'week': output = (this - that - zoneDelta) / 6048e5; break; // 1000 * 60 * 60 * 24 * 7, negate dst\n            default: output = this - that;\n        }\n\n        return asFloat ? output : absFloor(output);\n    }\n\n    function monthDiff (a, b) {\n        // difference in months\n        var wholeMonthDiff = ((b.year() - a.year()) * 12) + (b.month() - a.month()),\n            // b is in (anchor - 1 month, anchor + 1 month)\n            anchor = a.clone().add(wholeMonthDiff, 'months'),\n            anchor2, adjust;\n\n        if (b - anchor < 0) {\n            anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');\n            // linear across the month\n            adjust = (b - anchor) / (anchor - anchor2);\n        } else {\n            anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');\n            // linear across the month\n            adjust = (b - anchor) / (anchor2 - anchor);\n        }\n\n        //check for negative zero, return zero if negative zero\n        return -(wholeMonthDiff + adjust) || 0;\n    }\n\n    hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';\n    hooks.defaultFormatUtc = 'YYYY-MM-DDTHH:mm:ss[Z]';\n\n    function toString () {\n        return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');\n    }\n\n    function toISOString(keepOffset) {\n        if (!this.isValid()) {\n            return null;\n        }\n        var utc = keepOffset !== true;\n        var m = utc ? this.clone().utc() : this;\n        if (m.year() < 0 || m.year() > 9999) {\n            return formatMoment(m, utc ? 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYYYY-MM-DD[T]HH:mm:ss.SSSZ');\n        }\n        if (isFunction(Date.prototype.toISOString)) {\n            // native implementation is ~50x faster, use it when we can\n            if (utc) {\n                return this.toDate().toISOString();\n            } else {\n                return new Date(this.valueOf() + this.utcOffset() * 60 * 1000).toISOString().replace('Z', formatMoment(m, 'Z'));\n            }\n        }\n        return formatMoment(m, utc ? 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYY-MM-DD[T]HH:mm:ss.SSSZ');\n    }\n\n    /**\n     * Return a human readable representation of a moment that can\n     * also be evaluated to get a new moment which is the same\n     *\n     * @link https://nodejs.org/dist/latest/docs/api/util.html#util_custom_inspect_function_on_objects\n     */\n    function inspect () {\n        if (!this.isValid()) {\n            return 'moment.invalid(/* ' + this._i + ' */)';\n        }\n        var func = 'moment';\n        var zone = '';\n        if (!this.isLocal()) {\n            func = this.utcOffset() === 0 ? 'moment.utc' : 'moment.parseZone';\n            zone = 'Z';\n        }\n        var prefix = '[' + func + '(\"]';\n        var year = (0 <= this.year() && this.year() <= 9999) ? 'YYYY' : 'YYYYYY';\n        var datetime = '-MM-DD[T]HH:mm:ss.SSS';\n        var suffix = zone + '[\")]';\n\n        return this.format(prefix + year + datetime + suffix);\n    }\n\n    function format (inputString) {\n        if (!inputString) {\n            inputString = this.isUtc() ? hooks.defaultFormatUtc : hooks.defaultFormat;\n        }\n        var output = formatMoment(this, inputString);\n        return this.localeData().postformat(output);\n    }\n\n    function from (time, withoutSuffix) {\n        if (this.isValid() &&\n                ((isMoment(time) && time.isValid()) ||\n                 createLocal(time).isValid())) {\n            return createDuration({to: this, from: time}).locale(this.locale()).humanize(!withoutSuffix);\n        } else {\n            return this.localeData().invalidDate();\n        }\n    }\n\n    function fromNow (withoutSuffix) {\n        return this.from(createLocal(), withoutSuffix);\n    }\n\n    function to (time, withoutSuffix) {\n        if (this.isValid() &&\n                ((isMoment(time) && time.isValid()) ||\n                 createLocal(time).isValid())) {\n            return createDuration({from: this, to: time}).locale(this.locale()).humanize(!withoutSuffix);\n        } else {\n            return this.localeData().invalidDate();\n        }\n    }\n\n    function toNow (withoutSuffix) {\n        return this.to(createLocal(), withoutSuffix);\n    }\n\n    // If passed a locale key, it will set the locale for this\n    // instance.  Otherwise, it will return the locale configuration\n    // variables for this instance.\n    function locale (key) {\n        var newLocaleData;\n\n        if (key === undefined) {\n            return this._locale._abbr;\n        } else {\n            newLocaleData = getLocale(key);\n            if (newLocaleData != null) {\n                this._locale = newLocaleData;\n            }\n            return this;\n        }\n    }\n\n    var lang = deprecate(\n        'moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.',\n        function (key) {\n            if (key === undefined) {\n                return this.localeData();\n            } else {\n                return this.locale(key);\n            }\n        }\n    );\n\n    function localeData () {\n        return this._locale;\n    }\n\n    function startOf (units) {\n        units = normalizeUnits(units);\n        // the following switch intentionally omits break keywords\n        // to utilize falling through the cases.\n        switch (units) {\n            case 'year':\n                this.month(0);\n                /* falls through */\n            case 'quarter':\n            case 'month':\n                this.date(1);\n                /* falls through */\n            case 'week':\n            case 'isoWeek':\n            case 'day':\n            case 'date':\n                this.hours(0);\n                /* falls through */\n            case 'hour':\n                this.minutes(0);\n                /* falls through */\n            case 'minute':\n                this.seconds(0);\n                /* falls through */\n            case 'second':\n                this.milliseconds(0);\n        }\n\n        // weeks are a special case\n        if (units === 'week') {\n            this.weekday(0);\n        }\n        if (units === 'isoWeek') {\n            this.isoWeekday(1);\n        }\n\n        // quarters are also special\n        if (units === 'quarter') {\n            this.month(Math.floor(this.month() / 3) * 3);\n        }\n\n        return this;\n    }\n\n    function endOf (units) {\n        units = normalizeUnits(units);\n        if (units === undefined || units === 'millisecond') {\n            return this;\n        }\n\n        // 'date' is an alias for 'day', so it should be considered as such.\n        if (units === 'date') {\n            units = 'day';\n        }\n\n        return this.startOf(units).add(1, (units === 'isoWeek' ? 'week' : units)).subtract(1, 'ms');\n    }\n\n    function valueOf () {\n        return this._d.valueOf() - ((this._offset || 0) * 60000);\n    }\n\n    function unix () {\n        return Math.floor(this.valueOf() / 1000);\n    }\n\n    function toDate () {\n        return new Date(this.valueOf());\n    }\n\n    function toArray () {\n        var m = this;\n        return [m.year(), m.month(), m.date(), m.hour(), m.minute(), m.second(), m.millisecond()];\n    }\n\n    function toObject () {\n        var m = this;\n        return {\n            years: m.year(),\n            months: m.month(),\n            date: m.date(),\n            hours: m.hours(),\n            minutes: m.minutes(),\n            seconds: m.seconds(),\n            milliseconds: m.milliseconds()\n        };\n    }\n\n    function toJSON () {\n        // new Date(NaN).toJSON() === null\n        return this.isValid() ? this.toISOString() : null;\n    }\n\n    function isValid$2 () {\n        return isValid(this);\n    }\n\n    function parsingFlags () {\n        return extend({}, getParsingFlags(this));\n    }\n\n    function invalidAt () {\n        return getParsingFlags(this).overflow;\n    }\n\n    function creationData() {\n        return {\n            input: this._i,\n            format: this._f,\n            locale: this._locale,\n            isUTC: this._isUTC,\n            strict: this._strict\n        };\n    }\n\n    // FORMATTING\n\n    addFormatToken(0, ['gg', 2], 0, function () {\n        return this.weekYear() % 100;\n    });\n\n    addFormatToken(0, ['GG', 2], 0, function () {\n        return this.isoWeekYear() % 100;\n    });\n\n    function addWeekYearFormatToken (token, getter) {\n        addFormatToken(0, [token, token.length], 0, getter);\n    }\n\n    addWeekYearFormatToken('gggg',     'weekYear');\n    addWeekYearFormatToken('ggggg',    'weekYear');\n    addWeekYearFormatToken('GGGG',  'isoWeekYear');\n    addWeekYearFormatToken('GGGGG', 'isoWeekYear');\n\n    // ALIASES\n\n    addUnitAlias('weekYear', 'gg');\n    addUnitAlias('isoWeekYear', 'GG');\n\n    // PRIORITY\n\n    addUnitPriority('weekYear', 1);\n    addUnitPriority('isoWeekYear', 1);\n\n\n    // PARSING\n\n    addRegexToken('G',      matchSigned);\n    addRegexToken('g',      matchSigned);\n    addRegexToken('GG',     match1to2, match2);\n    addRegexToken('gg',     match1to2, match2);\n    addRegexToken('GGGG',   match1to4, match4);\n    addRegexToken('gggg',   match1to4, match4);\n    addRegexToken('GGGGG',  match1to6, match6);\n    addRegexToken('ggggg',  match1to6, match6);\n\n    addWeekParseToken(['gggg', 'ggggg', 'GGGG', 'GGGGG'], function (input, week, config, token) {\n        week[token.substr(0, 2)] = toInt(input);\n    });\n\n    addWeekParseToken(['gg', 'GG'], function (input, week, config, token) {\n        week[token] = hooks.parseTwoDigitYear(input);\n    });\n\n    // MOMENTS\n\n    function getSetWeekYear (input) {\n        return getSetWeekYearHelper.call(this,\n                input,\n                this.week(),\n                this.weekday(),\n                this.localeData()._week.dow,\n                this.localeData()._week.doy);\n    }\n\n    function getSetISOWeekYear (input) {\n        return getSetWeekYearHelper.call(this,\n                input, this.isoWeek(), this.isoWeekday(), 1, 4);\n    }\n\n    function getISOWeeksInYear () {\n        return weeksInYear(this.year(), 1, 4);\n    }\n\n    function getWeeksInYear () {\n        var weekInfo = this.localeData()._week;\n        return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);\n    }\n\n    function getSetWeekYearHelper(input, week, weekday, dow, doy) {\n        var weeksTarget;\n        if (input == null) {\n            return weekOfYear(this, dow, doy).year;\n        } else {\n            weeksTarget = weeksInYear(input, dow, doy);\n            if (week > weeksTarget) {\n                week = weeksTarget;\n            }\n            return setWeekAll.call(this, input, week, weekday, dow, doy);\n        }\n    }\n\n    function setWeekAll(weekYear, week, weekday, dow, doy) {\n        var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy),\n            date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);\n\n        this.year(date.getUTCFullYear());\n        this.month(date.getUTCMonth());\n        this.date(date.getUTCDate());\n        return this;\n    }\n\n    // FORMATTING\n\n    addFormatToken('Q', 0, 'Qo', 'quarter');\n\n    // ALIASES\n\n    addUnitAlias('quarter', 'Q');\n\n    // PRIORITY\n\n    addUnitPriority('quarter', 7);\n\n    // PARSING\n\n    addRegexToken('Q', match1);\n    addParseToken('Q', function (input, array) {\n        array[MONTH] = (toInt(input) - 1) * 3;\n    });\n\n    // MOMENTS\n\n    function getSetQuarter (input) {\n        return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);\n    }\n\n    // FORMATTING\n\n    addFormatToken('D', ['DD', 2], 'Do', 'date');\n\n    // ALIASES\n\n    addUnitAlias('date', 'D');\n\n    // PRIORITY\n    addUnitPriority('date', 9);\n\n    // PARSING\n\n    addRegexToken('D',  match1to2);\n    addRegexToken('DD', match1to2, match2);\n    addRegexToken('Do', function (isStrict, locale) {\n        // TODO: Remove \"ordinalParse\" fallback in next major release.\n        return isStrict ?\n          (locale._dayOfMonthOrdinalParse || locale._ordinalParse) :\n          locale._dayOfMonthOrdinalParseLenient;\n    });\n\n    addParseToken(['D', 'DD'], DATE);\n    addParseToken('Do', function (input, array) {\n        array[DATE] = toInt(input.match(match1to2)[0]);\n    });\n\n    // MOMENTS\n\n    var getSetDayOfMonth = makeGetSet('Date', true);\n\n    // FORMATTING\n\n    addFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear');\n\n    // ALIASES\n\n    addUnitAlias('dayOfYear', 'DDD');\n\n    // PRIORITY\n    addUnitPriority('dayOfYear', 4);\n\n    // PARSING\n\n    addRegexToken('DDD',  match1to3);\n    addRegexToken('DDDD', match3);\n    addParseToken(['DDD', 'DDDD'], function (input, array, config) {\n        config._dayOfYear = toInt(input);\n    });\n\n    // HELPERS\n\n    // MOMENTS\n\n    function getSetDayOfYear (input) {\n        var dayOfYear = Math.round((this.clone().startOf('day') - this.clone().startOf('year')) / 864e5) + 1;\n        return input == null ? dayOfYear : this.add((input - dayOfYear), 'd');\n    }\n\n    // FORMATTING\n\n    addFormatToken('m', ['mm', 2], 0, 'minute');\n\n    // ALIASES\n\n    addUnitAlias('minute', 'm');\n\n    // PRIORITY\n\n    addUnitPriority('minute', 14);\n\n    // PARSING\n\n    addRegexToken('m',  match1to2);\n    addRegexToken('mm', match1to2, match2);\n    addParseToken(['m', 'mm'], MINUTE);\n\n    // MOMENTS\n\n    var getSetMinute = makeGetSet('Minutes', false);\n\n    // FORMATTING\n\n    addFormatToken('s', ['ss', 2], 0, 'second');\n\n    // ALIASES\n\n    addUnitAlias('second', 's');\n\n    // PRIORITY\n\n    addUnitPriority('second', 15);\n\n    // PARSING\n\n    addRegexToken('s',  match1to2);\n    addRegexToken('ss', match1to2, match2);\n    addParseToken(['s', 'ss'], SECOND);\n\n    // MOMENTS\n\n    var getSetSecond = makeGetSet('Seconds', false);\n\n    // FORMATTING\n\n    addFormatToken('S', 0, 0, function () {\n        return ~~(this.millisecond() / 100);\n    });\n\n    addFormatToken(0, ['SS', 2], 0, function () {\n        return ~~(this.millisecond() / 10);\n    });\n\n    addFormatToken(0, ['SSS', 3], 0, 'millisecond');\n    addFormatToken(0, ['SSSS', 4], 0, function () {\n        return this.millisecond() * 10;\n    });\n    addFormatToken(0, ['SSSSS', 5], 0, function () {\n        return this.millisecond() * 100;\n    });\n    addFormatToken(0, ['SSSSSS', 6], 0, function () {\n        return this.millisecond() * 1000;\n    });\n    addFormatToken(0, ['SSSSSSS', 7], 0, function () {\n        return this.millisecond() * 10000;\n    });\n    addFormatToken(0, ['SSSSSSSS', 8], 0, function () {\n        return this.millisecond() * 100000;\n    });\n    addFormatToken(0, ['SSSSSSSSS', 9], 0, function () {\n        return this.millisecond() * 1000000;\n    });\n\n\n    // ALIASES\n\n    addUnitAlias('millisecond', 'ms');\n\n    // PRIORITY\n\n    addUnitPriority('millisecond', 16);\n\n    // PARSING\n\n    addRegexToken('S',    match1to3, match1);\n    addRegexToken('SS',   match1to3, match2);\n    addRegexToken('SSS',  match1to3, match3);\n\n    var token;\n    for (token = 'SSSS'; token.length <= 9; token += 'S') {\n        addRegexToken(token, matchUnsigned);\n    }\n\n    function parseMs(input, array) {\n        array[MILLISECOND] = toInt(('0.' + input) * 1000);\n    }\n\n    for (token = 'S'; token.length <= 9; token += 'S') {\n        addParseToken(token, parseMs);\n    }\n    // MOMENTS\n\n    var getSetMillisecond = makeGetSet('Milliseconds', false);\n\n    // FORMATTING\n\n    addFormatToken('z',  0, 0, 'zoneAbbr');\n    addFormatToken('zz', 0, 0, 'zoneName');\n\n    // MOMENTS\n\n    function getZoneAbbr () {\n        return this._isUTC ? 'UTC' : '';\n    }\n\n    function getZoneName () {\n        return this._isUTC ? 'Coordinated Universal Time' : '';\n    }\n\n    var proto = Moment.prototype;\n\n    proto.add               = add;\n    proto.calendar          = calendar$1;\n    proto.clone             = clone;\n    proto.diff              = diff;\n    proto.endOf             = endOf;\n    proto.format            = format;\n    proto.from              = from;\n    proto.fromNow           = fromNow;\n    proto.to                = to;\n    proto.toNow             = toNow;\n    proto.get               = stringGet;\n    proto.invalidAt         = invalidAt;\n    proto.isAfter           = isAfter;\n    proto.isBefore          = isBefore;\n    proto.isBetween         = isBetween;\n    proto.isSame            = isSame;\n    proto.isSameOrAfter     = isSameOrAfter;\n    proto.isSameOrBefore    = isSameOrBefore;\n    proto.isValid           = isValid$2;\n    proto.lang              = lang;\n    proto.locale            = locale;\n    proto.localeData        = localeData;\n    proto.max               = prototypeMax;\n    proto.min               = prototypeMin;\n    proto.parsingFlags      = parsingFlags;\n    proto.set               = stringSet;\n    proto.startOf           = startOf;\n    proto.subtract          = subtract;\n    proto.toArray           = toArray;\n    proto.toObject          = toObject;\n    proto.toDate            = toDate;\n    proto.toISOString       = toISOString;\n    proto.inspect           = inspect;\n    proto.toJSON            = toJSON;\n    proto.toString          = toString;\n    proto.unix              = unix;\n    proto.valueOf           = valueOf;\n    proto.creationData      = creationData;\n    proto.year       = getSetYear;\n    proto.isLeapYear = getIsLeapYear;\n    proto.weekYear    = getSetWeekYear;\n    proto.isoWeekYear = getSetISOWeekYear;\n    proto.quarter = proto.quarters = getSetQuarter;\n    proto.month       = getSetMonth;\n    proto.daysInMonth = getDaysInMonth;\n    proto.week           = proto.weeks        = getSetWeek;\n    proto.isoWeek        = proto.isoWeeks     = getSetISOWeek;\n    proto.weeksInYear    = getWeeksInYear;\n    proto.isoWeeksInYear = getISOWeeksInYear;\n    proto.date       = getSetDayOfMonth;\n    proto.day        = proto.days             = getSetDayOfWeek;\n    proto.weekday    = getSetLocaleDayOfWeek;\n    proto.isoWeekday = getSetISODayOfWeek;\n    proto.dayOfYear  = getSetDayOfYear;\n    proto.hour = proto.hours = getSetHour;\n    proto.minute = proto.minutes = getSetMinute;\n    proto.second = proto.seconds = getSetSecond;\n    proto.millisecond = proto.milliseconds = getSetMillisecond;\n    proto.utcOffset            = getSetOffset;\n    proto.utc                  = setOffsetToUTC;\n    proto.local                = setOffsetToLocal;\n    proto.parseZone            = setOffsetToParsedOffset;\n    proto.hasAlignedHourOffset = hasAlignedHourOffset;\n    proto.isDST                = isDaylightSavingTime;\n    proto.isLocal              = isLocal;\n    proto.isUtcOffset          = isUtcOffset;\n    proto.isUtc                = isUtc;\n    proto.isUTC                = isUtc;\n    proto.zoneAbbr = getZoneAbbr;\n    proto.zoneName = getZoneName;\n    proto.dates  = deprecate('dates accessor is deprecated. Use date instead.', getSetDayOfMonth);\n    proto.months = deprecate('months accessor is deprecated. Use month instead', getSetMonth);\n    proto.years  = deprecate('years accessor is deprecated. Use year instead', getSetYear);\n    proto.zone   = deprecate('moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/', getSetZone);\n    proto.isDSTShifted = deprecate('isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information', isDaylightSavingTimeShifted);\n\n    function createUnix (input) {\n        return createLocal(input * 1000);\n    }\n\n    function createInZone () {\n        return createLocal.apply(null, arguments).parseZone();\n    }\n\n    function preParsePostFormat (string) {\n        return string;\n    }\n\n    var proto$1 = Locale.prototype;\n\n    proto$1.calendar        = calendar;\n    proto$1.longDateFormat  = longDateFormat;\n    proto$1.invalidDate     = invalidDate;\n    proto$1.ordinal         = ordinal;\n    proto$1.preparse        = preParsePostFormat;\n    proto$1.postformat      = preParsePostFormat;\n    proto$1.relativeTime    = relativeTime;\n    proto$1.pastFuture      = pastFuture;\n    proto$1.set             = set;\n\n    proto$1.months            =        localeMonths;\n    proto$1.monthsShort       =        localeMonthsShort;\n    proto$1.monthsParse       =        localeMonthsParse;\n    proto$1.monthsRegex       = monthsRegex;\n    proto$1.monthsShortRegex  = monthsShortRegex;\n    proto$1.week = localeWeek;\n    proto$1.firstDayOfYear = localeFirstDayOfYear;\n    proto$1.firstDayOfWeek = localeFirstDayOfWeek;\n\n    proto$1.weekdays       =        localeWeekdays;\n    proto$1.weekdaysMin    =        localeWeekdaysMin;\n    proto$1.weekdaysShort  =        localeWeekdaysShort;\n    proto$1.weekdaysParse  =        localeWeekdaysParse;\n\n    proto$1.weekdaysRegex       =        weekdaysRegex;\n    proto$1.weekdaysShortRegex  =        weekdaysShortRegex;\n    proto$1.weekdaysMinRegex    =        weekdaysMinRegex;\n\n    proto$1.isPM = localeIsPM;\n    proto$1.meridiem = localeMeridiem;\n\n    function get$1 (format, index, field, setter) {\n        var locale = getLocale();\n        var utc = createUTC().set(setter, index);\n        return locale[field](utc, format);\n    }\n\n    function listMonthsImpl (format, index, field) {\n        if (isNumber(format)) {\n            index = format;\n            format = undefined;\n        }\n\n        format = format || '';\n\n        if (index != null) {\n            return get$1(format, index, field, 'month');\n        }\n\n        var i;\n        var out = [];\n        for (i = 0; i < 12; i++) {\n            out[i] = get$1(format, i, field, 'month');\n        }\n        return out;\n    }\n\n    // ()\n    // (5)\n    // (fmt, 5)\n    // (fmt)\n    // (true)\n    // (true, 5)\n    // (true, fmt, 5)\n    // (true, fmt)\n    function listWeekdaysImpl (localeSorted, format, index, field) {\n        if (typeof localeSorted === 'boolean') {\n            if (isNumber(format)) {\n                index = format;\n                format = undefined;\n            }\n\n            format = format || '';\n        } else {\n            format = localeSorted;\n            index = format;\n            localeSorted = false;\n\n            if (isNumber(format)) {\n                index = format;\n                format = undefined;\n            }\n\n            format = format || '';\n        }\n\n        var locale = getLocale(),\n            shift = localeSorted ? locale._week.dow : 0;\n\n        if (index != null) {\n            return get$1(format, (index + shift) % 7, field, 'day');\n        }\n\n        var i;\n        var out = [];\n        for (i = 0; i < 7; i++) {\n            out[i] = get$1(format, (i + shift) % 7, field, 'day');\n        }\n        return out;\n    }\n\n    function listMonths (format, index) {\n        return listMonthsImpl(format, index, 'months');\n    }\n\n    function listMonthsShort (format, index) {\n        return listMonthsImpl(format, index, 'monthsShort');\n    }\n\n    function listWeekdays (localeSorted, format, index) {\n        return listWeekdaysImpl(localeSorted, format, index, 'weekdays');\n    }\n\n    function listWeekdaysShort (localeSorted, format, index) {\n        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysShort');\n    }\n\n    function listWeekdaysMin (localeSorted, format, index) {\n        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysMin');\n    }\n\n    getSetGlobalLocale('en', {\n        dayOfMonthOrdinalParse: /\\d{1,2}(th|st|nd|rd)/,\n        ordinal : function (number) {\n            var b = number % 10,\n                output = (toInt(number % 100 / 10) === 1) ? 'th' :\n                (b === 1) ? 'st' :\n                (b === 2) ? 'nd' :\n                (b === 3) ? 'rd' : 'th';\n            return number + output;\n        }\n    });\n\n    // Side effect imports\n\n    hooks.lang = deprecate('moment.lang is deprecated. Use moment.locale instead.', getSetGlobalLocale);\n    hooks.langData = deprecate('moment.langData is deprecated. Use moment.localeData instead.', getLocale);\n\n    var mathAbs = Math.abs;\n\n    function abs () {\n        var data           = this._data;\n\n        this._milliseconds = mathAbs(this._milliseconds);\n        this._days         = mathAbs(this._days);\n        this._months       = mathAbs(this._months);\n\n        data.milliseconds  = mathAbs(data.milliseconds);\n        data.seconds       = mathAbs(data.seconds);\n        data.minutes       = mathAbs(data.minutes);\n        data.hours         = mathAbs(data.hours);\n        data.months        = mathAbs(data.months);\n        data.years         = mathAbs(data.years);\n\n        return this;\n    }\n\n    function addSubtract$1 (duration, input, value, direction) {\n        var other = createDuration(input, value);\n\n        duration._milliseconds += direction * other._milliseconds;\n        duration._days         += direction * other._days;\n        duration._months       += direction * other._months;\n\n        return duration._bubble();\n    }\n\n    // supports only 2.0-style add(1, 's') or add(duration)\n    function add$1 (input, value) {\n        return addSubtract$1(this, input, value, 1);\n    }\n\n    // supports only 2.0-style subtract(1, 's') or subtract(duration)\n    function subtract$1 (input, value) {\n        return addSubtract$1(this, input, value, -1);\n    }\n\n    function absCeil (number) {\n        if (number < 0) {\n            return Math.floor(number);\n        } else {\n            return Math.ceil(number);\n        }\n    }\n\n    function bubble () {\n        var milliseconds = this._milliseconds;\n        var days         = this._days;\n        var months       = this._months;\n        var data         = this._data;\n        var seconds, minutes, hours, years, monthsFromDays;\n\n        // if we have a mix of positive and negative values, bubble down first\n        // check: https://github.com/moment/moment/issues/2166\n        if (!((milliseconds >= 0 && days >= 0 && months >= 0) ||\n                (milliseconds <= 0 && days <= 0 && months <= 0))) {\n            milliseconds += absCeil(monthsToDays(months) + days) * 864e5;\n            days = 0;\n            months = 0;\n        }\n\n        // The following code bubbles up values, see the tests for\n        // examples of what that means.\n        data.milliseconds = milliseconds % 1000;\n\n        seconds           = absFloor(milliseconds / 1000);\n        data.seconds      = seconds % 60;\n\n        minutes           = absFloor(seconds / 60);\n        data.minutes      = minutes % 60;\n\n        hours             = absFloor(minutes / 60);\n        data.hours        = hours % 24;\n\n        days += absFloor(hours / 24);\n\n        // convert days to months\n        monthsFromDays = absFloor(daysToMonths(days));\n        months += monthsFromDays;\n        days -= absCeil(monthsToDays(monthsFromDays));\n\n        // 12 months -> 1 year\n        years = absFloor(months / 12);\n        months %= 12;\n\n        data.days   = days;\n        data.months = months;\n        data.years  = years;\n\n        return this;\n    }\n\n    function daysToMonths (days) {\n        // 400 years have 146097 days (taking into account leap year rules)\n        // 400 years have 12 months === 4800\n        return days * 4800 / 146097;\n    }\n\n    function monthsToDays (months) {\n        // the reverse of daysToMonths\n        return months * 146097 / 4800;\n    }\n\n    function as (units) {\n        if (!this.isValid()) {\n            return NaN;\n        }\n        var days;\n        var months;\n        var milliseconds = this._milliseconds;\n\n        units = normalizeUnits(units);\n\n        if (units === 'month' || units === 'year') {\n            days   = this._days   + milliseconds / 864e5;\n            months = this._months + daysToMonths(days);\n            return units === 'month' ? months : months / 12;\n        } else {\n            // handle milliseconds separately because of floating point math errors (issue #1867)\n            days = this._days + Math.round(monthsToDays(this._months));\n            switch (units) {\n                case 'week'   : return days / 7     + milliseconds / 6048e5;\n                case 'day'    : return days         + milliseconds / 864e5;\n                case 'hour'   : return days * 24    + milliseconds / 36e5;\n                case 'minute' : return days * 1440  + milliseconds / 6e4;\n                case 'second' : return days * 86400 + milliseconds / 1000;\n                // Math.floor prevents floating point math errors here\n                case 'millisecond': return Math.floor(days * 864e5) + milliseconds;\n                default: throw new Error('Unknown unit ' + units);\n            }\n        }\n    }\n\n    // TODO: Use this.as('ms')?\n    function valueOf$1 () {\n        if (!this.isValid()) {\n            return NaN;\n        }\n        return (\n            this._milliseconds +\n            this._days * 864e5 +\n            (this._months % 12) * 2592e6 +\n            toInt(this._months / 12) * 31536e6\n        );\n    }\n\n    function makeAs (alias) {\n        return function () {\n            return this.as(alias);\n        };\n    }\n\n    var asMilliseconds = makeAs('ms');\n    var asSeconds      = makeAs('s');\n    var asMinutes      = makeAs('m');\n    var asHours        = makeAs('h');\n    var asDays         = makeAs('d');\n    var asWeeks        = makeAs('w');\n    var asMonths       = makeAs('M');\n    var asYears        = makeAs('y');\n\n    function clone$1 () {\n        return createDuration(this);\n    }\n\n    function get$2 (units) {\n        units = normalizeUnits(units);\n        return this.isValid() ? this[units + 's']() : NaN;\n    }\n\n    function makeGetter(name) {\n        return function () {\n            return this.isValid() ? this._data[name] : NaN;\n        };\n    }\n\n    var milliseconds = makeGetter('milliseconds');\n    var seconds      = makeGetter('seconds');\n    var minutes      = makeGetter('minutes');\n    var hours        = makeGetter('hours');\n    var days         = makeGetter('days');\n    var months       = makeGetter('months');\n    var years        = makeGetter('years');\n\n    function weeks () {\n        return absFloor(this.days() / 7);\n    }\n\n    var round = Math.round;\n    var thresholds = {\n        ss: 44,         // a few seconds to seconds\n        s : 45,         // seconds to minute\n        m : 45,         // minutes to hour\n        h : 22,         // hours to day\n        d : 26,         // days to month\n        M : 11          // months to year\n    };\n\n    // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize\n    function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {\n        return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);\n    }\n\n    function relativeTime$1 (posNegDuration, withoutSuffix, locale) {\n        var duration = createDuration(posNegDuration).abs();\n        var seconds  = round(duration.as('s'));\n        var minutes  = round(duration.as('m'));\n        var hours    = round(duration.as('h'));\n        var days     = round(duration.as('d'));\n        var months   = round(duration.as('M'));\n        var years    = round(duration.as('y'));\n\n        var a = seconds <= thresholds.ss && ['s', seconds]  ||\n                seconds < thresholds.s   && ['ss', seconds] ||\n                minutes <= 1             && ['m']           ||\n                minutes < thresholds.m   && ['mm', minutes] ||\n                hours   <= 1             && ['h']           ||\n                hours   < thresholds.h   && ['hh', hours]   ||\n                days    <= 1             && ['d']           ||\n                days    < thresholds.d   && ['dd', days]    ||\n                months  <= 1             && ['M']           ||\n                months  < thresholds.M   && ['MM', months]  ||\n                years   <= 1             && ['y']           || ['yy', years];\n\n        a[2] = withoutSuffix;\n        a[3] = +posNegDuration > 0;\n        a[4] = locale;\n        return substituteTimeAgo.apply(null, a);\n    }\n\n    // This function allows you to set the rounding function for relative time strings\n    function getSetRelativeTimeRounding (roundingFunction) {\n        if (roundingFunction === undefined) {\n            return round;\n        }\n        if (typeof(roundingFunction) === 'function') {\n            round = roundingFunction;\n            return true;\n        }\n        return false;\n    }\n\n    // This function allows you to set a threshold for relative time strings\n    function getSetRelativeTimeThreshold (threshold, limit) {\n        if (thresholds[threshold] === undefined) {\n            return false;\n        }\n        if (limit === undefined) {\n            return thresholds[threshold];\n        }\n        thresholds[threshold] = limit;\n        if (threshold === 's') {\n            thresholds.ss = limit - 1;\n        }\n        return true;\n    }\n\n    function humanize (withSuffix) {\n        if (!this.isValid()) {\n            return this.localeData().invalidDate();\n        }\n\n        var locale = this.localeData();\n        var output = relativeTime$1(this, !withSuffix, locale);\n\n        if (withSuffix) {\n            output = locale.pastFuture(+this, output);\n        }\n\n        return locale.postformat(output);\n    }\n\n    var abs$1 = Math.abs;\n\n    function sign(x) {\n        return ((x > 0) - (x < 0)) || +x;\n    }\n\n    function toISOString$1() {\n        // for ISO strings we do not use the normal bubbling rules:\n        //  * milliseconds bubble up until they become hours\n        //  * days do not bubble at all\n        //  * months bubble up until they become years\n        // This is because there is no context-free conversion between hours and days\n        // (think of clock changes)\n        // and also not between days and months (28-31 days per month)\n        if (!this.isValid()) {\n            return this.localeData().invalidDate();\n        }\n\n        var seconds = abs$1(this._milliseconds) / 1000;\n        var days         = abs$1(this._days);\n        var months       = abs$1(this._months);\n        var minutes, hours, years;\n\n        // 3600 seconds -> 60 minutes -> 1 hour\n        minutes           = absFloor(seconds / 60);\n        hours             = absFloor(minutes / 60);\n        seconds %= 60;\n        minutes %= 60;\n\n        // 12 months -> 1 year\n        years  = absFloor(months / 12);\n        months %= 12;\n\n\n        // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js\n        var Y = years;\n        var M = months;\n        var D = days;\n        var h = hours;\n        var m = minutes;\n        var s = seconds ? seconds.toFixed(3).replace(/\\.?0+$/, '') : '';\n        var total = this.asSeconds();\n\n        if (!total) {\n            // this is the same as C#'s (Noda) and python (isodate)...\n            // but not other JS (goog.date)\n            return 'P0D';\n        }\n\n        var totalSign = total < 0 ? '-' : '';\n        var ymSign = sign(this._months) !== sign(total) ? '-' : '';\n        var daysSign = sign(this._days) !== sign(total) ? '-' : '';\n        var hmsSign = sign(this._milliseconds) !== sign(total) ? '-' : '';\n\n        return totalSign + 'P' +\n            (Y ? ymSign + Y + 'Y' : '') +\n            (M ? ymSign + M + 'M' : '') +\n            (D ? daysSign + D + 'D' : '') +\n            ((h || m || s) ? 'T' : '') +\n            (h ? hmsSign + h + 'H' : '') +\n            (m ? hmsSign + m + 'M' : '') +\n            (s ? hmsSign + s + 'S' : '');\n    }\n\n    var proto$2 = Duration.prototype;\n\n    proto$2.isValid        = isValid$1;\n    proto$2.abs            = abs;\n    proto$2.add            = add$1;\n    proto$2.subtract       = subtract$1;\n    proto$2.as             = as;\n    proto$2.asMilliseconds = asMilliseconds;\n    proto$2.asSeconds      = asSeconds;\n    proto$2.asMinutes      = asMinutes;\n    proto$2.asHours        = asHours;\n    proto$2.asDays         = asDays;\n    proto$2.asWeeks        = asWeeks;\n    proto$2.asMonths       = asMonths;\n    proto$2.asYears        = asYears;\n    proto$2.valueOf        = valueOf$1;\n    proto$2._bubble        = bubble;\n    proto$2.clone          = clone$1;\n    proto$2.get            = get$2;\n    proto$2.milliseconds   = milliseconds;\n    proto$2.seconds        = seconds;\n    proto$2.minutes        = minutes;\n    proto$2.hours          = hours;\n    proto$2.days           = days;\n    proto$2.weeks          = weeks;\n    proto$2.months         = months;\n    proto$2.years          = years;\n    proto$2.humanize       = humanize;\n    proto$2.toISOString    = toISOString$1;\n    proto$2.toString       = toISOString$1;\n    proto$2.toJSON         = toISOString$1;\n    proto$2.locale         = locale;\n    proto$2.localeData     = localeData;\n\n    proto$2.toIsoString = deprecate('toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)', toISOString$1);\n    proto$2.lang = lang;\n\n    // Side effect imports\n\n    // FORMATTING\n\n    addFormatToken('X', 0, 0, 'unix');\n    addFormatToken('x', 0, 0, 'valueOf');\n\n    // PARSING\n\n    addRegexToken('x', matchSigned);\n    addRegexToken('X', matchTimestamp);\n    addParseToken('X', function (input, array, config) {\n        config._d = new Date(parseFloat(input, 10) * 1000);\n    });\n    addParseToken('x', function (input, array, config) {\n        config._d = new Date(toInt(input));\n    });\n\n    // Side effect imports\n\n\n    hooks.version = '2.22.2';\n\n    setHookCallback(createLocal);\n\n    hooks.fn                    = proto;\n    hooks.min                   = min;\n    hooks.max                   = max;\n    hooks.now                   = now;\n    hooks.utc                   = createUTC;\n    hooks.unix                  = createUnix;\n    hooks.months                = listMonths;\n    hooks.isDate                = isDate;\n    hooks.locale                = getSetGlobalLocale;\n    hooks.invalid               = createInvalid;\n    hooks.duration              = createDuration;\n    hooks.isMoment              = isMoment;\n    hooks.weekdays              = listWeekdays;\n    hooks.parseZone             = createInZone;\n    hooks.localeData            = getLocale;\n    hooks.isDuration            = isDuration;\n    hooks.monthsShort           = listMonthsShort;\n    hooks.weekdaysMin           = listWeekdaysMin;\n    hooks.defineLocale          = defineLocale;\n    hooks.updateLocale          = updateLocale;\n    hooks.locales               = listLocales;\n    hooks.weekdaysShort         = listWeekdaysShort;\n    hooks.normalizeUnits        = normalizeUnits;\n    hooks.relativeTimeRounding  = getSetRelativeTimeRounding;\n    hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;\n    hooks.calendarFormat        = getCalendarFormat;\n    hooks.prototype             = proto;\n\n    // currently HTML5 input type only supports 24-hour formats\n    hooks.HTML5_FMT = {\n        DATETIME_LOCAL: 'YYYY-MM-DDTHH:mm',             // <input type=\"datetime-local\" />\n        DATETIME_LOCAL_SECONDS: 'YYYY-MM-DDTHH:mm:ss',  // <input type=\"datetime-local\" step=\"1\" />\n        DATETIME_LOCAL_MS: 'YYYY-MM-DDTHH:mm:ss.SSS',   // <input type=\"datetime-local\" step=\"0.001\" />\n        DATE: 'YYYY-MM-DD',                             // <input type=\"date\" />\n        TIME: 'HH:mm',                                  // <input type=\"time\" />\n        TIME_SECONDS: 'HH:mm:ss',                       // <input type=\"time\" step=\"1\" />\n        TIME_MS: 'HH:mm:ss.SSS',                        // <input type=\"time\" step=\"0.001\" />\n        WEEK: 'YYYY-[W]WW',                             // <input type=\"week\" />\n        MONTH: 'YYYY-MM'                                // <input type=\"month\" />\n    };\n\n    return hooks;\n\n})));\n\n/* WEBPACK VAR INJECTION */}.call(exports, __nested_webpack_require_405133__(117)(module)))\n\n/***/ }),\n/* 117 */\n/***/ (function(module, exports) {\n\nmodule.exports = function(module) {\r\n\tif(!module.webpackPolyfill) {\r\n\t\tmodule.deprecate = function() {};\r\n\t\tmodule.paths = [];\r\n\t\t// module.parent = undefined by default\r\n\t\tif(!module.children) module.children = [];\r\n\t\tObject.defineProperty(module, \"loaded\", {\r\n\t\t\tenumerable: true,\r\n\t\t\tget: function() {\r\n\t\t\t\treturn module.l;\r\n\t\t\t}\r\n\t\t});\r\n\t\tObject.defineProperty(module, \"id\", {\r\n\t\t\tenumerable: true,\r\n\t\t\tget: function() {\r\n\t\t\t\treturn module.i;\r\n\t\t\t}\r\n\t\t});\r\n\t\tmodule.webpackPolyfill = 1;\r\n\t}\r\n\treturn module;\r\n};\r\n\n\n/***/ }),\n/* 118 */\n/***/ (function(module, exports) {\n\nfunction webpackEmptyContext(req) {\n\tthrow new Error(\"Cannot find module '\" + req + \"'.\");\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 118;\n\n/***/ }),\n/* 119 */\n/***/ (function(module, exports, __nested_webpack_require_553149__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(global) {\n\n/* eslint-disable require-jsdoc */\n\nvar _rng;\n\nvar globalVar = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : null;\n\nif (globalVar && globalVar.crypto && crypto.getRandomValues) {\n  // WHATWG crypto-based RNG - http://wiki.whatwg.org/wiki/Crypto\n  // Moderately fast, high quality\n  var _rnds8 = new Uint8Array(16);\n  _rng = function whatwgRNG() {\n    crypto.getRandomValues(_rnds8);\n    return _rnds8;\n  };\n}\n\nif (!_rng) {\n  // Math.random()-based (RNG)\n  //\n  // If all else fails, use Math.random().  It's fast, but is of unspecified\n  // quality.\n  var _rnds = new Array(16);\n  _rng = function _rng() {\n    for (var i = 0, r; i < 16; i++) {\n      if ((i & 0x03) === 0) r = Math.random() * 0x100000000;\n      _rnds[i] = r >>> ((i & 0x03) << 3) & 0xff;\n    }\n\n    return _rnds;\n  };\n}\n\n//     uuid.js\n//\n//     Copyright (c) 2010-2012 Robert Kieffer\n//     MIT License - http://opensource.org/licenses/mit-license.php\n\n// Unique ID creation requires a high quality random # generator.  We feature\n// detect to determine the best RNG source, normalizing to a function that\n// returns 128-bits of randomness, since that's what's usually required\n\n//var _rng = require('./rng');\n\n// Maps for number <-> hex string conversion\nvar _byteToHex = [];\nvar _hexToByte = {};\nfor (var i = 0; i < 256; i++) {\n  _byteToHex[i] = (i + 0x100).toString(16).substr(1);\n  _hexToByte[_byteToHex[i]] = i;\n}\n\n// **`parse()` - Parse a UUID into it's component bytes**\nfunction parse(s, buf, offset) {\n  var i = buf && offset || 0,\n      ii = 0;\n\n  buf = buf || [];\n  s.toLowerCase().replace(/[0-9a-f]{2}/g, function (oct) {\n    if (ii < 16) {\n      // Don't overflow!\n      buf[i + ii++] = _hexToByte[oct];\n    }\n  });\n\n  // Zero out remaining bytes if string was short\n  while (ii < 16) {\n    buf[i + ii++] = 0;\n  }\n\n  return buf;\n}\n\n// **`unparse()` - Convert UUID byte array (ala parse()) into a string**\nfunction unparse(buf, offset) {\n  var i = offset || 0,\n      bth = _byteToHex;\n  return bth[buf[i++]] + bth[buf[i++]] + bth[buf[i++]] + bth[buf[i++]] + '-' + bth[buf[i++]] + bth[buf[i++]] + '-' + bth[buf[i++]] + bth[buf[i++]] + '-' + bth[buf[i++]] + bth[buf[i++]] + '-' + bth[buf[i++]] + bth[buf[i++]] + bth[buf[i++]] + bth[buf[i++]] + bth[buf[i++]] + bth[buf[i++]];\n}\n\n// **`v1()` - Generate time-based UUID**\n//\n// Inspired by https://github.com/LiosK/UUID.js\n// and http://docs.python.org/library/uuid.html\n\n// random #'s we need to init node and clockseq\nvar _seedBytes = _rng();\n\n// Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)\nvar _nodeId = [_seedBytes[0] | 0x01, _seedBytes[1], _seedBytes[2], _seedBytes[3], _seedBytes[4], _seedBytes[5]];\n\n// Per 4.2.2, randomize (14 bit) clockseq\nvar _clockseq = (_seedBytes[6] << 8 | _seedBytes[7]) & 0x3fff;\n\n// Previous uuid creation time\nvar _lastMSecs = 0,\n    _lastNSecs = 0;\n\n// See https://github.com/broofa/node-uuid for API details\nfunction v1(options, buf, offset) {\n  var i = buf && offset || 0;\n  var b = buf || [];\n\n  options = options || {};\n\n  var clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq;\n\n  // UUID timestamps are 100 nano-second units since the Gregorian epoch,\n  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so\n  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'\n  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.\n  var msecs = options.msecs !== undefined ? options.msecs : new Date().getTime();\n\n  // Per 4.2.1.2, use count of uuid's generated during the current clock\n  // cycle to simulate higher resolution clock\n  var nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1;\n\n  // Time since last uuid creation (in msecs)\n  var dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 10000;\n\n  // Per 4.2.1.2, Bump clockseq on clock regression\n  if (dt < 0 && options.clockseq === undefined) {\n    clockseq = clockseq + 1 & 0x3fff;\n  }\n\n  // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new\n  // time interval\n  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {\n    nsecs = 0;\n  }\n\n  // Per 4.2.1.2 Throw error if too many uuids are requested\n  if (nsecs >= 10000) {\n    throw new Error(\"uuid.v1(): Can't create more than 10M uuids/sec\");\n  }\n\n  _lastMSecs = msecs;\n  _lastNSecs = nsecs;\n  _clockseq = clockseq;\n\n  // Per 4.1.4 - Convert from unix epoch to Gregorian epoch\n  msecs += 12219292800000;\n\n  // `time_low`\n  var tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;\n  b[i++] = tl >>> 24 & 0xff;\n  b[i++] = tl >>> 16 & 0xff;\n  b[i++] = tl >>> 8 & 0xff;\n  b[i++] = tl & 0xff;\n\n  // `time_mid`\n  var tmh = msecs / 0x100000000 * 10000 & 0xfffffff;\n  b[i++] = tmh >>> 8 & 0xff;\n  b[i++] = tmh & 0xff;\n\n  // `time_high_and_version`\n  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version\n  b[i++] = tmh >>> 16 & 0xff;\n\n  // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)\n  b[i++] = clockseq >>> 8 | 0x80;\n\n  // `clock_seq_low`\n  b[i++] = clockseq & 0xff;\n\n  // `node`\n  var node = options.node || _nodeId;\n  for (var n = 0; n < 6; n++) {\n    b[i + n] = node[n];\n  }\n\n  return buf ? buf : unparse(b);\n}\n\n// **`v4()` - Generate random UUID**\n\n// See https://github.com/broofa/node-uuid for API details\nfunction v4(options, buf, offset) {\n  // Deprecated - 'format' argument, as supported in v1.2\n  var i = buf && offset || 0;\n\n  if (typeof options == 'string') {\n    buf = options == 'binary' ? new Array(16) : null;\n    options = null;\n  }\n  options = options || {};\n\n  var rnds = options.random || (options.rng || _rng)();\n\n  // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80;\n\n  // Copy bytes to buffer, if provided\n  if (buf) {\n    for (var ii = 0; ii < 16; ii++) {\n      buf[i + ii] = rnds[ii];\n    }\n  }\n\n  return buf || unparse(rnds);\n}\n\n// Export public API\nvar uuid = v4;\nuuid.v1 = v1;\nuuid.v4 = v4;\nuuid.parse = parse;\nuuid.unparse = unparse;\n\nmodule.exports = uuid;\n/* WEBPACK VAR INJECTION */}.call(exports, __nested_webpack_require_553149__(120)))\n\n/***/ }),\n/* 120 */\n/***/ (function(module, exports) {\n\nvar g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1,eval)(\"this\");\r\n} catch(e) {\r\n\t// This works if the window reference is available\r\n\tif(typeof window === \"object\")\r\n\t\tg = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n\n\n/***/ }),\n/* 121 */\n/***/ (function(module, exports, __nested_webpack_require_559973__) {\n\n\"use strict\";\n\n\n// utils\nexports.util = __nested_webpack_require_559973__(2);\nexports.DOMutil = __nested_webpack_require_559973__(122);\n\n// data\nexports.DataSet = __nested_webpack_require_559973__(33);\nexports.DataView = __nested_webpack_require_559973__(51);\nexports.Queue = __nested_webpack_require_559973__(72);\n\n// Network\nexports.Network = __nested_webpack_require_559973__(124);\nexports.network = {\n  Images: __nested_webpack_require_559973__(76),\n  dotparser: __nested_webpack_require_559973__(74),\n  gephiParser: __nested_webpack_require_559973__(75),\n  allOptions: __nested_webpack_require_559973__(84)\n};\nexports.network.convertDot = function (input) {\n  return exports.network.dotparser.DOTToGraph(input);\n};\nexports.network.convertGephi = function (input, options) {\n  return exports.network.gephiParser.parseGephi(input, options);\n};\n\n// bundled external libraries\nexports.moment = __nested_webpack_require_559973__(71);\nexports.Hammer = __nested_webpack_require_559973__(24);\nexports.keycharm = __nested_webpack_require_559973__(52);\n\n/***/ }),\n/* 122 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\n// DOM utility methods\n\n/**\n * this prepares the JSON container for allocating SVG elements\n * @param {Object} JSONcontainer\n * @private\n */\nexports.prepareElements = function (JSONcontainer) {\n  // cleanup the redundant svgElements;\n  for (var elementType in JSONcontainer) {\n    if (JSONcontainer.hasOwnProperty(elementType)) {\n      JSONcontainer[elementType].redundant = JSONcontainer[elementType].used;\n      JSONcontainer[elementType].used = [];\n    }\n  }\n};\n\n/**\n * this cleans up all the unused SVG elements. By asking for the parentNode, we only need to supply the JSON container from\n * which to remove the redundant elements.\n *\n * @param {Object} JSONcontainer\n * @private\n */\nexports.cleanupElements = function (JSONcontainer) {\n  // cleanup the redundant svgElements;\n  for (var elementType in JSONcontainer) {\n    if (JSONcontainer.hasOwnProperty(elementType)) {\n      if (JSONcontainer[elementType].redundant) {\n        for (var i = 0; i < JSONcontainer[elementType].redundant.length; i++) {\n          JSONcontainer[elementType].redundant[i].parentNode.removeChild(JSONcontainer[elementType].redundant[i]);\n        }\n        JSONcontainer[elementType].redundant = [];\n      }\n    }\n  }\n};\n\n/**\n * Ensures that all elements are removed first up so they can be recreated cleanly\n * @param {Object} JSONcontainer\n */\nexports.resetElements = function (JSONcontainer) {\n  exports.prepareElements(JSONcontainer);\n  exports.cleanupElements(JSONcontainer);\n  exports.prepareElements(JSONcontainer);\n};\n\n/**\n * Allocate or generate an SVG element if needed. Store a reference to it in the JSON container and draw it in the svgContainer\n * the JSON container and the SVG container have to be supplied so other svg containers (like the legend) can use this.\n *\n * @param {string} elementType\n * @param {Object} JSONcontainer\n * @param {Object} svgContainer\n * @returns {Element}\n * @private\n */\nexports.getSVGElement = function (elementType, JSONcontainer, svgContainer) {\n  var element;\n  // allocate SVG element, if it doesnt yet exist, create one.\n  if (JSONcontainer.hasOwnProperty(elementType)) {\n    // this element has been created before\n    // check if there is an redundant element\n    if (JSONcontainer[elementType].redundant.length > 0) {\n      element = JSONcontainer[elementType].redundant[0];\n      JSONcontainer[elementType].redundant.shift();\n    } else {\n      // create a new element and add it to the SVG\n      element = document.createElementNS('http://www.w3.org/2000/svg', elementType);\n      svgContainer.appendChild(element);\n    }\n  } else {\n    // create a new element and add it to the SVG, also create a new object in the svgElements to keep track of it.\n    element = document.createElementNS('http://www.w3.org/2000/svg', elementType);\n    JSONcontainer[elementType] = { used: [], redundant: [] };\n    svgContainer.appendChild(element);\n  }\n  JSONcontainer[elementType].used.push(element);\n  return element;\n};\n\n/**\n * Allocate or generate an SVG element if needed. Store a reference to it in the JSON container and draw it in the svgContainer\n * the JSON container and the SVG container have to be supplied so other svg containers (like the legend) can use this.\n *\n * @param {string} elementType\n * @param {Object} JSONcontainer\n * @param {Element} DOMContainer\n * @param {Element} insertBefore\n * @returns {*}\n */\nexports.getDOMElement = function (elementType, JSONcontainer, DOMContainer, insertBefore) {\n  var element;\n  // allocate DOM element, if it doesnt yet exist, create one.\n  if (JSONcontainer.hasOwnProperty(elementType)) {\n    // this element has been created before\n    // check if there is an redundant element\n    if (JSONcontainer[elementType].redundant.length > 0) {\n      element = JSONcontainer[elementType].redundant[0];\n      JSONcontainer[elementType].redundant.shift();\n    } else {\n      // create a new element and add it to the SVG\n      element = document.createElement(elementType);\n      if (insertBefore !== undefined) {\n        DOMContainer.insertBefore(element, insertBefore);\n      } else {\n        DOMContainer.appendChild(element);\n      }\n    }\n  } else {\n    // create a new element and add it to the SVG, also create a new object in the svgElements to keep track of it.\n    element = document.createElement(elementType);\n    JSONcontainer[elementType] = { used: [], redundant: [] };\n    if (insertBefore !== undefined) {\n      DOMContainer.insertBefore(element, insertBefore);\n    } else {\n      DOMContainer.appendChild(element);\n    }\n  }\n  JSONcontainer[elementType].used.push(element);\n  return element;\n};\n\n/**\n * Draw a point object. This is a separate function because it can also be called by the legend.\n * The reason the JSONcontainer and the target SVG svgContainer have to be supplied is so the legend can use these functions\n * as well.\n *\n * @param {number} x\n * @param {number} y\n * @param {Object} groupTemplate: A template containing the necessary information to draw the datapoint e.g., {style: 'circle', size: 5, className: 'className' }\n * @param {Object} JSONcontainer\n * @param {Object} svgContainer\n * @param {Object} labelObj\n * @returns {vis.PointItem}\n */\nexports.drawPoint = function (x, y, groupTemplate, JSONcontainer, svgContainer, labelObj) {\n  var point;\n  if (groupTemplate.style == 'circle') {\n    point = exports.getSVGElement('circle', JSONcontainer, svgContainer);\n    point.setAttributeNS(null, 'cx', x);\n    point.setAttributeNS(null, 'cy', y);\n    point.setAttributeNS(null, 'r', 0.5 * groupTemplate.size);\n  } else {\n    point = exports.getSVGElement('rect', JSONcontainer, svgContainer);\n    point.setAttributeNS(null, 'x', x - 0.5 * groupTemplate.size);\n    point.setAttributeNS(null, 'y', y - 0.5 * groupTemplate.size);\n    point.setAttributeNS(null, 'width', groupTemplate.size);\n    point.setAttributeNS(null, 'height', groupTemplate.size);\n  }\n\n  if (groupTemplate.styles !== undefined) {\n    point.setAttributeNS(null, 'style', groupTemplate.styles);\n  }\n  point.setAttributeNS(null, 'class', groupTemplate.className + ' vis-point');\n  //handle label\n\n  if (labelObj) {\n    var label = exports.getSVGElement('text', JSONcontainer, svgContainer);\n    if (labelObj.xOffset) {\n      x = x + labelObj.xOffset;\n    }\n\n    if (labelObj.yOffset) {\n      y = y + labelObj.yOffset;\n    }\n    if (labelObj.content) {\n      label.textContent = labelObj.content;\n    }\n\n    if (labelObj.className) {\n      label.setAttributeNS(null, 'class', labelObj.className + ' vis-label');\n    }\n    label.setAttributeNS(null, 'x', x);\n    label.setAttributeNS(null, 'y', y);\n  }\n\n  return point;\n};\n\n/**\n * draw a bar SVG element centered on the X coordinate\n *\n * @param {number} x\n * @param {number} y\n * @param {number} width\n * @param {number} height\n * @param {string} className\n * @param {Object} JSONcontainer\n * @param {Object} svgContainer\n * @param {string} style\n */\nexports.drawBar = function (x, y, width, height, className, JSONcontainer, svgContainer, style) {\n  if (height != 0) {\n    if (height < 0) {\n      height *= -1;\n      y -= height;\n    }\n    var rect = exports.getSVGElement('rect', JSONcontainer, svgContainer);\n    rect.setAttributeNS(null, 'x', x - 0.5 * width);\n    rect.setAttributeNS(null, 'y', y);\n    rect.setAttributeNS(null, 'width', width);\n    rect.setAttributeNS(null, 'height', height);\n    rect.setAttributeNS(null, 'class', className);\n    if (style) {\n      rect.setAttributeNS(null, 'style', style);\n    }\n  }\n};\n\n/***/ }),\n/* 123 */\n/***/ (function(module, exports, __nested_webpack_require_568470__) {\n\nvar core = __nested_webpack_require_568470__(6);\nvar $JSON = core.JSON || (core.JSON = { stringify: JSON.stringify });\nmodule.exports = function stringify(it) { // eslint-disable-line no-unused-vars\n  return $JSON.stringify.apply($JSON, arguments);\n};\n\n\n/***/ }),\n/* 124 */\n/***/ (function(module, exports, __nested_webpack_require_568787__) {\n\n\"use strict\";\n\n\n// Load custom shapes into CanvasRenderingContext2D\n__nested_webpack_require_568787__(125);\n\nvar Emitter = __nested_webpack_require_568787__(73);\nvar util = __nested_webpack_require_568787__(2);\nvar dotparser = __nested_webpack_require_568787__(74);\nvar gephiParser = __nested_webpack_require_568787__(75);\nvar Activator = __nested_webpack_require_568787__(126);\nvar locales = __nested_webpack_require_568787__(129);\n\nvar Images = __nested_webpack_require_568787__(76)['default'];\nvar Groups = __nested_webpack_require_568787__(134)['default'];\nvar NodesHandler = __nested_webpack_require_568787__(135)['default'];\nvar EdgesHandler = __nested_webpack_require_568787__(165)['default'];\nvar PhysicsEngine = __nested_webpack_require_568787__(171)['default'];\nvar ClusterEngine = __nested_webpack_require_568787__(178)['default'];\nvar CanvasRenderer = __nested_webpack_require_568787__(180)['default'];\nvar Canvas = __nested_webpack_require_568787__(181)['default'];\nvar View = __nested_webpack_require_568787__(182)['default'];\nvar InteractionHandler = __nested_webpack_require_568787__(183)['default'];\nvar SelectionHandler = __nested_webpack_require_568787__(186)['default'];\nvar LayoutEngine = __nested_webpack_require_568787__(187)['default'];\nvar ManipulationSystem = __nested_webpack_require_568787__(190)['default'];\nvar Configurator = __nested_webpack_require_568787__(191)['default'];\nvar Validator = __nested_webpack_require_568787__(54)['default'];\n\nvar _require = __nested_webpack_require_568787__(54),\n    printStyle = _require.printStyle;\n\nvar _require2 = __nested_webpack_require_568787__(84),\n    allOptions = _require2.allOptions,\n    configureOptions = _require2.configureOptions;\n\nvar KamadaKawai = __nested_webpack_require_568787__(193)['default'];\n\n/**\n * Create a network visualization, displaying nodes and edges.\n *\n * @param {Element} container   The DOM element in which the Network will\n *                                  be created. Normally a div element.\n * @param {Object} data         An object containing parameters\n *                              {Array} nodes\n *                              {Array} edges\n * @param {Object} options      Options\n * @constructor Network\n */\nfunction Network(container, data, options) {\n  var _this = this;\n\n  if (!(this instanceof Network)) {\n    throw new SyntaxError('Constructor must be called with the new operator');\n  }\n\n  // set constant values\n  this.options = {};\n  this.defaultOptions = {\n    locale: 'en',\n    locales: locales,\n    clickToUse: false\n  };\n  util.extend(this.options, this.defaultOptions);\n\n  /**\n   * Containers for nodes and edges.\n   *\n   * 'edges' and 'nodes' contain the full definitions of all the network elements.\n   * 'nodeIndices' and 'edgeIndices' contain the id's of the active elements.\n   *\n   * The distinction is important, because a defined node need not be active, i.e.\n   * visible on the canvas. This happens in particular when clusters are defined, in\n   * that case there will be nodes and edges not displayed.\n   * The bottom line is that all code with actions related to visibility, *must* use\n   * 'nodeIndices' and 'edgeIndices', not 'nodes' and 'edges' directly.\n   */\n  this.body = {\n    container: container,\n\n    // See comment above for following fields\n    nodes: {},\n    nodeIndices: [],\n    edges: {},\n    edgeIndices: [],\n\n    emitter: {\n      on: this.on.bind(this),\n      off: this.off.bind(this),\n      emit: this.emit.bind(this),\n      once: this.once.bind(this)\n    },\n    eventListeners: {\n      onTap: function onTap() {},\n      onTouch: function onTouch() {},\n      onDoubleTap: function onDoubleTap() {},\n      onHold: function onHold() {},\n      onDragStart: function onDragStart() {},\n      onDrag: function onDrag() {},\n      onDragEnd: function onDragEnd() {},\n      onMouseWheel: function onMouseWheel() {},\n      onPinch: function onPinch() {},\n      onMouseMove: function onMouseMove() {},\n      onRelease: function onRelease() {},\n      onContext: function onContext() {}\n    },\n    data: {\n      nodes: null, // A DataSet or DataView\n      edges: null // A DataSet or DataView\n    },\n    functions: {\n      createNode: function createNode() {},\n      createEdge: function createEdge() {},\n      getPointer: function getPointer() {}\n    },\n    modules: {},\n    view: {\n      scale: 1,\n      translation: { x: 0, y: 0 }\n    }\n\n    // bind the event listeners\n  };this.bindEventListeners();\n\n  // setting up all modules\n  this.images = new Images(function () {\n    return _this.body.emitter.emit('_requestRedraw');\n  }); // object with images\n  this.groups = new Groups(); // object with groups\n  this.canvas = new Canvas(this.body); // DOM handler\n  this.selectionHandler = new SelectionHandler(this.body, this.canvas); // Selection handler\n  this.interactionHandler = new InteractionHandler(this.body, this.canvas, this.selectionHandler); // Interaction handler handles all the hammer bindings (that are bound by canvas), key\n  this.view = new View(this.body, this.canvas); // camera handler, does animations and zooms\n  this.renderer = new CanvasRenderer(this.body, this.canvas); // renderer, starts renderloop, has events that modules can hook into\n  this.physics = new PhysicsEngine(this.body); // physics engine, does all the simulations\n  this.layoutEngine = new LayoutEngine(this.body); // layout engine for inital layout and hierarchical layout\n  this.clustering = new ClusterEngine(this.body); // clustering api\n  this.manipulation = new ManipulationSystem(this.body, this.canvas, this.selectionHandler); // data manipulation system\n\n  this.nodesHandler = new NodesHandler(this.body, this.images, this.groups, this.layoutEngine); // Handle adding, deleting and updating of nodes as well as global options\n  this.edgesHandler = new EdgesHandler(this.body, this.images, this.groups); // Handle adding, deleting and updating of edges as well as global options\n\n  this.body.modules['kamadaKawai'] = new KamadaKawai(this.body, 150, 0.05); // Layouting algorithm.\n  this.body.modules['clustering'] = this.clustering;\n\n  // create the DOM elements\n  this.canvas._create();\n\n  // apply options\n  this.setOptions(options);\n\n  // load data (the disable start variable will be the same as the enabled clustering)\n  this.setData(data);\n}\n\n// Extend Network with an Emitter mixin\nEmitter(Network.prototype);\n\n/**\n * Set options\n * @param {Object} options\n */\nNetwork.prototype.setOptions = function (options) {\n  var _this2 = this;\n\n  if (options === null) {\n    options = undefined; // This ensures that options handling doesn't crash in the handling\n  }\n\n  if (options !== undefined) {\n    var errorFound = Validator.validate(options, allOptions);\n    if (errorFound === true) {\n      console.log('%cErrors have been found in the supplied options object.', printStyle);\n    }\n\n    // copy the global fields over\n    var fields = ['locale', 'locales', 'clickToUse'];\n    util.selectiveDeepExtend(fields, this.options, options);\n\n    // the hierarchical system can adapt the edges and the physics to it's own options because not all combinations work with the hierarichical system.\n    options = this.layoutEngine.setOptions(options.layout, options);\n\n    this.canvas.setOptions(options); // options for canvas are in globals\n\n    // pass the options to the modules\n    this.groups.setOptions(options.groups);\n    this.nodesHandler.setOptions(options.nodes);\n    this.edgesHandler.setOptions(options.edges);\n    this.physics.setOptions(options.physics);\n    this.manipulation.setOptions(options.manipulation, options, this.options); // manipulation uses the locales in the globals\n\n    this.interactionHandler.setOptions(options.interaction);\n    this.renderer.setOptions(options.interaction); // options for rendering are in interaction\n    this.selectionHandler.setOptions(options.interaction); // options for selection are in interaction\n\n    // reload the settings of the nodes to apply changes in groups that are not referenced by pointer.\n    if (options.groups !== undefined) {\n      this.body.emitter.emit('refreshNodes');\n    }\n    // these two do not have options at the moment, here for completeness\n    //this.view.setOptions(options.view);\n    //this.clustering.setOptions(options.clustering);\n\n    if ('configure' in options) {\n      if (!this.configurator) {\n        this.configurator = new Configurator(this, this.body.container, configureOptions, this.canvas.pixelRatio);\n      }\n\n      this.configurator.setOptions(options.configure);\n    }\n\n    // if the configuration system is enabled, copy all options and put them into the config system\n    if (this.configurator && this.configurator.options.enabled === true) {\n      var networkOptions = {\n        nodes: {},\n        edges: {},\n        layout: {},\n        interaction: {},\n        manipulation: {},\n        physics: {},\n        global: {}\n      };\n      util.deepExtend(networkOptions.nodes, this.nodesHandler.options);\n      util.deepExtend(networkOptions.edges, this.edgesHandler.options);\n      util.deepExtend(networkOptions.layout, this.layoutEngine.options);\n      // load the selectionHandler and render default options in to the interaction group\n      util.deepExtend(networkOptions.interaction, this.selectionHandler.options);\n      util.deepExtend(networkOptions.interaction, this.renderer.options);\n\n      util.deepExtend(networkOptions.interaction, this.interactionHandler.options);\n      util.deepExtend(networkOptions.manipulation, this.manipulation.options);\n      util.deepExtend(networkOptions.physics, this.physics.options);\n\n      // load globals into the global object\n      util.deepExtend(networkOptions.global, this.canvas.options);\n      util.deepExtend(networkOptions.global, this.options);\n\n      this.configurator.setModuleOptions(networkOptions);\n    }\n\n    // handle network global options\n    if (options.clickToUse !== undefined) {\n      if (options.clickToUse === true) {\n        if (this.activator === undefined) {\n          this.activator = new Activator(this.canvas.frame);\n          this.activator.on('change', function () {\n            _this2.body.emitter.emit('activate');\n          });\n        }\n      } else {\n        if (this.activator !== undefined) {\n          this.activator.destroy();\n          delete this.activator;\n        }\n        this.body.emitter.emit('activate');\n      }\n    } else {\n      this.body.emitter.emit('activate');\n    }\n\n    this.canvas.setSize();\n    // start the physics simulation. Can be safely called multiple times.\n    this.body.emitter.emit('startSimulation');\n  }\n};\n\n/**\n * Update the visible nodes and edges list with the most recent node state.\n *\n * Visible nodes are stored in this.body.nodeIndices.\n * Visible edges are stored in this.body.edgeIndices.\n * A node or edges is visible if it is not hidden or clustered.\n *\n * @private\n */\nNetwork.prototype._updateVisibleIndices = function () {\n  var nodes = this.body.nodes;\n  var edges = this.body.edges;\n  this.body.nodeIndices = [];\n  this.body.edgeIndices = [];\n\n  for (var nodeId in nodes) {\n    if (nodes.hasOwnProperty(nodeId)) {\n      if (!this.clustering._isClusteredNode(nodeId) && nodes[nodeId].options.hidden === false) {\n        this.body.nodeIndices.push(nodes[nodeId].id);\n      }\n    }\n  }\n\n  for (var edgeId in edges) {\n    if (edges.hasOwnProperty(edgeId)) {\n      var edge = edges[edgeId];\n\n      // It can happen that this is executed *after* a node edge has been removed,\n      // but *before* the edge itself has been removed. Taking this into account.\n      var fromNode = nodes[edge.fromId];\n      var toNode = nodes[edge.toId];\n      var edgeNodesPresent = fromNode !== undefined && toNode !== undefined;\n\n      var isVisible = !this.clustering._isClusteredEdge(edgeId) && edge.options.hidden === false && edgeNodesPresent && fromNode.options.hidden === false && // Also hidden if any of its connecting nodes are hidden\n      toNode.options.hidden === false; // idem\n\n      if (isVisible) {\n        this.body.edgeIndices.push(edge.id);\n      }\n    }\n  }\n};\n\n/**\n * Bind all events\n */\nNetwork.prototype.bindEventListeners = function () {\n  var _this3 = this;\n\n  // This event will trigger a rebuilding of the cache everything.\n  // Used when nodes or edges have been added or removed.\n  this.body.emitter.on('_dataChanged', function () {\n    _this3.edgesHandler._updateState();\n    _this3.body.emitter.emit('_dataUpdated');\n  });\n\n  // this is called when options of EXISTING nodes or edges have changed.\n  this.body.emitter.on('_dataUpdated', function () {\n    // Order important in following block\n    _this3.clustering._updateState();\n    _this3._updateVisibleIndices();\n\n    _this3._updateValueRange(_this3.body.nodes);\n    _this3._updateValueRange(_this3.body.edges);\n    // start simulation (can be called safely, even if already running)\n    _this3.body.emitter.emit('startSimulation');\n    _this3.body.emitter.emit('_requestRedraw');\n  });\n};\n\n/**\n * Set nodes and edges, and optionally options as well.\n *\n * @param {Object} data              Object containing parameters:\n *                                   {Array | DataSet | DataView} [nodes] Array with nodes\n *                                   {Array | DataSet | DataView} [edges] Array with edges\n *                                   {String} [dot] String containing data in DOT format\n *                                   {String} [gephi] String containing data in gephi JSON format\n *                                   {Options} [options] Object with options\n */\nNetwork.prototype.setData = function (data) {\n  // reset the physics engine.\n  this.body.emitter.emit('resetPhysics');\n  this.body.emitter.emit('_resetData');\n\n  // unselect all to ensure no selections from old data are carried over.\n  this.selectionHandler.unselectAll();\n\n  if (data && data.dot && (data.nodes || data.edges)) {\n    throw new SyntaxError('Data must contain either parameter \"dot\" or ' + ' parameter pair \"nodes\" and \"edges\", but not both.');\n  }\n\n  // set options\n  this.setOptions(data && data.options);\n  // set all data\n  if (data && data.dot) {\n    console.log('The dot property has been deprecated. Please use the static convertDot method to convert DOT into vis.network format and use the normal data format with nodes and edges. This converter is used like this: var data = vis.network.convertDot(dotString);');\n    // parse DOT file\n    var dotData = dotparser.DOTToGraph(data.dot);\n    this.setData(dotData);\n    return;\n  } else if (data && data.gephi) {\n    // parse DOT file\n    console.log('The gephi property has been deprecated. Please use the static convertGephi method to convert gephi into vis.network format and use the normal data format with nodes and edges. This converter is used like this: var data = vis.network.convertGephi(gephiJson);');\n    var gephiData = gephiParser.parseGephi(data.gephi);\n    this.setData(gephiData);\n    return;\n  } else {\n    this.nodesHandler.setData(data && data.nodes, true);\n    this.edgesHandler.setData(data && data.edges, true);\n  }\n\n  // emit change in data\n  this.body.emitter.emit('_dataChanged');\n\n  // emit data loaded\n  this.body.emitter.emit('_dataLoaded');\n\n  // find a stable position or start animating to a stable position\n  this.body.emitter.emit('initPhysics');\n};\n\n/**\n * Cleans up all bindings of the network, removing it fully from the memory IF the variable is set to null after calling this function.\n * var network = new vis.Network(..);\n * network.destroy();\n * network = null;\n */\nNetwork.prototype.destroy = function () {\n  this.body.emitter.emit('destroy');\n  // clear events\n  this.body.emitter.off();\n  this.off();\n\n  // delete modules\n  delete this.groups;\n  delete this.canvas;\n  delete this.selectionHandler;\n  delete this.interactionHandler;\n  delete this.view;\n  delete this.renderer;\n  delete this.physics;\n  delete this.layoutEngine;\n  delete this.clustering;\n  delete this.manipulation;\n  delete this.nodesHandler;\n  delete this.edgesHandler;\n  delete this.configurator;\n  delete this.images;\n\n  for (var nodeId in this.body.nodes) {\n    if (!this.body.nodes.hasOwnProperty(nodeId)) continue;\n    delete this.body.nodes[nodeId];\n  }\n\n  for (var edgeId in this.body.edges) {\n    if (!this.body.edges.hasOwnProperty(edgeId)) continue;\n    delete this.body.edges[edgeId];\n  }\n\n  // remove the container and everything inside it recursively\n  util.recursiveDOMDelete(this.body.container);\n};\n\n/**\n * Update the values of all object in the given array according to the current\n * value range of the objects in the array.\n * @param {Object} obj    An object containing a set of Edges or Nodes\n *                        The objects must have a method getValue() and\n *                        setValueRange(min, max).\n * @private\n */\nNetwork.prototype._updateValueRange = function (obj) {\n  var id;\n\n  // determine the range of the objects\n  var valueMin = undefined;\n  var valueMax = undefined;\n  var valueTotal = 0;\n  for (id in obj) {\n    if (obj.hasOwnProperty(id)) {\n      var value = obj[id].getValue();\n      if (value !== undefined) {\n        valueMin = valueMin === undefined ? value : Math.min(value, valueMin);\n        valueMax = valueMax === undefined ? value : Math.max(value, valueMax);\n        valueTotal += value;\n      }\n    }\n  }\n\n  // adjust the range of all objects\n  if (valueMin !== undefined && valueMax !== undefined) {\n    for (id in obj) {\n      if (obj.hasOwnProperty(id)) {\n        obj[id].setValueRange(valueMin, valueMax, valueTotal);\n      }\n    }\n  }\n};\n\n/**\n * Returns true when the Network is active.\n * @returns {boolean}\n */\nNetwork.prototype.isActive = function () {\n  return !this.activator || this.activator.active;\n};\n\nNetwork.prototype.setSize = function () {\n  return this.canvas.setSize.apply(this.canvas, arguments);\n};\nNetwork.prototype.canvasToDOM = function () {\n  return this.canvas.canvasToDOM.apply(this.canvas, arguments);\n};\nNetwork.prototype.DOMtoCanvas = function () {\n  return this.canvas.DOMtoCanvas.apply(this.canvas, arguments);\n};\n\n/**\n * Nodes can be in clusters. Clusters can also be in clusters. This function returns and array of\n * nodeIds showing where the node is.\n *\n * If any nodeId in the chain, especially the first passed in as a parameter, is not present in\n * the current nodes list, an empty array is returned.\n *\n * Example:\n * cluster 'A' contains cluster 'B',\n * cluster 'B' contains cluster 'C',\n * cluster 'C' contains node 'fred'.\n * `jsnetwork.clustering.findNode('fred')` will return `['A','B','C','fred']`.\n *\n * @param {string|number} nodeId\n * @returns {Array}\n */\nNetwork.prototype.findNode = function () {\n  return this.clustering.findNode.apply(this.clustering, arguments);\n};\n\nNetwork.prototype.isCluster = function () {\n  return this.clustering.isCluster.apply(this.clustering, arguments);\n};\nNetwork.prototype.openCluster = function () {\n  return this.clustering.openCluster.apply(this.clustering, arguments);\n};\nNetwork.prototype.cluster = function () {\n  return this.clustering.cluster.apply(this.clustering, arguments);\n};\nNetwork.prototype.getNodesInCluster = function () {\n  return this.clustering.getNodesInCluster.apply(this.clustering, arguments);\n};\nNetwork.prototype.clusterByConnection = function () {\n  return this.clustering.clusterByConnection.apply(this.clustering, arguments);\n};\nNetwork.prototype.clusterByHubsize = function () {\n  return this.clustering.clusterByHubsize.apply(this.clustering, arguments);\n};\n\n/**\n * This method will cluster all nodes with 1 edge with their respective connected node.\n * The options object is explained in full <a data-scroll=\"\" data-options=\"{ &quot;easing&quot;: &quot;easeInCubic&quot; }\" href=\"#optionsObject\">below</a>.\n *\n * @param {object} [options]\n * @returns {undefined}\n */\nNetwork.prototype.clusterOutliers = function () {\n  return this.clustering.clusterOutliers.apply(this.clustering, arguments);\n};\n\nNetwork.prototype.getSeed = function () {\n  return this.layoutEngine.getSeed.apply(this.layoutEngine, arguments);\n};\nNetwork.prototype.enableEditMode = function () {\n  return this.manipulation.enableEditMode.apply(this.manipulation, arguments);\n};\nNetwork.prototype.disableEditMode = function () {\n  return this.manipulation.disableEditMode.apply(this.manipulation, arguments);\n};\nNetwork.prototype.addNodeMode = function () {\n  return this.manipulation.addNodeMode.apply(this.manipulation, arguments);\n};\nNetwork.prototype.editNode = function () {\n  return this.manipulation.editNode.apply(this.manipulation, arguments);\n};\nNetwork.prototype.editNodeMode = function () {\n  console.log('Deprecated: Please use editNode instead of editNodeMode.');\n  return this.manipulation.editNode.apply(this.manipulation, arguments);\n};\nNetwork.prototype.addEdgeMode = function () {\n  return this.manipulation.addEdgeMode.apply(this.manipulation, arguments);\n};\nNetwork.prototype.editEdgeMode = function () {\n  return this.manipulation.editEdgeMode.apply(this.manipulation, arguments);\n};\nNetwork.prototype.deleteSelected = function () {\n  return this.manipulation.deleteSelected.apply(this.manipulation, arguments);\n};\nNetwork.prototype.getPositions = function () {\n  return this.nodesHandler.getPositions.apply(this.nodesHandler, arguments);\n};\nNetwork.prototype.storePositions = function () {\n  return this.nodesHandler.storePositions.apply(this.nodesHandler, arguments);\n};\nNetwork.prototype.moveNode = function () {\n  return this.nodesHandler.moveNode.apply(this.nodesHandler, arguments);\n};\nNetwork.prototype.getBoundingBox = function () {\n  return this.nodesHandler.getBoundingBox.apply(this.nodesHandler, arguments);\n};\nNetwork.prototype.getConnectedNodes = function (objectId) {\n  if (this.body.nodes[objectId] !== undefined) {\n    return this.nodesHandler.getConnectedNodes.apply(this.nodesHandler, arguments);\n  } else {\n    return this.edgesHandler.getConnectedNodes.apply(this.edgesHandler, arguments);\n  }\n};\nNetwork.prototype.getConnectedEdges = function () {\n  return this.nodesHandler.getConnectedEdges.apply(this.nodesHandler, arguments);\n};\nNetwork.prototype.startSimulation = function () {\n  return this.physics.startSimulation.apply(this.physics, arguments);\n};\nNetwork.prototype.stopSimulation = function () {\n  return this.physics.stopSimulation.apply(this.physics, arguments);\n};\nNetwork.prototype.stabilize = function () {\n  return this.physics.stabilize.apply(this.physics, arguments);\n};\nNetwork.prototype.getSelection = function () {\n  return this.selectionHandler.getSelection.apply(this.selectionHandler, arguments);\n};\nNetwork.prototype.setSelection = function () {\n  return this.selectionHandler.setSelection.apply(this.selectionHandler, arguments);\n};\nNetwork.prototype.getSelectedNodes = function () {\n  return this.selectionHandler.getSelectedNodes.apply(this.selectionHandler, arguments);\n};\nNetwork.prototype.getSelectedEdges = function () {\n  return this.selectionHandler.getSelectedEdges.apply(this.selectionHandler, arguments);\n};\nNetwork.prototype.getNodeAt = function () {\n  var node = this.selectionHandler.getNodeAt.apply(this.selectionHandler, arguments);\n  if (node !== undefined && node.id !== undefined) {\n    return node.id;\n  }\n  return node;\n};\nNetwork.prototype.getEdgeAt = function () {\n  var edge = this.selectionHandler.getEdgeAt.apply(this.selectionHandler, arguments);\n  if (edge !== undefined && edge.id !== undefined) {\n    return edge.id;\n  }\n  return edge;\n};\nNetwork.prototype.selectNodes = function () {\n  return this.selectionHandler.selectNodes.apply(this.selectionHandler, arguments);\n};\nNetwork.prototype.selectEdges = function () {\n  return this.selectionHandler.selectEdges.apply(this.selectionHandler, arguments);\n};\nNetwork.prototype.unselectAll = function () {\n  this.selectionHandler.unselectAll.apply(this.selectionHandler, arguments);\n  this.redraw();\n};\nNetwork.prototype.redraw = function () {\n  return this.renderer.redraw.apply(this.renderer, arguments);\n};\nNetwork.prototype.getScale = function () {\n  return this.view.getScale.apply(this.view, arguments);\n};\nNetwork.prototype.getViewPosition = function () {\n  return this.view.getViewPosition.apply(this.view, arguments);\n};\nNetwork.prototype.fit = function () {\n  return this.view.fit.apply(this.view, arguments);\n};\nNetwork.prototype.moveTo = function () {\n  return this.view.moveTo.apply(this.view, arguments);\n};\nNetwork.prototype.focus = function () {\n  return this.view.focus.apply(this.view, arguments);\n};\nNetwork.prototype.releaseNode = function () {\n  return this.view.releaseNode.apply(this.view, arguments);\n};\nNetwork.prototype.getOptionsFromConfigurator = function () {\n  var options = {};\n  if (this.configurator) {\n    options = this.configurator.getOptions.apply(this.configurator);\n  }\n  return options;\n};\n\nmodule.exports = Network;\n\n/***/ }),\n/* 125 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\n/**\n * Canvas shapes used by Network\n */\nif (typeof CanvasRenderingContext2D !== 'undefined') {\n  /**\n   * Draw a circle shape\n   *\n   * @param {number} x\n   * @param {number} y\n   * @param {number} r\n   */\n  CanvasRenderingContext2D.prototype.circle = function (x, y, r) {\n    this.beginPath();\n    this.arc(x, y, r, 0, 2 * Math.PI, false);\n    this.closePath();\n  };\n\n  /**\n   * Draw a square shape\n   * @param {number} x horizontal center\n   * @param {number} y vertical center\n   * @param {number} r   size, width and height of the square\n   */\n  CanvasRenderingContext2D.prototype.square = function (x, y, r) {\n    this.beginPath();\n    this.rect(x - r, y - r, r * 2, r * 2);\n    this.closePath();\n  };\n\n  /**\n   * Draw a triangle shape\n   * @param {number} x horizontal center\n   * @param {number} y vertical center\n   * @param {number} r   radius, half the length of the sides of the triangle\n   */\n  CanvasRenderingContext2D.prototype.triangle = function (x, y, r) {\n    // http://en.wikipedia.org/wiki/Equilateral_triangle\n    this.beginPath();\n\n    // the change in radius and the offset is here to center the shape\n    r *= 1.15;\n    y += 0.275 * r;\n\n    var s = r * 2;\n    var s2 = s / 2;\n    var ir = Math.sqrt(3) / 6 * s; // radius of inner circle\n    var h = Math.sqrt(s * s - s2 * s2); // height\n\n    this.moveTo(x, y - (h - ir));\n    this.lineTo(x + s2, y + ir);\n    this.lineTo(x - s2, y + ir);\n    this.lineTo(x, y - (h - ir));\n    this.closePath();\n  };\n\n  /**\n   * Draw a triangle shape in downward orientation\n   * @param {number} x horizontal center\n   * @param {number} y vertical center\n   * @param {number} r radius\n   */\n  CanvasRenderingContext2D.prototype.triangleDown = function (x, y, r) {\n    // http://en.wikipedia.org/wiki/Equilateral_triangle\n    this.beginPath();\n\n    // the change in radius and the offset is here to center the shape\n    r *= 1.15;\n    y -= 0.275 * r;\n\n    var s = r * 2;\n    var s2 = s / 2;\n    var ir = Math.sqrt(3) / 6 * s; // radius of inner circle\n    var h = Math.sqrt(s * s - s2 * s2); // height\n\n    this.moveTo(x, y + (h - ir));\n    this.lineTo(x + s2, y - ir);\n    this.lineTo(x - s2, y - ir);\n    this.lineTo(x, y + (h - ir));\n    this.closePath();\n  };\n\n  /**\n   * Draw a star shape, a star with 5 points\n   * @param {number} x horizontal center\n   * @param {number} y vertical center\n   * @param {number} r   radius, half the length of the sides of the triangle\n   */\n  CanvasRenderingContext2D.prototype.star = function (x, y, r) {\n    // http://www.html5canvastutorials.com/labs/html5-canvas-star-spinner/\n    this.beginPath();\n\n    // the change in radius and the offset is here to center the shape\n    r *= 0.82;\n    y += 0.1 * r;\n\n    for (var n = 0; n < 10; n++) {\n      var radius = n % 2 === 0 ? r * 1.3 : r * 0.5;\n      this.lineTo(x + radius * Math.sin(n * 2 * Math.PI / 10), y - radius * Math.cos(n * 2 * Math.PI / 10));\n    }\n\n    this.closePath();\n  };\n\n  /**\n   * Draw a Diamond shape\n   * @param {number} x horizontal center\n   * @param {number} y vertical center\n   * @param {number} r   radius, half the length of the sides of the triangle\n   */\n  CanvasRenderingContext2D.prototype.diamond = function (x, y, r) {\n    // http://www.html5canvastutorials.com/labs/html5-canvas-star-spinner/\n    this.beginPath();\n\n    this.lineTo(x, y + r);\n    this.lineTo(x + r, y);\n    this.lineTo(x, y - r);\n    this.lineTo(x - r, y);\n\n    this.closePath();\n  };\n\n  /**\n   * http://stackoverflow.com/questions/1255512/how-to-draw-a-rounded-rectangle-on-html-canvas\n   *\n   * @param {number} x\n   * @param {number} y\n   * @param {number} w\n   * @param {number} h\n   * @param {number} r\n   */\n  CanvasRenderingContext2D.prototype.roundRect = function (x, y, w, h, r) {\n    var r2d = Math.PI / 180;\n    if (w - 2 * r < 0) {\n      r = w / 2;\n    } //ensure that the radius isn't too large for x\n    if (h - 2 * r < 0) {\n      r = h / 2;\n    } //ensure that the radius isn't too large for y\n    this.beginPath();\n    this.moveTo(x + r, y);\n    this.lineTo(x + w - r, y);\n    this.arc(x + w - r, y + r, r, r2d * 270, r2d * 360, false);\n    this.lineTo(x + w, y + h - r);\n    this.arc(x + w - r, y + h - r, r, 0, r2d * 90, false);\n    this.lineTo(x + r, y + h);\n    this.arc(x + r, y + h - r, r, r2d * 90, r2d * 180, false);\n    this.lineTo(x, y + r);\n    this.arc(x + r, y + r, r, r2d * 180, r2d * 270, false);\n    this.closePath();\n  };\n\n  /**\n   * http://stackoverflow.com/questions/2172798/how-to-draw-an-oval-in-html5-canvas\n   *\n   * Postfix '_vis' added to discern it from standard method ellipse().\n   *\n   * @param {number} x\n   * @param {number} y\n   * @param {number} w\n   * @param {number} h\n   */\n  CanvasRenderingContext2D.prototype.ellipse_vis = function (x, y, w, h) {\n    var kappa = 0.5522848,\n        ox = w / 2 * kappa,\n        // control point offset horizontal\n    oy = h / 2 * kappa,\n        // control point offset vertical\n    xe = x + w,\n        // x-end\n    ye = y + h,\n        // y-end\n    xm = x + w / 2,\n        // x-middle\n    ym = y + h / 2; // y-middle\n\n    this.beginPath();\n    this.moveTo(x, ym);\n    this.bezierCurveTo(x, ym - oy, xm - ox, y, xm, y);\n    this.bezierCurveTo(xm + ox, y, xe, ym - oy, xe, ym);\n    this.bezierCurveTo(xe, ym + oy, xm + ox, ye, xm, ye);\n    this.bezierCurveTo(xm - ox, ye, x, ym + oy, x, ym);\n    this.closePath();\n  };\n\n  /**\n   * http://stackoverflow.com/questions/2172798/how-to-draw-an-oval-in-html5-canvas\n   *\n   * @param {number} x\n   * @param {number} y\n   * @param {number} w\n   * @param {number} h\n   */\n  CanvasRenderingContext2D.prototype.database = function (x, y, w, h) {\n    var f = 1 / 3;\n    var wEllipse = w;\n    var hEllipse = h * f;\n\n    var kappa = 0.5522848,\n        ox = wEllipse / 2 * kappa,\n        // control point offset horizontal\n    oy = hEllipse / 2 * kappa,\n        // control point offset vertical\n    xe = x + wEllipse,\n        // x-end\n    ye = y + hEllipse,\n        // y-end\n    xm = x + wEllipse / 2,\n        // x-middle\n    ym = y + hEllipse / 2,\n        // y-middle\n    ymb = y + (h - hEllipse / 2),\n        // y-midlle, bottom ellipse\n    yeb = y + h; // y-end, bottom ellipse\n\n    this.beginPath();\n    this.moveTo(xe, ym);\n\n    this.bezierCurveTo(xe, ym + oy, xm + ox, ye, xm, ye);\n    this.bezierCurveTo(xm - ox, ye, x, ym + oy, x, ym);\n\n    this.bezierCurveTo(x, ym - oy, xm - ox, y, xm, y);\n    this.bezierCurveTo(xm + ox, y, xe, ym - oy, xe, ym);\n\n    this.lineTo(xe, ymb);\n\n    this.bezierCurveTo(xe, ymb + oy, xm + ox, yeb, xm, yeb);\n    this.bezierCurveTo(xm - ox, yeb, x, ymb + oy, x, ymb);\n\n    this.lineTo(x, ym);\n  };\n\n  /**\n   * Sets up the dashedLine functionality for drawing\n   * Original code came from http://stackoverflow.com/questions/4576724/dotted-stroke-in-canvas\n   * @author David Jordan\n   * @date 2012-08-08\n   *\n   * @param {number} x\n   * @param {number} y\n   * @param {number} x2\n   * @param {number} y2\n   * @param {string} pattern\n   */\n  CanvasRenderingContext2D.prototype.dashedLine = function (x, y, x2, y2, pattern) {\n    this.beginPath();\n    this.moveTo(x, y);\n\n    var patternLength = pattern.length;\n    var dx = x2 - x;\n    var dy = y2 - y;\n    var slope = dy / dx;\n    var distRemaining = Math.sqrt(dx * dx + dy * dy);\n    var patternIndex = 0;\n    var draw = true;\n    var xStep = 0;\n    var dashLength = pattern[0];\n\n    while (distRemaining >= 0.1) {\n      dashLength = pattern[patternIndex++ % patternLength];\n      if (dashLength > distRemaining) {\n        dashLength = distRemaining;\n      }\n\n      xStep = Math.sqrt(dashLength * dashLength / (1 + slope * slope));\n      xStep = dx < 0 ? -xStep : xStep;\n      x += xStep;\n      y += slope * xStep;\n\n      if (draw === true) {\n        this.lineTo(x, y);\n      } else {\n        this.moveTo(x, y);\n      }\n\n      distRemaining -= dashLength;\n      draw = !draw;\n    }\n  };\n\n  /**\n   * Draw a Hexagon shape with 6 sides\n   * @param {Number} x horizontal center\n   * @param {Number} y vertical center\n   * @param {Number} r   radius\n   */\n  CanvasRenderingContext2D.prototype.hexagon = function (x, y, r) {\n    this.beginPath();\n    var sides = 6;\n    var a = Math.PI * 2 / sides;\n    this.moveTo(x + r, y);\n    for (var i = 1; i < sides; i++) {\n      this.lineTo(x + r * Math.cos(a * i), y + r * Math.sin(a * i));\n    }\n    this.closePath();\n  };\n}\n\n/***/ }),\n/* 126 */\n/***/ (function(module, exports, __nested_webpack_require_601667__) {\n\n\"use strict\";\n\n\nvar keycharm = __nested_webpack_require_601667__(52);\nvar Emitter = __nested_webpack_require_601667__(73);\nvar Hammer = __nested_webpack_require_601667__(24);\nvar util = __nested_webpack_require_601667__(2);\n\n/**\n * Turn an element into an clickToUse element.\n * When not active, the element has a transparent overlay. When the overlay is\n * clicked, the mode is changed to active.\n * When active, the element is displayed with a blue border around it, and\n * the interactive contents of the element can be used. When clicked outside\n * the element, the elements mode is changed to inactive.\n * @param {Element} container\n * @constructor Activator\n */\nfunction Activator(container) {\n  this.active = false;\n\n  this.dom = {\n    container: container\n  };\n\n  this.dom.overlay = document.createElement('div');\n  this.dom.overlay.className = 'vis-overlay';\n\n  this.dom.container.appendChild(this.dom.overlay);\n\n  this.hammer = Hammer(this.dom.overlay);\n  this.hammer.on('tap', this._onTapOverlay.bind(this));\n\n  // block all touch events (except tap)\n  var me = this;\n  var events = ['tap', 'doubletap', 'press', 'pinch', 'pan', 'panstart', 'panmove', 'panend'];\n  events.forEach(function (event) {\n    me.hammer.on(event, function (event) {\n      event.stopPropagation();\n    });\n  });\n\n  // attach a click event to the window, in order to deactivate when clicking outside the timeline\n  if (document && document.body) {\n    this.onClick = function (event) {\n      if (!_hasParent(event.target, container)) {\n        me.deactivate();\n      }\n    };\n    document.body.addEventListener('click', this.onClick);\n  }\n\n  if (this.keycharm !== undefined) {\n    this.keycharm.destroy();\n  }\n  this.keycharm = keycharm();\n\n  // keycharm listener only bounded when active)\n  this.escListener = this.deactivate.bind(this);\n}\n\n// turn into an event emitter\nEmitter(Activator.prototype);\n\n// The currently active activator\nActivator.current = null;\n\n/**\n * Destroy the activator. Cleans up all created DOM and event listeners\n */\nActivator.prototype.destroy = function () {\n  this.deactivate();\n\n  // remove dom\n  this.dom.overlay.parentNode.removeChild(this.dom.overlay);\n\n  // remove global event listener\n  if (this.onClick) {\n    document.body.removeEventListener('click', this.onClick);\n  }\n  // remove keycharm\n  if (this.keycharm !== undefined) {\n    this.keycharm.destroy();\n  }\n  this.keycharm = null;\n  // cleanup hammer instances\n  this.hammer.destroy();\n  this.hammer = null;\n  // FIXME: cleaning up hammer instances doesn't work (Timeline not removed from memory)\n};\n\n/**\n * Activate the element\n * Overlay is hidden, element is decorated with a blue shadow border\n */\nActivator.prototype.activate = function () {\n  // we allow only one active activator at a time\n  if (Activator.current) {\n    Activator.current.deactivate();\n  }\n  Activator.current = this;\n\n  this.active = true;\n  this.dom.overlay.style.display = 'none';\n  util.addClassName(this.dom.container, 'vis-active');\n\n  this.emit('change');\n  this.emit('activate');\n\n  // ugly hack: bind ESC after emitting the events, as the Network rebinds all\n  // keyboard events on a 'change' event\n  this.keycharm.bind('esc', this.escListener);\n};\n\n/**\n * Deactivate the element\n * Overlay is displayed on top of the element\n */\nActivator.prototype.deactivate = function () {\n  this.active = false;\n  this.dom.overlay.style.display = '';\n  util.removeClassName(this.dom.container, 'vis-active');\n  this.keycharm.unbind('esc', this.escListener);\n\n  this.emit('change');\n  this.emit('deactivate');\n};\n\n/**\n * Handle a tap event: activate the container\n * @param {Event}  event   The event\n * @private\n */\nActivator.prototype._onTapOverlay = function (event) {\n  // activate the container\n  this.activate();\n  event.stopPropagation();\n};\n\n/**\n * Test whether the element has the requested parent element somewhere in\n * its chain of parent nodes.\n * @param {HTMLElement} element\n * @param {HTMLElement} parent\n * @returns {boolean} Returns true when the parent is found somewhere in the\n *                    chain of parent nodes.\n * @private\n */\nfunction _hasParent(element, parent) {\n  while (element) {\n    if (element === parent) {\n      return true;\n    }\n    element = element.parentNode;\n  }\n  return false;\n}\n\nmodule.exports = Activator;\n\n/***/ }),\n/* 127 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\nvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n(function (factory) {\n  if (true) {\n    // AMD. Register as an anonymous module.\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else {}\n}(function () {\n  var _firstTarget = null; // singleton, will contain the target element where the touch event started\n\n  /**\n   * Extend an Hammer.js instance with event propagation.\n   *\n   * Features:\n   * - Events emitted by hammer will propagate in order from child to parent\n   *   elements.\n   * - Events are extended with a function `event.stopPropagation()` to stop\n   *   propagation to parent elements.\n   * - An option `preventDefault` to stop all default browser behavior.\n   *\n   * Usage:\n   *   var hammer = propagatingHammer(new Hammer(element));\n   *   var hammer = propagatingHammer(new Hammer(element), {preventDefault: true});\n   *\n   * @param {Hammer.Manager} hammer   An hammer instance.\n   * @param {Object} [options]        Available options:\n   *                                  - `preventDefault: true | false | 'mouse' | 'touch' | 'pen'`.\n   *                                    Enforce preventing the default browser behavior.\n   *                                    Cannot be set to `false`.\n   * @return {Hammer.Manager} Returns the same hammer instance with extended\n   *                          functionality\n   */\n  return function propagating(hammer, options) {\n    var _options = options || {\n      preventDefault: false\n    };\n\n    if (hammer.Manager) {\n      // This looks like the Hammer constructor.\n      // Overload the constructors with our own.\n      var Hammer = hammer;\n\n      var PropagatingHammer = function(element, options) {\n        var o = Object.create(_options);\n        if (options) Hammer.assign(o, options);\n        return propagating(new Hammer(element, o), o);\n      };\n      Hammer.assign(PropagatingHammer, Hammer);\n\n      PropagatingHammer.Manager = function (element, options) {\n        var o = Object.create(_options);\n        if (options) Hammer.assign(o, options);\n        return propagating(new Hammer.Manager(element, o), o);\n      };\n\n      return PropagatingHammer;\n    }\n\n    // create a wrapper object which will override the functions\n    // `on`, `off`, `destroy`, and `emit` of the hammer instance\n    var wrapper = Object.create(hammer);\n\n    // attach to DOM element\n    var element = hammer.element;\n\n    if(!element.hammer) element.hammer = [];\n    element.hammer.push(wrapper);\n\n    // register an event to catch the start of a gesture and store the\n    // target in a singleton\n    hammer.on('hammer.input', function (event) {\n      if (_options.preventDefault === true || (_options.preventDefault === event.pointerType)) {\n        event.preventDefault();\n      }\n      if (event.isFirst) {\n        _firstTarget = event.target;\n      }\n    });\n\n    /** @type {Object.<String, Array.<function>>} */\n    wrapper._handlers = {};\n\n    /**\n     * Register a handler for one or multiple events\n     * @param {String} events    A space separated string with events\n     * @param {function} handler A callback function, called as handler(event)\n     * @returns {Hammer.Manager} Returns the hammer instance\n     */\n    wrapper.on = function (events, handler) {\n      // register the handler\n      split(events).forEach(function (event) {\n        var _handlers = wrapper._handlers[event];\n        if (!_handlers) {\n          wrapper._handlers[event] = _handlers = [];\n\n          // register the static, propagated handler\n          hammer.on(event, propagatedHandler);\n        }\n        _handlers.push(handler);\n      });\n\n      return wrapper;\n    };\n\n    /**\n     * Unregister a handler for one or multiple events\n     * @param {String} events      A space separated string with events\n     * @param {function} [handler] Optional. The registered handler. If not\n     *                             provided, all handlers for given events\n     *                             are removed.\n     * @returns {Hammer.Manager}   Returns the hammer instance\n     */\n    wrapper.off = function (events, handler) {\n      // unregister the handler\n      split(events).forEach(function (event) {\n        var _handlers = wrapper._handlers[event];\n        if (_handlers) {\n          _handlers = handler ? _handlers.filter(function (h) {\n            return h !== handler;\n          }) : [];\n\n          if (_handlers.length > 0) {\n            wrapper._handlers[event] = _handlers;\n          }\n          else {\n            // remove static, propagated handler\n            hammer.off(event, propagatedHandler);\n            delete wrapper._handlers[event];\n          }\n        }\n      });\n\n      return wrapper;\n    };\n\n    /**\n     * Emit to the event listeners\n     * @param {string} eventType\n     * @param {Event} event\n     */\n    wrapper.emit = function(eventType, event) {\n      _firstTarget = event.target;\n      hammer.emit(eventType, event);\n    };\n\n    wrapper.destroy = function () {\n      // Detach from DOM element\n      var hammers = hammer.element.hammer;\n      var idx = hammers.indexOf(wrapper);\n      if(idx !== -1) hammers.splice(idx,1);\n      if(!hammers.length) delete hammer.element.hammer;\n\n      // clear all handlers\n      wrapper._handlers = {};\n\n      // call original hammer destroy\n      hammer.destroy();\n    };\n\n    // split a string with space separated words\n    function split(events) {\n      return events.match(/[^ ]+/g);\n    }\n\n    /**\n     * A static event handler, applying event propagation.\n     * @param {Object} event\n     */\n    function propagatedHandler(event) {\n      // let only a single hammer instance handle this event\n      if (event.type !== 'hammer.input') {\n        // it is possible that the same srcEvent is used with multiple hammer events,\n        // we keep track on which events are handled in an object _handled\n        if (!event.srcEvent._handled) {\n          event.srcEvent._handled = {};\n        }\n\n        if (event.srcEvent._handled[event.type]) {\n          return;\n        }\n        else {\n          event.srcEvent._handled[event.type] = true;\n        }\n      }\n\n      // attach a stopPropagation function to the event\n      var stopped = false;\n      event.stopPropagation = function () {\n        stopped = true;\n      };\n\n      //wrap the srcEvent's stopPropagation to also stop hammer propagation:\n      var srcStop = event.srcEvent.stopPropagation.bind(event.srcEvent);\n      if(typeof srcStop == \"function\") {\n        event.srcEvent.stopPropagation = function(){\n          srcStop();\n          event.stopPropagation();\n        }\n      }\n\n      // attach firstTarget property to the event\n      event.firstTarget = _firstTarget;\n\n      // propagate over all elements (until stopped)\n      var elem = _firstTarget;\n      while (elem && !stopped) {\n        var elemHammer = elem.hammer;\n        if(elemHammer){\n          var _handlers;\n          for(var k = 0; k < elemHammer.length; k++){\n            _handlers = elemHammer[k]._handlers[event.type];\n            if(_handlers) for (var i = 0; i < _handlers.length && !stopped; i++) {\n              _handlers[i](event);\n            }\n          }\n        }\n        elem = elem.parentNode;\n      }\n    }\n\n    return wrapper;\n  };\n}));\n\n\n/***/ }),\n/* 128 */\n/***/ (function(module, exports, __nested_webpack_require_613978__) {\n\nvar __WEBPACK_AMD_DEFINE_RESULT__;/*! Hammer.JS - v2.0.7 - 2016-04-22\n * http://hammerjs.github.io/\n *\n * Copyright (c) 2016 Jorik Tangelder;\n * Licensed under the MIT license */\n(function(window, document, exportName, undefined) {\n  'use strict';\n\nvar VENDOR_PREFIXES = ['', 'webkit', 'Moz', 'MS', 'ms', 'o'];\nvar TEST_ELEMENT = document.createElement('div');\n\nvar TYPE_FUNCTION = 'function';\n\nvar round = Math.round;\nvar abs = Math.abs;\nvar now = Date.now;\n\n/**\n * set a timeout with a given scope\n * @param {Function} fn\n * @param {Number} timeout\n * @param {Object} context\n * @returns {number}\n */\nfunction setTimeoutContext(fn, timeout, context) {\n    return setTimeout(bindFn(fn, context), timeout);\n}\n\n/**\n * if the argument is an array, we want to execute the fn on each entry\n * if it aint an array we don't want to do a thing.\n * this is used by all the methods that accept a single and array argument.\n * @param {*|Array} arg\n * @param {String} fn\n * @param {Object} [context]\n * @returns {Boolean}\n */\nfunction invokeArrayArg(arg, fn, context) {\n    if (Array.isArray(arg)) {\n        each(arg, context[fn], context);\n        return true;\n    }\n    return false;\n}\n\n/**\n * walk objects and arrays\n * @param {Object} obj\n * @param {Function} iterator\n * @param {Object} context\n */\nfunction each(obj, iterator, context) {\n    var i;\n\n    if (!obj) {\n        return;\n    }\n\n    if (obj.forEach) {\n        obj.forEach(iterator, context);\n    } else if (obj.length !== undefined) {\n        i = 0;\n        while (i < obj.length) {\n            iterator.call(context, obj[i], i, obj);\n            i++;\n        }\n    } else {\n        for (i in obj) {\n            obj.hasOwnProperty(i) && iterator.call(context, obj[i], i, obj);\n        }\n    }\n}\n\n/**\n * wrap a method with a deprecation warning and stack trace\n * @param {Function} method\n * @param {String} name\n * @param {String} message\n * @returns {Function} A new function wrapping the supplied method.\n */\nfunction deprecate(method, name, message) {\n    var deprecationMessage = 'DEPRECATED METHOD: ' + name + '\\n' + message + ' AT \\n';\n    return function() {\n        var e = new Error('get-stack-trace');\n        var stack = e && e.stack ? e.stack.replace(/^[^\\(]+?[\\n$]/gm, '')\n            .replace(/^\\s+at\\s+/gm, '')\n            .replace(/^Object.<anonymous>\\s*\\(/gm, '{anonymous}()@') : 'Unknown Stack Trace';\n\n        var log = window.console && (window.console.warn || window.console.log);\n        if (log) {\n            log.call(window.console, deprecationMessage, stack);\n        }\n        return method.apply(this, arguments);\n    };\n}\n\n/**\n * extend object.\n * means that properties in dest will be overwritten by the ones in src.\n * @param {Object} target\n * @param {...Object} objects_to_assign\n * @returns {Object} target\n */\nvar assign;\nif (typeof Object.assign !== 'function') {\n    assign = function assign(target) {\n        if (target === undefined || target === null) {\n            throw new TypeError('Cannot convert undefined or null to object');\n        }\n\n        var output = Object(target);\n        for (var index = 1; index < arguments.length; index++) {\n            var source = arguments[index];\n            if (source !== undefined && source !== null) {\n                for (var nextKey in source) {\n                    if (source.hasOwnProperty(nextKey)) {\n                        output[nextKey] = source[nextKey];\n                    }\n                }\n            }\n        }\n        return output;\n    };\n} else {\n    assign = Object.assign;\n}\n\n/**\n * extend object.\n * means that properties in dest will be overwritten by the ones in src.\n * @param {Object} dest\n * @param {Object} src\n * @param {Boolean} [merge=false]\n * @returns {Object} dest\n */\nvar extend = deprecate(function extend(dest, src, merge) {\n    var keys = Object.keys(src);\n    var i = 0;\n    while (i < keys.length) {\n        if (!merge || (merge && dest[keys[i]] === undefined)) {\n            dest[keys[i]] = src[keys[i]];\n        }\n        i++;\n    }\n    return dest;\n}, 'extend', 'Use `assign`.');\n\n/**\n * merge the values from src in the dest.\n * means that properties that exist in dest will not be overwritten by src\n * @param {Object} dest\n * @param {Object} src\n * @returns {Object} dest\n */\nvar merge = deprecate(function merge(dest, src) {\n    return extend(dest, src, true);\n}, 'merge', 'Use `assign`.');\n\n/**\n * simple class inheritance\n * @param {Function} child\n * @param {Function} base\n * @param {Object} [properties]\n */\nfunction inherit(child, base, properties) {\n    var baseP = base.prototype,\n        childP;\n\n    childP = child.prototype = Object.create(baseP);\n    childP.constructor = child;\n    childP._super = baseP;\n\n    if (properties) {\n        assign(childP, properties);\n    }\n}\n\n/**\n * simple function bind\n * @param {Function} fn\n * @param {Object} context\n * @returns {Function}\n */\nfunction bindFn(fn, context) {\n    return function boundFn() {\n        return fn.apply(context, arguments);\n    };\n}\n\n/**\n * let a boolean value also be a function that must return a boolean\n * this first item in args will be used as the context\n * @param {Boolean|Function} val\n * @param {Array} [args]\n * @returns {Boolean}\n */\nfunction boolOrFn(val, args) {\n    if (typeof val == TYPE_FUNCTION) {\n        return val.apply(args ? args[0] || undefined : undefined, args);\n    }\n    return val;\n}\n\n/**\n * use the val2 when val1 is undefined\n * @param {*} val1\n * @param {*} val2\n * @returns {*}\n */\nfunction ifUndefined(val1, val2) {\n    return (val1 === undefined) ? val2 : val1;\n}\n\n/**\n * addEventListener with multiple events at once\n * @param {EventTarget} target\n * @param {String} types\n * @param {Function} handler\n */\nfunction addEventListeners(target, types, handler) {\n    each(splitStr(types), function(type) {\n        target.addEventListener(type, handler, false);\n    });\n}\n\n/**\n * removeEventListener with multiple events at once\n * @param {EventTarget} target\n * @param {String} types\n * @param {Function} handler\n */\nfunction removeEventListeners(target, types, handler) {\n    each(splitStr(types), function(type) {\n        target.removeEventListener(type, handler, false);\n    });\n}\n\n/**\n * find if a node is in the given parent\n * @method hasParent\n * @param {HTMLElement} node\n * @param {HTMLElement} parent\n * @return {Boolean} found\n */\nfunction hasParent(node, parent) {\n    while (node) {\n        if (node == parent) {\n            return true;\n        }\n        node = node.parentNode;\n    }\n    return false;\n}\n\n/**\n * small indexOf wrapper\n * @param {String} str\n * @param {String} find\n * @returns {Boolean} found\n */\nfunction inStr(str, find) {\n    return str.indexOf(find) > -1;\n}\n\n/**\n * split string on whitespace\n * @param {String} str\n * @returns {Array} words\n */\nfunction splitStr(str) {\n    return str.trim().split(/\\s+/g);\n}\n\n/**\n * find if a array contains the object using indexOf or a simple polyFill\n * @param {Array} src\n * @param {String} find\n * @param {String} [findByKey]\n * @return {Boolean|Number} false when not found, or the index\n */\nfunction inArray(src, find, findByKey) {\n    if (src.indexOf && !findByKey) {\n        return src.indexOf(find);\n    } else {\n        var i = 0;\n        while (i < src.length) {\n            if ((findByKey && src[i][findByKey] == find) || (!findByKey && src[i] === find)) {\n                return i;\n            }\n            i++;\n        }\n        return -1;\n    }\n}\n\n/**\n * convert array-like objects to real arrays\n * @param {Object} obj\n * @returns {Array}\n */\nfunction toArray(obj) {\n    return Array.prototype.slice.call(obj, 0);\n}\n\n/**\n * unique array with objects based on a key (like 'id') or just by the array's value\n * @param {Array} src [{id:1},{id:2},{id:1}]\n * @param {String} [key]\n * @param {Boolean} [sort=False]\n * @returns {Array} [{id:1},{id:2}]\n */\nfunction uniqueArray(src, key, sort) {\n    var results = [];\n    var values = [];\n    var i = 0;\n\n    while (i < src.length) {\n        var val = key ? src[i][key] : src[i];\n        if (inArray(values, val) < 0) {\n            results.push(src[i]);\n        }\n        values[i] = val;\n        i++;\n    }\n\n    if (sort) {\n        if (!key) {\n            results = results.sort();\n        } else {\n            results = results.sort(function sortUniqueArray(a, b) {\n                return a[key] > b[key];\n            });\n        }\n    }\n\n    return results;\n}\n\n/**\n * get the prefixed property\n * @param {Object} obj\n * @param {String} property\n * @returns {String|Undefined} prefixed\n */\nfunction prefixed(obj, property) {\n    var prefix, prop;\n    var camelProp = property[0].toUpperCase() + property.slice(1);\n\n    var i = 0;\n    while (i < VENDOR_PREFIXES.length) {\n        prefix = VENDOR_PREFIXES[i];\n        prop = (prefix) ? prefix + camelProp : property;\n\n        if (prop in obj) {\n            return prop;\n        }\n        i++;\n    }\n    return undefined;\n}\n\n/**\n * get a unique id\n * @returns {number} uniqueId\n */\nvar _uniqueId = 1;\nfunction uniqueId() {\n    return _uniqueId++;\n}\n\n/**\n * get the window object of an element\n * @param {HTMLElement} element\n * @returns {DocumentView|Window}\n */\nfunction getWindowForElement(element) {\n    var doc = element.ownerDocument || element;\n    return (doc.defaultView || doc.parentWindow || window);\n}\n\nvar MOBILE_REGEX = /mobile|tablet|ip(ad|hone|od)|android/i;\n\nvar SUPPORT_TOUCH = ('ontouchstart' in window);\nvar SUPPORT_POINTER_EVENTS = prefixed(window, 'PointerEvent') !== undefined;\nvar SUPPORT_ONLY_TOUCH = SUPPORT_TOUCH && MOBILE_REGEX.test(navigator.userAgent);\n\nvar INPUT_TYPE_TOUCH = 'touch';\nvar INPUT_TYPE_PEN = 'pen';\nvar INPUT_TYPE_MOUSE = 'mouse';\nvar INPUT_TYPE_KINECT = 'kinect';\n\nvar COMPUTE_INTERVAL = 25;\n\nvar INPUT_START = 1;\nvar INPUT_MOVE = 2;\nvar INPUT_END = 4;\nvar INPUT_CANCEL = 8;\n\nvar DIRECTION_NONE = 1;\nvar DIRECTION_LEFT = 2;\nvar DIRECTION_RIGHT = 4;\nvar DIRECTION_UP = 8;\nvar DIRECTION_DOWN = 16;\n\nvar DIRECTION_HORIZONTAL = DIRECTION_LEFT | DIRECTION_RIGHT;\nvar DIRECTION_VERTICAL = DIRECTION_UP | DIRECTION_DOWN;\nvar DIRECTION_ALL = DIRECTION_HORIZONTAL | DIRECTION_VERTICAL;\n\nvar PROPS_XY = ['x', 'y'];\nvar PROPS_CLIENT_XY = ['clientX', 'clientY'];\n\n/**\n * create new input type manager\n * @param {Manager} manager\n * @param {Function} callback\n * @returns {Input}\n * @constructor\n */\nfunction Input(manager, callback) {\n    var self = this;\n    this.manager = manager;\n    this.callback = callback;\n    this.element = manager.element;\n    this.target = manager.options.inputTarget;\n\n    // smaller wrapper around the handler, for the scope and the enabled state of the manager,\n    // so when disabled the input events are completely bypassed.\n    this.domHandler = function(ev) {\n        if (boolOrFn(manager.options.enable, [manager])) {\n            self.handler(ev);\n        }\n    };\n\n    this.init();\n\n}\n\nInput.prototype = {\n    /**\n     * should handle the inputEvent data and trigger the callback\n     * @virtual\n     */\n    handler: function() { },\n\n    /**\n     * bind the events\n     */\n    init: function() {\n        this.evEl && addEventListeners(this.element, this.evEl, this.domHandler);\n        this.evTarget && addEventListeners(this.target, this.evTarget, this.domHandler);\n        this.evWin && addEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);\n    },\n\n    /**\n     * unbind the events\n     */\n    destroy: function() {\n        this.evEl && removeEventListeners(this.element, this.evEl, this.domHandler);\n        this.evTarget && removeEventListeners(this.target, this.evTarget, this.domHandler);\n        this.evWin && removeEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);\n    }\n};\n\n/**\n * create new input type manager\n * called by the Manager constructor\n * @param {Hammer} manager\n * @returns {Input}\n */\nfunction createInputInstance(manager) {\n    var Type;\n    var inputClass = manager.options.inputClass;\n\n    if (inputClass) {\n        Type = inputClass;\n    } else if (SUPPORT_POINTER_EVENTS) {\n        Type = PointerEventInput;\n    } else if (SUPPORT_ONLY_TOUCH) {\n        Type = TouchInput;\n    } else if (!SUPPORT_TOUCH) {\n        Type = MouseInput;\n    } else {\n        Type = TouchMouseInput;\n    }\n    return new (Type)(manager, inputHandler);\n}\n\n/**\n * handle input events\n * @param {Manager} manager\n * @param {String} eventType\n * @param {Object} input\n */\nfunction inputHandler(manager, eventType, input) {\n    var pointersLen = input.pointers.length;\n    var changedPointersLen = input.changedPointers.length;\n    var isFirst = (eventType & INPUT_START && (pointersLen - changedPointersLen === 0));\n    var isFinal = (eventType & (INPUT_END | INPUT_CANCEL) && (pointersLen - changedPointersLen === 0));\n\n    input.isFirst = !!isFirst;\n    input.isFinal = !!isFinal;\n\n    if (isFirst) {\n        manager.session = {};\n    }\n\n    // source event is the normalized value of the domEvents\n    // like 'touchstart, mouseup, pointerdown'\n    input.eventType = eventType;\n\n    // compute scale, rotation etc\n    computeInputData(manager, input);\n\n    // emit secret event\n    manager.emit('hammer.input', input);\n\n    manager.recognize(input);\n    manager.session.prevInput = input;\n}\n\n/**\n * extend the data with some usable properties like scale, rotate, velocity etc\n * @param {Object} manager\n * @param {Object} input\n */\nfunction computeInputData(manager, input) {\n    var session = manager.session;\n    var pointers = input.pointers;\n    var pointersLength = pointers.length;\n\n    // store the first input to calculate the distance and direction\n    if (!session.firstInput) {\n        session.firstInput = simpleCloneInputData(input);\n    }\n\n    // to compute scale and rotation we need to store the multiple touches\n    if (pointersLength > 1 && !session.firstMultiple) {\n        session.firstMultiple = simpleCloneInputData(input);\n    } else if (pointersLength === 1) {\n        session.firstMultiple = false;\n    }\n\n    var firstInput = session.firstInput;\n    var firstMultiple = session.firstMultiple;\n    var offsetCenter = firstMultiple ? firstMultiple.center : firstInput.center;\n\n    var center = input.center = getCenter(pointers);\n    input.timeStamp = now();\n    input.deltaTime = input.timeStamp - firstInput.timeStamp;\n\n    input.angle = getAngle(offsetCenter, center);\n    input.distance = getDistance(offsetCenter, center);\n\n    computeDeltaXY(session, input);\n    input.offsetDirection = getDirection(input.deltaX, input.deltaY);\n\n    var overallVelocity = getVelocity(input.deltaTime, input.deltaX, input.deltaY);\n    input.overallVelocityX = overallVelocity.x;\n    input.overallVelocityY = overallVelocity.y;\n    input.overallVelocity = (abs(overallVelocity.x) > abs(overallVelocity.y)) ? overallVelocity.x : overallVelocity.y;\n\n    input.scale = firstMultiple ? getScale(firstMultiple.pointers, pointers) : 1;\n    input.rotation = firstMultiple ? getRotation(firstMultiple.pointers, pointers) : 0;\n\n    input.maxPointers = !session.prevInput ? input.pointers.length : ((input.pointers.length >\n        session.prevInput.maxPointers) ? input.pointers.length : session.prevInput.maxPointers);\n\n    computeIntervalInputData(session, input);\n\n    // find the correct target\n    var target = manager.element;\n    if (hasParent(input.srcEvent.target, target)) {\n        target = input.srcEvent.target;\n    }\n    input.target = target;\n}\n\nfunction computeDeltaXY(session, input) {\n    var center = input.center;\n    var offset = session.offsetDelta || {};\n    var prevDelta = session.prevDelta || {};\n    var prevInput = session.prevInput || {};\n\n    if (input.eventType === INPUT_START || prevInput.eventType === INPUT_END) {\n        prevDelta = session.prevDelta = {\n            x: prevInput.deltaX || 0,\n            y: prevInput.deltaY || 0\n        };\n\n        offset = session.offsetDelta = {\n            x: center.x,\n            y: center.y\n        };\n    }\n\n    input.deltaX = prevDelta.x + (center.x - offset.x);\n    input.deltaY = prevDelta.y + (center.y - offset.y);\n}\n\n/**\n * velocity is calculated every x ms\n * @param {Object} session\n * @param {Object} input\n */\nfunction computeIntervalInputData(session, input) {\n    var last = session.lastInterval || input,\n        deltaTime = input.timeStamp - last.timeStamp,\n        velocity, velocityX, velocityY, direction;\n\n    if (input.eventType != INPUT_CANCEL && (deltaTime > COMPUTE_INTERVAL || last.velocity === undefined)) {\n        var deltaX = input.deltaX - last.deltaX;\n        var deltaY = input.deltaY - last.deltaY;\n\n        var v = getVelocity(deltaTime, deltaX, deltaY);\n        velocityX = v.x;\n        velocityY = v.y;\n        velocity = (abs(v.x) > abs(v.y)) ? v.x : v.y;\n        direction = getDirection(deltaX, deltaY);\n\n        session.lastInterval = input;\n    } else {\n        // use latest velocity info if it doesn't overtake a minimum period\n        velocity = last.velocity;\n        velocityX = last.velocityX;\n        velocityY = last.velocityY;\n        direction = last.direction;\n    }\n\n    input.velocity = velocity;\n    input.velocityX = velocityX;\n    input.velocityY = velocityY;\n    input.direction = direction;\n}\n\n/**\n * create a simple clone from the input used for storage of firstInput and firstMultiple\n * @param {Object} input\n * @returns {Object} clonedInputData\n */\nfunction simpleCloneInputData(input) {\n    // make a simple copy of the pointers because we will get a reference if we don't\n    // we only need clientXY for the calculations\n    var pointers = [];\n    var i = 0;\n    while (i < input.pointers.length) {\n        pointers[i] = {\n            clientX: round(input.pointers[i].clientX),\n            clientY: round(input.pointers[i].clientY)\n        };\n        i++;\n    }\n\n    return {\n        timeStamp: now(),\n        pointers: pointers,\n        center: getCenter(pointers),\n        deltaX: input.deltaX,\n        deltaY: input.deltaY\n    };\n}\n\n/**\n * get the center of all the pointers\n * @param {Array} pointers\n * @return {Object} center contains `x` and `y` properties\n */\nfunction getCenter(pointers) {\n    var pointersLength = pointers.length;\n\n    // no need to loop when only one touch\n    if (pointersLength === 1) {\n        return {\n            x: round(pointers[0].clientX),\n            y: round(pointers[0].clientY)\n        };\n    }\n\n    var x = 0, y = 0, i = 0;\n    while (i < pointersLength) {\n        x += pointers[i].clientX;\n        y += pointers[i].clientY;\n        i++;\n    }\n\n    return {\n        x: round(x / pointersLength),\n        y: round(y / pointersLength)\n    };\n}\n\n/**\n * calculate the velocity between two points. unit is in px per ms.\n * @param {Number} deltaTime\n * @param {Number} x\n * @param {Number} y\n * @return {Object} velocity `x` and `y`\n */\nfunction getVelocity(deltaTime, x, y) {\n    return {\n        x: x / deltaTime || 0,\n        y: y / deltaTime || 0\n    };\n}\n\n/**\n * get the direction between two points\n * @param {Number} x\n * @param {Number} y\n * @return {Number} direction\n */\nfunction getDirection(x, y) {\n    if (x === y) {\n        return DIRECTION_NONE;\n    }\n\n    if (abs(x) >= abs(y)) {\n        return x < 0 ? DIRECTION_LEFT : DIRECTION_RIGHT;\n    }\n    return y < 0 ? DIRECTION_UP : DIRECTION_DOWN;\n}\n\n/**\n * calculate the absolute distance between two points\n * @param {Object} p1 {x, y}\n * @param {Object} p2 {x, y}\n * @param {Array} [props] containing x and y keys\n * @return {Number} distance\n */\nfunction getDistance(p1, p2, props) {\n    if (!props) {\n        props = PROPS_XY;\n    }\n    var x = p2[props[0]] - p1[props[0]],\n        y = p2[props[1]] - p1[props[1]];\n\n    return Math.sqrt((x * x) + (y * y));\n}\n\n/**\n * calculate the angle between two coordinates\n * @param {Object} p1\n * @param {Object} p2\n * @param {Array} [props] containing x and y keys\n * @return {Number} angle\n */\nfunction getAngle(p1, p2, props) {\n    if (!props) {\n        props = PROPS_XY;\n    }\n    var x = p2[props[0]] - p1[props[0]],\n        y = p2[props[1]] - p1[props[1]];\n    return Math.atan2(y, x) * 180 / Math.PI;\n}\n\n/**\n * calculate the rotation degrees between two pointersets\n * @param {Array} start array of pointers\n * @param {Array} end array of pointers\n * @return {Number} rotation\n */\nfunction getRotation(start, end) {\n    return getAngle(end[1], end[0], PROPS_CLIENT_XY) + getAngle(start[1], start[0], PROPS_CLIENT_XY);\n}\n\n/**\n * calculate the scale factor between two pointersets\n * no scale is 1, and goes down to 0 when pinched together, and bigger when pinched out\n * @param {Array} start array of pointers\n * @param {Array} end array of pointers\n * @return {Number} scale\n */\nfunction getScale(start, end) {\n    return getDistance(end[0], end[1], PROPS_CLIENT_XY) / getDistance(start[0], start[1], PROPS_CLIENT_XY);\n}\n\nvar MOUSE_INPUT_MAP = {\n    mousedown: INPUT_START,\n    mousemove: INPUT_MOVE,\n    mouseup: INPUT_END\n};\n\nvar MOUSE_ELEMENT_EVENTS = 'mousedown';\nvar MOUSE_WINDOW_EVENTS = 'mousemove mouseup';\n\n/**\n * Mouse events input\n * @constructor\n * @extends Input\n */\nfunction MouseInput() {\n    this.evEl = MOUSE_ELEMENT_EVENTS;\n    this.evWin = MOUSE_WINDOW_EVENTS;\n\n    this.pressed = false; // mousedown state\n\n    Input.apply(this, arguments);\n}\n\ninherit(MouseInput, Input, {\n    /**\n     * handle mouse events\n     * @param {Object} ev\n     */\n    handler: function MEhandler(ev) {\n        var eventType = MOUSE_INPUT_MAP[ev.type];\n\n        // on start we want to have the left mouse button down\n        if (eventType & INPUT_START && ev.button === 0) {\n            this.pressed = true;\n        }\n\n        if (eventType & INPUT_MOVE && ev.which !== 1) {\n            eventType = INPUT_END;\n        }\n\n        // mouse must be down\n        if (!this.pressed) {\n            return;\n        }\n\n        if (eventType & INPUT_END) {\n            this.pressed = false;\n        }\n\n        this.callback(this.manager, eventType, {\n            pointers: [ev],\n            changedPointers: [ev],\n            pointerType: INPUT_TYPE_MOUSE,\n            srcEvent: ev\n        });\n    }\n});\n\nvar POINTER_INPUT_MAP = {\n    pointerdown: INPUT_START,\n    pointermove: INPUT_MOVE,\n    pointerup: INPUT_END,\n    pointercancel: INPUT_CANCEL,\n    pointerout: INPUT_CANCEL\n};\n\n// in IE10 the pointer types is defined as an enum\nvar IE10_POINTER_TYPE_ENUM = {\n    2: INPUT_TYPE_TOUCH,\n    3: INPUT_TYPE_PEN,\n    4: INPUT_TYPE_MOUSE,\n    5: INPUT_TYPE_KINECT // see https://twitter.com/jacobrossi/status/480596438489890816\n};\n\nvar POINTER_ELEMENT_EVENTS = 'pointerdown';\nvar POINTER_WINDOW_EVENTS = 'pointermove pointerup pointercancel';\n\n// IE10 has prefixed support, and case-sensitive\nif (window.MSPointerEvent && !window.PointerEvent) {\n    POINTER_ELEMENT_EVENTS = 'MSPointerDown';\n    POINTER_WINDOW_EVENTS = 'MSPointerMove MSPointerUp MSPointerCancel';\n}\n\n/**\n * Pointer events input\n * @constructor\n * @extends Input\n */\nfunction PointerEventInput() {\n    this.evEl = POINTER_ELEMENT_EVENTS;\n    this.evWin = POINTER_WINDOW_EVENTS;\n\n    Input.apply(this, arguments);\n\n    this.store = (this.manager.session.pointerEvents = []);\n}\n\ninherit(PointerEventInput, Input, {\n    /**\n     * handle mouse events\n     * @param {Object} ev\n     */\n    handler: function PEhandler(ev) {\n        var store = this.store;\n        var removePointer = false;\n\n        var eventTypeNormalized = ev.type.toLowerCase().replace('ms', '');\n        var eventType = POINTER_INPUT_MAP[eventTypeNormalized];\n        var pointerType = IE10_POINTER_TYPE_ENUM[ev.pointerType] || ev.pointerType;\n\n        var isTouch = (pointerType == INPUT_TYPE_TOUCH);\n\n        // get index of the event in the store\n        var storeIndex = inArray(store, ev.pointerId, 'pointerId');\n\n        // start and mouse must be down\n        if (eventType & INPUT_START && (ev.button === 0 || isTouch)) {\n            if (storeIndex < 0) {\n                store.push(ev);\n                storeIndex = store.length - 1;\n            }\n        } else if (eventType & (INPUT_END | INPUT_CANCEL)) {\n            removePointer = true;\n        }\n\n        // it not found, so the pointer hasn't been down (so it's probably a hover)\n        if (storeIndex < 0) {\n            return;\n        }\n\n        // update the event in the store\n        store[storeIndex] = ev;\n\n        this.callback(this.manager, eventType, {\n            pointers: store,\n            changedPointers: [ev],\n            pointerType: pointerType,\n            srcEvent: ev\n        });\n\n        if (removePointer) {\n            // remove from the store\n            store.splice(storeIndex, 1);\n        }\n    }\n});\n\nvar SINGLE_TOUCH_INPUT_MAP = {\n    touchstart: INPUT_START,\n    touchmove: INPUT_MOVE,\n    touchend: INPUT_END,\n    touchcancel: INPUT_CANCEL\n};\n\nvar SINGLE_TOUCH_TARGET_EVENTS = 'touchstart';\nvar SINGLE_TOUCH_WINDOW_EVENTS = 'touchstart touchmove touchend touchcancel';\n\n/**\n * Touch events input\n * @constructor\n * @extends Input\n */\nfunction SingleTouchInput() {\n    this.evTarget = SINGLE_TOUCH_TARGET_EVENTS;\n    this.evWin = SINGLE_TOUCH_WINDOW_EVENTS;\n    this.started = false;\n\n    Input.apply(this, arguments);\n}\n\ninherit(SingleTouchInput, Input, {\n    handler: function TEhandler(ev) {\n        var type = SINGLE_TOUCH_INPUT_MAP[ev.type];\n\n        // should we handle the touch events?\n        if (type === INPUT_START) {\n            this.started = true;\n        }\n\n        if (!this.started) {\n            return;\n        }\n\n        var touches = normalizeSingleTouches.call(this, ev, type);\n\n        // when done, reset the started state\n        if (type & (INPUT_END | INPUT_CANCEL) && touches[0].length - touches[1].length === 0) {\n            this.started = false;\n        }\n\n        this.callback(this.manager, type, {\n            pointers: touches[0],\n            changedPointers: touches[1],\n            pointerType: INPUT_TYPE_TOUCH,\n            srcEvent: ev\n        });\n    }\n});\n\n/**\n * @this {TouchInput}\n * @param {Object} ev\n * @param {Number} type flag\n * @returns {undefined|Array} [all, changed]\n */\nfunction normalizeSingleTouches(ev, type) {\n    var all = toArray(ev.touches);\n    var changed = toArray(ev.changedTouches);\n\n    if (type & (INPUT_END | INPUT_CANCEL)) {\n        all = uniqueArray(all.concat(changed), 'identifier', true);\n    }\n\n    return [all, changed];\n}\n\nvar TOUCH_INPUT_MAP = {\n    touchstart: INPUT_START,\n    touchmove: INPUT_MOVE,\n    touchend: INPUT_END,\n    touchcancel: INPUT_CANCEL\n};\n\nvar TOUCH_TARGET_EVENTS = 'touchstart touchmove touchend touchcancel';\n\n/**\n * Multi-user touch events input\n * @constructor\n * @extends Input\n */\nfunction TouchInput() {\n    this.evTarget = TOUCH_TARGET_EVENTS;\n    this.targetIds = {};\n\n    Input.apply(this, arguments);\n}\n\ninherit(TouchInput, Input, {\n    handler: function MTEhandler(ev) {\n        var type = TOUCH_INPUT_MAP[ev.type];\n        var touches = getTouches.call(this, ev, type);\n        if (!touches) {\n            return;\n        }\n\n        this.callback(this.manager, type, {\n            pointers: touches[0],\n            changedPointers: touches[1],\n            pointerType: INPUT_TYPE_TOUCH,\n            srcEvent: ev\n        });\n    }\n});\n\n/**\n * @this {TouchInput}\n * @param {Object} ev\n * @param {Number} type flag\n * @returns {undefined|Array} [all, changed]\n */\nfunction getTouches(ev, type) {\n    var allTouches = toArray(ev.touches);\n    var targetIds = this.targetIds;\n\n    // when there is only one touch, the process can be simplified\n    if (type & (INPUT_START | INPUT_MOVE) && allTouches.length === 1) {\n        targetIds[allTouches[0].identifier] = true;\n        return [allTouches, allTouches];\n    }\n\n    var i,\n        targetTouches,\n        changedTouches = toArray(ev.changedTouches),\n        changedTargetTouches = [],\n        target = this.target;\n\n    // get target touches from touches\n    targetTouches = allTouches.filter(function(touch) {\n        return hasParent(touch.target, target);\n    });\n\n    // collect touches\n    if (type === INPUT_START) {\n        i = 0;\n        while (i < targetTouches.length) {\n            targetIds[targetTouches[i].identifier] = true;\n            i++;\n        }\n    }\n\n    // filter changed touches to only contain touches that exist in the collected target ids\n    i = 0;\n    while (i < changedTouches.length) {\n        if (targetIds[changedTouches[i].identifier]) {\n            changedTargetTouches.push(changedTouches[i]);\n        }\n\n        // cleanup removed touches\n        if (type & (INPUT_END | INPUT_CANCEL)) {\n            delete targetIds[changedTouches[i].identifier];\n        }\n        i++;\n    }\n\n    if (!changedTargetTouches.length) {\n        return;\n    }\n\n    return [\n        // merge targetTouches with changedTargetTouches so it contains ALL touches, including 'end' and 'cancel'\n        uniqueArray(targetTouches.concat(changedTargetTouches), 'identifier', true),\n        changedTargetTouches\n    ];\n}\n\n/**\n * Combined touch and mouse input\n *\n * Touch has a higher priority then mouse, and while touching no mouse events are allowed.\n * This because touch devices also emit mouse events while doing a touch.\n *\n * @constructor\n * @extends Input\n */\n\nvar DEDUP_TIMEOUT = 2500;\nvar DEDUP_DISTANCE = 25;\n\nfunction TouchMouseInput() {\n    Input.apply(this, arguments);\n\n    var handler = bindFn(this.handler, this);\n    this.touch = new TouchInput(this.manager, handler);\n    this.mouse = new MouseInput(this.manager, handler);\n\n    this.primaryTouch = null;\n    this.lastTouches = [];\n}\n\ninherit(TouchMouseInput, Input, {\n    /**\n     * handle mouse and touch events\n     * @param {Hammer} manager\n     * @param {String} inputEvent\n     * @param {Object} inputData\n     */\n    handler: function TMEhandler(manager, inputEvent, inputData) {\n        var isTouch = (inputData.pointerType == INPUT_TYPE_TOUCH),\n            isMouse = (inputData.pointerType == INPUT_TYPE_MOUSE);\n\n        if (isMouse && inputData.sourceCapabilities && inputData.sourceCapabilities.firesTouchEvents) {\n            return;\n        }\n\n        // when we're in a touch event, record touches to  de-dupe synthetic mouse event\n        if (isTouch) {\n            recordTouches.call(this, inputEvent, inputData);\n        } else if (isMouse && isSyntheticEvent.call(this, inputData)) {\n            return;\n        }\n\n        this.callback(manager, inputEvent, inputData);\n    },\n\n    /**\n     * remove the event listeners\n     */\n    destroy: function destroy() {\n        this.touch.destroy();\n        this.mouse.destroy();\n    }\n});\n\nfunction recordTouches(eventType, eventData) {\n    if (eventType & INPUT_START) {\n        this.primaryTouch = eventData.changedPointers[0].identifier;\n        setLastTouch.call(this, eventData);\n    } else if (eventType & (INPUT_END | INPUT_CANCEL)) {\n        setLastTouch.call(this, eventData);\n    }\n}\n\nfunction setLastTouch(eventData) {\n    var touch = eventData.changedPointers[0];\n\n    if (touch.identifier === this.primaryTouch) {\n        var lastTouch = {x: touch.clientX, y: touch.clientY};\n        this.lastTouches.push(lastTouch);\n        var lts = this.lastTouches;\n        var removeLastTouch = function() {\n            var i = lts.indexOf(lastTouch);\n            if (i > -1) {\n                lts.splice(i, 1);\n            }\n        };\n        setTimeout(removeLastTouch, DEDUP_TIMEOUT);\n    }\n}\n\nfunction isSyntheticEvent(eventData) {\n    var x = eventData.srcEvent.clientX, y = eventData.srcEvent.clientY;\n    for (var i = 0; i < this.lastTouches.length; i++) {\n        var t = this.lastTouches[i];\n        var dx = Math.abs(x - t.x), dy = Math.abs(y - t.y);\n        if (dx <= DEDUP_DISTANCE && dy <= DEDUP_DISTANCE) {\n            return true;\n        }\n    }\n    return false;\n}\n\nvar PREFIXED_TOUCH_ACTION = prefixed(TEST_ELEMENT.style, 'touchAction');\nvar NATIVE_TOUCH_ACTION = PREFIXED_TOUCH_ACTION !== undefined;\n\n// magical touchAction value\nvar TOUCH_ACTION_COMPUTE = 'compute';\nvar TOUCH_ACTION_AUTO = 'auto';\nvar TOUCH_ACTION_MANIPULATION = 'manipulation'; // not implemented\nvar TOUCH_ACTION_NONE = 'none';\nvar TOUCH_ACTION_PAN_X = 'pan-x';\nvar TOUCH_ACTION_PAN_Y = 'pan-y';\nvar TOUCH_ACTION_MAP = getTouchActionProps();\n\n/**\n * Touch Action\n * sets the touchAction property or uses the js alternative\n * @param {Manager} manager\n * @param {String} value\n * @constructor\n */\nfunction TouchAction(manager, value) {\n    this.manager = manager;\n    this.set(value);\n}\n\nTouchAction.prototype = {\n    /**\n     * set the touchAction value on the element or enable the polyfill\n     * @param {String} value\n     */\n    set: function(value) {\n        // find out the touch-action by the event handlers\n        if (value == TOUCH_ACTION_COMPUTE) {\n            value = this.compute();\n        }\n\n        if (NATIVE_TOUCH_ACTION && this.manager.element.style && TOUCH_ACTION_MAP[value]) {\n            this.manager.element.style[PREFIXED_TOUCH_ACTION] = value;\n        }\n        this.actions = value.toLowerCase().trim();\n    },\n\n    /**\n     * just re-set the touchAction value\n     */\n    update: function() {\n        this.set(this.manager.options.touchAction);\n    },\n\n    /**\n     * compute the value for the touchAction property based on the recognizer's settings\n     * @returns {String} value\n     */\n    compute: function() {\n        var actions = [];\n        each(this.manager.recognizers, function(recognizer) {\n            if (boolOrFn(recognizer.options.enable, [recognizer])) {\n                actions = actions.concat(recognizer.getTouchAction());\n            }\n        });\n        return cleanTouchActions(actions.join(' '));\n    },\n\n    /**\n     * this method is called on each input cycle and provides the preventing of the browser behavior\n     * @param {Object} input\n     */\n    preventDefaults: function(input) {\n        var srcEvent = input.srcEvent;\n        var direction = input.offsetDirection;\n\n        // if the touch action did prevented once this session\n        if (this.manager.session.prevented) {\n            srcEvent.preventDefault();\n            return;\n        }\n\n        var actions = this.actions;\n        var hasNone = inStr(actions, TOUCH_ACTION_NONE) && !TOUCH_ACTION_MAP[TOUCH_ACTION_NONE];\n        var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_Y];\n        var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_X];\n\n        if (hasNone) {\n            //do not prevent defaults if this is a tap gesture\n\n            var isTapPointer = input.pointers.length === 1;\n            var isTapMovement = input.distance < 2;\n            var isTapTouchTime = input.deltaTime < 250;\n\n            if (isTapPointer && isTapMovement && isTapTouchTime) {\n                return;\n            }\n        }\n\n        if (hasPanX && hasPanY) {\n            // `pan-x pan-y` means browser handles all scrolling/panning, do not prevent\n            return;\n        }\n\n        if (hasNone ||\n            (hasPanY && direction & DIRECTION_HORIZONTAL) ||\n            (hasPanX && direction & DIRECTION_VERTICAL)) {\n            return this.preventSrc(srcEvent);\n        }\n    },\n\n    /**\n     * call preventDefault to prevent the browser's default behavior (scrolling in most cases)\n     * @param {Object} srcEvent\n     */\n    preventSrc: function(srcEvent) {\n        this.manager.session.prevented = true;\n        srcEvent.preventDefault();\n    }\n};\n\n/**\n * when the touchActions are collected they are not a valid value, so we need to clean things up. *\n * @param {String} actions\n * @returns {*}\n */\nfunction cleanTouchActions(actions) {\n    // none\n    if (inStr(actions, TOUCH_ACTION_NONE)) {\n        return TOUCH_ACTION_NONE;\n    }\n\n    var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X);\n    var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y);\n\n    // if both pan-x and pan-y are set (different recognizers\n    // for different directions, e.g. horizontal pan but vertical swipe?)\n    // we need none (as otherwise with pan-x pan-y combined none of these\n    // recognizers will work, since the browser would handle all panning\n    if (hasPanX && hasPanY) {\n        return TOUCH_ACTION_NONE;\n    }\n\n    // pan-x OR pan-y\n    if (hasPanX || hasPanY) {\n        return hasPanX ? TOUCH_ACTION_PAN_X : TOUCH_ACTION_PAN_Y;\n    }\n\n    // manipulation\n    if (inStr(actions, TOUCH_ACTION_MANIPULATION)) {\n        return TOUCH_ACTION_MANIPULATION;\n    }\n\n    return TOUCH_ACTION_AUTO;\n}\n\nfunction getTouchActionProps() {\n    if (!NATIVE_TOUCH_ACTION) {\n        return false;\n    }\n    var touchMap = {};\n    var cssSupports = window.CSS && window.CSS.supports;\n    ['auto', 'manipulation', 'pan-y', 'pan-x', 'pan-x pan-y', 'none'].forEach(function(val) {\n\n        // If css.supports is not supported but there is native touch-action assume it supports\n        // all values. This is the case for IE 10 and 11.\n        touchMap[val] = cssSupports ? window.CSS.supports('touch-action', val) : true;\n    });\n    return touchMap;\n}\n\n/**\n * Recognizer flow explained; *\n * All recognizers have the initial state of POSSIBLE when a input session starts.\n * The definition of a input session is from the first input until the last input, with all it's movement in it. *\n * Example session for mouse-input: mousedown -> mousemove -> mouseup\n *\n * On each recognizing cycle (see Manager.recognize) the .recognize() method is executed\n * which determines with state it should be.\n *\n * If the recognizer has the state FAILED, CANCELLED or RECOGNIZED (equals ENDED), it is reset to\n * POSSIBLE to give it another change on the next cycle.\n *\n *               Possible\n *                  |\n *            +-----+---------------+\n *            |                     |\n *      +-----+-----+               |\n *      |           |               |\n *   Failed      Cancelled          |\n *                          +-------+------+\n *                          |              |\n *                      Recognized       Began\n *                                         |\n *                                      Changed\n *                                         |\n *                                  Ended/Recognized\n */\nvar STATE_POSSIBLE = 1;\nvar STATE_BEGAN = 2;\nvar STATE_CHANGED = 4;\nvar STATE_ENDED = 8;\nvar STATE_RECOGNIZED = STATE_ENDED;\nvar STATE_CANCELLED = 16;\nvar STATE_FAILED = 32;\n\n/**\n * Recognizer\n * Every recognizer needs to extend from this class.\n * @constructor\n * @param {Object} options\n */\nfunction Recognizer(options) {\n    this.options = assign({}, this.defaults, options || {});\n\n    this.id = uniqueId();\n\n    this.manager = null;\n\n    // default is enable true\n    this.options.enable = ifUndefined(this.options.enable, true);\n\n    this.state = STATE_POSSIBLE;\n\n    this.simultaneous = {};\n    this.requireFail = [];\n}\n\nRecognizer.prototype = {\n    /**\n     * @virtual\n     * @type {Object}\n     */\n    defaults: {},\n\n    /**\n     * set options\n     * @param {Object} options\n     * @return {Recognizer}\n     */\n    set: function(options) {\n        assign(this.options, options);\n\n        // also update the touchAction, in case something changed about the directions/enabled state\n        this.manager && this.manager.touchAction.update();\n        return this;\n    },\n\n    /**\n     * recognize simultaneous with an other recognizer.\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    recognizeWith: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'recognizeWith', this)) {\n            return this;\n        }\n\n        var simultaneous = this.simultaneous;\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        if (!simultaneous[otherRecognizer.id]) {\n            simultaneous[otherRecognizer.id] = otherRecognizer;\n            otherRecognizer.recognizeWith(this);\n        }\n        return this;\n    },\n\n    /**\n     * drop the simultaneous link. it doesnt remove the link on the other recognizer.\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    dropRecognizeWith: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'dropRecognizeWith', this)) {\n            return this;\n        }\n\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        delete this.simultaneous[otherRecognizer.id];\n        return this;\n    },\n\n    /**\n     * recognizer can only run when an other is failing\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    requireFailure: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'requireFailure', this)) {\n            return this;\n        }\n\n        var requireFail = this.requireFail;\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        if (inArray(requireFail, otherRecognizer) === -1) {\n            requireFail.push(otherRecognizer);\n            otherRecognizer.requireFailure(this);\n        }\n        return this;\n    },\n\n    /**\n     * drop the requireFailure link. it does not remove the link on the other recognizer.\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    dropRequireFailure: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'dropRequireFailure', this)) {\n            return this;\n        }\n\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        var index = inArray(this.requireFail, otherRecognizer);\n        if (index > -1) {\n            this.requireFail.splice(index, 1);\n        }\n        return this;\n    },\n\n    /**\n     * has require failures boolean\n     * @returns {boolean}\n     */\n    hasRequireFailures: function() {\n        return this.requireFail.length > 0;\n    },\n\n    /**\n     * if the recognizer can recognize simultaneous with an other recognizer\n     * @param {Recognizer} otherRecognizer\n     * @returns {Boolean}\n     */\n    canRecognizeWith: function(otherRecognizer) {\n        return !!this.simultaneous[otherRecognizer.id];\n    },\n\n    /**\n     * You should use `tryEmit` instead of `emit` directly to check\n     * that all the needed recognizers has failed before emitting.\n     * @param {Object} input\n     */\n    emit: function(input) {\n        var self = this;\n        var state = this.state;\n\n        function emit(event) {\n            self.manager.emit(event, input);\n        }\n\n        // 'panstart' and 'panmove'\n        if (state < STATE_ENDED) {\n            emit(self.options.event + stateStr(state));\n        }\n\n        emit(self.options.event); // simple 'eventName' events\n\n        if (input.additionalEvent) { // additional event(panleft, panright, pinchin, pinchout...)\n            emit(input.additionalEvent);\n        }\n\n        // panend and pancancel\n        if (state >= STATE_ENDED) {\n            emit(self.options.event + stateStr(state));\n        }\n    },\n\n    /**\n     * Check that all the require failure recognizers has failed,\n     * if true, it emits a gesture event,\n     * otherwise, setup the state to FAILED.\n     * @param {Object} input\n     */\n    tryEmit: function(input) {\n        if (this.canEmit()) {\n            return this.emit(input);\n        }\n        // it's failing anyway\n        this.state = STATE_FAILED;\n    },\n\n    /**\n     * can we emit?\n     * @returns {boolean}\n     */\n    canEmit: function() {\n        var i = 0;\n        while (i < this.requireFail.length) {\n            if (!(this.requireFail[i].state & (STATE_FAILED | STATE_POSSIBLE))) {\n                return false;\n            }\n            i++;\n        }\n        return true;\n    },\n\n    /**\n     * update the recognizer\n     * @param {Object} inputData\n     */\n    recognize: function(inputData) {\n        // make a new copy of the inputData\n        // so we can change the inputData without messing up the other recognizers\n        var inputDataClone = assign({}, inputData);\n\n        // is is enabled and allow recognizing?\n        if (!boolOrFn(this.options.enable, [this, inputDataClone])) {\n            this.reset();\n            this.state = STATE_FAILED;\n            return;\n        }\n\n        // reset when we've reached the end\n        if (this.state & (STATE_RECOGNIZED | STATE_CANCELLED | STATE_FAILED)) {\n            this.state = STATE_POSSIBLE;\n        }\n\n        this.state = this.process(inputDataClone);\n\n        // the recognizer has recognized a gesture\n        // so trigger an event\n        if (this.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED | STATE_CANCELLED)) {\n            this.tryEmit(inputDataClone);\n        }\n    },\n\n    /**\n     * return the state of the recognizer\n     * the actual recognizing happens in this method\n     * @virtual\n     * @param {Object} inputData\n     * @returns {Const} STATE\n     */\n    process: function(inputData) { }, // jshint ignore:line\n\n    /**\n     * return the preferred touch-action\n     * @virtual\n     * @returns {Array}\n     */\n    getTouchAction: function() { },\n\n    /**\n     * called when the gesture isn't allowed to recognize\n     * like when another is being recognized or it is disabled\n     * @virtual\n     */\n    reset: function() { }\n};\n\n/**\n * get a usable string, used as event postfix\n * @param {Const} state\n * @returns {String} state\n */\nfunction stateStr(state) {\n    if (state & STATE_CANCELLED) {\n        return 'cancel';\n    } else if (state & STATE_ENDED) {\n        return 'end';\n    } else if (state & STATE_CHANGED) {\n        return 'move';\n    } else if (state & STATE_BEGAN) {\n        return 'start';\n    }\n    return '';\n}\n\n/**\n * direction cons to string\n * @param {Const} direction\n * @returns {String}\n */\nfunction directionStr(direction) {\n    if (direction == DIRECTION_DOWN) {\n        return 'down';\n    } else if (direction == DIRECTION_UP) {\n        return 'up';\n    } else if (direction == DIRECTION_LEFT) {\n        return 'left';\n    } else if (direction == DIRECTION_RIGHT) {\n        return 'right';\n    }\n    return '';\n}\n\n/**\n * get a recognizer by name if it is bound to a manager\n * @param {Recognizer|String} otherRecognizer\n * @param {Recognizer} recognizer\n * @returns {Recognizer}\n */\nfunction getRecognizerByNameIfManager(otherRecognizer, recognizer) {\n    var manager = recognizer.manager;\n    if (manager) {\n        return manager.get(otherRecognizer);\n    }\n    return otherRecognizer;\n}\n\n/**\n * This recognizer is just used as a base for the simple attribute recognizers.\n * @constructor\n * @extends Recognizer\n */\nfunction AttrRecognizer() {\n    Recognizer.apply(this, arguments);\n}\n\ninherit(AttrRecognizer, Recognizer, {\n    /**\n     * @namespace\n     * @memberof AttrRecognizer\n     */\n    defaults: {\n        /**\n         * @type {Number}\n         * @default 1\n         */\n        pointers: 1\n    },\n\n    /**\n     * Used to check if it the recognizer receives valid input, like input.distance > 10.\n     * @memberof AttrRecognizer\n     * @param {Object} input\n     * @returns {Boolean} recognized\n     */\n    attrTest: function(input) {\n        var optionPointers = this.options.pointers;\n        return optionPointers === 0 || input.pointers.length === optionPointers;\n    },\n\n    /**\n     * Process the input and return the state for the recognizer\n     * @memberof AttrRecognizer\n     * @param {Object} input\n     * @returns {*} State\n     */\n    process: function(input) {\n        var state = this.state;\n        var eventType = input.eventType;\n\n        var isRecognized = state & (STATE_BEGAN | STATE_CHANGED);\n        var isValid = this.attrTest(input);\n\n        // on cancel input and we've recognized before, return STATE_CANCELLED\n        if (isRecognized && (eventType & INPUT_CANCEL || !isValid)) {\n            return state | STATE_CANCELLED;\n        } else if (isRecognized || isValid) {\n            if (eventType & INPUT_END) {\n                return state | STATE_ENDED;\n            } else if (!(state & STATE_BEGAN)) {\n                return STATE_BEGAN;\n            }\n            return state | STATE_CHANGED;\n        }\n        return STATE_FAILED;\n    }\n});\n\n/**\n * Pan\n * Recognized when the pointer is down and moved in the allowed direction.\n * @constructor\n * @extends AttrRecognizer\n */\nfunction PanRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n\n    this.pX = null;\n    this.pY = null;\n}\n\ninherit(PanRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof PanRecognizer\n     */\n    defaults: {\n        event: 'pan',\n        threshold: 10,\n        pointers: 1,\n        direction: DIRECTION_ALL\n    },\n\n    getTouchAction: function() {\n        var direction = this.options.direction;\n        var actions = [];\n        if (direction & DIRECTION_HORIZONTAL) {\n            actions.push(TOUCH_ACTION_PAN_Y);\n        }\n        if (direction & DIRECTION_VERTICAL) {\n            actions.push(TOUCH_ACTION_PAN_X);\n        }\n        return actions;\n    },\n\n    directionTest: function(input) {\n        var options = this.options;\n        var hasMoved = true;\n        var distance = input.distance;\n        var direction = input.direction;\n        var x = input.deltaX;\n        var y = input.deltaY;\n\n        // lock to axis?\n        if (!(direction & options.direction)) {\n            if (options.direction & DIRECTION_HORIZONTAL) {\n                direction = (x === 0) ? DIRECTION_NONE : (x < 0) ? DIRECTION_LEFT : DIRECTION_RIGHT;\n                hasMoved = x != this.pX;\n                distance = Math.abs(input.deltaX);\n            } else {\n                direction = (y === 0) ? DIRECTION_NONE : (y < 0) ? DIRECTION_UP : DIRECTION_DOWN;\n                hasMoved = y != this.pY;\n                distance = Math.abs(input.deltaY);\n            }\n        }\n        input.direction = direction;\n        return hasMoved && distance > options.threshold && direction & options.direction;\n    },\n\n    attrTest: function(input) {\n        return AttrRecognizer.prototype.attrTest.call(this, input) &&\n            (this.state & STATE_BEGAN || (!(this.state & STATE_BEGAN) && this.directionTest(input)));\n    },\n\n    emit: function(input) {\n\n        this.pX = input.deltaX;\n        this.pY = input.deltaY;\n\n        var direction = directionStr(input.direction);\n\n        if (direction) {\n            input.additionalEvent = this.options.event + direction;\n        }\n        this._super.emit.call(this, input);\n    }\n});\n\n/**\n * Pinch\n * Recognized when two or more pointers are moving toward (zoom-in) or away from each other (zoom-out).\n * @constructor\n * @extends AttrRecognizer\n */\nfunction PinchRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n}\n\ninherit(PinchRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof PinchRecognizer\n     */\n    defaults: {\n        event: 'pinch',\n        threshold: 0,\n        pointers: 2\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_NONE];\n    },\n\n    attrTest: function(input) {\n        return this._super.attrTest.call(this, input) &&\n            (Math.abs(input.scale - 1) > this.options.threshold || this.state & STATE_BEGAN);\n    },\n\n    emit: function(input) {\n        if (input.scale !== 1) {\n            var inOut = input.scale < 1 ? 'in' : 'out';\n            input.additionalEvent = this.options.event + inOut;\n        }\n        this._super.emit.call(this, input);\n    }\n});\n\n/**\n * Press\n * Recognized when the pointer is down for x ms without any movement.\n * @constructor\n * @extends Recognizer\n */\nfunction PressRecognizer() {\n    Recognizer.apply(this, arguments);\n\n    this._timer = null;\n    this._input = null;\n}\n\ninherit(PressRecognizer, Recognizer, {\n    /**\n     * @namespace\n     * @memberof PressRecognizer\n     */\n    defaults: {\n        event: 'press',\n        pointers: 1,\n        time: 251, // minimal time of the pointer to be pressed\n        threshold: 9 // a minimal movement is ok, but keep it low\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_AUTO];\n    },\n\n    process: function(input) {\n        var options = this.options;\n        var validPointers = input.pointers.length === options.pointers;\n        var validMovement = input.distance < options.threshold;\n        var validTime = input.deltaTime > options.time;\n\n        this._input = input;\n\n        // we only allow little movement\n        // and we've reached an end event, so a tap is possible\n        if (!validMovement || !validPointers || (input.eventType & (INPUT_END | INPUT_CANCEL) && !validTime)) {\n            this.reset();\n        } else if (input.eventType & INPUT_START) {\n            this.reset();\n            this._timer = setTimeoutContext(function() {\n                this.state = STATE_RECOGNIZED;\n                this.tryEmit();\n            }, options.time, this);\n        } else if (input.eventType & INPUT_END) {\n            return STATE_RECOGNIZED;\n        }\n        return STATE_FAILED;\n    },\n\n    reset: function() {\n        clearTimeout(this._timer);\n    },\n\n    emit: function(input) {\n        if (this.state !== STATE_RECOGNIZED) {\n            return;\n        }\n\n        if (input && (input.eventType & INPUT_END)) {\n            this.manager.emit(this.options.event + 'up', input);\n        } else {\n            this._input.timeStamp = now();\n            this.manager.emit(this.options.event, this._input);\n        }\n    }\n});\n\n/**\n * Rotate\n * Recognized when two or more pointer are moving in a circular motion.\n * @constructor\n * @extends AttrRecognizer\n */\nfunction RotateRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n}\n\ninherit(RotateRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof RotateRecognizer\n     */\n    defaults: {\n        event: 'rotate',\n        threshold: 0,\n        pointers: 2\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_NONE];\n    },\n\n    attrTest: function(input) {\n        return this._super.attrTest.call(this, input) &&\n            (Math.abs(input.rotation) > this.options.threshold || this.state & STATE_BEGAN);\n    }\n});\n\n/**\n * Swipe\n * Recognized when the pointer is moving fast (velocity), with enough distance in the allowed direction.\n * @constructor\n * @extends AttrRecognizer\n */\nfunction SwipeRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n}\n\ninherit(SwipeRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof SwipeRecognizer\n     */\n    defaults: {\n        event: 'swipe',\n        threshold: 10,\n        velocity: 0.3,\n        direction: DIRECTION_HORIZONTAL | DIRECTION_VERTICAL,\n        pointers: 1\n    },\n\n    getTouchAction: function() {\n        return PanRecognizer.prototype.getTouchAction.call(this);\n    },\n\n    attrTest: function(input) {\n        var direction = this.options.direction;\n        var velocity;\n\n        if (direction & (DIRECTION_HORIZONTAL | DIRECTION_VERTICAL)) {\n            velocity = input.overallVelocity;\n        } else if (direction & DIRECTION_HORIZONTAL) {\n            velocity = input.overallVelocityX;\n        } else if (direction & DIRECTION_VERTICAL) {\n            velocity = input.overallVelocityY;\n        }\n\n        return this._super.attrTest.call(this, input) &&\n            direction & input.offsetDirection &&\n            input.distance > this.options.threshold &&\n            input.maxPointers == this.options.pointers &&\n            abs(velocity) > this.options.velocity && input.eventType & INPUT_END;\n    },\n\n    emit: function(input) {\n        var direction = directionStr(input.offsetDirection);\n        if (direction) {\n            this.manager.emit(this.options.event + direction, input);\n        }\n\n        this.manager.emit(this.options.event, input);\n    }\n});\n\n/**\n * A tap is ecognized when the pointer is doing a small tap/click. Multiple taps are recognized if they occur\n * between the given interval and position. The delay option can be used to recognize multi-taps without firing\n * a single tap.\n *\n * The eventData from the emitted event contains the property `tapCount`, which contains the amount of\n * multi-taps being recognized.\n * @constructor\n * @extends Recognizer\n */\nfunction TapRecognizer() {\n    Recognizer.apply(this, arguments);\n\n    // previous time and center,\n    // used for tap counting\n    this.pTime = false;\n    this.pCenter = false;\n\n    this._timer = null;\n    this._input = null;\n    this.count = 0;\n}\n\ninherit(TapRecognizer, Recognizer, {\n    /**\n     * @namespace\n     * @memberof PinchRecognizer\n     */\n    defaults: {\n        event: 'tap',\n        pointers: 1,\n        taps: 1,\n        interval: 300, // max time between the multi-tap taps\n        time: 250, // max time of the pointer to be down (like finger on the screen)\n        threshold: 9, // a minimal movement is ok, but keep it low\n        posThreshold: 10 // a multi-tap can be a bit off the initial position\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_MANIPULATION];\n    },\n\n    process: function(input) {\n        var options = this.options;\n\n        var validPointers = input.pointers.length === options.pointers;\n        var validMovement = input.distance < options.threshold;\n        var validTouchTime = input.deltaTime < options.time;\n\n        this.reset();\n\n        if ((input.eventType & INPUT_START) && (this.count === 0)) {\n            return this.failTimeout();\n        }\n\n        // we only allow little movement\n        // and we've reached an end event, so a tap is possible\n        if (validMovement && validTouchTime && validPointers) {\n            if (input.eventType != INPUT_END) {\n                return this.failTimeout();\n            }\n\n            var validInterval = this.pTime ? (input.timeStamp - this.pTime < options.interval) : true;\n            var validMultiTap = !this.pCenter || getDistance(this.pCenter, input.center) < options.posThreshold;\n\n            this.pTime = input.timeStamp;\n            this.pCenter = input.center;\n\n            if (!validMultiTap || !validInterval) {\n                this.count = 1;\n            } else {\n                this.count += 1;\n            }\n\n            this._input = input;\n\n            // if tap count matches we have recognized it,\n            // else it has began recognizing...\n            var tapCount = this.count % options.taps;\n            if (tapCount === 0) {\n                // no failing requirements, immediately trigger the tap event\n                // or wait as long as the multitap interval to trigger\n                if (!this.hasRequireFailures()) {\n                    return STATE_RECOGNIZED;\n                } else {\n                    this._timer = setTimeoutContext(function() {\n                        this.state = STATE_RECOGNIZED;\n                        this.tryEmit();\n                    }, options.interval, this);\n                    return STATE_BEGAN;\n                }\n            }\n        }\n        return STATE_FAILED;\n    },\n\n    failTimeout: function() {\n        this._timer = setTimeoutContext(function() {\n            this.state = STATE_FAILED;\n        }, this.options.interval, this);\n        return STATE_FAILED;\n    },\n\n    reset: function() {\n        clearTimeout(this._timer);\n    },\n\n    emit: function() {\n        if (this.state == STATE_RECOGNIZED) {\n            this._input.tapCount = this.count;\n            this.manager.emit(this.options.event, this._input);\n        }\n    }\n});\n\n/**\n * Simple way to create a manager with a default set of recognizers.\n * @param {HTMLElement} element\n * @param {Object} [options]\n * @constructor\n */\nfunction Hammer(element, options) {\n    options = options || {};\n    options.recognizers = ifUndefined(options.recognizers, Hammer.defaults.preset);\n    return new Manager(element, options);\n}\n\n/**\n * @const {string}\n */\nHammer.VERSION = '2.0.7';\n\n/**\n * default settings\n * @namespace\n */\nHammer.defaults = {\n    /**\n     * set if DOM events are being triggered.\n     * But this is slower and unused by simple implementations, so disabled by default.\n     * @type {Boolean}\n     * @default false\n     */\n    domEvents: false,\n\n    /**\n     * The value for the touchAction property/fallback.\n     * When set to `compute` it will magically set the correct value based on the added recognizers.\n     * @type {String}\n     * @default compute\n     */\n    touchAction: TOUCH_ACTION_COMPUTE,\n\n    /**\n     * @type {Boolean}\n     * @default true\n     */\n    enable: true,\n\n    /**\n     * EXPERIMENTAL FEATURE -- can be removed/changed\n     * Change the parent input target element.\n     * If Null, then it is being set the to main element.\n     * @type {Null|EventTarget}\n     * @default null\n     */\n    inputTarget: null,\n\n    /**\n     * force an input class\n     * @type {Null|Function}\n     * @default null\n     */\n    inputClass: null,\n\n    /**\n     * Default recognizer setup when calling `Hammer()`\n     * When creating a new Manager these will be skipped.\n     * @type {Array}\n     */\n    preset: [\n        // RecognizerClass, options, [recognizeWith, ...], [requireFailure, ...]\n        [RotateRecognizer, {enable: false}],\n        [PinchRecognizer, {enable: false}, ['rotate']],\n        [SwipeRecognizer, {direction: DIRECTION_HORIZONTAL}],\n        [PanRecognizer, {direction: DIRECTION_HORIZONTAL}, ['swipe']],\n        [TapRecognizer],\n        [TapRecognizer, {event: 'doubletap', taps: 2}, ['tap']],\n        [PressRecognizer]\n    ],\n\n    /**\n     * Some CSS properties can be used to improve the working of Hammer.\n     * Add them to this method and they will be set when creating a new Manager.\n     * @namespace\n     */\n    cssProps: {\n        /**\n         * Disables text selection to improve the dragging gesture. Mainly for desktop browsers.\n         * @type {String}\n         * @default 'none'\n         */\n        userSelect: 'none',\n\n        /**\n         * Disable the Windows Phone grippers when pressing an element.\n         * @type {String}\n         * @default 'none'\n         */\n        touchSelect: 'none',\n\n        /**\n         * Disables the default callout shown when you touch and hold a touch target.\n         * On iOS, when you touch and hold a touch target such as a link, Safari displays\n         * a callout containing information about the link. This property allows you to disable that callout.\n         * @type {String}\n         * @default 'none'\n         */\n        touchCallout: 'none',\n\n        /**\n         * Specifies whether zooming is enabled. Used by IE10>\n         * @type {String}\n         * @default 'none'\n         */\n        contentZooming: 'none',\n\n        /**\n         * Specifies that an entire element should be draggable instead of its contents. Mainly for desktop browsers.\n         * @type {String}\n         * @default 'none'\n         */\n        userDrag: 'none',\n\n        /**\n         * Overrides the highlight color shown when the user taps a link or a JavaScript\n         * clickable element in iOS. This property obeys the alpha value, if specified.\n         * @type {String}\n         * @default 'rgba(0,0,0,0)'\n         */\n        tapHighlightColor: 'rgba(0,0,0,0)'\n    }\n};\n\nvar STOP = 1;\nvar FORCED_STOP = 2;\n\n/**\n * Manager\n * @param {HTMLElement} element\n * @param {Object} [options]\n * @constructor\n */\nfunction Manager(element, options) {\n    this.options = assign({}, Hammer.defaults, options || {});\n\n    this.options.inputTarget = this.options.inputTarget || element;\n\n    this.handlers = {};\n    this.session = {};\n    this.recognizers = [];\n    this.oldCssProps = {};\n\n    this.element = element;\n    this.input = createInputInstance(this);\n    this.touchAction = new TouchAction(this, this.options.touchAction);\n\n    toggleCssProps(this, true);\n\n    each(this.options.recognizers, function(item) {\n        var recognizer = this.add(new (item[0])(item[1]));\n        item[2] && recognizer.recognizeWith(item[2]);\n        item[3] && recognizer.requireFailure(item[3]);\n    }, this);\n}\n\nManager.prototype = {\n    /**\n     * set options\n     * @param {Object} options\n     * @returns {Manager}\n     */\n    set: function(options) {\n        assign(this.options, options);\n\n        // Options that need a little more setup\n        if (options.touchAction) {\n            this.touchAction.update();\n        }\n        if (options.inputTarget) {\n            // Clean up existing event listeners and reinitialize\n            this.input.destroy();\n            this.input.target = options.inputTarget;\n            this.input.init();\n        }\n        return this;\n    },\n\n    /**\n     * stop recognizing for this session.\n     * This session will be discarded, when a new [input]start event is fired.\n     * When forced, the recognizer cycle is stopped immediately.\n     * @param {Boolean} [force]\n     */\n    stop: function(force) {\n        this.session.stopped = force ? FORCED_STOP : STOP;\n    },\n\n    /**\n     * run the recognizers!\n     * called by the inputHandler function on every movement of the pointers (touches)\n     * it walks through all the recognizers and tries to detect the gesture that is being made\n     * @param {Object} inputData\n     */\n    recognize: function(inputData) {\n        var session = this.session;\n        if (session.stopped) {\n            return;\n        }\n\n        // run the touch-action polyfill\n        this.touchAction.preventDefaults(inputData);\n\n        var recognizer;\n        var recognizers = this.recognizers;\n\n        // this holds the recognizer that is being recognized.\n        // so the recognizer's state needs to be BEGAN, CHANGED, ENDED or RECOGNIZED\n        // if no recognizer is detecting a thing, it is set to `null`\n        var curRecognizer = session.curRecognizer;\n\n        // reset when the last recognizer is recognized\n        // or when we're in a new session\n        if (!curRecognizer || (curRecognizer && curRecognizer.state & STATE_RECOGNIZED)) {\n            curRecognizer = session.curRecognizer = null;\n        }\n\n        var i = 0;\n        while (i < recognizers.length) {\n            recognizer = recognizers[i];\n\n            // find out if we are allowed try to recognize the input for this one.\n            // 1.   allow if the session is NOT forced stopped (see the .stop() method)\n            // 2.   allow if we still haven't recognized a gesture in this session, or the this recognizer is the one\n            //      that is being recognized.\n            // 3.   allow if the recognizer is allowed to run simultaneous with the current recognized recognizer.\n            //      this can be setup with the `recognizeWith()` method on the recognizer.\n            if (session.stopped !== FORCED_STOP && ( // 1\n                    !curRecognizer || recognizer == curRecognizer || // 2\n                    recognizer.canRecognizeWith(curRecognizer))) { // 3\n                recognizer.recognize(inputData);\n            } else {\n                recognizer.reset();\n            }\n\n            // if the recognizer has been recognizing the input as a valid gesture, we want to store this one as the\n            // current active recognizer. but only if we don't already have an active recognizer\n            if (!curRecognizer && recognizer.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED)) {\n                curRecognizer = session.curRecognizer = recognizer;\n            }\n            i++;\n        }\n    },\n\n    /**\n     * get a recognizer by its event name.\n     * @param {Recognizer|String} recognizer\n     * @returns {Recognizer|Null}\n     */\n    get: function(recognizer) {\n        if (recognizer instanceof Recognizer) {\n            return recognizer;\n        }\n\n        var recognizers = this.recognizers;\n        for (var i = 0; i < recognizers.length; i++) {\n            if (recognizers[i].options.event == recognizer) {\n                return recognizers[i];\n            }\n        }\n        return null;\n    },\n\n    /**\n     * add a recognizer to the manager\n     * existing recognizers with the same event name will be removed\n     * @param {Recognizer} recognizer\n     * @returns {Recognizer|Manager}\n     */\n    add: function(recognizer) {\n        if (invokeArrayArg(recognizer, 'add', this)) {\n            return this;\n        }\n\n        // remove existing\n        var existing = this.get(recognizer.options.event);\n        if (existing) {\n            this.remove(existing);\n        }\n\n        this.recognizers.push(recognizer);\n        recognizer.manager = this;\n\n        this.touchAction.update();\n        return recognizer;\n    },\n\n    /**\n     * remove a recognizer by name or instance\n     * @param {Recognizer|String} recognizer\n     * @returns {Manager}\n     */\n    remove: function(recognizer) {\n        if (invokeArrayArg(recognizer, 'remove', this)) {\n            return this;\n        }\n\n        recognizer = this.get(recognizer);\n\n        // let's make sure this recognizer exists\n        if (recognizer) {\n            var recognizers = this.recognizers;\n            var index = inArray(recognizers, recognizer);\n\n            if (index !== -1) {\n                recognizers.splice(index, 1);\n                this.touchAction.update();\n            }\n        }\n\n        return this;\n    },\n\n    /**\n     * bind event\n     * @param {String} events\n     * @param {Function} handler\n     * @returns {EventEmitter} this\n     */\n    on: function(events, handler) {\n        if (events === undefined) {\n            return;\n        }\n        if (handler === undefined) {\n            return;\n        }\n\n        var handlers = this.handlers;\n        each(splitStr(events), function(event) {\n            handlers[event] = handlers[event] || [];\n            handlers[event].push(handler);\n        });\n        return this;\n    },\n\n    /**\n     * unbind event, leave emit blank to remove all handlers\n     * @param {String} events\n     * @param {Function} [handler]\n     * @returns {EventEmitter} this\n     */\n    off: function(events, handler) {\n        if (events === undefined) {\n            return;\n        }\n\n        var handlers = this.handlers;\n        each(splitStr(events), function(event) {\n            if (!handler) {\n                delete handlers[event];\n            } else {\n                handlers[event] && handlers[event].splice(inArray(handlers[event], handler), 1);\n            }\n        });\n        return this;\n    },\n\n    /**\n     * emit event to the listeners\n     * @param {String} event\n     * @param {Object} data\n     */\n    emit: function(event, data) {\n        // we also want to trigger dom events\n        if (this.options.domEvents) {\n            triggerDomEvent(event, data);\n        }\n\n        // no handlers, so skip it all\n        var handlers = this.handlers[event] && this.handlers[event].slice();\n        if (!handlers || !handlers.length) {\n            return;\n        }\n\n        data.type = event;\n        data.preventDefault = function() {\n            data.srcEvent.preventDefault();\n        };\n\n        var i = 0;\n        while (i < handlers.length) {\n            handlers[i](data);\n            i++;\n        }\n    },\n\n    /**\n     * destroy the manager and unbinds all events\n     * it doesn't unbind dom events, that is the user own responsibility\n     */\n    destroy: function() {\n        this.element && toggleCssProps(this, false);\n\n        this.handlers = {};\n        this.session = {};\n        this.input.destroy();\n        this.element = null;\n    }\n};\n\n/**\n * add/remove the css properties as defined in manager.options.cssProps\n * @param {Manager} manager\n * @param {Boolean} add\n */\nfunction toggleCssProps(manager, add) {\n    var element = manager.element;\n    if (!element.style) {\n        return;\n    }\n    var prop;\n    each(manager.options.cssProps, function(value, name) {\n        prop = prefixed(element.style, name);\n        if (add) {\n            manager.oldCssProps[prop] = element.style[prop];\n            element.style[prop] = value;\n        } else {\n            element.style[prop] = manager.oldCssProps[prop] || '';\n        }\n    });\n    if (!add) {\n        manager.oldCssProps = {};\n    }\n}\n\n/**\n * trigger dom event\n * @param {String} event\n * @param {Object} data\n */\nfunction triggerDomEvent(event, data) {\n    var gestureEvent = document.createEvent('Event');\n    gestureEvent.initEvent(event, true, true);\n    gestureEvent.gesture = data;\n    data.target.dispatchEvent(gestureEvent);\n}\n\nassign(Hammer, {\n    INPUT_START: INPUT_START,\n    INPUT_MOVE: INPUT_MOVE,\n    INPUT_END: INPUT_END,\n    INPUT_CANCEL: INPUT_CANCEL,\n\n    STATE_POSSIBLE: STATE_POSSIBLE,\n    STATE_BEGAN: STATE_BEGAN,\n    STATE_CHANGED: STATE_CHANGED,\n    STATE_ENDED: STATE_ENDED,\n    STATE_RECOGNIZED: STATE_RECOGNIZED,\n    STATE_CANCELLED: STATE_CANCELLED,\n    STATE_FAILED: STATE_FAILED,\n\n    DIRECTION_NONE: DIRECTION_NONE,\n    DIRECTION_LEFT: DIRECTION_LEFT,\n    DIRECTION_RIGHT: DIRECTION_RIGHT,\n    DIRECTION_UP: DIRECTION_UP,\n    DIRECTION_DOWN: DIRECTION_DOWN,\n    DIRECTION_HORIZONTAL: DIRECTION_HORIZONTAL,\n    DIRECTION_VERTICAL: DIRECTION_VERTICAL,\n    DIRECTION_ALL: DIRECTION_ALL,\n\n    Manager: Manager,\n    Input: Input,\n    TouchAction: TouchAction,\n\n    TouchInput: TouchInput,\n    MouseInput: MouseInput,\n    PointerEventInput: PointerEventInput,\n    TouchMouseInput: TouchMouseInput,\n    SingleTouchInput: SingleTouchInput,\n\n    Recognizer: Recognizer,\n    AttrRecognizer: AttrRecognizer,\n    Tap: TapRecognizer,\n    Pan: PanRecognizer,\n    Swipe: SwipeRecognizer,\n    Pinch: PinchRecognizer,\n    Rotate: RotateRecognizer,\n    Press: PressRecognizer,\n\n    on: addEventListeners,\n    off: removeEventListeners,\n    each: each,\n    merge: merge,\n    extend: extend,\n    assign: assign,\n    inherit: inherit,\n    bindFn: bindFn,\n    prefixed: prefixed\n});\n\n// this prevents errors when Hammer is loaded in the presence of an AMD\n//  style loader but by script tag, not by the loader.\nvar freeGlobal = (typeof window !== 'undefined' ? window : (typeof self !== 'undefined' ? self : {})); // jshint ignore:line\nfreeGlobal.Hammer = Hammer;\n\nif (true) {\n    !(__WEBPACK_AMD_DEFINE_RESULT__ = (function() {\n        return Hammer;\n    }).call(exports, __nested_webpack_require_613978__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n} else {}\n\n})(window, document, 'Hammer');\n\n\n/***/ }),\n/* 129 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\n// English\nexports['en'] = {\n  edit: 'Edit',\n  del: 'Delete selected',\n  back: 'Back',\n  addNode: 'Add Node',\n  addEdge: 'Add Edge',\n  editNode: 'Edit Node',\n  editEdge: 'Edit Edge',\n  addDescription: 'Click in an empty space to place a new node.',\n  edgeDescription: 'Click on a node and drag the edge to another node to connect them.',\n  editEdgeDescription: 'Click on the control points and drag them to a node to connect to it.',\n  createEdgeError: 'Cannot link edges to a cluster.',\n  deleteClusterError: 'Clusters cannot be deleted.',\n  editClusterError: 'Clusters cannot be edited.'\n};\nexports['en_EN'] = exports['en'];\nexports['en_US'] = exports['en'];\n\n// German\nexports['de'] = {\n  edit: 'Editieren',\n  del: 'L\\xF6sche Auswahl',\n  back: 'Zur\\xFCck',\n  addNode: 'Knoten hinzuf\\xFCgen',\n  addEdge: 'Kante hinzuf\\xFCgen',\n  editNode: 'Knoten editieren',\n  editEdge: 'Kante editieren',\n  addDescription: 'Klicke auf eine freie Stelle, um einen neuen Knoten zu plazieren.',\n  edgeDescription: 'Klicke auf einen Knoten und ziehe die Kante zu einem anderen Knoten, um diese zu verbinden.',\n  editEdgeDescription: 'Klicke auf die Verbindungspunkte und ziehe diese auf einen Knoten, um sie zu verbinden.',\n  createEdgeError: 'Es ist nicht m\\xF6glich, Kanten mit Clustern zu verbinden.',\n  deleteClusterError: 'Cluster k\\xF6nnen nicht gel\\xF6scht werden.',\n  editClusterError: 'Cluster k\\xF6nnen nicht editiert werden.'\n};\nexports['de_DE'] = exports['de'];\n\n// Spanish\nexports['es'] = {\n  edit: 'Editar',\n  del: 'Eliminar selecci\\xF3n',\n  back: '\\xC1tras',\n  addNode: 'A\\xF1adir nodo',\n  addEdge: 'A\\xF1adir arista',\n  editNode: 'Editar nodo',\n  editEdge: 'Editar arista',\n  addDescription: 'Haga clic en un lugar vac\\xEDo para colocar un nuevo nodo.',\n  edgeDescription: 'Haga clic en un nodo y arrastre la arista hacia otro nodo para conectarlos.',\n  editEdgeDescription: 'Haga clic en un punto de control y arrastrelo a un nodo para conectarlo.',\n  createEdgeError: 'No se puede conectar una arista a un grupo.',\n  deleteClusterError: 'No es posible eliminar grupos.',\n  editClusterError: 'No es posible editar grupos.'\n};\nexports['es_ES'] = exports['es'];\n\n//Italiano\nexports['it'] = {\n  edit: 'Modifica',\n  del: 'Cancella la selezione',\n  back: 'Indietro',\n  addNode: 'Aggiungi un nodo',\n  addEdge: 'Aggiungi un vertice',\n  editNode: 'Modifica il nodo',\n  editEdge: 'Modifica il vertice',\n  addDescription: 'Clicca per aggiungere un nuovo nodo',\n  edgeDescription: 'Clicca su un nodo e trascinalo ad un altro nodo per connetterli.',\n  editEdgeDescription: 'Clicca sui Punti di controllo e trascinali ad un nodo per connetterli.',\n  createEdgeError: 'Non si possono collegare vertici ad un cluster',\n  deleteClusterError: 'I cluster non possono essere cancellati',\n  editClusterError: 'I clusters non possono essere modificati.'\n};\nexports['it_IT'] = exports['it'];\n\n// Dutch\nexports['nl'] = {\n  edit: 'Wijzigen',\n  del: 'Selectie verwijderen',\n  back: 'Terug',\n  addNode: 'Node toevoegen',\n  addEdge: 'Link toevoegen',\n  editNode: 'Node wijzigen',\n  editEdge: 'Link wijzigen',\n  addDescription: 'Klik op een leeg gebied om een nieuwe node te maken.',\n  edgeDescription: 'Klik op een node en sleep de link naar een andere node om ze te verbinden.',\n  editEdgeDescription: 'Klik op de verbindingspunten en sleep ze naar een node om daarmee te verbinden.',\n  createEdgeError: 'Kan geen link maken naar een cluster.',\n  deleteClusterError: 'Clusters kunnen niet worden verwijderd.',\n  editClusterError: 'Clusters kunnen niet worden aangepast.'\n};\nexports['nl_NL'] = exports['nl'];\nexports['nl_BE'] = exports['nl'];\n\n// Portuguese Brazil\nexports['pt-br'] = {\n  edit: 'Editar',\n  del: 'Remover selecionado',\n  back: 'Voltar',\n  addNode: 'Adicionar nó',\n  addEdge: 'Adicionar aresta',\n  editNode: 'Editar nó',\n  editEdge: 'Editar aresta',\n  addDescription: 'Clique em um espaço em branco para adicionar um novo nó',\n  edgeDescription: 'Clique em um nó e arraste a aresta até outro nó para conectá-los',\n  editEdgeDescription: 'Clique nos pontos de controle e os arraste para um nó para conectá-los',\n  createEdgeError: 'Não foi possível linkar arestas a um cluster.',\n  deleteClusterError: 'Clusters não puderam ser removidos.',\n  editClusterError: 'Clusters não puderam ser editados.'\n};\nexports['pt-BR'] = exports['pt-br'];\nexports['pt_BR'] = exports['pt-br'];\nexports['pt_br'] = exports['pt-br'];\n\n// Russian\nexports['ru'] = {\n  edit: 'Редактировать',\n  del: 'Удалить выбранное',\n  back: 'Назад',\n  addNode: 'Добавить узел',\n  addEdge: 'Добавить ребро',\n  editNode: 'Редактировать узел',\n  editEdge: 'Редактировать ребро',\n  addDescription: 'Кликните в свободное место, чтобы добавить новый узел.',\n  edgeDescription: 'Кликните на узел и протяните ребро к другому узлу, чтобы соединить их.',\n  editEdgeDescription: 'Кликните на контрольные точки и перетащите их в узел, чтобы подключиться к нему.',\n  createEdgeError: 'Невозможно соединить ребра в кластер.',\n  deleteClusterError: 'Кластеры не могут быть удалены',\n  editClusterError: 'Кластеры недоступны для редактирования.'\n};\nexports['ru_RU'] = exports['ru'];\n\n// Chinese\nexports['cn'] = {\n  edit: '编辑',\n  del: '删除选定',\n  back: '返回',\n  addNode: '添加节点',\n  addEdge: '添加连接线',\n  editNode: '编辑节点',\n  editEdge: '编辑连接线',\n  addDescription: '单击空白处放置新节点。',\n  edgeDescription: '单击某个节点并将该连接线拖动到另一个节点以连接它们。',\n  editEdgeDescription: '单击控制节点并将它们拖到节点上连接。',\n  createEdgeError: '无法将连接线连接到群集。',\n  deleteClusterError: '无法删除群集。',\n  editClusterError: '无法编辑群集。'\n};\nexports['zh_CN'] = exports['cn'];\n\n// Ukrainian\nexports['uk'] = {\n  edit: 'Редагувати',\n  del: 'Видалити обране',\n  back: 'Назад',\n  addNode: 'Додати вузол',\n  addEdge: 'Додати край',\n  editNode: 'Редагувати вузол',\n  editEdge: 'Редагувати край',\n  addDescription: 'Kлікніть на вільне місце, щоб додати новий вузол.',\n  edgeDescription: \"Клікніть на вузол і перетягніть край до іншого вузла, щоб їх з'єднати.\",\n  editEdgeDescription: 'Клікніть на контрольні точки і перетягніть їх у вузол, щоб підключитися до нього.',\n  createEdgeError: \"Не можливо об'єднати краї в групу.\",\n  deleteClusterError: 'Групи не можуть бути видалені.',\n  editClusterError: 'Групи недоступні для редагування.'\n};\nexports['uk_UA'] = exports['uk'];\n\n// French\nexports['fr'] = {\n  edit: 'Editer',\n  del: 'Effacer la selection',\n  back: 'Retour',\n  addNode: 'Ajouter un noeud',\n  addEdge: 'Ajouter un lien',\n  editNode: 'Editer le noeud',\n  editEdge: 'Editer le lien',\n  addDescription: 'Cliquez dans un endroit vide pour placer un noeud.',\n  edgeDescription: 'Cliquez sur un noeud et glissez le lien vers un autre noeud pour les connecter.',\n  editEdgeDescription: 'Cliquez sur les points de contrôle et glissez-les pour connecter un noeud.',\n  createEdgeError: 'Impossible de créer un lien vers un cluster.',\n  deleteClusterError: 'Les clusters ne peuvent pas être éffacés.',\n  editClusterError: 'Les clusters ne peuvent pas être édites.'\n};\nexports['fr_FR'] = exports['fr'];\n\n/***/ }),\n/* 130 */\n/***/ (function(module, exports, __nested_webpack_require_695069__) {\n\nmodule.exports = { \"default\": __nested_webpack_require_695069__(131), __esModule: true };\n\n/***/ }),\n/* 131 */\n/***/ (function(module, exports, __nested_webpack_require_695223__) {\n\n__nested_webpack_require_695223__(132);\nvar $Object = __nested_webpack_require_695223__(6).Object;\nmodule.exports = function defineProperty(it, key, desc) {\n  return $Object.defineProperty(it, key, desc);\n};\n\n\n/***/ }),\n/* 132 */\n/***/ (function(module, exports, __nested_webpack_require_695482__) {\n\nvar $export = __nested_webpack_require_695482__(11);\n// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)\n$export($export.S + $export.F * !__nested_webpack_require_695482__(13), 'Object', { defineProperty: __nested_webpack_require_695482__(12).f });\n\n\n/***/ }),\n/* 133 */\n/***/ (function(module, exports, __nested_webpack_require_695779__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _classCallCheck2 = __nested_webpack_require_695779__(0);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __nested_webpack_require_695779__(1);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\n/**\n * Associates a canvas to a given image, containing a number of renderings\n * of the image at various sizes.\n *\n * This technique is known as 'mipmapping'.\n *\n * NOTE: Images can also be of type 'data:svg+xml`. This code also works\n *       for svg, but the mipmapping may not be necessary.\n *\n * @param {Image} image\n */\nvar CachedImage = function () {\n  /**\n   * @ignore\n   */\n  function CachedImage() {\n    (0, _classCallCheck3['default'])(this, CachedImage);\n\n    // eslint-disable-line no-unused-vars\n    this.NUM_ITERATIONS = 4; // Number of items in the coordinates array\n\n    this.image = new Image();\n    this.canvas = document.createElement('canvas');\n  }\n\n  /**\n   * Called when the image has been successfully loaded.\n   */\n\n\n  (0, _createClass3['default'])(CachedImage, [{\n    key: 'init',\n    value: function init() {\n      if (this.initialized()) return;\n\n      this.src = this.image.src; // For same interface with Image\n      var w = this.image.width;\n      var h = this.image.height;\n\n      // Ease external access\n      this.width = w;\n      this.height = h;\n\n      var h2 = Math.floor(h / 2);\n      var h4 = Math.floor(h / 4);\n      var h8 = Math.floor(h / 8);\n      var h16 = Math.floor(h / 16);\n\n      var w2 = Math.floor(w / 2);\n      var w4 = Math.floor(w / 4);\n      var w8 = Math.floor(w / 8);\n      var w16 = Math.floor(w / 16);\n\n      // Make canvas as small as possible\n      this.canvas.width = 3 * w4;\n      this.canvas.height = h2;\n\n      // Coordinates and sizes of images contained in the canvas\n      // Values per row:  [top x, left y, width, height]\n\n      this.coordinates = [[0, 0, w2, h2], [w2, 0, w4, h4], [w2, h4, w8, h8], [5 * w8, h4, w16, h16]];\n\n      this._fillMipMap();\n    }\n\n    /**\n     * @return {Boolean} true if init() has been called, false otherwise.\n     */\n\n  }, {\n    key: 'initialized',\n    value: function initialized() {\n      return this.coordinates !== undefined;\n    }\n\n    /**\n     * Redraw main image in various sizes to the context.\n     *\n     * The rationale behind this is to reduce artefacts due to interpolation\n     * at differing zoom levels.\n     *\n     * Source: http://stackoverflow.com/q/18761404/1223531\n     *\n     * This methods takes the resizing out of the drawing loop, in order to\n     * reduce performance overhead.\n     *\n     * TODO: The code assumes that a 2D context can always be gotten. This is\n     *       not necessarily true! OTOH, if not true then usage of this class\n     *       is senseless.\n     *\n     * @private\n     */\n\n  }, {\n    key: '_fillMipMap',\n    value: function _fillMipMap() {\n      var ctx = this.canvas.getContext('2d');\n\n      // First zoom-level comes from the image\n      var to = this.coordinates[0];\n      ctx.drawImage(this.image, to[0], to[1], to[2], to[3]);\n\n      // The rest are copy actions internal to the canvas/context\n      for (var iterations = 1; iterations < this.NUM_ITERATIONS; iterations++) {\n        var from = this.coordinates[iterations - 1];\n        var _to = this.coordinates[iterations];\n\n        ctx.drawImage(this.canvas, from[0], from[1], from[2], from[3], _to[0], _to[1], _to[2], _to[3]);\n      }\n    }\n\n    /**\n     * Draw the image, using the mipmap if necessary.\n     *\n     * MipMap is only used if param factor > 2; otherwise, original bitmap\n     * is resized. This is also used to skip mipmap usage, e.g. by setting factor = 1\n     *\n     * Credits to 'Alex de Mulder' for original implementation.\n     *\n     * @param {CanvasRenderingContext2D} ctx  context on which to draw zoomed image\n     * @param {Float} factor scale factor at which to draw\n     * @param {number} left\n     * @param {number} top\n     * @param {number} width\n     * @param {number} height\n     */\n\n  }, {\n    key: 'drawImageAtPosition',\n    value: function drawImageAtPosition(ctx, factor, left, top, width, height) {\n      if (!this.initialized()) return; //can't draw image yet not intialized\n\n      if (factor > 2) {\n        // Determine which zoomed image to use\n        factor *= 0.5;\n        var iterations = 0;\n        while (factor > 2 && iterations < this.NUM_ITERATIONS) {\n          factor *= 0.5;\n          iterations += 1;\n        }\n\n        if (iterations >= this.NUM_ITERATIONS) {\n          iterations = this.NUM_ITERATIONS - 1;\n        }\n        //console.log(\"iterations: \" + iterations);\n\n        var from = this.coordinates[iterations];\n        ctx.drawImage(this.canvas, from[0], from[1], from[2], from[3], left, top, width, height);\n      } else {\n        // Draw image directly\n        ctx.drawImage(this.image, left, top, width, height);\n      }\n    }\n  }]);\n  return CachedImage;\n}();\n\nexports['default'] = CachedImage;\n\n/***/ }),\n/* 134 */\n/***/ (function(module, exports, __nested_webpack_require_700931__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _classCallCheck2 = __nested_webpack_require_700931__(0);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __nested_webpack_require_700931__(1);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar util = __nested_webpack_require_700931__(2);\n\n/**\n * This class can store groups and options specific for groups.\n */\n\nvar Groups = function () {\n  /**\n   * @ignore\n   */\n  function Groups() {\n    (0, _classCallCheck3['default'])(this, Groups);\n\n    this.clear();\n    this.defaultIndex = 0;\n    this.groupsArray = [];\n    this.groupIndex = 0;\n\n    this.defaultGroups = [{\n      border: '#2B7CE9',\n      background: '#97C2FC',\n      highlight: { border: '#2B7CE9', background: '#D2E5FF' },\n      hover: { border: '#2B7CE9', background: '#D2E5FF' }\n    }, // 0: blue\n    {\n      border: '#FFA500',\n      background: '#FFFF00',\n      highlight: { border: '#FFA500', background: '#FFFFA3' },\n      hover: { border: '#FFA500', background: '#FFFFA3' }\n    }, // 1: yellow\n    {\n      border: '#FA0A10',\n      background: '#FB7E81',\n      highlight: { border: '#FA0A10', background: '#FFAFB1' },\n      hover: { border: '#FA0A10', background: '#FFAFB1' }\n    }, // 2: red\n    {\n      border: '#41A906',\n      background: '#7BE141',\n      highlight: { border: '#41A906', background: '#A1EC76' },\n      hover: { border: '#41A906', background: '#A1EC76' }\n    }, // 3: green\n    {\n      border: '#E129F0',\n      background: '#EB7DF4',\n      highlight: { border: '#E129F0', background: '#F0B3F5' },\n      hover: { border: '#E129F0', background: '#F0B3F5' }\n    }, // 4: magenta\n    {\n      border: '#7C29F0',\n      background: '#AD85E4',\n      highlight: { border: '#7C29F0', background: '#D3BDF0' },\n      hover: { border: '#7C29F0', background: '#D3BDF0' }\n    }, // 5: purple\n    {\n      border: '#C37F00',\n      background: '#FFA807',\n      highlight: { border: '#C37F00', background: '#FFCA66' },\n      hover: { border: '#C37F00', background: '#FFCA66' }\n    }, // 6: orange\n    {\n      border: '#4220FB',\n      background: '#6E6EFD',\n      highlight: { border: '#4220FB', background: '#9B9BFD' },\n      hover: { border: '#4220FB', background: '#9B9BFD' }\n    }, // 7: darkblue\n    {\n      border: '#FD5A77',\n      background: '#FFC0CB',\n      highlight: { border: '#FD5A77', background: '#FFD1D9' },\n      hover: { border: '#FD5A77', background: '#FFD1D9' }\n    }, // 8: pink\n    {\n      border: '#4AD63A',\n      background: '#C2FABC',\n      highlight: { border: '#4AD63A', background: '#E6FFE3' },\n      hover: { border: '#4AD63A', background: '#E6FFE3' }\n    }, // 9: mint\n\n    {\n      border: '#990000',\n      background: '#EE0000',\n      highlight: { border: '#BB0000', background: '#FF3333' },\n      hover: { border: '#BB0000', background: '#FF3333' }\n    }, // 10:bright red\n\n    {\n      border: '#FF6000',\n      background: '#FF6000',\n      highlight: { border: '#FF6000', background: '#FF6000' },\n      hover: { border: '#FF6000', background: '#FF6000' }\n    }, // 12: real orange\n    {\n      border: '#97C2FC',\n      background: '#2B7CE9',\n      highlight: { border: '#D2E5FF', background: '#2B7CE9' },\n      hover: { border: '#D2E5FF', background: '#2B7CE9' }\n    }, // 13: blue\n    {\n      border: '#399605',\n      background: '#255C03',\n      highlight: { border: '#399605', background: '#255C03' },\n      hover: { border: '#399605', background: '#255C03' }\n    }, // 14: green\n    {\n      border: '#B70054',\n      background: '#FF007E',\n      highlight: { border: '#B70054', background: '#FF007E' },\n      hover: { border: '#B70054', background: '#FF007E' }\n    }, // 15: magenta\n    {\n      border: '#AD85E4',\n      background: '#7C29F0',\n      highlight: { border: '#D3BDF0', background: '#7C29F0' },\n      hover: { border: '#D3BDF0', background: '#7C29F0' }\n    }, // 16: purple\n    {\n      border: '#4557FA',\n      background: '#000EA1',\n      highlight: { border: '#6E6EFD', background: '#000EA1' },\n      hover: { border: '#6E6EFD', background: '#000EA1' }\n    }, // 17: darkblue\n    {\n      border: '#FFC0CB',\n      background: '#FD5A77',\n      highlight: { border: '#FFD1D9', background: '#FD5A77' },\n      hover: { border: '#FFD1D9', background: '#FD5A77' }\n    }, // 18: pink\n    {\n      border: '#C2FABC',\n      background: '#74D66A',\n      highlight: { border: '#E6FFE3', background: '#74D66A' },\n      hover: { border: '#E6FFE3', background: '#74D66A' }\n    }, // 19: mint\n\n    {\n      border: '#EE0000',\n      background: '#990000',\n      highlight: { border: '#FF3333', background: '#BB0000' },\n      hover: { border: '#FF3333', background: '#BB0000' } // 20:bright red\n    }];\n\n    this.options = {};\n    this.defaultOptions = {\n      useDefaultGroups: true\n    };\n    util.extend(this.options, this.defaultOptions);\n  }\n\n  /**\n   *\n   * @param {Object} options\n   */\n\n\n  (0, _createClass3['default'])(Groups, [{\n    key: 'setOptions',\n    value: function setOptions(options) {\n      var optionFields = ['useDefaultGroups'];\n\n      if (options !== undefined) {\n        for (var groupName in options) {\n          if (options.hasOwnProperty(groupName)) {\n            if (optionFields.indexOf(groupName) === -1) {\n              var group = options[groupName];\n              this.add(groupName, group);\n            }\n          }\n        }\n      }\n    }\n\n    /**\n     * Clear all groups\n     */\n\n  }, {\n    key: 'clear',\n    value: function clear() {\n      this.groups = {};\n      this.groupsArray = [];\n    }\n\n    /**\n     * Get group options of a groupname.\n     * If groupname is not found, a new group may be created.\n     *\n     * @param {*}       groupname     Can be a number, string, Date, etc.\n     * @param {boolean} [shouldCreate=true] If true, create a new group\n     * @return {Object} The found or created group\n     */\n\n  }, {\n    key: 'get',\n    value: function get(groupname) {\n      var shouldCreate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n      var group = this.groups[groupname];\n\n      if (group === undefined && shouldCreate) {\n        if (this.options.useDefaultGroups === false && this.groupsArray.length > 0) {\n          // create new group\n          var index = this.groupIndex % this.groupsArray.length;\n          this.groupIndex++;\n          group = {};\n          group.color = this.groups[this.groupsArray[index]];\n          this.groups[groupname] = group;\n        } else {\n          // create new group\n          var _index = this.defaultIndex % this.defaultGroups.length;\n          this.defaultIndex++;\n          group = {};\n          group.color = this.defaultGroups[_index];\n          this.groups[groupname] = group;\n        }\n      }\n\n      return group;\n    }\n\n    /**\n     * Add a custom group style\n     * @param {string} groupName\n     * @param {Object} style       An object containing borderColor,\n     *                             backgroundColor, etc.\n     * @return {Object} group      The created group object\n     */\n\n  }, {\n    key: 'add',\n    value: function add(groupName, style) {\n      this.groups[groupName] = style;\n      this.groupsArray.push(groupName);\n      return style;\n    }\n  }]);\n  return Groups;\n}();\n\nexports['default'] = Groups;\n\n/***/ }),\n/* 135 */\n/***/ (function(module, exports, __nested_webpack_require_708348__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _classCallCheck2 = __nested_webpack_require_708348__(0);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __nested_webpack_require_708348__(1);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar util = __nested_webpack_require_708348__(2);\nvar DataSet = __nested_webpack_require_708348__(33);\nvar DataView = __nested_webpack_require_708348__(51);\nvar Node = __nested_webpack_require_708348__(34)['default'];\n\n/**\n * Handler for Nodes\n */\n\nvar NodesHandler = function () {\n  /**\n   * @param {Object} body\n   * @param {Images} images\n   * @param {Array.<Group>} groups\n   * @param {LayoutEngine} layoutEngine\n   */\n  function NodesHandler(body, images, groups, layoutEngine) {\n    var _this = this;\n\n    (0, _classCallCheck3['default'])(this, NodesHandler);\n\n    this.body = body;\n    this.images = images;\n    this.groups = groups;\n    this.layoutEngine = layoutEngine;\n\n    // create the node API in the body container\n    this.body.functions.createNode = this.create.bind(this);\n\n    this.nodesListeners = {\n      add: function add(event, params) {\n        _this.add(params.items);\n      },\n      update: function update(event, params) {\n        _this.update(params.items, params.data, params.oldData);\n      },\n      remove: function remove(event, params) {\n        _this.remove(params.items);\n      }\n    };\n\n    this.defaultOptions = {\n      borderWidth: 1,\n      borderWidthSelected: 2,\n      brokenImage: undefined,\n      color: {\n        border: '#2B7CE9',\n        background: '#97C2FC',\n        highlight: {\n          border: '#2B7CE9',\n          background: '#D2E5FF'\n        },\n        hover: {\n          border: '#2B7CE9',\n          background: '#D2E5FF'\n        }\n      },\n      fixed: {\n        x: false,\n        y: false\n      },\n      font: {\n        color: '#343434',\n        size: 14, // px\n        face: 'arial',\n        background: 'none',\n        strokeWidth: 0, // px\n        strokeColor: '#ffffff',\n        align: 'center',\n        vadjust: 0,\n        multi: false,\n        bold: {\n          mod: 'bold'\n        },\n        boldital: {\n          mod: 'bold italic'\n        },\n        ital: {\n          mod: 'italic'\n        },\n        mono: {\n          mod: '',\n          size: 15, // px\n          face: 'monospace',\n          vadjust: 2\n        }\n      },\n      group: undefined,\n      hidden: false,\n      icon: {\n        face: 'FontAwesome', //'FontAwesome',\n        code: undefined, //'\\uf007',\n        size: 50, //50,\n        color: '#2B7CE9' //'#aa00ff'\n      },\n      image: undefined, // --> URL\n      label: undefined,\n      labelHighlightBold: true,\n      level: undefined,\n      margin: {\n        top: 5,\n        right: 5,\n        bottom: 5,\n        left: 5\n      },\n      mass: 1,\n      physics: true,\n      scaling: {\n        min: 10,\n        max: 30,\n        label: {\n          enabled: false,\n          min: 14,\n          max: 30,\n          maxVisible: 30,\n          drawThreshold: 5\n        },\n        customScalingFunction: function customScalingFunction(min, max, total, value) {\n          if (max === min) {\n            return 0.5;\n          } else {\n            var scale = 1 / (max - min);\n            return Math.max(0, (value - min) * scale);\n          }\n        }\n      },\n      shadow: {\n        enabled: false,\n        color: 'rgba(0,0,0,0.5)',\n        size: 10,\n        x: 5,\n        y: 5\n      },\n      shape: 'ellipse',\n      shapeProperties: {\n        borderDashes: false, // only for borders\n        borderRadius: 6, // only for box shape\n        interpolation: true, // only for image and circularImage shapes\n        useImageSize: false, // only for image and circularImage shapes\n        useBorderWithImage: false // only for image shape\n      },\n      size: 25,\n      title: undefined,\n      value: undefined,\n      x: undefined,\n      y: undefined\n\n      // Protect from idiocy\n    };if (this.defaultOptions.mass <= 0) {\n      throw 'Internal error: mass in defaultOptions of NodesHandler may not be zero or negative';\n    }\n\n    this.options = util.bridgeObject(this.defaultOptions);\n\n    this.bindEventListeners();\n  }\n\n  /**\n   * Binds event listeners\n   */\n\n\n  (0, _createClass3['default'])(NodesHandler, [{\n    key: 'bindEventListeners',\n    value: function bindEventListeners() {\n      var _this2 = this;\n\n      // refresh the nodes. Used when reverting from hierarchical layout\n      this.body.emitter.on('refreshNodes', this.refresh.bind(this));\n      this.body.emitter.on('refresh', this.refresh.bind(this));\n      this.body.emitter.on('destroy', function () {\n        util.forEach(_this2.nodesListeners, function (callback, event) {\n          if (_this2.body.data.nodes) _this2.body.data.nodes.off(event, callback);\n        });\n        delete _this2.body.functions.createNode;\n        delete _this2.nodesListeners.add;\n        delete _this2.nodesListeners.update;\n        delete _this2.nodesListeners.remove;\n        delete _this2.nodesListeners;\n      });\n    }\n\n    /**\n     *\n     * @param {Object} options\n     */\n\n  }, {\n    key: 'setOptions',\n    value: function setOptions(options) {\n      if (options !== undefined) {\n        Node.parseOptions(this.options, options);\n\n        // update the shape in all nodes\n        if (options.shape !== undefined) {\n          for (var nodeId in this.body.nodes) {\n            if (this.body.nodes.hasOwnProperty(nodeId)) {\n              this.body.nodes[nodeId].updateShape();\n            }\n          }\n        }\n\n        // update the font in all nodes\n        if (options.font !== undefined) {\n          for (var _nodeId in this.body.nodes) {\n            if (this.body.nodes.hasOwnProperty(_nodeId)) {\n              this.body.nodes[_nodeId].updateLabelModule();\n              this.body.nodes[_nodeId].needsRefresh();\n            }\n          }\n        }\n\n        // update the shape size in all nodes\n        if (options.size !== undefined) {\n          for (var _nodeId2 in this.body.nodes) {\n            if (this.body.nodes.hasOwnProperty(_nodeId2)) {\n              this.body.nodes[_nodeId2].needsRefresh();\n            }\n          }\n        }\n\n        // update the state of the variables if needed\n        if (options.hidden !== undefined || options.physics !== undefined) {\n          this.body.emitter.emit('_dataChanged');\n        }\n      }\n    }\n\n    /**\n     * Set a data set with nodes for the network\n     * @param {Array | DataSet | DataView} nodes         The data containing the nodes.\n     * @param {boolean} [doNotEmit=false]\n     * @private\n     */\n\n  }, {\n    key: 'setData',\n    value: function setData(nodes) {\n      var doNotEmit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n      var oldNodesData = this.body.data.nodes;\n\n      if (nodes instanceof DataSet || nodes instanceof DataView) {\n        this.body.data.nodes = nodes;\n      } else if (Array.isArray(nodes)) {\n        this.body.data.nodes = new DataSet();\n        this.body.data.nodes.add(nodes);\n      } else if (!nodes) {\n        this.body.data.nodes = new DataSet();\n      } else {\n        throw new TypeError('Array or DataSet expected');\n      }\n\n      if (oldNodesData) {\n        // unsubscribe from old dataset\n        util.forEach(this.nodesListeners, function (callback, event) {\n          oldNodesData.off(event, callback);\n        });\n      }\n\n      // remove drawn nodes\n      this.body.nodes = {};\n\n      if (this.body.data.nodes) {\n        // subscribe to new dataset\n        var me = this;\n        util.forEach(this.nodesListeners, function (callback, event) {\n          me.body.data.nodes.on(event, callback);\n        });\n\n        // draw all new nodes\n        var ids = this.body.data.nodes.getIds();\n        this.add(ids, true);\n      }\n\n      if (doNotEmit === false) {\n        this.body.emitter.emit('_dataChanged');\n      }\n    }\n\n    /**\n     * Add nodes\n     * @param {number[] | string[]} ids\n     * @param {boolean} [doNotEmit=false]\n     * @private\n     */\n\n  }, {\n    key: 'add',\n    value: function add(ids) {\n      var doNotEmit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n      var id = void 0;\n      var newNodes = [];\n      for (var i = 0; i < ids.length; i++) {\n        id = ids[i];\n        var properties = this.body.data.nodes.get(id);\n        var node = this.create(properties);\n        newNodes.push(node);\n        this.body.nodes[id] = node; // note: this may replace an existing node\n      }\n\n      this.layoutEngine.positionInitially(newNodes);\n\n      if (doNotEmit === false) {\n        this.body.emitter.emit('_dataChanged');\n      }\n    }\n\n    /**\n     * Update existing nodes, or create them when not yet existing\n     * @param {number[] | string[]} ids id's of changed nodes\n     * @param {Array} changedData array with changed data\n     * @param {Array|undefined} oldData optional; array with previous data\n     * @private\n     */\n\n  }, {\n    key: 'update',\n    value: function update(ids, changedData, oldData) {\n      var nodes = this.body.nodes;\n      var dataChanged = false;\n      for (var i = 0; i < ids.length; i++) {\n        var id = ids[i];\n        var node = nodes[id];\n        var data = changedData[i];\n        if (node !== undefined) {\n          // update node\n          if (node.setOptions(data)) {\n            dataChanged = true;\n          }\n        } else {\n          dataChanged = true;\n          // create node\n          node = this.create(data);\n          nodes[id] = node;\n        }\n      }\n\n      if (!dataChanged && oldData !== undefined) {\n        // Check for any changes which should trigger a layout recalculation\n        // For now, this is just 'level' for hierarchical layout\n        // Assumption: old and new data arranged in same order; at time of writing, this holds.\n        dataChanged = changedData.some(function (newValue, index) {\n          var oldValue = oldData[index];\n          return oldValue && oldValue.level !== newValue.level;\n        });\n      }\n\n      if (dataChanged === true) {\n        this.body.emitter.emit('_dataChanged');\n      } else {\n        this.body.emitter.emit('_dataUpdated');\n      }\n    }\n\n    /**\n     * Remove existing nodes. If nodes do not exist, the method will just ignore it.\n     * @param {number[] | string[]} ids\n     * @private\n     */\n\n  }, {\n    key: 'remove',\n    value: function remove(ids) {\n      var nodes = this.body.nodes;\n\n      for (var i = 0; i < ids.length; i++) {\n        var id = ids[i];\n        delete nodes[id];\n      }\n\n      this.body.emitter.emit('_dataChanged');\n    }\n\n    /**\n     * create a node\n     * @param {Object} properties\n     * @param {class} [constructorClass=Node.default]\n     * @returns {*}\n     */\n\n  }, {\n    key: 'create',\n    value: function create(properties) {\n      var constructorClass = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Node;\n\n      return new constructorClass(properties, this.body, this.images, this.groups, this.options, this.defaultOptions);\n    }\n\n    /**\n     *\n     * @param {boolean} [clearPositions=false]\n     */\n\n  }, {\n    key: 'refresh',\n    value: function refresh() {\n      var _this3 = this;\n\n      var clearPositions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n      util.forEach(this.body.nodes, function (node, nodeId) {\n        var data = _this3.body.data.nodes.get(nodeId);\n        if (data !== undefined) {\n          if (clearPositions === true) {\n            node.setOptions({ x: null, y: null });\n          }\n          node.setOptions({ fixed: false });\n          node.setOptions(data);\n        }\n      });\n    }\n\n    /**\n     * Returns the positions of the nodes.\n     * @param {Array.<Node.id>|String} [ids]  --> optional, can be array of nodeIds, can be string\n     * @returns {{}}\n     */\n\n  }, {\n    key: 'getPositions',\n    value: function getPositions(ids) {\n      var dataArray = {};\n      if (ids !== undefined) {\n        if (Array.isArray(ids) === true) {\n          for (var i = 0; i < ids.length; i++) {\n            if (this.body.nodes[ids[i]] !== undefined) {\n              var node = this.body.nodes[ids[i]];\n              dataArray[ids[i]] = { x: Math.round(node.x), y: Math.round(node.y) };\n            }\n          }\n        } else {\n          if (this.body.nodes[ids] !== undefined) {\n            var _node = this.body.nodes[ids];\n            dataArray[ids] = { x: Math.round(_node.x), y: Math.round(_node.y) };\n          }\n        }\n      } else {\n        for (var _i = 0; _i < this.body.nodeIndices.length; _i++) {\n          var _node2 = this.body.nodes[this.body.nodeIndices[_i]];\n          dataArray[this.body.nodeIndices[_i]] = {\n            x: Math.round(_node2.x),\n            y: Math.round(_node2.y)\n          };\n        }\n      }\n      return dataArray;\n    }\n\n    /**\n     * Load the XY positions of the nodes into the dataset.\n     */\n\n  }, {\n    key: 'storePositions',\n    value: function storePositions() {\n      // todo: add support for clusters and hierarchical.\n      var dataArray = [];\n      var dataset = this.body.data.nodes.getDataSet();\n\n      for (var nodeId in dataset._data) {\n        if (dataset._data.hasOwnProperty(nodeId)) {\n          var node = this.body.nodes[nodeId];\n          if (dataset._data[nodeId].x != Math.round(node.x) || dataset._data[nodeId].y != Math.round(node.y)) {\n            dataArray.push({\n              id: node.id,\n              x: Math.round(node.x),\n              y: Math.round(node.y)\n            });\n          }\n        }\n      }\n      dataset.update(dataArray);\n    }\n\n    /**\n     * get the bounding box of a node.\n     * @param {Node.id} nodeId\n     * @returns {j|*}\n     */\n\n  }, {\n    key: 'getBoundingBox',\n    value: function getBoundingBox(nodeId) {\n      if (this.body.nodes[nodeId] !== undefined) {\n        return this.body.nodes[nodeId].shape.boundingBox;\n      }\n    }\n\n    /**\n     * Get the Ids of nodes connected to this node.\n     * @param {Node.id} nodeId\n     * @param {'to'|'from'|undefined} direction values 'from' and 'to' select respectively parent and child nodes only.\n     *                                          Any other value returns both parent and child nodes.\n     * @returns {Array}\n     */\n\n  }, {\n    key: 'getConnectedNodes',\n    value: function getConnectedNodes(nodeId, direction) {\n      var nodeList = [];\n      if (this.body.nodes[nodeId] !== undefined) {\n        var node = this.body.nodes[nodeId];\n        var nodeObj = {}; // used to quickly check if node already exists\n        for (var i = 0; i < node.edges.length; i++) {\n          var edge = node.edges[i];\n          if (direction !== 'to' && edge.toId == node.id) {\n            // these are double equals since ids can be numeric or string\n            if (nodeObj[edge.fromId] === undefined) {\n              nodeList.push(edge.fromId);\n              nodeObj[edge.fromId] = true;\n            }\n          } else if (direction !== 'from' && edge.fromId == node.id) {\n            // these are double equals since ids can be numeric or string\n            if (nodeObj[edge.toId] === undefined) {\n              nodeList.push(edge.toId);\n              nodeObj[edge.toId] = true;\n            }\n          }\n        }\n      }\n      return nodeList;\n    }\n\n    /**\n     * Get the ids of the edges connected to this node.\n     * @param {Node.id} nodeId\n     * @returns {*}\n     */\n\n  }, {\n    key: 'getConnectedEdges',\n    value: function getConnectedEdges(nodeId) {\n      var edgeList = [];\n      if (this.body.nodes[nodeId] !== undefined) {\n        var node = this.body.nodes[nodeId];\n        for (var i = 0; i < node.edges.length; i++) {\n          edgeList.push(node.edges[i].id);\n        }\n      } else {\n        console.log('NodeId provided for getConnectedEdges does not exist. Provided: ', nodeId);\n      }\n      return edgeList;\n    }\n\n    /**\n     * Move a node.\n     *\n     * @param {Node.id} nodeId\n     * @param {number} x\n     * @param {number} y\n     */\n\n  }, {\n    key: 'moveNode',\n    value: function moveNode(nodeId, x, y) {\n      var _this4 = this;\n\n      if (this.body.nodes[nodeId] !== undefined) {\n        this.body.nodes[nodeId].x = Number(x);\n        this.body.nodes[nodeId].y = Number(y);\n        setTimeout(function () {\n          _this4.body.emitter.emit('startSimulation');\n        }, 0);\n      } else {\n        console.log('Node id supplied to moveNode does not exist. Provided: ', nodeId);\n      }\n    }\n  }]);\n  return NodesHandler;\n}();\n\nexports['default'] = NodesHandler;\n\n/***/ }),\n/* 136 */\n/***/ (function(module, exports, __nested_webpack_require_724960__) {\n\nmodule.exports = { \"default\": __nested_webpack_require_724960__(137), __esModule: true };\n\n/***/ }),\n/* 137 */\n/***/ (function(module, exports, __nested_webpack_require_725114__) {\n\n__nested_webpack_require_725114__(37);\n__nested_webpack_require_725114__(47);\nmodule.exports = __nested_webpack_require_725114__(138);\n\n\n/***/ }),\n/* 138 */\n/***/ (function(module, exports, __nested_webpack_require_725286__) {\n\nvar classof = __nested_webpack_require_725286__(67);\nvar ITERATOR = __nested_webpack_require_725286__(8)('iterator');\nvar Iterators = __nested_webpack_require_725286__(25);\nmodule.exports = __nested_webpack_require_725286__(6).isIterable = function (it) {\n  var O = Object(it);\n  return O[ITERATOR] !== undefined\n    || '@@iterator' in O\n    // eslint-disable-next-line no-prototype-builtins\n    || Iterators.hasOwnProperty(classof(O));\n};\n\n\n/***/ }),\n/* 139 */\n/***/ (function(module, exports, __nested_webpack_require_725749__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _slicedToArray2 = __nested_webpack_require_725749__(15);\n\nvar _slicedToArray3 = _interopRequireDefault(_slicedToArray2);\n\nvar _classCallCheck2 = __nested_webpack_require_725749__(0);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __nested_webpack_require_725749__(1);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar LabelAccumulator = __nested_webpack_require_725749__(140)['default'];\nvar ComponentUtil = __nested_webpack_require_725749__(35)['default'];\n\n// Hash of prepared regexp's for tags\nvar tagPattern = {\n  // HTML\n  '<b>': /<b>/,\n  '<i>': /<i>/,\n  '<code>': /<code>/,\n  '</b>': /<\\/b>/,\n  '</i>': /<\\/i>/,\n  '</code>': /<\\/code>/,\n  // Markdown\n  '*': /\\*/, // bold\n  _: /\\_/, // ital\n  '`': /`/, // mono\n  afterBold: /[^\\*]/,\n  afterItal: /[^_]/,\n  afterMono: /[^`]/\n\n  /**\n   * Internal helper class for parsing the markup tags for HTML and Markdown.\n   *\n   * NOTE: Sequences of tabs and spaces are reduced to single space.\n   *       Scan usage of `this.spacing` within method\n   */\n};\nvar MarkupAccumulator = function () {\n  /**\n   * Create an instance\n   *\n   * @param {string} text  text to parse for markup\n   */\n  function MarkupAccumulator(text) {\n    (0, _classCallCheck3['default'])(this, MarkupAccumulator);\n\n    this.text = text;\n    this.bold = false;\n    this.ital = false;\n    this.mono = false;\n    this.spacing = false;\n    this.position = 0;\n    this.buffer = '';\n    this.modStack = [];\n\n    this.blocks = [];\n  }\n\n  /**\n   * Return the mod label currently on the top of the stack\n   *\n   * @returns {string}  label of topmost mod\n   * @private\n   */\n\n\n  (0, _createClass3['default'])(MarkupAccumulator, [{\n    key: 'mod',\n    value: function mod() {\n      return this.modStack.length === 0 ? 'normal' : this.modStack[0];\n    }\n\n    /**\n     * Return the mod label currently active\n     *\n     * @returns {string}  label of active mod\n     * @private\n     */\n\n  }, {\n    key: 'modName',\n    value: function modName() {\n      if (this.modStack.length === 0) return 'normal';else if (this.modStack[0] === 'mono') return 'mono';else {\n        if (this.bold && this.ital) {\n          return 'boldital';\n        } else if (this.bold) {\n          return 'bold';\n        } else if (this.ital) {\n          return 'ital';\n        }\n      }\n    }\n\n    /**\n     * @private\n     */\n\n  }, {\n    key: 'emitBlock',\n    value: function emitBlock() {\n      if (this.spacing) {\n        this.add(' ');\n        this.spacing = false;\n      }\n      if (this.buffer.length > 0) {\n        this.blocks.push({ text: this.buffer, mod: this.modName() });\n        this.buffer = '';\n      }\n    }\n\n    /**\n     * Output text to buffer\n     *\n     * @param {string} text  text to add\n     * @private\n     */\n\n  }, {\n    key: 'add',\n    value: function add(text) {\n      if (text === ' ') {\n        this.spacing = true;\n      }\n      if (this.spacing) {\n        this.buffer += ' ';\n        this.spacing = false;\n      }\n      if (text != ' ') {\n        this.buffer += text;\n      }\n    }\n\n    /**\n     * Handle parsing of whitespace\n     *\n     * @param {string} ch  the character to check\n     * @returns {boolean} true if the character was processed as whitespace, false otherwise\n     */\n\n  }, {\n    key: 'parseWS',\n    value: function parseWS(ch) {\n      if (/[ \\t]/.test(ch)) {\n        if (!this.mono) {\n          this.spacing = true;\n        } else {\n          this.add(ch);\n        }\n        return true;\n      }\n\n      return false;\n    }\n\n    /**\n     * @param {string} tagName  label for block type to set\n     * @private\n     */\n\n  }, {\n    key: 'setTag',\n    value: function setTag(tagName) {\n      this.emitBlock();\n      this[tagName] = true;\n      this.modStack.unshift(tagName);\n    }\n\n    /**\n     * @param {string} tagName  label for block type to unset\n     * @private\n     */\n\n  }, {\n    key: 'unsetTag',\n    value: function unsetTag(tagName) {\n      this.emitBlock();\n      this[tagName] = false;\n      this.modStack.shift();\n    }\n\n    /**\n     * @param {string} tagName label for block type we are currently processing\n     * @param {string|RegExp} tag string to match in text\n     * @returns {boolean} true if the tag was processed, false otherwise\n     */\n\n  }, {\n    key: 'parseStartTag',\n    value: function parseStartTag(tagName, tag) {\n      // Note: if 'mono' passed as tagName, there is a double check here. This is OK\n      if (!this.mono && !this[tagName] && this.match(tag)) {\n        this.setTag(tagName);\n        return true;\n      }\n\n      return false;\n    }\n\n    /**\n     * @param {string|RegExp} tag\n     * @param {number} [advance=true] if set, advance current position in text\n     * @returns {boolean} true if match at given position, false otherwise\n     * @private\n     */\n\n  }, {\n    key: 'match',\n    value: function match(tag) {\n      var advance = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n      var _prepareRegExp = this.prepareRegExp(tag),\n          _prepareRegExp2 = (0, _slicedToArray3['default'])(_prepareRegExp, 2),\n          regExp = _prepareRegExp2[0],\n          length = _prepareRegExp2[1];\n\n      var matched = regExp.test(this.text.substr(this.position, length));\n\n      if (matched && advance) {\n        this.position += length - 1;\n      }\n\n      return matched;\n    }\n\n    /**\n     * @param {string} tagName label for block type we are currently processing\n     * @param {string|RegExp} tag string to match in text\n     * @param {RegExp} [nextTag] regular expression to match for characters *following* the current tag\n     * @returns {boolean} true if the tag was processed, false otherwise\n     */\n\n  }, {\n    key: 'parseEndTag',\n    value: function parseEndTag(tagName, tag, nextTag) {\n      var checkTag = this.mod() === tagName;\n      if (tagName === 'mono') {\n        // special handling for 'mono'\n        checkTag = checkTag && this.mono;\n      } else {\n        checkTag = checkTag && !this.mono;\n      }\n\n      if (checkTag && this.match(tag)) {\n        if (nextTag !== undefined) {\n          // Purpose of the following match is to prevent a direct unset/set of a given tag\n          // E.g. '*bold **still bold*' => '*bold still bold*'\n          if (this.position === this.text.length - 1 || this.match(nextTag, false)) {\n            this.unsetTag(tagName);\n          }\n        } else {\n          this.unsetTag(tagName);\n        }\n\n        return true;\n      }\n\n      return false;\n    }\n\n    /**\n     * @param {string|RegExp} tag  string to match in text\n     * @param {value} value  string to replace tag with, if found at current position\n     * @returns {boolean} true if the tag was processed, false otherwise\n     */\n\n  }, {\n    key: 'replace',\n    value: function replace(tag, value) {\n      if (this.match(tag)) {\n        this.add(value);\n        this.position += length - 1;\n        return true;\n      }\n\n      return false;\n    }\n\n    /**\n     * Create a regular expression for the tag if it isn't already one.\n     *\n     * The return value is an array `[RegExp, number]`, with exactly two value, where:\n     *  - RegExp is the regular expression to use\n     *  - number is the lenth of the input string to match\n     *\n     * @param {string|RegExp} tag  string to match in text\n     * @returns {Array}  regular expression to use and length of input string to match\n     * @private\n     */\n\n  }, {\n    key: 'prepareRegExp',\n    value: function prepareRegExp(tag) {\n      var length = void 0;\n      var regExp = void 0;\n      if (tag instanceof RegExp) {\n        regExp = tag;\n        length = 1; // ASSUMPTION: regexp only tests one character\n      } else {\n        // use prepared regexp if present\n        var prepared = tagPattern[tag];\n        if (prepared !== undefined) {\n          regExp = prepared;\n        } else {\n          regExp = new RegExp(tag);\n        }\n\n        length = tag.length;\n      }\n\n      return [regExp, length];\n    }\n  }]);\n  return MarkupAccumulator;\n}();\n\n/**\n * Helper class for Label which explodes the label text into lines and blocks within lines\n *\n * @private\n */\n\n\nvar LabelSplitter = function () {\n  /**\n   * @param {CanvasRenderingContext2D} ctx Canvas rendering context\n   * @param {Label} parent reference to the Label instance using current instance\n   * @param {boolean} selected\n   * @param {boolean} hover\n   */\n  function LabelSplitter(ctx, parent, selected, hover) {\n    var _this = this;\n\n    (0, _classCallCheck3['default'])(this, LabelSplitter);\n\n    this.ctx = ctx;\n    this.parent = parent;\n\n    /**\n     * Callback to determine text width; passed to LabelAccumulator instance\n     *\n     * @param  {String} text string to determine width of\n     * @param  {String} mod  font type to use for this text\n     * @return {Object} { width, values} width in pixels and font attributes\n     */\n    var textWidth = function textWidth(text, mod) {\n      if (text === undefined) return 0;\n\n      // TODO: This can be done more efficiently with caching\n      var values = _this.parent.getFormattingValues(ctx, selected, hover, mod);\n\n      var width = 0;\n      if (text !== '') {\n        // NOTE: The following may actually be *incorrect* for the mod fonts!\n        //       This returns the size with a regular font, bold etc. may\n        //       have different sizes.\n        var measure = _this.ctx.measureText(text);\n        width = measure.width;\n      }\n\n      return { width: width, values: values };\n    };\n\n    this.lines = new LabelAccumulator(textWidth);\n  }\n\n  /**\n   * Split passed text of a label into lines and blocks.\n   *\n   * # NOTE\n   *\n   * The handling of spacing is option dependent:\n   *\n   * - if `font.multi : false`, all spaces are retained\n   * - if `font.multi : true`, every sequence of spaces is compressed to a single space\n   *\n   * This might not be the best way to do it, but this is as it has been working till now.\n   * In order not to break existing functionality, for the time being this behaviour will\n   * be retained in any code changes.\n   *\n   * @param {string} text  text to split\n   * @returns {Array<line>}\n   */\n\n\n  (0, _createClass3['default'])(LabelSplitter, [{\n    key: 'process',\n    value: function process(text) {\n      if (!ComponentUtil.isValidLabel(text)) {\n        return this.lines.finalize();\n      }\n\n      var font = this.parent.fontOptions;\n\n      // Normalize the end-of-line's to a single representation - order important\n      text = text.replace(/\\r\\n/g, '\\n'); // Dos EOL's\n      text = text.replace(/\\r/g, '\\n'); // Mac EOL's\n\n      // Note that at this point, there can be no \\r's in the text.\n      // This is used later on splitStringIntoLines() to split multifont texts.\n\n      var nlLines = String(text).split('\\n');\n      var lineCount = nlLines.length;\n\n      if (font.multi) {\n        // Multi-font case: styling tags active\n        for (var i = 0; i < lineCount; i++) {\n          var blocks = this.splitBlocks(nlLines[i], font.multi);\n          // Post: Sequences of tabs and spaces are reduced to single space\n\n          if (blocks === undefined) continue;\n\n          if (blocks.length === 0) {\n            this.lines.newLine('');\n            continue;\n          }\n\n          if (font.maxWdt > 0) {\n            // widthConstraint.maximum defined\n            //console.log('Running widthConstraint multi, max: ' + this.fontOptions.maxWdt);\n            for (var j = 0; j < blocks.length; j++) {\n              var mod = blocks[j].mod;\n              var _text = blocks[j].text;\n              this.splitStringIntoLines(_text, mod, true);\n            }\n          } else {\n            // widthConstraint.maximum NOT defined\n            for (var _j = 0; _j < blocks.length; _j++) {\n              var _mod = blocks[_j].mod;\n              var _text2 = blocks[_j].text;\n              this.lines.append(_text2, _mod);\n            }\n          }\n\n          this.lines.newLine();\n        }\n      } else {\n        // Single-font case\n        if (font.maxWdt > 0) {\n          // widthConstraint.maximum defined\n          // console.log('Running widthConstraint normal, max: ' + this.fontOptions.maxWdt);\n          for (var _i = 0; _i < lineCount; _i++) {\n            this.splitStringIntoLines(nlLines[_i]);\n          }\n        } else {\n          // widthConstraint.maximum NOT defined\n          for (var _i2 = 0; _i2 < lineCount; _i2++) {\n            this.lines.newLine(nlLines[_i2]);\n          }\n        }\n      }\n\n      return this.lines.finalize();\n    }\n\n    /**\n     * normalize the markup system\n     *\n     * @param {boolean|'md'|'markdown'|'html'} markupSystem\n     * @returns {string}\n     */\n\n  }, {\n    key: 'decodeMarkupSystem',\n    value: function decodeMarkupSystem(markupSystem) {\n      var system = 'none';\n      if (markupSystem === 'markdown' || markupSystem === 'md') {\n        system = 'markdown';\n      } else if (markupSystem === true || markupSystem === 'html') {\n        system = 'html';\n      }\n      return system;\n    }\n\n    /**\n     *\n     * @param {string} text\n     * @returns {Array}\n     */\n\n  }, {\n    key: 'splitHtmlBlocks',\n    value: function splitHtmlBlocks(text) {\n      var s = new MarkupAccumulator(text);\n\n      var parseEntities = function parseEntities(ch) {\n        if (/&/.test(ch)) {\n          var parsed = s.replace(s.text, '&lt;', '<') || s.replace(s.text, '&amp;', '&');\n\n          if (!parsed) {\n            s.add('&');\n          }\n\n          return true;\n        }\n\n        return false;\n      };\n\n      while (s.position < s.text.length) {\n        var ch = s.text.charAt(s.position);\n\n        var parsed = s.parseWS(ch) || /</.test(ch) && (s.parseStartTag('bold', '<b>') || s.parseStartTag('ital', '<i>') || s.parseStartTag('mono', '<code>') || s.parseEndTag('bold', '</b>') || s.parseEndTag('ital', '</i>') || s.parseEndTag('mono', '</code>')) || parseEntities(ch);\n\n        if (!parsed) {\n          s.add(ch);\n        }\n        s.position++;\n      }\n      s.emitBlock();\n      return s.blocks;\n    }\n\n    /**\n     *\n     * @param {string} text\n     * @returns {Array}\n     */\n\n  }, {\n    key: 'splitMarkdownBlocks',\n    value: function splitMarkdownBlocks(text) {\n      var _this2 = this;\n\n      var s = new MarkupAccumulator(text);\n      var beginable = true;\n\n      var parseOverride = function parseOverride(ch) {\n        if (/\\\\/.test(ch)) {\n          if (s.position < _this2.text.length + 1) {\n            s.position++;\n            ch = _this2.text.charAt(s.position);\n            if (/ \\t/.test(ch)) {\n              s.spacing = true;\n            } else {\n              s.add(ch);\n              beginable = false;\n            }\n          }\n\n          return true;\n        }\n\n        return false;\n      };\n\n      while (s.position < s.text.length) {\n        var ch = s.text.charAt(s.position);\n\n        var parsed = s.parseWS(ch) || parseOverride(ch) || (beginable || s.spacing) && (s.parseStartTag('bold', '*') || s.parseStartTag('ital', '_') || s.parseStartTag('mono', '`')) || s.parseEndTag('bold', '*', 'afterBold') || s.parseEndTag('ital', '_', 'afterItal') || s.parseEndTag('mono', '`', 'afterMono');\n\n        if (!parsed) {\n          s.add(ch);\n          beginable = false;\n        }\n        s.position++;\n      }\n      s.emitBlock();\n      return s.blocks;\n    }\n\n    /**\n     * Explodes a piece of text into single-font blocks using a given markup\n     *\n     * @param {string} text\n     * @param {boolean|'md'|'markdown'|'html'} markupSystem\n     * @returns {Array.<{text: string, mod: string}>}\n     * @private\n     */\n\n  }, {\n    key: 'splitBlocks',\n    value: function splitBlocks(text, markupSystem) {\n      var system = this.decodeMarkupSystem(markupSystem);\n      if (system === 'none') {\n        return [{\n          text: text,\n          mod: 'normal'\n        }];\n      } else if (system === 'markdown') {\n        return this.splitMarkdownBlocks(text);\n      } else if (system === 'html') {\n        return this.splitHtmlBlocks(text);\n      }\n    }\n\n    /**\n     * @param {string} text\n     * @returns {boolean} true if text length over the current max with\n     * @private\n     */\n\n  }, {\n    key: 'overMaxWidth',\n    value: function overMaxWidth(text) {\n      var width = this.ctx.measureText(text).width;\n      return this.lines.curWidth() + width > this.parent.fontOptions.maxWdt;\n    }\n\n    /**\n     * Determine the longest part of the sentence which still fits in the\n     * current max width.\n     *\n     * @param {Array} words  Array of strings signifying a text lines\n     * @return {number}      index of first item in string making string go over max\n     * @private\n     */\n\n  }, {\n    key: 'getLongestFit',\n    value: function getLongestFit(words) {\n      var text = '';\n      var w = 0;\n\n      while (w < words.length) {\n        var pre = text === '' ? '' : ' ';\n        var newText = text + pre + words[w];\n\n        if (this.overMaxWidth(newText)) break;\n        text = newText;\n        w++;\n      }\n\n      return w;\n    }\n\n    /**\n     * Determine the longest part of the string which still fits in the\n     * current max width.\n     *\n     * @param {Array} words Array of strings signifying a text lines\n     * @return {number} index of first item in string making string go over max\n     */\n\n  }, {\n    key: 'getLongestFitWord',\n    value: function getLongestFitWord(words) {\n      var w = 0;\n\n      while (w < words.length) {\n        if (this.overMaxWidth(words.slice(0, w))) break;\n        w++;\n      }\n\n      return w;\n    }\n\n    /**\n     * Split the passed text into lines, according to width constraint (if any).\n     *\n     * The method assumes that the input string is a single line, i.e. without lines break.\n     *\n     * This method retains spaces, if still present (case `font.multi: false`).\n     * A space which falls on an internal line break, will be replaced by a newline.\n     * There is no special handling of tabs; these go along with the flow.\n     *\n     * @param {string} str\n     * @param {string} [mod='normal']\n     * @param {boolean} [appendLast=false]\n     * @private\n     */\n\n  }, {\n    key: 'splitStringIntoLines',\n    value: function splitStringIntoLines(str) {\n      var mod = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'normal';\n      var appendLast = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n      // Still-present spaces are relevant, retain them\n      str = str.replace(/^( +)/g, '$1\\r');\n      str = str.replace(/([^\\r][^ ]*)( +)/g, '$1\\r$2\\r');\n      var words = str.split('\\r');\n\n      while (words.length > 0) {\n        var w = this.getLongestFit(words);\n\n        if (w === 0) {\n          // Special case: the first word is already larger than the max width.\n          var word = words[0];\n\n          // Break the word to the largest part that fits the line\n          var x = this.getLongestFitWord(word);\n          this.lines.newLine(word.slice(0, x), mod);\n\n          // Adjust the word, so that the rest will be done next iteration\n          words[0] = word.slice(x);\n        } else {\n          // skip any space that is replaced by a newline\n          var newW = w;\n          if (words[w - 1] === ' ') {\n            w--;\n          } else if (words[newW] === ' ') {\n            newW++;\n          }\n\n          var text = words.slice(0, w).join('');\n\n          if (w == words.length && appendLast) {\n            this.lines.append(text, mod);\n          } else {\n            this.lines.newLine(text, mod);\n          }\n\n          // Adjust the word, so that the rest will be done next iteration\n          words = words.slice(newW);\n        }\n      }\n    }\n  }]);\n  return LabelSplitter;\n}();\n\nexports['default'] = LabelSplitter;\n\n/***/ }),\n/* 140 */\n/***/ (function(module, exports, __nested_webpack_require_745539__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _assign = __nested_webpack_require_745539__(78);\n\nvar _assign2 = _interopRequireDefault(_assign);\n\nvar _classCallCheck2 = __nested_webpack_require_745539__(0);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __nested_webpack_require_745539__(1);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\n/**\n * Callback to determine text dimensions, using the parent label settings.\n * @callback MeasureText\n * @param {text} text\n * @param {text} mod\n * @return {Object} { width, values} width in pixels and font attributes\n */\n\n/**\n * Helper class for Label which collects results of splitting labels into lines and blocks.\n *\n * @private\n */\nvar LabelAccumulator = function () {\n  /**\n   * @param {MeasureText} measureText\n   */\n  function LabelAccumulator(measureText) {\n    (0, _classCallCheck3['default'])(this, LabelAccumulator);\n\n    this.measureText = measureText;\n    this.current = 0;\n    this.width = 0;\n    this.height = 0;\n    this.lines = [];\n  }\n\n  /**\n   * Append given text to the given line.\n   *\n   * @param {number}  l    index of line to add to\n   * @param {string}  text string to append to line\n   * @param {'bold'|'ital'|'boldital'|'mono'|'normal'} [mod='normal']\n   * @private\n   */\n\n\n  (0, _createClass3['default'])(LabelAccumulator, [{\n    key: '_add',\n    value: function _add(l, text) {\n      var mod = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'normal';\n\n      if (this.lines[l] === undefined) {\n        this.lines[l] = {\n          width: 0,\n          height: 0,\n          blocks: []\n        };\n      }\n\n      // We still need to set a block for undefined and empty texts, hence return at this point\n      // This is necessary because we don't know at this point if we're at the\n      // start of an empty line or not.\n      // To compensate, empty blocks are removed in `finalize()`.\n      //\n      // Empty strings should still have a height\n      var tmpText = text;\n      if (text === undefined || text === '') tmpText = ' ';\n\n      // Determine width and get the font properties\n      var result = this.measureText(tmpText, mod);\n      var block = (0, _assign2['default'])({}, result.values);\n      block.text = text;\n      block.width = result.width;\n      block.mod = mod;\n\n      if (text === undefined || text === '') {\n        block.width = 0;\n      }\n\n      this.lines[l].blocks.push(block);\n\n      // Update the line width. We need this for determining if a string goes over max width\n      this.lines[l].width += block.width;\n    }\n\n    /**\n     * Returns the width in pixels of the current line.\n     *\n     * @returns {number}\n     */\n\n  }, {\n    key: 'curWidth',\n    value: function curWidth() {\n      var line = this.lines[this.current];\n      if (line === undefined) return 0;\n\n      return line.width;\n    }\n\n    /**\n     * Add text in block to current line\n     *\n     * @param {string} text\n     * @param {'bold'|'ital'|'boldital'|'mono'|'normal'} [mod='normal']\n     */\n\n  }, {\n    key: 'append',\n    value: function append(text) {\n      var mod = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'normal';\n\n      this._add(this.current, text, mod);\n    }\n\n    /**\n     * Add text in block to current line and start a new line\n     *\n     * @param {string} text\n     * @param {'bold'|'ital'|'boldital'|'mono'|'normal'} [mod='normal']\n     */\n\n  }, {\n    key: 'newLine',\n    value: function newLine(text) {\n      var mod = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'normal';\n\n      this._add(this.current, text, mod);\n      this.current++;\n    }\n\n    /**\n     * Determine and set the heights of all the lines currently contained in this instance\n     *\n     * Note that width has already been set.\n     *\n     * @private\n     */\n\n  }, {\n    key: 'determineLineHeights',\n    value: function determineLineHeights() {\n      for (var k = 0; k < this.lines.length; k++) {\n        var line = this.lines[k];\n\n        // Looking for max height of blocks in line\n        var height = 0;\n\n        if (line.blocks !== undefined) {\n          // Can happen if text contains e.g. '\\n '\n          for (var l = 0; l < line.blocks.length; l++) {\n            var block = line.blocks[l];\n\n            if (height < block.height) {\n              height = block.height;\n            }\n          }\n        }\n\n        line.height = height;\n      }\n    }\n\n    /**\n     * Determine the full size of the label text, as determined by current lines and blocks\n     *\n     * @private\n     */\n\n  }, {\n    key: 'determineLabelSize',\n    value: function determineLabelSize() {\n      var width = 0;\n      var height = 0;\n      for (var k = 0; k < this.lines.length; k++) {\n        var line = this.lines[k];\n\n        if (line.width > width) {\n          width = line.width;\n        }\n        height += line.height;\n      }\n\n      this.width = width;\n      this.height = height;\n    }\n\n    /**\n     * Remove all empty blocks and empty lines we don't need\n     *\n     * This must be done after the width/height determination,\n     * so that these are set properly for processing here.\n     *\n     * @returns {Array<Line>} Lines with empty blocks (and some empty lines) removed\n     * @private\n     */\n\n  }, {\n    key: 'removeEmptyBlocks',\n    value: function removeEmptyBlocks() {\n      var tmpLines = [];\n      for (var k = 0; k < this.lines.length; k++) {\n        var line = this.lines[k];\n\n        // Note: an empty line in between text has width zero but is still relevant to layout.\n        // So we can't use width for testing empty line here\n        if (line.blocks.length === 0) continue;\n\n        // Discard final empty line always\n        if (k === this.lines.length - 1) {\n          if (line.width === 0) continue;\n        }\n\n        var tmpLine = {};\n        (0, _assign2['default'])(tmpLine, line);\n        tmpLine.blocks = [];\n\n        var firstEmptyBlock = void 0;\n        var tmpBlocks = [];\n        for (var l = 0; l < line.blocks.length; l++) {\n          var block = line.blocks[l];\n          if (block.width !== 0) {\n            tmpBlocks.push(block);\n          } else {\n            if (firstEmptyBlock === undefined) {\n              firstEmptyBlock = block;\n            }\n          }\n        }\n\n        // Ensure that there is *some* text present\n        if (tmpBlocks.length === 0 && firstEmptyBlock !== undefined) {\n          tmpBlocks.push(firstEmptyBlock);\n        }\n\n        tmpLine.blocks = tmpBlocks;\n\n        tmpLines.push(tmpLine);\n      }\n\n      return tmpLines;\n    }\n\n    /**\n     * Set the sizes for all lines and the whole thing.\n     *\n     * @returns {{width: (number|*), height: (number|*), lines: Array}}\n     */\n\n  }, {\n    key: 'finalize',\n    value: function finalize() {\n      //console.log(JSON.stringify(this.lines, null, 2));\n\n      this.determineLineHeights();\n      this.determineLabelSize();\n      var tmpLines = this.removeEmptyBlocks();\n\n      // Return a simple hash object for further processing.\n      return {\n        width: this.width,\n        height: this.height,\n        lines: tmpLines\n      };\n    }\n  }]);\n  return LabelAccumulator;\n}();\n\nexports['default'] = LabelAccumulator;\n\n/***/ }),\n/* 141 */\n/***/ (function(module, exports, __nested_webpack_require_752922__) {\n\n__nested_webpack_require_752922__(142);\nmodule.exports = __nested_webpack_require_752922__(6).Object.assign;\n\n\n/***/ }),\n/* 142 */\n/***/ (function(module, exports, __nested_webpack_require_753082__) {\n\n// 19.1.3.1 Object.assign(target, source)\nvar $export = __nested_webpack_require_753082__(11);\n\n$export($export.S + $export.F, 'Object', { assign: __nested_webpack_require_753082__(143) });\n\n\n/***/ }),\n/* 143 */\n/***/ (function(module, exports, __nested_webpack_require_753323__) {\n\n\"use strict\";\n\n// 19.1.2.1 Object.assign(target, source, ...)\nvar getKeys = __nested_webpack_require_753323__(26);\nvar gOPS = __nested_webpack_require_753323__(50);\nvar pIE = __nested_webpack_require_753323__(32);\nvar toObject = __nested_webpack_require_753323__(30);\nvar IObject = __nested_webpack_require_753323__(59);\nvar $assign = Object.assign;\n\n// should work with symbols and should have deterministic property order (V8 bug)\nmodule.exports = !$assign || __nested_webpack_require_753323__(22)(function () {\n  var A = {};\n  var B = {};\n  // eslint-disable-next-line no-undef\n  var S = Symbol();\n  var K = 'abcdefghijklmnopqrst';\n  A[S] = 7;\n  K.split('').forEach(function (k) { B[k] = k; });\n  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;\n}) ? function assign(target, source) { // eslint-disable-line no-unused-vars\n  var T = toObject(target);\n  var aLen = arguments.length;\n  var index = 1;\n  var getSymbols = gOPS.f;\n  var isEnum = pIE.f;\n  while (aLen > index) {\n    var S = IObject(arguments[index++]);\n    var keys = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S);\n    var length = keys.length;\n    var j = 0;\n    var key;\n    while (length > j) if (isEnum.call(S, key = keys[j++])) T[key] = S[key];\n  } return T;\n} : $assign;\n\n\n/***/ }),\n/* 144 */\n/***/ (function(module, exports, __nested_webpack_require_754599__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _getPrototypeOf = __nested_webpack_require_754599__(3);\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _classCallCheck2 = __nested_webpack_require_754599__(0);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __nested_webpack_require_754599__(1);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = __nested_webpack_require_754599__(4);\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = __nested_webpack_require_754599__(5);\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _NodeBase2 = __nested_webpack_require_754599__(16);\n\nvar _NodeBase3 = _interopRequireDefault(_NodeBase2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\n/**\n * A Box Node/Cluster shape.\n *\n * @extends NodeBase\n */\nvar Box = function (_NodeBase) {\n  (0, _inherits3['default'])(Box, _NodeBase);\n\n  /**\n   * @param {Object} options\n   * @param {Object} body\n   * @param {Label} labelModule\n   */\n  function Box(options, body, labelModule) {\n    (0, _classCallCheck3['default'])(this, Box);\n\n    var _this = (0, _possibleConstructorReturn3['default'])(this, (Box.__proto__ || (0, _getPrototypeOf2['default'])(Box)).call(this, options, body, labelModule));\n\n    _this._setMargins(labelModule);\n    return _this;\n  }\n\n  /**\n   *\n   * @param {CanvasRenderingContext2D} ctx\n   * @param {boolean} [selected]\n   * @param {boolean} [hover]\n   */\n\n\n  (0, _createClass3['default'])(Box, [{\n    key: 'resize',\n    value: function resize(ctx) {\n      var selected = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.selected;\n      var hover = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.hover;\n\n      if (this.needsRefresh(selected, hover)) {\n        var dimensions = this.getDimensionsFromLabel(ctx, selected, hover);\n\n        this.width = dimensions.width + this.margin.right + this.margin.left;\n        this.height = dimensions.height + this.margin.top + this.margin.bottom;\n        this.radius = this.width / 2;\n      }\n    }\n\n    /**\n     *\n     * @param {CanvasRenderingContext2D} ctx\n     * @param {number} x width\n     * @param {number} y height\n     * @param {boolean} selected\n     * @param {boolean} hover\n     * @param {ArrowOptions} values\n     */\n\n  }, {\n    key: 'draw',\n    value: function draw(ctx, x, y, selected, hover, values) {\n      this.resize(ctx, selected, hover);\n      this.left = x - this.width / 2;\n      this.top = y - this.height / 2;\n\n      this.initContextForDraw(ctx, values);\n      ctx.roundRect(this.left, this.top, this.width, this.height, values.borderRadius);\n      this.performFill(ctx, values);\n\n      this.updateBoundingBox(x, y, ctx, selected, hover);\n      this.labelModule.draw(ctx, this.left + this.textSize.width / 2 + this.margin.left, this.top + this.textSize.height / 2 + this.margin.top, selected, hover);\n    }\n\n    /**\n     *\n     * @param {number} x width\n     * @param {number} y height\n     * @param {CanvasRenderingContext2D} ctx\n     * @param {boolean} selected\n     * @param {boolean} hover\n     */\n\n  }, {\n    key: 'updateBoundingBox',\n    value: function updateBoundingBox(x, y, ctx, selected, hover) {\n      this._updateBoundingBox(x, y, ctx, selected, hover);\n\n      var borderRadius = this.options.shapeProperties.borderRadius; // only effective for box\n      this._addBoundingBoxMargin(borderRadius);\n    }\n\n    /**\n     *\n     * @param {CanvasRenderingContext2D} ctx\n     * @param {number} angle\n     * @returns {number}\n     */\n\n  }, {\n    key: 'distanceToBorder',\n    value: function distanceToBorder(ctx, angle) {\n      this.resize(ctx);\n      var borderWidth = this.options.borderWidth;\n\n      return Math.min(Math.abs(this.width / 2 / Math.cos(angle)), Math.abs(this.height / 2 / Math.sin(angle))) + borderWidth;\n    }\n  }]);\n  return Box;\n}(_NodeBase3['default']);\n\nexports['default'] = Box;\n\n/***/ }),\n/* 145 */\n/***/ (function(module, exports, __nested_webpack_require_758678__) {\n\n__nested_webpack_require_758678__(146);\nmodule.exports = __nested_webpack_require_758678__(6).Object.getPrototypeOf;\n\n\n/***/ }),\n/* 146 */\n/***/ (function(module, exports, __nested_webpack_require_758846__) {\n\n// 19.1.2.9 Object.getPrototypeOf(O)\nvar toObject = __nested_webpack_require_758846__(30);\nvar $getPrototypeOf = __nested_webpack_require_758846__(66);\n\n__nested_webpack_require_758846__(68)('getPrototypeOf', function () {\n  return function getPrototypeOf(it) {\n    return $getPrototypeOf(toObject(it));\n  };\n});\n\n\n/***/ }),\n/* 147 */\n/***/ (function(module, exports, __nested_webpack_require_759196__) {\n\nmodule.exports = { \"default\": __nested_webpack_require_759196__(148), __esModule: true };\n\n/***/ }),\n/* 148 */\n/***/ (function(module, exports, __nested_webpack_require_759350__) {\n\n__nested_webpack_require_759350__(149);\nmodule.exports = __nested_webpack_require_759350__(6).Object.setPrototypeOf;\n\n\n/***/ }),\n/* 149 */\n/***/ (function(module, exports, __nested_webpack_require_759518__) {\n\n// 19.1.3.19 Object.setPrototypeOf(O, proto)\nvar $export = __nested_webpack_require_759518__(11);\n$export($export.S, 'Object', { setPrototypeOf: __nested_webpack_require_759518__(150).set });\n\n\n/***/ }),\n/* 150 */\n/***/ (function(module, exports, __nested_webpack_require_759761__) {\n\n// Works with __proto__ only. Old v8 can't work with null proto objects.\n/* eslint-disable no-proto */\nvar isObject = __nested_webpack_require_759761__(21);\nvar anObject = __nested_webpack_require_759761__(20);\nvar check = function (O, proto) {\n  anObject(O);\n  if (!isObject(proto) && proto !== null) throw TypeError(proto + \": can't set as prototype!\");\n};\nmodule.exports = {\n  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line\n    function (test, buggy, set) {\n      try {\n        set = __nested_webpack_require_759761__(61)(Function.call, __nested_webpack_require_759761__(70).f(Object.prototype, '__proto__').set, 2);\n        set(test, []);\n        buggy = !(test instanceof Array);\n      } catch (e) { buggy = true; }\n      return function setPrototypeOf(O, proto) {\n        check(O, proto);\n        if (buggy) O.__proto__ = proto;\n        else set(O, proto);\n        return O;\n      };\n    }({}, false) : undefined),\n  check: check\n};\n\n\n/***/ }),\n/* 151 */\n/***/ (function(module, exports, __nested_webpack_require_760750__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _getPrototypeOf = __nested_webpack_require_760750__(3);\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _classCallCheck2 = __nested_webpack_require_760750__(0);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __nested_webpack_require_760750__(1);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = __nested_webpack_require_760750__(4);\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = __nested_webpack_require_760750__(5);\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _CircleImageBase2 = __nested_webpack_require_760750__(53);\n\nvar _CircleImageBase3 = _interopRequireDefault(_CircleImageBase2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\n/**\n * A Circle Node/Cluster shape.\n *\n * @extends CircleImageBase\n */\nvar Circle = function (_CircleImageBase) {\n  (0, _inherits3['default'])(Circle, _CircleImageBase);\n\n  /**\n   * @param {Object} options\n   * @param {Object} body\n   * @param {Label} labelModule\n   */\n  function Circle(options, body, labelModule) {\n    (0, _classCallCheck3['default'])(this, Circle);\n\n    var _this = (0, _possibleConstructorReturn3['default'])(this, (Circle.__proto__ || (0, _getPrototypeOf2['default'])(Circle)).call(this, options, body, labelModule));\n\n    _this._setMargins(labelModule);\n    return _this;\n  }\n\n  /**\n   *\n   * @param {CanvasRenderingContext2D} ctx\n   * @param {boolean} [selected]\n   * @param {boolean} [hover]\n   */\n\n\n  (0, _createClass3['default'])(Circle, [{\n    key: 'resize',\n    value: function resize(ctx) {\n      var selected = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.selected;\n      var hover = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.hover;\n\n      if (this.needsRefresh(selected, hover)) {\n        var dimensions = this.getDimensionsFromLabel(ctx, selected, hover);\n\n        var diameter = Math.max(dimensions.width + this.margin.right + this.margin.left, dimensions.height + this.margin.top + this.margin.bottom);\n\n        this.options.size = diameter / 2; // NOTE: this size field only set here, not in Ellipse, Database, Box\n        this.width = diameter;\n        this.height = diameter;\n        this.radius = this.width / 2;\n      }\n    }\n\n    /**\n     *\n     * @param {CanvasRenderingContext2D} ctx\n     * @param {number} x width\n     * @param {number} y height\n     * @param {boolean} selected\n     * @param {boolean} hover\n     * @param {ArrowOptions} values\n     */\n\n  }, {\n    key: 'draw',\n    value: function draw(ctx, x, y, selected, hover, values) {\n      this.resize(ctx, selected, hover);\n      this.left = x - this.width / 2;\n      this.top = y - this.height / 2;\n\n      this._drawRawCircle(ctx, x, y, values);\n\n      this.updateBoundingBox(x, y);\n      this.labelModule.draw(ctx, this.left + this.textSize.width / 2 + this.margin.left, y, selected, hover);\n    }\n\n    /**\n     *\n     * @param {number} x width\n     * @param {number} y height\n     */\n\n  }, {\n    key: 'updateBoundingBox',\n    value: function updateBoundingBox(x, y) {\n      this.boundingBox.top = y - this.options.size;\n      this.boundingBox.left = x - this.options.size;\n      this.boundingBox.right = x + this.options.size;\n      this.boundingBox.bottom = y + this.options.size;\n    }\n\n    // prettier-ignore\n    /**\n     *\n     * @param {CanvasRenderingContext2D} ctx\n     * @param {number} angle - Unused\n     * @returns {number}\n     */\n\n  }, {\n    key: 'distanceToBorder',\n    value: function distanceToBorder(ctx, angle) {\n      // eslint-disable-line no-unused-vars\n      this.resize(ctx);\n      return this.width * 0.5;\n    }\n  }]);\n  return Circle;\n}(_CircleImageBase3['default']);\n\nexports['default'] = Circle;\n\n/***/ }),\n/* 152 */\n/***/ (function(module, exports, __nested_webpack_require_764689__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _getPrototypeOf = __nested_webpack_require_764689__(3);\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _classCallCheck2 = __nested_webpack_require_764689__(0);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __nested_webpack_require_764689__(1);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = __nested_webpack_require_764689__(4);\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = __nested_webpack_require_764689__(5);\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _CircleImageBase2 = __nested_webpack_require_764689__(53);\n\nvar _CircleImageBase3 = _interopRequireDefault(_CircleImageBase2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\n/**\n * A CircularImage Node/Cluster shape.\n *\n * @extends CircleImageBase\n */\nvar CircularImage = function (_CircleImageBase) {\n  (0, _inherits3['default'])(CircularImage, _CircleImageBase);\n\n  /**\n   * @param {Object} options\n   * @param {Object} body\n   * @param {Label} labelModule\n   * @param {Image} imageObj\n   * @param {Image} imageObjAlt\n   */\n  function CircularImage(options, body, labelModule, imageObj, imageObjAlt) {\n    (0, _classCallCheck3['default'])(this, CircularImage);\n\n    var _this = (0, _possibleConstructorReturn3['default'])(this, (CircularImage.__proto__ || (0, _getPrototypeOf2['default'])(CircularImage)).call(this, options, body, labelModule));\n\n    _this.setImages(imageObj, imageObjAlt);\n    return _this;\n  }\n\n  /**\n   *\n   * @param {CanvasRenderingContext2D} ctx\n   * @param {boolean} [selected]\n   * @param {boolean} [hover]\n   */\n\n\n  (0, _createClass3['default'])(CircularImage, [{\n    key: 'resize',\n    value: function resize(ctx) {\n      var selected = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.selected;\n      var hover = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.hover;\n\n      var imageAbsent = this.imageObj.src === undefined || this.imageObj.width === undefined || this.imageObj.height === undefined;\n\n      if (imageAbsent) {\n        var diameter = this.options.size * 2;\n        this.width = diameter;\n        this.height = diameter;\n        this.radius = 0.5 * this.width;\n        return;\n      }\n\n      // At this point, an image is present, i.e. this.imageObj is valid.\n      if (this.needsRefresh(selected, hover)) {\n        this._resizeImage();\n      }\n    }\n\n    /**\n     *\n     * @param {CanvasRenderingContext2D} ctx\n     * @param {number} x width\n     * @param {number} y height\n     * @param {boolean} selected\n     * @param {boolean} hover\n     * @param {ArrowOptions} values\n     */\n\n  }, {\n    key: 'draw',\n    value: function draw(ctx, x, y, selected, hover, values) {\n      this.switchImages(selected);\n      this.resize();\n      this.left = x - this.width / 2;\n      this.top = y - this.height / 2;\n\n      // draw the background circle. IMPORTANT: the stroke in this method is used by the clip method below.\n      this._drawRawCircle(ctx, x, y, values);\n\n      // now we draw in the circle, we save so we can revert the clip operation after drawing.\n      ctx.save();\n      // clip is used to use the stroke in drawRawCircle as an area that we can draw in.\n      ctx.clip();\n      // draw the image\n      this._drawImageAtPosition(ctx, values);\n      // restore so we can again draw on the full canvas\n      ctx.restore();\n\n      this._drawImageLabel(ctx, x, y, selected, hover);\n\n      this.updateBoundingBox(x, y);\n    }\n\n    // TODO: compare with Circle.updateBoundingBox(), consolidate? More stuff is happening here\n    /**\n     *\n     * @param {number} x width\n     * @param {number} y height\n     */\n\n  }, {\n    key: 'updateBoundingBox',\n    value: function updateBoundingBox(x, y) {\n      this.boundingBox.top = y - this.options.size;\n      this.boundingBox.left = x - this.options.size;\n      this.boundingBox.right = x + this.options.size;\n      this.boundingBox.bottom = y + this.options.size;\n\n      // TODO: compare with Image.updateBoundingBox(), consolidate?\n      this.boundingBox.left = Math.min(this.boundingBox.left, this.labelModule.size.left);\n      this.boundingBox.right = Math.max(this.boundingBox.right, this.labelModule.size.left + this.labelModule.size.width);\n      this.boundingBox.bottom = Math.max(this.boundingBox.bottom, this.boundingBox.bottom + this.labelOffset);\n    }\n\n    // prettier-ignore\n    /**\n     *\n     * @param {CanvasRenderingContext2D} ctx\n     * @param {number} angle - Unused\n     * @returns {number}\n     */\n\n  }, {\n    key: 'distanceToBorder',\n    value: function distanceToBorder(ctx, angle) {\n      // eslint-disable-line no-unused-vars\n      this.resize(ctx);\n      return this.width * 0.5;\n    }\n  }]);\n  return CircularImage;\n}(_CircleImageBase3['default']);\n\nexports['default'] = CircularImage;\n\n/***/ }),\n/* 153 */\n/***/ (function(module, exports, __nested_webpack_require_769715__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _getPrototypeOf = __nested_webpack_require_769715__(3);\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _classCallCheck2 = __nested_webpack_require_769715__(0);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __nested_webpack_require_769715__(1);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = __nested_webpack_require_769715__(4);\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = __nested_webpack_require_769715__(5);\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _NodeBase2 = __nested_webpack_require_769715__(16);\n\nvar _NodeBase3 = _interopRequireDefault(_NodeBase2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\n/**\n * A Database Node/Cluster shape.\n *\n * @extends NodeBase\n */\nvar Database = function (_NodeBase) {\n  (0, _inherits3['default'])(Database, _NodeBase);\n\n  /**\n   * @param {Object} options\n   * @param {Object} body\n   * @param {Label} labelModule\n   */\n  function Database(options, body, labelModule) {\n    (0, _classCallCheck3['default'])(this, Database);\n\n    var _this = (0, _possibleConstructorReturn3['default'])(this, (Database.__proto__ || (0, _getPrototypeOf2['default'])(Database)).call(this, options, body, labelModule));\n\n    _this._setMargins(labelModule);\n    return _this;\n  }\n\n  /**\n   *\n   * @param {CanvasRenderingContext2D} ctx\n   * @param {boolean} selected\n   * @param {boolean} hover\n   */\n\n\n  (0, _createClass3['default'])(Database, [{\n    key: 'resize',\n    value: function resize(ctx, selected, hover) {\n      if (this.needsRefresh(selected, hover)) {\n        var dimensions = this.getDimensionsFromLabel(ctx, selected, hover);\n        var size = dimensions.width + this.margin.right + this.margin.left;\n\n        this.width = size;\n        this.height = size;\n        this.radius = this.width / 2;\n      }\n    }\n\n    /**\n     *\n     * @param {CanvasRenderingContext2D} ctx\n     * @param {number} x width\n     * @param {number} y height\n     * @param {boolean} selected\n     * @param {boolean} hover\n     * @param {ArrowOptions} values\n     */\n\n  }, {\n    key: 'draw',\n    value: function draw(ctx, x, y, selected, hover, values) {\n      this.resize(ctx, selected, hover);\n      this.left = x - this.width / 2;\n      this.top = y - this.height / 2;\n\n      this.initContextForDraw(ctx, values);\n      ctx.database(x - this.width / 2, y - this.height / 2, this.width, this.height);\n      this.performFill(ctx, values);\n\n      this.updateBoundingBox(x, y, ctx, selected, hover);\n      this.labelModule.draw(ctx, this.left + this.textSize.width / 2 + this.margin.left, this.top + this.textSize.height / 2 + this.margin.top, selected, hover);\n    }\n    /**\n     *\n     * @param {CanvasRenderingContext2D} ctx\n     * @param {number} angle\n     * @returns {number}\n     */\n\n  }, {\n    key: 'distanceToBorder',\n    value: function distanceToBorder(ctx, angle) {\n      return this._distanceToBorder(ctx, angle);\n    }\n  }]);\n  return Database;\n}(_NodeBase3['default']);\n\nexports['default'] = Database;\n\n/***/ }),\n/* 154 */\n/***/ (function(module, exports, __nested_webpack_require_772963__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _getPrototypeOf = __nested_webpack_require_772963__(3);\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _classCallCheck2 = __nested_webpack_require_772963__(0);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __nested_webpack_require_772963__(1);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = __nested_webpack_require_772963__(4);\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = __nested_webpack_require_772963__(5);\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _ShapeBase2 = __nested_webpack_require_772963__(17);\n\nvar _ShapeBase3 = _interopRequireDefault(_ShapeBase2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\n/**\n * A Diamond Node/Cluster shape.\n *\n * @extends ShapeBase\n */\nvar Diamond = function (_ShapeBase) {\n  (0, _inherits3['default'])(Diamond, _ShapeBase);\n\n  /**\n   * @param {Object} options\n   * @param {Object} body\n   * @param {Label} labelModule\n   */\n  function Diamond(options, body, labelModule) {\n    (0, _classCallCheck3['default'])(this, Diamond);\n    return (0, _possibleConstructorReturn3['default'])(this, (Diamond.__proto__ || (0, _getPrototypeOf2['default'])(Diamond)).call(this, options, body, labelModule));\n  }\n\n  /**\n   *\n   * @param {CanvasRenderingContext2D} ctx\n   * @param {number} x width\n   * @param {number} y height\n   * @param {boolean} selected\n   * @param {boolean} hover\n   * @param {ArrowOptions} values\n   */\n\n\n  (0, _createClass3['default'])(Diamond, [{\n    key: 'draw',\n    value: function draw(ctx, x, y, selected, hover, values) {\n      this._drawShape(ctx, 'diamond', 4, x, y, selected, hover, values);\n    }\n\n    /**\n     *\n     * @param {CanvasRenderingContext2D} ctx\n     * @param {number} angle\n     * @returns {number}\n     */\n\n  }, {\n    key: 'distanceToBorder',\n    value: function distanceToBorder(ctx, angle) {\n      return this._distanceToBorder(ctx, angle);\n    }\n  }]);\n  return Diamond;\n}(_ShapeBase3['default']);\n\nexports['default'] = Diamond;\n\n/***/ }),\n/* 155 */\n/***/ (function(module, exports, __nested_webpack_require_775191__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _getPrototypeOf = __nested_webpack_require_775191__(3);\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _classCallCheck2 = __nested_webpack_require_775191__(0);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __nested_webpack_require_775191__(1);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = __nested_webpack_require_775191__(4);\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = __nested_webpack_require_775191__(5);\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _ShapeBase2 = __nested_webpack_require_775191__(17);\n\nvar _ShapeBase3 = _interopRequireDefault(_ShapeBase2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\n/**\n * A Dot Node/Cluster shape.\n *\n * @extends ShapeBase\n */\nvar Dot = function (_ShapeBase) {\n  (0, _inherits3['default'])(Dot, _ShapeBase);\n\n  /**\n   * @param {Object} options\n   * @param {Object} body\n   * @param {Label} labelModule\n   */\n  function Dot(options, body, labelModule) {\n    (0, _classCallCheck3['default'])(this, Dot);\n    return (0, _possibleConstructorReturn3['default'])(this, (Dot.__proto__ || (0, _getPrototypeOf2['default'])(Dot)).call(this, options, body, labelModule));\n  }\n\n  /**\n   *\n   * @param {CanvasRenderingContext2D} ctx\n   * @param {number} x width\n   * @param {number} y height\n   * @param {boolean} selected\n   * @param {boolean} hover\n   * @param {ArrowOptions} values\n   */\n\n\n  (0, _createClass3['default'])(Dot, [{\n    key: 'draw',\n    value: function draw(ctx, x, y, selected, hover, values) {\n      this._drawShape(ctx, 'circle', 2, x, y, selected, hover, values);\n    }\n\n    // prettier-ignore\n    /**\n     *\n     * @param {CanvasRenderingContext2D} ctx\n     * @param {number} angle\n     * @returns {number}\n     */\n\n  }, {\n    key: 'distanceToBorder',\n    value: function distanceToBorder(ctx, angle) {\n      // eslint-disable-line no-unused-vars\n      this.resize(ctx);\n      return this.options.size;\n    }\n  }]);\n  return Dot;\n}(_ShapeBase3['default']);\n\nexports['default'] = Dot;\n\n/***/ }),\n/* 156 */\n/***/ (function(module, exports, __nested_webpack_require_777452__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _getPrototypeOf = __nested_webpack_require_777452__(3);\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _classCallCheck2 = __nested_webpack_require_777452__(0);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __nested_webpack_require_777452__(1);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = __nested_webpack_require_777452__(4);\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = __nested_webpack_require_777452__(5);\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _NodeBase2 = __nested_webpack_require_777452__(16);\n\nvar _NodeBase3 = _interopRequireDefault(_NodeBase2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\n/**\n * Am Ellipse Node/Cluster shape.\n *\n * @extends NodeBase\n */\nvar Ellipse = function (_NodeBase) {\n  (0, _inherits3['default'])(Ellipse, _NodeBase);\n\n  /**\n   * @param {Object} options\n   * @param {Object} body\n   * @param {Label} labelModule\n   */\n  function Ellipse(options, body, labelModule) {\n    (0, _classCallCheck3['default'])(this, Ellipse);\n    return (0, _possibleConstructorReturn3['default'])(this, (Ellipse.__proto__ || (0, _getPrototypeOf2['default'])(Ellipse)).call(this, options, body, labelModule));\n  }\n\n  /**\n   *\n   * @param {CanvasRenderingContext2D} ctx\n   * @param {boolean} [selected]\n   * @param {boolean} [hover]\n   */\n\n\n  (0, _createClass3['default'])(Ellipse, [{\n    key: 'resize',\n    value: function resize(ctx) {\n      var selected = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.selected;\n      var hover = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.hover;\n\n      if (this.needsRefresh(selected, hover)) {\n        var dimensions = this.getDimensionsFromLabel(ctx, selected, hover);\n\n        this.height = dimensions.height * 2;\n        this.width = dimensions.width + dimensions.height;\n        this.radius = 0.5 * this.width;\n      }\n    }\n\n    /**\n     *\n     * @param {CanvasRenderingContext2D} ctx\n     * @param {number} x width\n     * @param {number} y height\n     * @param {boolean} selected\n     * @param {boolean} hover\n     * @param {ArrowOptions} values\n     */\n\n  }, {\n    key: 'draw',\n    value: function draw(ctx, x, y, selected, hover, values) {\n      this.resize(ctx, selected, hover);\n      this.left = x - this.width * 0.5;\n      this.top = y - this.height * 0.5;\n\n      this.initContextForDraw(ctx, values);\n      ctx.ellipse_vis(this.left, this.top, this.width, this.height);\n      this.performFill(ctx, values);\n\n      this.updateBoundingBox(x, y, ctx, selected, hover);\n      this.labelModule.draw(ctx, x, y, selected, hover);\n    }\n\n    /**\n     *\n     * @param {CanvasRenderingContext2D} ctx\n     * @param {number} angle\n     * @returns {number}\n     */\n\n  }, {\n    key: 'distanceToBorder',\n    value: function distanceToBorder(ctx, angle) {\n      this.resize(ctx);\n      var a = this.width * 0.5;\n      var b = this.height * 0.5;\n      var w = Math.sin(angle) * a;\n      var h = Math.cos(angle) * b;\n      return a * b / Math.sqrt(w * w + h * h);\n    }\n  }]);\n  return Ellipse;\n}(_NodeBase3['default']);\n\nexports['default'] = Ellipse;\n\n/***/ }),\n/* 157 */\n/***/ (function(module, exports, __nested_webpack_require_780835__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _getPrototypeOf = __nested_webpack_require_780835__(3);\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _classCallCheck2 = __nested_webpack_require_780835__(0);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __nested_webpack_require_780835__(1);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = __nested_webpack_require_780835__(4);\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = __nested_webpack_require_780835__(5);\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _NodeBase2 = __nested_webpack_require_780835__(16);\n\nvar _NodeBase3 = _interopRequireDefault(_NodeBase2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\n/**\n * An icon replacement for the default Node shape.\n *\n * @extends NodeBase\n */\nvar Icon = function (_NodeBase) {\n  (0, _inherits3['default'])(Icon, _NodeBase);\n\n  /**\n   * @param {Object} options\n   * @param {Object} body\n   * @param {Label} labelModule\n   */\n  function Icon(options, body, labelModule) {\n    (0, _classCallCheck3['default'])(this, Icon);\n\n    var _this = (0, _possibleConstructorReturn3['default'])(this, (Icon.__proto__ || (0, _getPrototypeOf2['default'])(Icon)).call(this, options, body, labelModule));\n\n    _this._setMargins(labelModule);\n    return _this;\n  }\n\n  /**\n   *\n   * @param {CanvasRenderingContext2D} ctx - Unused.\n   * @param {boolean} [selected]\n   * @param {boolean} [hover]\n   */\n\n\n  (0, _createClass3['default'])(Icon, [{\n    key: 'resize',\n    value: function resize(ctx, selected, hover) {\n      if (this.needsRefresh(selected, hover)) {\n        this.iconSize = {\n          width: Number(this.options.icon.size),\n          height: Number(this.options.icon.size)\n        };\n        this.width = this.iconSize.width + this.margin.right + this.margin.left;\n        this.height = this.iconSize.height + this.margin.top + this.margin.bottom;\n        this.radius = 0.5 * this.width;\n      }\n    }\n\n    /**\n     *\n     * @param {CanvasRenderingContext2D} ctx\n     * @param {number} x width\n     * @param {number} y height\n     * @param {boolean} selected\n     * @param {boolean} hover\n     * @param {ArrowOptions} values\n     */\n\n  }, {\n    key: 'draw',\n    value: function draw(ctx, x, y, selected, hover, values) {\n      this.resize(ctx, selected, hover);\n      this.options.icon.size = this.options.icon.size || 50;\n\n      this.left = x - this.width / 2;\n      this.top = y - this.height / 2;\n      this._icon(ctx, x, y, selected, hover, values);\n\n      if (this.options.label !== undefined) {\n        var iconTextSpacing = 5;\n        this.labelModule.draw(ctx, this.left + this.iconSize.width / 2 + this.margin.left, y + this.height / 2 + iconTextSpacing, selected);\n      }\n\n      this.updateBoundingBox(x, y);\n    }\n\n    /**\n     *\n     * @param {number} x\n     * @param {number} y\n     */\n\n  }, {\n    key: 'updateBoundingBox',\n    value: function updateBoundingBox(x, y) {\n      this.boundingBox.top = y - this.options.icon.size * 0.5;\n      this.boundingBox.left = x - this.options.icon.size * 0.5;\n      this.boundingBox.right = x + this.options.icon.size * 0.5;\n      this.boundingBox.bottom = y + this.options.icon.size * 0.5;\n\n      if (this.options.label !== undefined && this.labelModule.size.width > 0) {\n        var iconTextSpacing = 5;\n        this.boundingBox.left = Math.min(this.boundingBox.left, this.labelModule.size.left);\n        this.boundingBox.right = Math.max(this.boundingBox.right, this.labelModule.size.left + this.labelModule.size.width);\n        this.boundingBox.bottom = Math.max(this.boundingBox.bottom, this.boundingBox.bottom + this.labelModule.size.height + iconTextSpacing);\n      }\n    }\n\n    /**\n     *\n     * @param {CanvasRenderingContext2D} ctx\n     * @param {number} x width\n     * @param {number} y height\n     * @param {boolean} selected\n     * @param {boolean} hover - Unused\n     * @param {ArrowOptions} values\n     */\n\n  }, {\n    key: '_icon',\n    value: function _icon(ctx, x, y, selected, hover, values) {\n      var iconSize = Number(this.options.icon.size);\n\n      if (this.options.icon.code !== undefined) {\n        ctx.font = (selected ? 'bold ' : '') + iconSize + 'px ' + this.options.icon.face;\n\n        // draw icon\n        ctx.fillStyle = this.options.icon.color || 'black';\n        ctx.textAlign = 'center';\n        ctx.textBaseline = 'middle';\n\n        // draw shadow if enabled\n        this.enableShadow(ctx, values);\n        ctx.fillText(this.options.icon.code, x, y);\n\n        // disable shadows for other elements.\n        this.disableShadow(ctx, values);\n      } else {\n        console.error('When using the icon shape, you need to define the code in the icon options object. This can be done per node or globally.');\n      }\n    }\n\n    /**\n     *\n     * @param {CanvasRenderingContext2D} ctx\n     * @param {number} angle\n     * @returns {number}\n     */\n\n  }, {\n    key: 'distanceToBorder',\n    value: function distanceToBorder(ctx, angle) {\n      return this._distanceToBorder(ctx, angle);\n    }\n  }]);\n  return Icon;\n}(_NodeBase3['default']);\n\nexports['default'] = Icon;\n\n/***/ }),\n/* 158 */\n/***/ (function(module, exports, __nested_webpack_require_786141__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _getPrototypeOf = __nested_webpack_require_786141__(3);\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _classCallCheck2 = __nested_webpack_require_786141__(0);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __nested_webpack_require_786141__(1);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = __nested_webpack_require_786141__(4);\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = __nested_webpack_require_786141__(5);\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _CircleImageBase2 = __nested_webpack_require_786141__(53);\n\nvar _CircleImageBase3 = _interopRequireDefault(_CircleImageBase2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\n/**\n * An image-based replacement for the default Node shape.\n *\n * @extends CircleImageBase\n */\nvar Image = function (_CircleImageBase) {\n  (0, _inherits3['default'])(Image, _CircleImageBase);\n\n  /**\n   * @param {Object} options\n   * @param {Object} body\n   * @param {Label} labelModule\n   * @param {Image} imageObj\n   * @param {Image} imageObjAlt\n   */\n  function Image(options, body, labelModule, imageObj, imageObjAlt) {\n    (0, _classCallCheck3['default'])(this, Image);\n\n    var _this = (0, _possibleConstructorReturn3['default'])(this, (Image.__proto__ || (0, _getPrototypeOf2['default'])(Image)).call(this, options, body, labelModule));\n\n    _this.setImages(imageObj, imageObjAlt);\n    return _this;\n  }\n\n  /**\n   *\n   * @param {CanvasRenderingContext2D} ctx - Unused.\n   * @param {boolean} [selected]\n   * @param {boolean} [hover]\n   */\n\n\n  (0, _createClass3['default'])(Image, [{\n    key: 'resize',\n    value: function resize(ctx) {\n      var selected = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.selected;\n      var hover = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.hover;\n\n      var imageAbsent = this.imageObj.src === undefined || this.imageObj.width === undefined || this.imageObj.height === undefined;\n\n      if (imageAbsent) {\n        var side = this.options.size * 2;\n        this.width = side;\n        this.height = side;\n        return;\n      }\n\n      if (this.needsRefresh(selected, hover)) {\n        this._resizeImage();\n      }\n    }\n\n    /**\n     *\n     * @param {CanvasRenderingContext2D} ctx\n     * @param {number} x width\n     * @param {number} y height\n     * @param {boolean} selected\n     * @param {boolean} hover\n     * @param {ArrowOptions} values\n     */\n\n  }, {\n    key: 'draw',\n    value: function draw(ctx, x, y, selected, hover, values) {\n      this.switchImages(selected);\n      this.resize();\n      this.left = x - this.width / 2;\n      this.top = y - this.height / 2;\n\n      if (this.options.shapeProperties.useBorderWithImage === true) {\n        var neutralborderWidth = this.options.borderWidth;\n        var selectionLineWidth = this.options.borderWidthSelected || 2 * this.options.borderWidth;\n        var borderWidth = (selected ? selectionLineWidth : neutralborderWidth) / this.body.view.scale;\n        ctx.lineWidth = Math.min(this.width, borderWidth);\n\n        ctx.beginPath();\n\n        // setup the line properties.\n        ctx.strokeStyle = selected ? this.options.color.highlight.border : hover ? this.options.color.hover.border : this.options.color.border;\n\n        // set a fillstyle\n        ctx.fillStyle = selected ? this.options.color.highlight.background : hover ? this.options.color.hover.background : this.options.color.background;\n\n        // draw a rectangle to form the border around. This rectangle is filled so the opacity of a picture (in future vis releases?) can be used to tint the image\n        ctx.rect(this.left - 0.5 * ctx.lineWidth, this.top - 0.5 * ctx.lineWidth, this.width + ctx.lineWidth, this.height + ctx.lineWidth);\n        ctx.fill();\n\n        this.performStroke(ctx, values);\n\n        ctx.closePath();\n      }\n\n      this._drawImageAtPosition(ctx, values);\n\n      this._drawImageLabel(ctx, x, y, selected, hover);\n\n      this.updateBoundingBox(x, y);\n    }\n\n    /**\n     *\n     * @param {number} x\n     * @param {number} y\n     */\n\n  }, {\n    key: 'updateBoundingBox',\n    value: function updateBoundingBox(x, y) {\n      this.resize();\n      this._updateBoundingBox(x, y);\n\n      if (this.options.label !== undefined && this.labelModule.size.width > 0) {\n        this.boundingBox.left = Math.min(this.boundingBox.left, this.labelModule.size.left);\n        this.boundingBox.right = Math.max(this.boundingBox.right, this.labelModule.size.left + this.labelModule.size.width);\n        this.boundingBox.bottom = Math.max(this.boundingBox.bottom, this.boundingBox.bottom + this.labelOffset);\n      }\n    }\n\n    /**\n     *\n     * @param {CanvasRenderingContext2D} ctx\n     * @param {number} angle\n     * @returns {number}\n     */\n\n  }, {\n    key: 'distanceToBorder',\n    value: function distanceToBorder(ctx, angle) {\n      return this._distanceToBorder(ctx, angle);\n    }\n  }]);\n  return Image;\n}(_CircleImageBase3['default']);\n\nexports['default'] = Image;\n\n/***/ }),\n/* 159 */\n/***/ (function(module, exports, __nested_webpack_require_791384__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _getPrototypeOf = __nested_webpack_require_791384__(3);\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _classCallCheck2 = __nested_webpack_require_791384__(0);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __nested_webpack_require_791384__(1);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = __nested_webpack_require_791384__(4);\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = __nested_webpack_require_791384__(5);\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _ShapeBase2 = __nested_webpack_require_791384__(17);\n\nvar _ShapeBase3 = _interopRequireDefault(_ShapeBase2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\n/**\n * A Square Node/Cluster shape.\n *\n * @extends ShapeBase\n */\nvar Square = function (_ShapeBase) {\n  (0, _inherits3['default'])(Square, _ShapeBase);\n\n  /**\n   * @param {Object} options\n   * @param {Object} body\n   * @param {Label} labelModule\n   */\n  function Square(options, body, labelModule) {\n    (0, _classCallCheck3['default'])(this, Square);\n    return (0, _possibleConstructorReturn3['default'])(this, (Square.__proto__ || (0, _getPrototypeOf2['default'])(Square)).call(this, options, body, labelModule));\n  }\n\n  /**\n   *\n   * @param {CanvasRenderingContext2D} ctx\n   * @param {number} x width\n   * @param {number} y height\n   * @param {boolean} selected\n   * @param {boolean} hover\n   * @param {ArrowOptions} values\n   */\n\n\n  (0, _createClass3['default'])(Square, [{\n    key: 'draw',\n    value: function draw(ctx, x, y, selected, hover, values) {\n      this._drawShape(ctx, 'square', 2, x, y, selected, hover, values);\n    }\n\n    /**\n     *\n     * @param {CanvasRenderingContext2D} ctx\n     * @param {number} angle\n     * @returns {number}\n     */\n\n  }, {\n    key: 'distanceToBorder',\n    value: function distanceToBorder(ctx, angle) {\n      return this._distanceToBorder(ctx, angle);\n    }\n  }]);\n  return Square;\n}(_ShapeBase3['default']);\n\nexports['default'] = Square;\n\n/***/ }),\n/* 160 */\n/***/ (function(module, exports, __nested_webpack_require_793601__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _getPrototypeOf = __nested_webpack_require_793601__(3);\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _classCallCheck2 = __nested_webpack_require_793601__(0);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __nested_webpack_require_793601__(1);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = __nested_webpack_require_793601__(4);\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = __nested_webpack_require_793601__(5);\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _ShapeBase2 = __nested_webpack_require_793601__(17);\n\nvar _ShapeBase3 = _interopRequireDefault(_ShapeBase2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\n/**\n * A Hexagon Node/Cluster shape.\n *\n * @extends ShapeBase\n */\nvar Hexagon = function (_ShapeBase) {\n  (0, _inherits3['default'])(Hexagon, _ShapeBase);\n\n  /**\n   * @param {Object} options\n   * @param {Object} body\n   * @param {Label} labelModule\n   */\n  function Hexagon(options, body, labelModule) {\n    (0, _classCallCheck3['default'])(this, Hexagon);\n    return (0, _possibleConstructorReturn3['default'])(this, (Hexagon.__proto__ || (0, _getPrototypeOf2['default'])(Hexagon)).call(this, options, body, labelModule));\n  }\n\n  /**\n   *\n   * @param {CanvasRenderingContext2D} ctx\n   * @param {number} x width\n   * @param {number} y height\n   * @param {boolean} selected\n   * @param {boolean} hover\n   * @param {ArrowOptions} values\n   */\n\n\n  (0, _createClass3['default'])(Hexagon, [{\n    key: 'draw',\n    value: function draw(ctx, x, y, selected, hover, values) {\n      this._drawShape(ctx, 'hexagon', 4, x, y, selected, hover, values);\n    }\n\n    /**\n     *\n     * @param {CanvasRenderingContext2D} ctx\n     * @param {number} angle\n     * @returns {number}\n     */\n\n  }, {\n    key: 'distanceToBorder',\n    value: function distanceToBorder(ctx, angle) {\n      return this._distanceToBorder(ctx, angle);\n    }\n  }]);\n  return Hexagon;\n}(_ShapeBase3['default']);\n\nexports['default'] = Hexagon;\n\n/***/ }),\n/* 161 */\n/***/ (function(module, exports, __nested_webpack_require_795829__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _getPrototypeOf = __nested_webpack_require_795829__(3);\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _classCallCheck2 = __nested_webpack_require_795829__(0);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __nested_webpack_require_795829__(1);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = __nested_webpack_require_795829__(4);\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = __nested_webpack_require_795829__(5);\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _ShapeBase2 = __nested_webpack_require_795829__(17);\n\nvar _ShapeBase3 = _interopRequireDefault(_ShapeBase2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\n/**\n * A Star Node/Cluster shape.\n *\n * @extends ShapeBase\n */\nvar Star = function (_ShapeBase) {\n  (0, _inherits3['default'])(Star, _ShapeBase);\n\n  /**\n   * @param {Object} options\n   * @param {Object} body\n   * @param {Label} labelModule\n   */\n  function Star(options, body, labelModule) {\n    (0, _classCallCheck3['default'])(this, Star);\n    return (0, _possibleConstructorReturn3['default'])(this, (Star.__proto__ || (0, _getPrototypeOf2['default'])(Star)).call(this, options, body, labelModule));\n  }\n\n  /**\n   *\n   * @param {CanvasRenderingContext2D} ctx\n   * @param {number} x width\n   * @param {number} y height\n   * @param {boolean} selected\n   * @param {boolean} hover\n   * @param {ArrowOptions} values\n   */\n\n\n  (0, _createClass3['default'])(Star, [{\n    key: 'draw',\n    value: function draw(ctx, x, y, selected, hover, values) {\n      this._drawShape(ctx, 'star', 4, x, y, selected, hover, values);\n    }\n\n    /**\n     *\n     * @param {CanvasRenderingContext2D} ctx\n     * @param {number} angle\n     * @returns {number}\n     */\n\n  }, {\n    key: 'distanceToBorder',\n    value: function distanceToBorder(ctx, angle) {\n      return this._distanceToBorder(ctx, angle);\n    }\n  }]);\n  return Star;\n}(_ShapeBase3['default']);\n\nexports['default'] = Star;\n\n/***/ }),\n/* 162 */\n/***/ (function(module, exports, __nested_webpack_require_798024__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _getPrototypeOf = __nested_webpack_require_798024__(3);\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _classCallCheck2 = __nested_webpack_require_798024__(0);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __nested_webpack_require_798024__(1);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = __nested_webpack_require_798024__(4);\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = __nested_webpack_require_798024__(5);\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _NodeBase2 = __nested_webpack_require_798024__(16);\n\nvar _NodeBase3 = _interopRequireDefault(_NodeBase2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\n/**\n * A text-based replacement for the default Node shape.\n *\n * @extends NodeBase\n */\nvar Text = function (_NodeBase) {\n  (0, _inherits3['default'])(Text, _NodeBase);\n\n  /**\n   * @param {Object} options\n   * @param {Object} body\n   * @param {Label} labelModule\n   */\n  function Text(options, body, labelModule) {\n    (0, _classCallCheck3['default'])(this, Text);\n\n    var _this = (0, _possibleConstructorReturn3['default'])(this, (Text.__proto__ || (0, _getPrototypeOf2['default'])(Text)).call(this, options, body, labelModule));\n\n    _this._setMargins(labelModule);\n    return _this;\n  }\n\n  /**\n   *\n   * @param {CanvasRenderingContext2D} ctx\n   * @param {boolean} selected\n   * @param {boolean} hover\n   */\n\n\n  (0, _createClass3['default'])(Text, [{\n    key: 'resize',\n    value: function resize(ctx, selected, hover) {\n      if (this.needsRefresh(selected, hover)) {\n        this.textSize = this.labelModule.getTextSize(ctx, selected, hover);\n        this.width = this.textSize.width + this.margin.right + this.margin.left;\n        this.height = this.textSize.height + this.margin.top + this.margin.bottom;\n        this.radius = 0.5 * this.width;\n      }\n    }\n\n    /**\n     *\n     * @param {CanvasRenderingContext2D} ctx\n     * @param {number} x width\n     * @param {number} y height\n     * @param {boolean} selected\n     * @param {boolean} hover\n     * @param {ArrowOptions} values\n     */\n\n  }, {\n    key: 'draw',\n    value: function draw(ctx, x, y, selected, hover, values) {\n      this.resize(ctx, selected, hover);\n      this.left = x - this.width / 2;\n      this.top = y - this.height / 2;\n\n      // draw shadow if enabled\n      this.enableShadow(ctx, values);\n      this.labelModule.draw(ctx, this.left + this.textSize.width / 2 + this.margin.left, this.top + this.textSize.height / 2 + this.margin.top, selected, hover);\n\n      // disable shadows for other elements.\n      this.disableShadow(ctx, values);\n\n      this.updateBoundingBox(x, y, ctx, selected, hover);\n    }\n\n    /**\n     *\n     * @param {CanvasRenderingContext2D} ctx\n     * @param {number} angle\n     * @returns {number}\n     */\n\n  }, {\n    key: 'distanceToBorder',\n    value: function distanceToBorder(ctx, angle) {\n      return this._distanceToBorder(ctx, angle);\n    }\n  }]);\n  return Text;\n}(_NodeBase3['default']);\n\nexports['default'] = Text;\n\n/***/ }),\n/* 163 */\n/***/ (function(module, exports, __nested_webpack_require_801281__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _getPrototypeOf = __nested_webpack_require_801281__(3);\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _classCallCheck2 = __nested_webpack_require_801281__(0);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __nested_webpack_require_801281__(1);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = __nested_webpack_require_801281__(4);\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = __nested_webpack_require_801281__(5);\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _ShapeBase2 = __nested_webpack_require_801281__(17);\n\nvar _ShapeBase3 = _interopRequireDefault(_ShapeBase2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\n/**\n * A Triangle Node/Cluster shape.\n *\n * @extends ShapeBase\n */\nvar Triangle = function (_ShapeBase) {\n  (0, _inherits3['default'])(Triangle, _ShapeBase);\n\n  /**\n   * @param {Object} options\n   * @param {Object} body\n   * @param {Label} labelModule\n   */\n  function Triangle(options, body, labelModule) {\n    (0, _classCallCheck3['default'])(this, Triangle);\n    return (0, _possibleConstructorReturn3['default'])(this, (Triangle.__proto__ || (0, _getPrototypeOf2['default'])(Triangle)).call(this, options, body, labelModule));\n  }\n\n  /**\n   *\n   * @param {CanvasRenderingContext2D} ctx\n   * @param {number} x\n   * @param {number} y\n   * @param {boolean} selected\n   * @param {boolean} hover\n   * @param {ArrowOptions} values\n   */\n\n\n  (0, _createClass3['default'])(Triangle, [{\n    key: 'draw',\n    value: function draw(ctx, x, y, selected, hover, values) {\n      this._drawShape(ctx, 'triangle', 3, x, y, selected, hover, values);\n    }\n\n    /**\n     *\n     * @param {CanvasRenderingContext2D} ctx\n     * @param {number} angle\n     * @returns {number}\n     */\n\n  }, {\n    key: 'distanceToBorder',\n    value: function distanceToBorder(ctx, angle) {\n      return this._distanceToBorder(ctx, angle);\n    }\n  }]);\n  return Triangle;\n}(_ShapeBase3['default']);\n\nexports['default'] = Triangle;\n\n/***/ }),\n/* 164 */\n/***/ (function(module, exports, __nested_webpack_require_803507__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _getPrototypeOf = __nested_webpack_require_803507__(3);\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _classCallCheck2 = __nested_webpack_require_803507__(0);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __nested_webpack_require_803507__(1);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = __nested_webpack_require_803507__(4);\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = __nested_webpack_require_803507__(5);\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _ShapeBase2 = __nested_webpack_require_803507__(17);\n\nvar _ShapeBase3 = _interopRequireDefault(_ShapeBase2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\n/**\n * A downward facing Triangle Node/Cluster shape.\n *\n * @extends ShapeBase\n */\nvar TriangleDown = function (_ShapeBase) {\n  (0, _inherits3['default'])(TriangleDown, _ShapeBase);\n\n  /**\n   * @param {Object} options\n   * @param {Object} body\n   * @param {Label} labelModule\n   */\n  function TriangleDown(options, body, labelModule) {\n    (0, _classCallCheck3['default'])(this, TriangleDown);\n    return (0, _possibleConstructorReturn3['default'])(this, (TriangleDown.__proto__ || (0, _getPrototypeOf2['default'])(TriangleDown)).call(this, options, body, labelModule));\n  }\n\n  /**\n   *\n   * @param {CanvasRenderingContext2D} ctx\n   * @param {number} x\n   * @param {number} y\n   * @param {boolean} selected\n   * @param {boolean} hover\n   * @param {ArrowOptions} values\n   */\n\n\n  (0, _createClass3['default'])(TriangleDown, [{\n    key: 'draw',\n    value: function draw(ctx, x, y, selected, hover, values) {\n      this._drawShape(ctx, 'triangleDown', 3, x, y, selected, hover, values);\n    }\n\n    /**\n     *\n     * @param {CanvasRenderingContext2D} ctx\n     * @param {number} angle\n     * @returns {number}\n     */\n\n  }, {\n    key: 'distanceToBorder',\n    value: function distanceToBorder(ctx, angle) {\n      return this._distanceToBorder(ctx, angle);\n    }\n  }]);\n  return TriangleDown;\n}(_ShapeBase3['default']);\n\nexports['default'] = TriangleDown;\n\n/***/ }),\n/* 165 */\n/***/ (function(module, exports, __nested_webpack_require_805789__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _classCallCheck2 = __nested_webpack_require_805789__(0);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __nested_webpack_require_805789__(1);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar util = __nested_webpack_require_805789__(2);\nvar DataSet = __nested_webpack_require_805789__(33);\nvar DataView = __nested_webpack_require_805789__(51);\nvar Edge = __nested_webpack_require_805789__(55)['default'];\n\n/**\n * Handler for Edges\n */\n\nvar EdgesHandler = function () {\n  /**\n   * @param {Object} body\n   * @param {Array.<Image>} images\n   * @param {Array.<Group>} groups\n   */\n  function EdgesHandler(body, images, groups) {\n    var _this = this;\n\n    (0, _classCallCheck3['default'])(this, EdgesHandler);\n\n    this.body = body;\n    this.images = images;\n    this.groups = groups;\n\n    // create the edge API in the body container\n    this.body.functions.createEdge = this.create.bind(this);\n\n    this.edgesListeners = {\n      add: function add(event, params) {\n        _this.add(params.items);\n      },\n      update: function update(event, params) {\n        _this.update(params.items);\n      },\n      remove: function remove(event, params) {\n        _this.remove(params.items);\n      }\n    };\n\n    this.options = {};\n    this.defaultOptions = {\n      arrows: {\n        to: { enabled: false, scaleFactor: 1, type: 'arrow' }, // boolean / {arrowScaleFactor:1} / {enabled: false, arrowScaleFactor:1}\n        middle: { enabled: false, scaleFactor: 1, type: 'arrow' },\n        from: { enabled: false, scaleFactor: 1, type: 'arrow' }\n      },\n      arrowStrikethrough: true,\n      color: {\n        color: '#848484',\n        highlight: '#848484',\n        hover: '#848484',\n        inherit: 'from',\n        opacity: 1.0\n      },\n      dashes: false,\n      font: {\n        color: '#343434',\n        size: 14, // px\n        face: 'arial',\n        background: 'none',\n        strokeWidth: 2, // px\n        strokeColor: '#ffffff',\n        align: 'horizontal',\n        multi: false,\n        vadjust: 0,\n        bold: {\n          mod: 'bold'\n        },\n        boldital: {\n          mod: 'bold italic'\n        },\n        ital: {\n          mod: 'italic'\n        },\n        mono: {\n          mod: '',\n          size: 15, // px\n          face: 'courier new',\n          vadjust: 2\n        }\n      },\n      hidden: false,\n      hoverWidth: 1.5,\n      label: undefined,\n      labelHighlightBold: true,\n      length: undefined,\n      physics: true,\n      scaling: {\n        min: 1,\n        max: 15,\n        label: {\n          enabled: true,\n          min: 14,\n          max: 30,\n          maxVisible: 30,\n          drawThreshold: 5\n        },\n        customScalingFunction: function customScalingFunction(min, max, total, value) {\n          if (max === min) {\n            return 0.5;\n          } else {\n            var scale = 1 / (max - min);\n            return Math.max(0, (value - min) * scale);\n          }\n        }\n      },\n      selectionWidth: 1.5,\n      selfReferenceSize: 20,\n      shadow: {\n        enabled: false,\n        color: 'rgba(0,0,0,0.5)',\n        size: 10,\n        x: 5,\n        y: 5\n      },\n      background: {\n        enabled: false,\n        color: 'rgba(111,111,111,1)',\n        size: 10,\n        dashes: false\n      },\n      smooth: {\n        enabled: true,\n        type: 'dynamic',\n        forceDirection: 'none',\n        roundness: 0.5\n      },\n      title: undefined,\n      width: 1,\n      value: undefined\n    };\n\n    util.deepExtend(this.options, this.defaultOptions);\n\n    this.bindEventListeners();\n  }\n\n  /**\n   * Binds event listeners\n   */\n\n\n  (0, _createClass3['default'])(EdgesHandler, [{\n    key: 'bindEventListeners',\n    value: function bindEventListeners() {\n      var _this2 = this;\n\n      // this allows external modules to force all dynamic curves to turn static.\n      this.body.emitter.on('_forceDisableDynamicCurves', function (type) {\n        var emit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n        if (type === 'dynamic') {\n          type = 'continuous';\n        }\n        var dataChanged = false;\n        for (var edgeId in _this2.body.edges) {\n          if (_this2.body.edges.hasOwnProperty(edgeId)) {\n            var edge = _this2.body.edges[edgeId];\n            var edgeData = _this2.body.data.edges._data[edgeId];\n\n            // only forcibly remove the smooth curve if the data has been set of the edge has the smooth curves defined.\n            // this is because a change in the global would not affect these curves.\n            if (edgeData !== undefined) {\n              var smoothOptions = edgeData.smooth;\n              if (smoothOptions !== undefined) {\n                if (smoothOptions.enabled === true && smoothOptions.type === 'dynamic') {\n                  if (type === undefined) {\n                    edge.setOptions({ smooth: false });\n                  } else {\n                    edge.setOptions({ smooth: { type: type } });\n                  }\n                  dataChanged = true;\n                }\n              }\n            }\n          }\n        }\n        if (emit === true && dataChanged === true) {\n          _this2.body.emitter.emit('_dataChanged');\n        }\n      });\n\n      // this is called when options of EXISTING nodes or edges have changed.\n      //\n      // NOTE: Not true, called when options have NOT changed, for both existing as well as new nodes.\n      //       See update() for logic.\n      // TODO: Verify and examine the consequences of this. It might still trigger when\n      //       non-option fields have changed, but then reconnecting edges is still useless.\n      //       Alternatively, it might also be called when edges are removed.\n      //\n      this.body.emitter.on('_dataUpdated', function () {\n        _this2.reconnectEdges();\n      });\n\n      // refresh the edges. Used when reverting from hierarchical layout\n      this.body.emitter.on('refreshEdges', this.refresh.bind(this));\n      this.body.emitter.on('refresh', this.refresh.bind(this));\n      this.body.emitter.on('destroy', function () {\n        util.forEach(_this2.edgesListeners, function (callback, event) {\n          if (_this2.body.data.edges) _this2.body.data.edges.off(event, callback);\n        });\n        delete _this2.body.functions.createEdge;\n        delete _this2.edgesListeners.add;\n        delete _this2.edgesListeners.update;\n        delete _this2.edgesListeners.remove;\n        delete _this2.edgesListeners;\n      });\n    }\n\n    /**\n     *\n     * @param {Object} options\n     */\n\n  }, {\n    key: 'setOptions',\n    value: function setOptions(options) {\n      if (options !== undefined) {\n        // use the parser from the Edge class to fill in all shorthand notations\n        Edge.parseOptions(this.options, options, true, this.defaultOptions, true);\n\n        // update smooth settings in all edges\n        var dataChanged = false;\n        if (options.smooth !== undefined) {\n          for (var edgeId in this.body.edges) {\n            if (this.body.edges.hasOwnProperty(edgeId)) {\n              dataChanged = this.body.edges[edgeId].updateEdgeType() || dataChanged;\n            }\n          }\n        }\n\n        // update fonts in all edges\n        if (options.font !== undefined) {\n          for (var _edgeId in this.body.edges) {\n            if (this.body.edges.hasOwnProperty(_edgeId)) {\n              this.body.edges[_edgeId].updateLabelModule();\n            }\n          }\n        }\n\n        // update the state of the variables if needed\n        if (options.hidden !== undefined || options.physics !== undefined || dataChanged === true) {\n          this.body.emitter.emit('_dataChanged');\n        }\n      }\n    }\n\n    /**\n     * Load edges by reading the data table\n     * @param {Array | DataSet | DataView} edges    The data containing the edges.\n     * @param {boolean} [doNotEmit=false]\n     * @private\n     */\n\n  }, {\n    key: 'setData',\n    value: function setData(edges) {\n      var _this3 = this;\n\n      var doNotEmit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n      var oldEdgesData = this.body.data.edges;\n\n      if (edges instanceof DataSet || edges instanceof DataView) {\n        this.body.data.edges = edges;\n      } else if (Array.isArray(edges)) {\n        this.body.data.edges = new DataSet();\n        this.body.data.edges.add(edges);\n      } else if (!edges) {\n        this.body.data.edges = new DataSet();\n      } else {\n        throw new TypeError('Array or DataSet expected');\n      }\n\n      // TODO: is this null or undefined or false?\n      if (oldEdgesData) {\n        // unsubscribe from old dataset\n        util.forEach(this.edgesListeners, function (callback, event) {\n          oldEdgesData.off(event, callback);\n        });\n      }\n\n      // remove drawn edges\n      this.body.edges = {};\n\n      // TODO: is this null or undefined or false?\n      if (this.body.data.edges) {\n        // subscribe to new dataset\n        util.forEach(this.edgesListeners, function (callback, event) {\n          _this3.body.data.edges.on(event, callback);\n        });\n\n        // draw all new nodes\n        var ids = this.body.data.edges.getIds();\n        this.add(ids, true);\n      }\n\n      this.body.emitter.emit('_adjustEdgesForHierarchicalLayout');\n      if (doNotEmit === false) {\n        this.body.emitter.emit('_dataChanged');\n      }\n    }\n\n    /**\n     * Add edges\n     * @param {number[] | string[]} ids\n     * @param {boolean} [doNotEmit=false]\n     * @private\n     */\n\n  }, {\n    key: 'add',\n    value: function add(ids) {\n      var doNotEmit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n      var edges = this.body.edges;\n      var edgesData = this.body.data.edges;\n\n      for (var i = 0; i < ids.length; i++) {\n        var id = ids[i];\n\n        var oldEdge = edges[id];\n        if (oldEdge) {\n          oldEdge.disconnect();\n        }\n\n        var data = edgesData.get(id, { showInternalIds: true });\n        edges[id] = this.create(data);\n      }\n\n      this.body.emitter.emit('_adjustEdgesForHierarchicalLayout');\n\n      if (doNotEmit === false) {\n        this.body.emitter.emit('_dataChanged');\n      }\n    }\n\n    /**\n     * Update existing edges, or create them when not yet existing\n     * @param {number[] | string[]} ids\n     * @private\n     */\n\n  }, {\n    key: 'update',\n    value: function update(ids) {\n      var edges = this.body.edges;\n      var edgesData = this.body.data.edges;\n      var dataChanged = false;\n      for (var i = 0; i < ids.length; i++) {\n        var id = ids[i];\n        var data = edgesData.get(id);\n        var edge = edges[id];\n        if (edge !== undefined) {\n          // update edge\n          edge.disconnect();\n          dataChanged = edge.setOptions(data) || dataChanged; // if a support node is added, data can be changed.\n          edge.connect();\n        } else {\n          // create edge\n          this.body.edges[id] = this.create(data);\n          dataChanged = true;\n        }\n      }\n\n      if (dataChanged === true) {\n        this.body.emitter.emit('_adjustEdgesForHierarchicalLayout');\n        this.body.emitter.emit('_dataChanged');\n      } else {\n        this.body.emitter.emit('_dataUpdated');\n      }\n    }\n\n    /**\n     * Remove existing edges. Non existing ids will be ignored\n     * @param {number[] | string[]} ids\n     * @param {boolean} [emit=true]\n     * @private\n     */\n\n  }, {\n    key: 'remove',\n    value: function remove(ids) {\n      var emit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n      if (ids.length === 0) return; // early out\n\n      var edges = this.body.edges;\n      util.forEach(ids, function (id) {\n        var edge = edges[id];\n        if (edge !== undefined) {\n          edge.remove();\n        }\n      });\n\n      if (emit) {\n        this.body.emitter.emit('_dataChanged');\n      }\n    }\n\n    /**\n     * Refreshes Edge Handler\n     */\n\n  }, {\n    key: 'refresh',\n    value: function refresh() {\n      var _this4 = this;\n\n      util.forEach(this.body.edges, function (edge, edgeId) {\n        var data = _this4.body.data.edges._data[edgeId];\n        if (data !== undefined) {\n          edge.setOptions(data);\n        }\n      });\n    }\n\n    /**\n     *\n     * @param {Object} properties\n     * @returns {Edge}\n     */\n\n  }, {\n    key: 'create',\n    value: function create(properties) {\n      return new Edge(properties, this.body, this.options, this.defaultOptions);\n    }\n\n    /**\n     * Reconnect all edges\n     * @private\n     */\n\n  }, {\n    key: 'reconnectEdges',\n    value: function reconnectEdges() {\n      var id;\n      var nodes = this.body.nodes;\n      var edges = this.body.edges;\n\n      for (id in nodes) {\n        if (nodes.hasOwnProperty(id)) {\n          nodes[id].edges = [];\n        }\n      }\n\n      for (id in edges) {\n        if (edges.hasOwnProperty(id)) {\n          var edge = edges[id];\n          edge.from = null;\n          edge.to = null;\n          edge.connect();\n        }\n      }\n    }\n\n    /**\n     *\n     * @param {Edge.id} edgeId\n     * @returns {Array}\n     */\n\n  }, {\n    key: 'getConnectedNodes',\n    value: function getConnectedNodes(edgeId) {\n      var nodeList = [];\n      if (this.body.edges[edgeId] !== undefined) {\n        var edge = this.body.edges[edgeId];\n        if (edge.fromId !== undefined) {\n          nodeList.push(edge.fromId);\n        }\n        if (edge.toId !== undefined) {\n          nodeList.push(edge.toId);\n        }\n      }\n      return nodeList;\n    }\n\n    /**\n     * There is no direct relation between the nodes and the edges DataSet,\n     * so the right place to do call this is in the handler for event `_dataUpdated`.\n     */\n\n  }, {\n    key: '_updateState',\n    value: function _updateState() {\n      this._addMissingEdges();\n      this._removeInvalidEdges();\n    }\n\n    /**\n     * Scan for missing nodes and remove corresponding edges, if any.\n     * @private\n     */\n\n  }, {\n    key: '_removeInvalidEdges',\n    value: function _removeInvalidEdges() {\n      var _this5 = this;\n\n      var edgesToDelete = [];\n\n      util.forEach(this.body.edges, function (edge, id) {\n        var toNode = _this5.body.nodes[edge.toId];\n        var fromNode = _this5.body.nodes[edge.fromId];\n\n        // Skip clustering edges here, let the Clustering module handle those\n        if (toNode !== undefined && toNode.isCluster === true || fromNode !== undefined && fromNode.isCluster === true) {\n          return;\n        }\n\n        if (toNode === undefined || fromNode === undefined) {\n          edgesToDelete.push(id);\n        }\n      });\n\n      this.remove(edgesToDelete, false);\n    }\n\n    /**\n     * add all edges from dataset that are not in the cached state\n     * @private\n     */\n\n  }, {\n    key: '_addMissingEdges',\n    value: function _addMissingEdges() {\n      var edgesData = this.body.data.edges;\n      if (edgesData === undefined || edgesData === null) {\n        return; // No edges DataSet yet; can happen on startup\n      }\n\n      var edges = this.body.edges;\n      var addIds = [];\n\n      edgesData.forEach(function (edgeData, edgeId) {\n        var edge = edges[edgeId];\n        if (edge === undefined) {\n          addIds.push(edgeId);\n        }\n      });\n\n      this.add(addIds, true);\n    }\n  }]);\n  return EdgesHandler;\n}();\n\nexports['default'] = EdgesHandler;\n\n/***/ }),\n/* 166 */\n/***/ (function(module, exports, __nested_webpack_require_821252__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _slicedToArray2 = __nested_webpack_require_821252__(15);\n\nvar _slicedToArray3 = _interopRequireDefault(_slicedToArray2);\n\nvar _getPrototypeOf = __nested_webpack_require_821252__(3);\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _classCallCheck2 = __nested_webpack_require_821252__(0);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __nested_webpack_require_821252__(1);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = __nested_webpack_require_821252__(4);\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = __nested_webpack_require_821252__(5);\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _CubicBezierEdgeBase2 = __nested_webpack_require_821252__(167);\n\nvar _CubicBezierEdgeBase3 = _interopRequireDefault(_CubicBezierEdgeBase2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\n/**\n * A Cubic Bezier Edge. Bezier curves are used to model smooth gradual\n * curves in paths between nodes.\n *\n * @extends CubicBezierEdgeBase\n */\nvar CubicBezierEdge = function (_CubicBezierEdgeBase) {\n  (0, _inherits3['default'])(CubicBezierEdge, _CubicBezierEdgeBase);\n\n  /**\n   * @param {Object} options\n   * @param {Object} body\n   * @param {Label} labelModule\n   */\n  function CubicBezierEdge(options, body, labelModule) {\n    (0, _classCallCheck3['default'])(this, CubicBezierEdge);\n    return (0, _possibleConstructorReturn3['default'])(this, (CubicBezierEdge.__proto__ || (0, _getPrototypeOf2['default'])(CubicBezierEdge)).call(this, options, body, labelModule));\n  }\n\n  /**\n   * Draw a line between two nodes\n   * @param {CanvasRenderingContext2D} ctx\n   * @param {ArrowOptions} values\n   * @param {Array.<Node>} viaNodes\n   * @private\n   */\n\n\n  (0, _createClass3['default'])(CubicBezierEdge, [{\n    key: '_line',\n    value: function _line(ctx, values, viaNodes) {\n      // get the coordinates of the support points.\n      var via1 = viaNodes[0];\n      var via2 = viaNodes[1];\n      this._bezierCurve(ctx, values, via1, via2);\n    }\n\n    /**\n     *\n     * @returns {Array.<{x: number, y: number}>}\n     * @private\n     */\n\n  }, {\n    key: '_getViaCoordinates',\n    value: function _getViaCoordinates() {\n      var dx = this.from.x - this.to.x;\n      var dy = this.from.y - this.to.y;\n\n      var x1 = void 0,\n          y1 = void 0,\n          x2 = void 0,\n          y2 = void 0;\n      var roundness = this.options.smooth.roundness;\n\n      // horizontal if x > y or if direction is forced or if direction is horizontal\n      if ((Math.abs(dx) > Math.abs(dy) || this.options.smooth.forceDirection === true || this.options.smooth.forceDirection === 'horizontal') && this.options.smooth.forceDirection !== 'vertical') {\n        y1 = this.from.y;\n        y2 = this.to.y;\n        x1 = this.from.x - roundness * dx;\n        x2 = this.to.x + roundness * dx;\n      } else {\n        y1 = this.from.y - roundness * dy;\n        y2 = this.to.y + roundness * dy;\n        x1 = this.from.x;\n        x2 = this.to.x;\n      }\n\n      return [{ x: x1, y: y1 }, { x: x2, y: y2 }];\n    }\n\n    /**\n     *\n     * @returns {Array.<{x: number, y: number}>}\n     */\n\n  }, {\n    key: 'getViaNode',\n    value: function getViaNode() {\n      return this._getViaCoordinates();\n    }\n\n    /**\n     *\n     * @param {Node} nearNode\n     * @param {CanvasRenderingContext2D} ctx\n     * @returns {{x: number, y: number, t: number}}\n     * @private\n     */\n\n  }, {\n    key: '_findBorderPosition',\n    value: function _findBorderPosition(nearNode, ctx) {\n      return this._findBorderPositionBezier(nearNode, ctx);\n    }\n\n    /**\n     *\n     * @param {number} x1\n     * @param {number} y1\n     * @param {number} x2\n     * @param {number} y2\n     * @param {number} x3\n     * @param {number} y3\n     * @param {Node} via1\n     * @param {Node} via2\n     * @returns {number}\n     * @private\n     */\n\n  }, {\n    key: '_getDistanceToEdge',\n    value: function _getDistanceToEdge(x1, y1, x2, y2, x3, y3) {\n      var _ref = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : this._getViaCoordinates(),\n          _ref2 = (0, _slicedToArray3['default'])(_ref, 2),\n          via1 = _ref2[0],\n          via2 = _ref2[1];\n\n      // x3,y3 is the point\n      return this._getDistanceToBezierEdge(x1, y1, x2, y2, x3, y3, via1, via2);\n    }\n\n    /**\n     * Combined function of pointOnLine and pointOnBezier. This gives the coordinates of a point on the line at a certain percentage of the way\n     * @param {number} percentage\n     * @param {{x: number, y: number}} [via1=this._getViaCoordinates()[0]]\n     * @param {{x: number, y: number}} [via2=this._getViaCoordinates()[1]]\n     * @returns {{x: number, y: number}}\n     * @private\n     */\n\n  }, {\n    key: 'getPoint',\n    value: function getPoint(percentage) {\n      var _ref3 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this._getViaCoordinates(),\n          _ref4 = (0, _slicedToArray3['default'])(_ref3, 2),\n          via1 = _ref4[0],\n          via2 = _ref4[1];\n\n      var t = percentage;\n      var vec = [];\n      vec[0] = Math.pow(1 - t, 3);\n      vec[1] = 3 * t * Math.pow(1 - t, 2);\n      vec[2] = 3 * Math.pow(t, 2) * (1 - t);\n      vec[3] = Math.pow(t, 3);\n      var x = vec[0] * this.fromPoint.x + vec[1] * via1.x + vec[2] * via2.x + vec[3] * this.toPoint.x;\n      var y = vec[0] * this.fromPoint.y + vec[1] * via1.y + vec[2] * via2.y + vec[3] * this.toPoint.y;\n\n      return { x: x, y: y };\n    }\n  }]);\n  return CubicBezierEdge;\n}(_CubicBezierEdgeBase3['default']);\n\nexports['default'] = CubicBezierEdge;\n\n/***/ }),\n/* 167 */\n/***/ (function(module, exports, __nested_webpack_require_826989__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _getPrototypeOf = __nested_webpack_require_826989__(3);\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _classCallCheck2 = __nested_webpack_require_826989__(0);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __nested_webpack_require_826989__(1);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = __nested_webpack_require_826989__(4);\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = __nested_webpack_require_826989__(5);\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _BezierEdgeBase2 = __nested_webpack_require_826989__(56);\n\nvar _BezierEdgeBase3 = _interopRequireDefault(_BezierEdgeBase2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\n/**\n * A Base Class for all Cubic Bezier Edges. Bezier curves are used to model\n * smooth gradual curves in paths between nodes.\n *\n * @extends BezierEdgeBase\n */\nvar CubicBezierEdgeBase = function (_BezierEdgeBase) {\n  (0, _inherits3['default'])(CubicBezierEdgeBase, _BezierEdgeBase);\n\n  /**\n   * @param {Object} options\n   * @param {Object} body\n   * @param {Label} labelModule\n   */\n  function CubicBezierEdgeBase(options, body, labelModule) {\n    (0, _classCallCheck3['default'])(this, CubicBezierEdgeBase);\n    return (0, _possibleConstructorReturn3['default'])(this, (CubicBezierEdgeBase.__proto__ || (0, _getPrototypeOf2['default'])(CubicBezierEdgeBase)).call(this, options, body, labelModule));\n  }\n\n  /**\n   * Calculate the distance between a point (x3,y3) and a line segment from\n   * (x1,y1) to (x2,y2).\n   * http://stackoverflow.com/questions/849211/shortest-distancae-between-a-point-and-a-line-segment\n   * https://en.wikipedia.org/wiki/B%C3%A9zier_curve\n   * @param {number} x1 from x\n   * @param {number} y1 from y\n   * @param {number} x2 to x\n   * @param {number} y2 to y\n   * @param {number} x3 point to check x\n   * @param {number} y3 point to check y\n   * @param {Node} via1\n   * @param {Node} via2\n   * @returns {number}\n   * @private\n   */\n\n\n  (0, _createClass3['default'])(CubicBezierEdgeBase, [{\n    key: '_getDistanceToBezierEdge',\n    value: function _getDistanceToBezierEdge(x1, y1, x2, y2, x3, y3, via1, via2) {\n      // x3,y3 is the point\n      var minDistance = 1e9;\n      var distance = void 0;\n      var i = void 0,\n          t = void 0,\n          x = void 0,\n          y = void 0;\n      var lastX = x1;\n      var lastY = y1;\n      var vec = [0, 0, 0, 0];\n      for (i = 1; i < 10; i++) {\n        t = 0.1 * i;\n        vec[0] = Math.pow(1 - t, 3);\n        vec[1] = 3 * t * Math.pow(1 - t, 2);\n        vec[2] = 3 * Math.pow(t, 2) * (1 - t);\n        vec[3] = Math.pow(t, 3);\n        x = vec[0] * x1 + vec[1] * via1.x + vec[2] * via2.x + vec[3] * x2;\n        y = vec[0] * y1 + vec[1] * via1.y + vec[2] * via2.y + vec[3] * y2;\n        if (i > 0) {\n          distance = this._getDistanceToLine(lastX, lastY, x, y, x3, y3);\n          minDistance = distance < minDistance ? distance : minDistance;\n        }\n        lastX = x;\n        lastY = y;\n      }\n\n      return minDistance;\n    }\n  }]);\n  return CubicBezierEdgeBase;\n}(_BezierEdgeBase3['default']);\n\nexports['default'] = CubicBezierEdgeBase;\n\n/***/ }),\n/* 168 */\n/***/ (function(module, exports, __nested_webpack_require_830360__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _slicedToArray2 = __nested_webpack_require_830360__(15);\n\nvar _slicedToArray3 = _interopRequireDefault(_slicedToArray2);\n\nvar _getPrototypeOf = __nested_webpack_require_830360__(3);\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _classCallCheck2 = __nested_webpack_require_830360__(0);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __nested_webpack_require_830360__(1);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = __nested_webpack_require_830360__(4);\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = __nested_webpack_require_830360__(5);\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _BezierEdgeBase2 = __nested_webpack_require_830360__(56);\n\nvar _BezierEdgeBase3 = _interopRequireDefault(_BezierEdgeBase2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\n/**\n * A Dynamic Bezier Edge. Bezier curves are used to model smooth gradual\n * curves in paths between nodes. The Dynamic piece refers to how the curve\n * reacts to physics changes.\n *\n * @extends BezierEdgeBase\n */\nvar BezierEdgeDynamic = function (_BezierEdgeBase) {\n  (0, _inherits3['default'])(BezierEdgeDynamic, _BezierEdgeBase);\n\n  /**\n   * @param {Object} options\n   * @param {Object} body\n   * @param {Label} labelModule\n   */\n  function BezierEdgeDynamic(options, body, labelModule) {\n    (0, _classCallCheck3['default'])(this, BezierEdgeDynamic);\n\n    // --> this calls the setOptions below\n    var _this = (0, _possibleConstructorReturn3['default'])(this, (BezierEdgeDynamic.__proto__ || (0, _getPrototypeOf2['default'])(BezierEdgeDynamic)).call(this, options, body, labelModule));\n    //this.via = undefined; // Here for completeness but not allowed to defined before super() is invoked.\n\n\n    _this._boundFunction = function () {\n      _this.positionBezierNode();\n    };\n    _this.body.emitter.on('_repositionBezierNodes', _this._boundFunction);\n    return _this;\n  }\n\n  /**\n   *\n   * @param {Object} options\n   */\n\n\n  (0, _createClass3['default'])(BezierEdgeDynamic, [{\n    key: 'setOptions',\n    value: function setOptions(options) {\n      // check if the physics has changed.\n      var physicsChange = false;\n      if (this.options.physics !== options.physics) {\n        physicsChange = true;\n      }\n\n      // set the options and the to and from nodes\n      this.options = options;\n      this.id = this.options.id;\n      this.from = this.body.nodes[this.options.from];\n      this.to = this.body.nodes[this.options.to];\n\n      // setup the support node and connect\n      this.setupSupportNode();\n      this.connect();\n\n      // when we change the physics state of the edge, we reposition the support node.\n      if (physicsChange === true) {\n        this.via.setOptions({ physics: this.options.physics });\n        this.positionBezierNode();\n      }\n    }\n\n    /**\n     * Connects an edge to node(s)\n     */\n\n  }, {\n    key: 'connect',\n    value: function connect() {\n      this.from = this.body.nodes[this.options.from];\n      this.to = this.body.nodes[this.options.to];\n      if (this.from === undefined || this.to === undefined || this.options.physics === false) {\n        this.via.setOptions({ physics: false });\n      } else {\n        // fix weird behaviour where a self referencing node has physics enabled\n        if (this.from.id === this.to.id) {\n          this.via.setOptions({ physics: false });\n        } else {\n          this.via.setOptions({ physics: true });\n        }\n      }\n    }\n\n    /**\n     * remove the support nodes\n     * @returns {boolean}\n     */\n\n  }, {\n    key: 'cleanup',\n    value: function cleanup() {\n      this.body.emitter.off('_repositionBezierNodes', this._boundFunction);\n      if (this.via !== undefined) {\n        delete this.body.nodes[this.via.id];\n        this.via = undefined;\n        return true;\n      }\n      return false;\n    }\n\n    /**\n     * Bezier curves require an anchor point to calculate the smooth flow. These points are nodes. These nodes are invisible but\n     * are used for the force calculation.\n     *\n     * The changed data is not called, if needed, it is returned by the main edge constructor.\n     * @private\n     */\n\n  }, {\n    key: 'setupSupportNode',\n    value: function setupSupportNode() {\n      if (this.via === undefined) {\n        var nodeId = 'edgeId:' + this.id;\n        var node = this.body.functions.createNode({\n          id: nodeId,\n          shape: 'circle',\n          physics: true,\n          hidden: true\n        });\n        this.body.nodes[nodeId] = node;\n        this.via = node;\n        this.via.parentEdgeId = this.id;\n        this.positionBezierNode();\n      }\n    }\n\n    /**\n     * Positions bezier node\n     */\n\n  }, {\n    key: 'positionBezierNode',\n    value: function positionBezierNode() {\n      if (this.via !== undefined && this.from !== undefined && this.to !== undefined) {\n        this.via.x = 0.5 * (this.from.x + this.to.x);\n        this.via.y = 0.5 * (this.from.y + this.to.y);\n      } else if (this.via !== undefined) {\n        this.via.x = 0;\n        this.via.y = 0;\n      }\n    }\n\n    /**\n     * Draw a line between two nodes\n     * @param {CanvasRenderingContext2D} ctx\n     * @param {ArrowOptions} values\n     * @param {Node} viaNode\n     * @private\n     */\n\n  }, {\n    key: '_line',\n    value: function _line(ctx, values, viaNode) {\n      this._bezierCurve(ctx, values, viaNode);\n    }\n\n    /**\n     *\n     * @returns {Node|undefined|*|{index, line, column}}\n     */\n\n  }, {\n    key: 'getViaNode',\n    value: function getViaNode() {\n      return this.via;\n    }\n\n    /**\n     * Combined function of pointOnLine and pointOnBezier. This gives the coordinates of a point on the line at a certain percentage of the way\n     *\n     * @param {number} percentage\n     * @param {Node} viaNode\n     * @returns {{x: number, y: number}}\n     * @private\n     */\n\n  }, {\n    key: 'getPoint',\n    value: function getPoint(percentage) {\n      var viaNode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.via;\n\n      var t = percentage;\n      var x = void 0,\n          y = void 0;\n      if (this.from === this.to) {\n        var _getCircleData = this._getCircleData(this.from),\n            _getCircleData2 = (0, _slicedToArray3['default'])(_getCircleData, 3),\n            cx = _getCircleData2[0],\n            cy = _getCircleData2[1],\n            cr = _getCircleData2[2];\n\n        var a = 2 * Math.PI * (1 - t);\n        x = cx + cr * Math.sin(a);\n        y = cy + cr - cr * (1 - Math.cos(a));\n      } else {\n        x = Math.pow(1 - t, 2) * this.fromPoint.x + 2 * t * (1 - t) * viaNode.x + Math.pow(t, 2) * this.toPoint.x;\n        y = Math.pow(1 - t, 2) * this.fromPoint.y + 2 * t * (1 - t) * viaNode.y + Math.pow(t, 2) * this.toPoint.y;\n      }\n\n      return { x: x, y: y };\n    }\n\n    /**\n     *\n     * @param {Node} nearNode\n     * @param {CanvasRenderingContext2D} ctx\n     * @returns {*}\n     * @private\n     */\n\n  }, {\n    key: '_findBorderPosition',\n    value: function _findBorderPosition(nearNode, ctx) {\n      return this._findBorderPositionBezier(nearNode, ctx, this.via);\n    }\n\n    /**\n     *\n     * @param {number} x1\n     * @param {number} y1\n     * @param {number} x2\n     * @param {number} y2\n     * @param {number} x3\n     * @param {number} y3\n     * @returns {number}\n     * @private\n     */\n\n  }, {\n    key: '_getDistanceToEdge',\n    value: function _getDistanceToEdge(x1, y1, x2, y2, x3, y3) {\n      // x3,y3 is the point\n      return this._getDistanceToBezierEdge(x1, y1, x2, y2, x3, y3, this.via);\n    }\n  }]);\n  return BezierEdgeDynamic;\n}(_BezierEdgeBase3['default']);\n\nexports['default'] = BezierEdgeDynamic;\n\n/***/ }),\n/* 169 */\n/***/ (function(module, exports, __nested_webpack_require_838185__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _getPrototypeOf = __nested_webpack_require_838185__(3);\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _classCallCheck2 = __nested_webpack_require_838185__(0);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __nested_webpack_require_838185__(1);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = __nested_webpack_require_838185__(4);\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = __nested_webpack_require_838185__(5);\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _BezierEdgeBase2 = __nested_webpack_require_838185__(56);\n\nvar _BezierEdgeBase3 = _interopRequireDefault(_BezierEdgeBase2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\n/**\n * A Static Bezier Edge. Bezier curves are used to model smooth gradual\n * curves in paths between nodes.\n *\n * @extends BezierEdgeBase\n */\nvar BezierEdgeStatic = function (_BezierEdgeBase) {\n  (0, _inherits3['default'])(BezierEdgeStatic, _BezierEdgeBase);\n\n  /**\n   * @param {Object} options\n   * @param {Object} body\n   * @param {Label} labelModule\n   */\n  function BezierEdgeStatic(options, body, labelModule) {\n    (0, _classCallCheck3['default'])(this, BezierEdgeStatic);\n    return (0, _possibleConstructorReturn3['default'])(this, (BezierEdgeStatic.__proto__ || (0, _getPrototypeOf2['default'])(BezierEdgeStatic)).call(this, options, body, labelModule));\n  }\n\n  /**\n   * Draw a line between two nodes\n   * @param {CanvasRenderingContext2D} ctx\n   * @param {ArrowOptions} values\n   * @param {Node} viaNode\n   * @private\n   */\n\n\n  (0, _createClass3['default'])(BezierEdgeStatic, [{\n    key: '_line',\n    value: function _line(ctx, values, viaNode) {\n      this._bezierCurve(ctx, values, viaNode);\n    }\n\n    /**\n     *\n     * @returns {Array.<{x: number, y: number}>}\n     */\n\n  }, {\n    key: 'getViaNode',\n    value: function getViaNode() {\n      return this._getViaCoordinates();\n    }\n\n    /**\n     * We do not use the to and fromPoints here to make the via nodes the same as edges without arrows.\n     * @returns {{x: undefined, y: undefined}}\n     * @private\n     */\n\n  }, {\n    key: '_getViaCoordinates',\n    value: function _getViaCoordinates() {\n      // Assumption: x/y coordinates in from/to always defined\n      var xVia = undefined;\n      var yVia = undefined;\n      var factor = this.options.smooth.roundness;\n      var type = this.options.smooth.type;\n      var dx = Math.abs(this.from.x - this.to.x);\n      var dy = Math.abs(this.from.y - this.to.y);\n      if (type === 'discrete' || type === 'diagonalCross') {\n        var stepX = void 0;\n        var stepY = void 0;\n\n        if (dx <= dy) {\n          stepX = stepY = factor * dy;\n        } else {\n          stepX = stepY = factor * dx;\n        }\n\n        if (this.from.x > this.to.x) stepX = -stepX;\n        if (this.from.y >= this.to.y) stepY = -stepY;\n\n        xVia = this.from.x + stepX;\n        yVia = this.from.y + stepY;\n\n        if (type === 'discrete') {\n          if (dx <= dy) {\n            xVia = dx < factor * dy ? this.from.x : xVia;\n          } else {\n            yVia = dy < factor * dx ? this.from.y : yVia;\n          }\n        }\n      } else if (type === 'straightCross') {\n        var _stepX = (1 - factor) * dx;\n        var _stepY = (1 - factor) * dy;\n\n        if (dx <= dy) {\n          // up - down\n          _stepX = 0;\n          if (this.from.y < this.to.y) _stepY = -_stepY;\n        } else {\n          // left - right\n          if (this.from.x < this.to.x) _stepX = -_stepX;\n          _stepY = 0;\n        }\n        xVia = this.to.x + _stepX;\n        yVia = this.to.y + _stepY;\n      } else if (type === 'horizontal') {\n        var _stepX2 = (1 - factor) * dx;\n        if (this.from.x < this.to.x) _stepX2 = -_stepX2;\n        xVia = this.to.x + _stepX2;\n        yVia = this.from.y;\n      } else if (type === 'vertical') {\n        var _stepY2 = (1 - factor) * dy;\n        if (this.from.y < this.to.y) _stepY2 = -_stepY2;\n        xVia = this.from.x;\n        yVia = this.to.y + _stepY2;\n      } else if (type === 'curvedCW') {\n        dx = this.to.x - this.from.x;\n        dy = this.from.y - this.to.y;\n        var radius = Math.sqrt(dx * dx + dy * dy);\n        var pi = Math.PI;\n\n        var originalAngle = Math.atan2(dy, dx);\n        var myAngle = (originalAngle + (factor * 0.5 + 0.5) * pi) % (2 * pi);\n\n        xVia = this.from.x + (factor * 0.5 + 0.5) * radius * Math.sin(myAngle);\n        yVia = this.from.y + (factor * 0.5 + 0.5) * radius * Math.cos(myAngle);\n      } else if (type === 'curvedCCW') {\n        dx = this.to.x - this.from.x;\n        dy = this.from.y - this.to.y;\n        var _radius = Math.sqrt(dx * dx + dy * dy);\n        var _pi = Math.PI;\n\n        var _originalAngle = Math.atan2(dy, dx);\n        var _myAngle = (_originalAngle + (-factor * 0.5 + 0.5) * _pi) % (2 * _pi);\n\n        xVia = this.from.x + (factor * 0.5 + 0.5) * _radius * Math.sin(_myAngle);\n        yVia = this.from.y + (factor * 0.5 + 0.5) * _radius * Math.cos(_myAngle);\n      } else {\n        // continuous\n        var _stepX3 = void 0;\n        var _stepY3 = void 0;\n\n        if (dx <= dy) {\n          _stepX3 = _stepY3 = factor * dy;\n        } else {\n          _stepX3 = _stepY3 = factor * dx;\n        }\n\n        if (this.from.x > this.to.x) _stepX3 = -_stepX3;\n        if (this.from.y >= this.to.y) _stepY3 = -_stepY3;\n\n        xVia = this.from.x + _stepX3;\n        yVia = this.from.y + _stepY3;\n\n        if (dx <= dy) {\n          if (this.from.x <= this.to.x) {\n            xVia = this.to.x < xVia ? this.to.x : xVia;\n          } else {\n            xVia = this.to.x > xVia ? this.to.x : xVia;\n          }\n        } else {\n          if (this.from.y >= this.to.y) {\n            yVia = this.to.y > yVia ? this.to.y : yVia;\n          } else {\n            yVia = this.to.y < yVia ? this.to.y : yVia;\n          }\n        }\n      }\n      return { x: xVia, y: yVia };\n    }\n\n    /**\n     *\n     * @param {Node} nearNode\n     * @param {CanvasRenderingContext2D} ctx\n     * @param {Object} options\n     * @returns {*}\n     * @private\n     */\n\n  }, {\n    key: '_findBorderPosition',\n    value: function _findBorderPosition(nearNode, ctx) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      return this._findBorderPositionBezier(nearNode, ctx, options.via);\n    }\n\n    /**\n     *\n     * @param {number} x1\n     * @param {number} y1\n     * @param {number} x2\n     * @param {number} y2\n     * @param {number} x3\n     * @param {number} y3\n     * @param {Node} viaNode\n     * @returns {number}\n     * @private\n     */\n\n  }, {\n    key: '_getDistanceToEdge',\n    value: function _getDistanceToEdge(x1, y1, x2, y2, x3, y3) {\n      var viaNode = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : this._getViaCoordinates();\n\n      // x3,y3 is the point\n      return this._getDistanceToBezierEdge(x1, y1, x2, y2, x3, y3, viaNode);\n    }\n\n    /**\n     * Combined function of pointOnLine and pointOnBezier. This gives the coordinates of a point on the line at a certain percentage of the way\n     * @param {number} percentage\n     * @param {Node} viaNode\n     * @returns {{x: number, y: number}}\n     * @private\n     */\n\n  }, {\n    key: 'getPoint',\n    value: function getPoint(percentage) {\n      var viaNode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this._getViaCoordinates();\n\n      var t = percentage;\n      var x = Math.pow(1 - t, 2) * this.fromPoint.x + 2 * t * (1 - t) * viaNode.x + Math.pow(t, 2) * this.toPoint.x;\n      var y = Math.pow(1 - t, 2) * this.fromPoint.y + 2 * t * (1 - t) * viaNode.y + Math.pow(t, 2) * this.toPoint.y;\n\n      return { x: x, y: y };\n    }\n  }]);\n  return BezierEdgeStatic;\n}(_BezierEdgeBase3['default']);\n\nexports['default'] = BezierEdgeStatic;\n\n/***/ }),\n/* 170 */\n/***/ (function(module, exports, __nested_webpack_require_846176__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _getPrototypeOf = __nested_webpack_require_846176__(3);\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _classCallCheck2 = __nested_webpack_require_846176__(0);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __nested_webpack_require_846176__(1);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = __nested_webpack_require_846176__(4);\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = __nested_webpack_require_846176__(5);\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _EdgeBase2 = __nested_webpack_require_846176__(79);\n\nvar _EdgeBase3 = _interopRequireDefault(_EdgeBase2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\n/**\n * A Straight Edge.\n *\n * @extends EdgeBase\n */\nvar StraightEdge = function (_EdgeBase) {\n  (0, _inherits3['default'])(StraightEdge, _EdgeBase);\n\n  /**\n   * @param {Object} options\n   * @param {Object} body\n   * @param {Label} labelModule\n   */\n  function StraightEdge(options, body, labelModule) {\n    (0, _classCallCheck3['default'])(this, StraightEdge);\n    return (0, _possibleConstructorReturn3['default'])(this, (StraightEdge.__proto__ || (0, _getPrototypeOf2['default'])(StraightEdge)).call(this, options, body, labelModule));\n  }\n\n  /**\n   * Draw a line between two nodes\n   * @param {CanvasRenderingContext2D} ctx\n   * @param {ArrowOptions} values\n   * @private\n   */\n\n\n  (0, _createClass3['default'])(StraightEdge, [{\n    key: '_line',\n    value: function _line(ctx, values) {\n      // draw a straight line\n      ctx.beginPath();\n      ctx.moveTo(this.fromPoint.x, this.fromPoint.y);\n      ctx.lineTo(this.toPoint.x, this.toPoint.y);\n      // draw shadow if enabled\n      this.enableShadow(ctx, values);\n      ctx.stroke();\n      this.disableShadow(ctx, values);\n    }\n\n    /**\n     *\n     * @returns {undefined}\n     */\n\n  }, {\n    key: 'getViaNode',\n    value: function getViaNode() {\n      return undefined;\n    }\n\n    /**\n     * Combined function of pointOnLine and pointOnBezier. This gives the coordinates of a point on the line at a certain percentage of the way\n     *\n     * @param {number} percentage\n     * @returns {{x: number, y: number}}\n     * @private\n     */\n\n  }, {\n    key: 'getPoint',\n    value: function getPoint(percentage) {\n      return {\n        x: (1 - percentage) * this.fromPoint.x + percentage * this.toPoint.x,\n        y: (1 - percentage) * this.fromPoint.y + percentage * this.toPoint.y\n      };\n    }\n\n    /**\n     *\n     * @param {Node} nearNode\n     * @param {CanvasRenderingContext2D} ctx\n     * @returns {{x: number, y: number}}\n     * @private\n     */\n\n  }, {\n    key: '_findBorderPosition',\n    value: function _findBorderPosition(nearNode, ctx) {\n      var node1 = this.to;\n      var node2 = this.from;\n      if (nearNode.id === this.from.id) {\n        node1 = this.from;\n        node2 = this.to;\n      }\n\n      var angle = Math.atan2(node1.y - node2.y, node1.x - node2.x);\n      var dx = node1.x - node2.x;\n      var dy = node1.y - node2.y;\n      var edgeSegmentLength = Math.sqrt(dx * dx + dy * dy);\n      var toBorderDist = nearNode.distanceToBorder(ctx, angle);\n      var toBorderPoint = (edgeSegmentLength - toBorderDist) / edgeSegmentLength;\n\n      var borderPos = {};\n      borderPos.x = (1 - toBorderPoint) * node2.x + toBorderPoint * node1.x;\n      borderPos.y = (1 - toBorderPoint) * node2.y + toBorderPoint * node1.y;\n\n      return borderPos;\n    }\n\n    /**\n     *\n     * @param {number} x1\n     * @param {number} y1\n     * @param {number} x2\n     * @param {number} y2\n     * @param {number} x3\n     * @param {number} y3\n     * @returns {number}\n     * @private\n     */\n\n  }, {\n    key: '_getDistanceToEdge',\n    value: function _getDistanceToEdge(x1, y1, x2, y2, x3, y3) {\n      // x3,y3 is the point\n      return this._getDistanceToLine(x1, y1, x2, y2, x3, y3);\n    }\n  }]);\n  return StraightEdge;\n}(_EdgeBase3['default']);\n\nexports['default'] = StraightEdge;\n\n/***/ }),\n/* 171 */\n/***/ (function(module, exports, __nested_webpack_require_850332__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _keys = __nested_webpack_require_850332__(9);\n\nvar _keys2 = _interopRequireDefault(_keys);\n\nvar _classCallCheck2 = __nested_webpack_require_850332__(0);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __nested_webpack_require_850332__(1);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar BarnesHutSolver = __nested_webpack_require_850332__(81)['default'];\nvar Repulsion = __nested_webpack_require_850332__(172)['default'];\nvar HierarchicalRepulsion = __nested_webpack_require_850332__(173)['default'];\nvar SpringSolver = __nested_webpack_require_850332__(174)['default'];\nvar HierarchicalSpringSolver = __nested_webpack_require_850332__(175)['default'];\nvar CentralGravitySolver = __nested_webpack_require_850332__(82)['default'];\nvar ForceAtlas2BasedRepulsionSolver = __nested_webpack_require_850332__(176)['default'];\nvar ForceAtlas2BasedCentralGravitySolver = __nested_webpack_require_850332__(177)['default'];\nvar util = __nested_webpack_require_850332__(2);\nvar EndPoints = __nested_webpack_require_850332__(80)['default']; // for debugging with _drawForces()\n\n/**\n * The physics engine\n */\n\nvar PhysicsEngine = function () {\n  /**\n   * @param {Object} body\n   */\n  function PhysicsEngine(body) {\n    (0, _classCallCheck3['default'])(this, PhysicsEngine);\n\n    this.body = body;\n    this.physicsBody = {\n      physicsNodeIndices: [],\n      physicsEdgeIndices: [],\n      forces: {},\n      velocities: {}\n    };\n\n    this.physicsEnabled = true;\n    this.simulationInterval = 1000 / 60;\n    this.requiresTimeout = true;\n    this.previousStates = {};\n    this.referenceState = {};\n    this.freezeCache = {};\n    this.renderTimer = undefined;\n\n    // parameters for the adaptive timestep\n    this.adaptiveTimestep = false;\n    this.adaptiveTimestepEnabled = false;\n    this.adaptiveCounter = 0;\n    this.adaptiveInterval = 3;\n\n    this.stabilized = false;\n    this.startedStabilization = false;\n    this.stabilizationIterations = 0;\n    this.ready = false; // will be set to true if the stabilize\n\n    // default options\n    this.options = {};\n    this.defaultOptions = {\n      enabled: true,\n      barnesHut: {\n        theta: 0.5,\n        gravitationalConstant: -2000,\n        centralGravity: 0.3,\n        springLength: 95,\n        springConstant: 0.04,\n        damping: 0.09,\n        avoidOverlap: 0\n      },\n      forceAtlas2Based: {\n        theta: 0.5,\n        gravitationalConstant: -50,\n        centralGravity: 0.01,\n        springConstant: 0.08,\n        springLength: 100,\n        damping: 0.4,\n        avoidOverlap: 0\n      },\n      repulsion: {\n        centralGravity: 0.2,\n        springLength: 200,\n        springConstant: 0.05,\n        nodeDistance: 100,\n        damping: 0.09,\n        avoidOverlap: 0\n      },\n      hierarchicalRepulsion: {\n        centralGravity: 0.0,\n        springLength: 100,\n        springConstant: 0.01,\n        nodeDistance: 120,\n        damping: 0.09\n      },\n      maxVelocity: 50,\n      minVelocity: 0.75, // px/s\n      solver: 'barnesHut',\n      stabilization: {\n        enabled: true,\n        iterations: 1000, // maximum number of iteration to stabilize\n        updateInterval: 50,\n        onlyDynamicEdges: false,\n        fit: true\n      },\n      timestep: 0.5,\n      adaptiveTimestep: true\n    };\n    util.extend(this.options, this.defaultOptions);\n    this.timestep = 0.5;\n    this.layoutFailed = false;\n\n    this.bindEventListeners();\n  }\n\n  /**\n   * Binds event listeners\n   */\n\n\n  (0, _createClass3['default'])(PhysicsEngine, [{\n    key: 'bindEventListeners',\n    value: function bindEventListeners() {\n      var _this = this;\n\n      this.body.emitter.on('initPhysics', function () {\n        _this.initPhysics();\n      });\n      this.body.emitter.on('_layoutFailed', function () {\n        _this.layoutFailed = true;\n      });\n      this.body.emitter.on('resetPhysics', function () {\n        _this.stopSimulation();\n        _this.ready = false;\n      });\n      this.body.emitter.on('disablePhysics', function () {\n        _this.physicsEnabled = false;\n        _this.stopSimulation();\n      });\n      this.body.emitter.on('restorePhysics', function () {\n        _this.setOptions(_this.options);\n        if (_this.ready === true) {\n          _this.startSimulation();\n        }\n      });\n      this.body.emitter.on('startSimulation', function () {\n        if (_this.ready === true) {\n          _this.startSimulation();\n        }\n      });\n      this.body.emitter.on('stopSimulation', function () {\n        _this.stopSimulation();\n      });\n      this.body.emitter.on('destroy', function () {\n        _this.stopSimulation(false);\n        _this.body.emitter.off();\n      });\n      this.body.emitter.on('_dataChanged', function () {\n        // Nodes and/or edges have been added or removed, update shortcut lists.\n        _this.updatePhysicsData();\n      });\n\n      // debug: show forces\n      // this.body.emitter.on(\"afterDrawing\", (ctx) => {this._drawForces(ctx);});\n    }\n\n    /**\n     * set the physics options\n     * @param {Object} options\n     */\n\n  }, {\n    key: 'setOptions',\n    value: function setOptions(options) {\n      if (options !== undefined) {\n        if (options === false) {\n          this.options.enabled = false;\n          this.physicsEnabled = false;\n          this.stopSimulation();\n        } else if (options === true) {\n          this.options.enabled = true;\n          this.physicsEnabled = true;\n          this.startSimulation();\n        } else {\n          this.physicsEnabled = true;\n          util.selectiveNotDeepExtend(['stabilization'], this.options, options);\n          util.mergeOptions(this.options, options, 'stabilization');\n\n          if (options.enabled === undefined) {\n            this.options.enabled = true;\n          }\n\n          if (this.options.enabled === false) {\n            this.physicsEnabled = false;\n            this.stopSimulation();\n          }\n\n          // set the timestep\n          this.timestep = this.options.timestep;\n        }\n      }\n      this.init();\n    }\n\n    /**\n     * configure the engine.\n     */\n\n  }, {\n    key: 'init',\n    value: function init() {\n      var options;\n      if (this.options.solver === 'forceAtlas2Based') {\n        options = this.options.forceAtlas2Based;\n        this.nodesSolver = new ForceAtlas2BasedRepulsionSolver(this.body, this.physicsBody, options);\n        this.edgesSolver = new SpringSolver(this.body, this.physicsBody, options);\n        this.gravitySolver = new ForceAtlas2BasedCentralGravitySolver(this.body, this.physicsBody, options);\n      } else if (this.options.solver === 'repulsion') {\n        options = this.options.repulsion;\n        this.nodesSolver = new Repulsion(this.body, this.physicsBody, options);\n        this.edgesSolver = new SpringSolver(this.body, this.physicsBody, options);\n        this.gravitySolver = new CentralGravitySolver(this.body, this.physicsBody, options);\n      } else if (this.options.solver === 'hierarchicalRepulsion') {\n        options = this.options.hierarchicalRepulsion;\n        this.nodesSolver = new HierarchicalRepulsion(this.body, this.physicsBody, options);\n        this.edgesSolver = new HierarchicalSpringSolver(this.body, this.physicsBody, options);\n        this.gravitySolver = new CentralGravitySolver(this.body, this.physicsBody, options);\n      } else {\n        // barnesHut\n        options = this.options.barnesHut;\n        this.nodesSolver = new BarnesHutSolver(this.body, this.physicsBody, options);\n        this.edgesSolver = new SpringSolver(this.body, this.physicsBody, options);\n        this.gravitySolver = new CentralGravitySolver(this.body, this.physicsBody, options);\n      }\n\n      this.modelOptions = options;\n    }\n\n    /**\n     * initialize the engine\n     */\n\n  }, {\n    key: 'initPhysics',\n    value: function initPhysics() {\n      if (this.physicsEnabled === true && this.options.enabled === true) {\n        if (this.options.stabilization.enabled === true) {\n          this.stabilize();\n        } else {\n          this.stabilized = false;\n          this.ready = true;\n          this.body.emitter.emit('fit', {}, this.layoutFailed); // if the layout failed, we use the approximation for the zoom\n          this.startSimulation();\n        }\n      } else {\n        this.ready = true;\n        this.body.emitter.emit('fit');\n      }\n    }\n\n    /**\n     * Start the simulation\n     */\n\n  }, {\n    key: 'startSimulation',\n    value: function startSimulation() {\n      if (this.physicsEnabled === true && this.options.enabled === true) {\n        this.stabilized = false;\n\n        // when visible, adaptivity is disabled.\n        this.adaptiveTimestep = false;\n\n        // this sets the width of all nodes initially which could be required for the avoidOverlap\n        this.body.emitter.emit('_resizeNodes');\n        if (this.viewFunction === undefined) {\n          this.viewFunction = this.simulationStep.bind(this);\n          this.body.emitter.on('initRedraw', this.viewFunction);\n          this.body.emitter.emit('_startRendering');\n        }\n      } else {\n        this.body.emitter.emit('_redraw');\n      }\n    }\n\n    /**\n     * Stop the simulation, force stabilization.\n     * @param {boolean} [emit=true]\n     */\n\n  }, {\n    key: 'stopSimulation',\n    value: function stopSimulation() {\n      var emit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n\n      this.stabilized = true;\n      if (emit === true) {\n        this._emitStabilized();\n      }\n      if (this.viewFunction !== undefined) {\n        this.body.emitter.off('initRedraw', this.viewFunction);\n        this.viewFunction = undefined;\n        if (emit === true) {\n          this.body.emitter.emit('_stopRendering');\n        }\n      }\n    }\n\n    /**\n     * The viewFunction inserts this step into each render loop. It calls the physics tick and handles the cleanup at stabilized.\n     *\n     */\n\n  }, {\n    key: 'simulationStep',\n    value: function simulationStep() {\n      // check if the physics have settled\n      var startTime = Date.now();\n      this.physicsTick();\n      var physicsTime = Date.now() - startTime;\n\n      // run double speed if it is a little graph\n      if ((physicsTime < 0.4 * this.simulationInterval || this.runDoubleSpeed === true) && this.stabilized === false) {\n        this.physicsTick();\n\n        // this makes sure there is no jitter. The decision is taken once to run it at double speed.\n        this.runDoubleSpeed = true;\n      }\n\n      if (this.stabilized === true) {\n        this.stopSimulation();\n      }\n    }\n\n    /**\n     * trigger the stabilized event.\n     *\n     * @param {number} [amountOfIterations=this.stabilizationIterations]\n     * @private\n     */\n\n  }, {\n    key: '_emitStabilized',\n    value: function _emitStabilized() {\n      var _this2 = this;\n\n      var amountOfIterations = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.stabilizationIterations;\n\n      if (this.stabilizationIterations > 1 || this.startedStabilization === true) {\n        setTimeout(function () {\n          _this2.body.emitter.emit('stabilized', { iterations: amountOfIterations });\n          _this2.startedStabilization = false;\n          _this2.stabilizationIterations = 0;\n        }, 0);\n      }\n    }\n\n    /**\n     * Calculate the forces for one physics iteration and move the nodes.\n     * @private\n     */\n\n  }, {\n    key: 'physicsStep',\n    value: function physicsStep() {\n      this.gravitySolver.solve();\n      this.nodesSolver.solve();\n      this.edgesSolver.solve();\n      this.moveNodes();\n    }\n\n    /**\n     * Make dynamic adjustments to the timestep, based on current state.\n     *\n     * Helper function for physicsTick().\n     * @private\n     */\n\n  }, {\n    key: 'adjustTimeStep',\n    value: function adjustTimeStep() {\n      var factor = 1.2; // Factor for increasing the timestep on success.\n\n      // we compare the two steps. if it is acceptable we double the step.\n      if (this._evaluateStepQuality() === true) {\n        this.timestep = factor * this.timestep;\n      } else {\n        // if not, we decrease the step to a minimum of the options timestep.\n        // if the decreased timestep is smaller than the options step, we do not reset the counter\n        // we assume that the options timestep is stable enough.\n        if (this.timestep / factor < this.options.timestep) {\n          this.timestep = this.options.timestep;\n        } else {\n          // if the timestep was larger than 2 times the option one we check the adaptivity again to ensure\n          // that large instabilities do not form.\n          this.adaptiveCounter = -1; // check again next iteration\n          this.timestep = Math.max(this.options.timestep, this.timestep / factor);\n        }\n      }\n    }\n\n    /**\n     * A single simulation step (or 'tick') in the physics simulation\n     *\n     * @private\n     */\n\n  }, {\n    key: 'physicsTick',\n    value: function physicsTick() {\n      this._startStabilizing(); // this ensures that there is no start event when the network is already stable.\n      if (this.stabilized === true) return;\n\n      // adaptivity means the timestep adapts to the situation, only applicable for stabilization\n      if (this.adaptiveTimestep === true && this.adaptiveTimestepEnabled === true) {\n        // timestep remains stable for \"interval\" iterations.\n        var doAdaptive = this.adaptiveCounter % this.adaptiveInterval === 0;\n\n        if (doAdaptive) {\n          // first the big step and revert.\n          this.timestep = 2 * this.timestep;\n          this.physicsStep();\n          this.revert(); // saves the reference state\n\n          // now the normal step. Since this is the last step, it is the more stable one and we will take this.\n          this.timestep = 0.5 * this.timestep;\n\n          // since it's half the step, we do it twice.\n          this.physicsStep();\n          this.physicsStep();\n\n          this.adjustTimeStep();\n        } else {\n          this.physicsStep(); // normal step, keeping timestep constant\n        }\n\n        this.adaptiveCounter += 1;\n      } else {\n        // case for the static timestep, we reset it to the one in options and take a normal step.\n        this.timestep = this.options.timestep;\n        this.physicsStep();\n      }\n\n      if (this.stabilized === true) this.revert();\n      this.stabilizationIterations++;\n    }\n\n    /**\n     * Nodes and edges can have the physics toggles on or off. A collection of indices is created here so we can skip the check all the time.\n     *\n     * @private\n     */\n\n  }, {\n    key: 'updatePhysicsData',\n    value: function updatePhysicsData() {\n      this.physicsBody.forces = {};\n      this.physicsBody.physicsNodeIndices = [];\n      this.physicsBody.physicsEdgeIndices = [];\n      var nodes = this.body.nodes;\n      var edges = this.body.edges;\n\n      // get node indices for physics\n      for (var nodeId in nodes) {\n        if (nodes.hasOwnProperty(nodeId)) {\n          if (nodes[nodeId].options.physics === true) {\n            this.physicsBody.physicsNodeIndices.push(nodes[nodeId].id);\n          }\n        }\n      }\n\n      // get edge indices for physics\n      for (var edgeId in edges) {\n        if (edges.hasOwnProperty(edgeId)) {\n          if (edges[edgeId].options.physics === true) {\n            this.physicsBody.physicsEdgeIndices.push(edges[edgeId].id);\n          }\n        }\n      }\n\n      // get the velocity and the forces vector\n      for (var i = 0; i < this.physicsBody.physicsNodeIndices.length; i++) {\n        var _nodeId = this.physicsBody.physicsNodeIndices[i];\n        this.physicsBody.forces[_nodeId] = { x: 0, y: 0\n\n          // forces can be reset because they are recalculated. Velocities have to persist.\n        };if (this.physicsBody.velocities[_nodeId] === undefined) {\n          this.physicsBody.velocities[_nodeId] = { x: 0, y: 0 };\n        }\n      }\n\n      // clean deleted nodes from the velocity vector\n      for (var _nodeId2 in this.physicsBody.velocities) {\n        if (nodes[_nodeId2] === undefined) {\n          delete this.physicsBody.velocities[_nodeId2];\n        }\n      }\n    }\n\n    /**\n     * Revert the simulation one step. This is done so after stabilization, every new start of the simulation will also say stabilized.\n     */\n\n  }, {\n    key: 'revert',\n    value: function revert() {\n      var nodeIds = (0, _keys2['default'])(this.previousStates);\n      var nodes = this.body.nodes;\n      var velocities = this.physicsBody.velocities;\n      this.referenceState = {};\n\n      for (var i = 0; i < nodeIds.length; i++) {\n        var nodeId = nodeIds[i];\n        if (nodes[nodeId] !== undefined) {\n          if (nodes[nodeId].options.physics === true) {\n            this.referenceState[nodeId] = {\n              positions: { x: nodes[nodeId].x, y: nodes[nodeId].y }\n            };\n            velocities[nodeId].x = this.previousStates[nodeId].vx;\n            velocities[nodeId].y = this.previousStates[nodeId].vy;\n            nodes[nodeId].x = this.previousStates[nodeId].x;\n            nodes[nodeId].y = this.previousStates[nodeId].y;\n          }\n        } else {\n          delete this.previousStates[nodeId];\n        }\n      }\n    }\n\n    /**\n     * This compares the reference state to the current state\n     *\n     * @returns {boolean}\n     * @private\n     */\n\n  }, {\n    key: '_evaluateStepQuality',\n    value: function _evaluateStepQuality() {\n      var dx = void 0,\n          dy = void 0,\n          dpos = void 0;\n      var nodes = this.body.nodes;\n      var reference = this.referenceState;\n      var posThreshold = 0.3;\n\n      for (var nodeId in this.referenceState) {\n        if (this.referenceState.hasOwnProperty(nodeId) && nodes[nodeId] !== undefined) {\n          dx = nodes[nodeId].x - reference[nodeId].positions.x;\n          dy = nodes[nodeId].y - reference[nodeId].positions.y;\n\n          dpos = Math.sqrt(Math.pow(dx, 2) + Math.pow(dy, 2));\n\n          if (dpos > posThreshold) {\n            return false;\n          }\n        }\n      }\n      return true;\n    }\n\n    /**\n     * move the nodes one timestep and check if they are stabilized\n     */\n\n  }, {\n    key: 'moveNodes',\n    value: function moveNodes() {\n      var nodeIndices = this.physicsBody.physicsNodeIndices;\n      var maxNodeVelocity = 0;\n      var averageNodeVelocity = 0;\n\n      // the velocity threshold (energy in the system) for the adaptivity toggle\n      var velocityAdaptiveThreshold = 5;\n\n      for (var i = 0; i < nodeIndices.length; i++) {\n        var nodeId = nodeIndices[i];\n        var nodeVelocity = this._performStep(nodeId);\n        // stabilized is true if stabilized is true and velocity is smaller than vmin --> all nodes must be stabilized\n        maxNodeVelocity = Math.max(maxNodeVelocity, nodeVelocity);\n        averageNodeVelocity += nodeVelocity;\n      }\n\n      // evaluating the stabilized and adaptiveTimestepEnabled conditions\n      this.adaptiveTimestepEnabled = averageNodeVelocity / nodeIndices.length < velocityAdaptiveThreshold;\n      this.stabilized = maxNodeVelocity < this.options.minVelocity;\n    }\n\n    /**\n     * Calculate new velocity for a coordinate direction\n     *\n     * @param {number} v  velocity for current coordinate\n     * @param {number} f  regular force for current coordinate\n     * @param {number} m  mass of current node\n     * @returns {number} new velocity for current coordinate\n     * @private\n     */\n\n  }, {\n    key: 'calculateComponentVelocity',\n    value: function calculateComponentVelocity(v, f, m) {\n      var df = this.modelOptions.damping * v; // damping force\n      var a = (f - df) / m; // acceleration\n\n      v += a * this.timestep;\n\n      // Put a limit on the velocities if it is really high\n      var maxV = this.options.maxVelocity || 1e9;\n      if (Math.abs(v) > maxV) {\n        v = v > 0 ? maxV : -maxV;\n      }\n\n      return v;\n    }\n\n    /**\n     * Perform the actual step\n     *\n     * @param {Node.id} nodeId\n     * @returns {number} the new velocity of given node\n     * @private\n     */\n\n  }, {\n    key: '_performStep',\n    value: function _performStep(nodeId) {\n      var node = this.body.nodes[nodeId];\n      var force = this.physicsBody.forces[nodeId];\n      var velocity = this.physicsBody.velocities[nodeId];\n\n      // store the state so we can revert\n      this.previousStates[nodeId] = {\n        x: node.x,\n        y: node.y,\n        vx: velocity.x,\n        vy: velocity.y\n      };\n\n      if (node.options.fixed.x === false) {\n        velocity.x = this.calculateComponentVelocity(velocity.x, force.x, node.options.mass);\n        node.x += velocity.x * this.timestep;\n      } else {\n        force.x = 0;\n        velocity.x = 0;\n      }\n\n      if (node.options.fixed.y === false) {\n        velocity.y = this.calculateComponentVelocity(velocity.y, force.y, node.options.mass);\n        node.y += velocity.y * this.timestep;\n      } else {\n        force.y = 0;\n        velocity.y = 0;\n      }\n\n      var totalVelocity = Math.sqrt(Math.pow(velocity.x, 2) + Math.pow(velocity.y, 2));\n      return totalVelocity;\n    }\n\n    /**\n     * When initializing and stabilizing, we can freeze nodes with a predefined position.\n     * This greatly speeds up stabilization because only the supportnodes for the smoothCurves have to settle.\n     *\n     * @private\n     */\n\n  }, {\n    key: '_freezeNodes',\n    value: function _freezeNodes() {\n      var nodes = this.body.nodes;\n      for (var id in nodes) {\n        if (nodes.hasOwnProperty(id)) {\n          if (nodes[id].x && nodes[id].y) {\n            var fixed = nodes[id].options.fixed;\n            this.freezeCache[id] = { x: fixed.x, y: fixed.y };\n            fixed.x = true;\n            fixed.y = true;\n          }\n        }\n      }\n    }\n\n    /**\n     * Unfreezes the nodes that have been frozen by _freezeDefinedNodes.\n     *\n     * @private\n     */\n\n  }, {\n    key: '_restoreFrozenNodes',\n    value: function _restoreFrozenNodes() {\n      var nodes = this.body.nodes;\n      for (var id in nodes) {\n        if (nodes.hasOwnProperty(id)) {\n          if (this.freezeCache[id] !== undefined) {\n            nodes[id].options.fixed.x = this.freezeCache[id].x;\n            nodes[id].options.fixed.y = this.freezeCache[id].y;\n          }\n        }\n      }\n      this.freezeCache = {};\n    }\n\n    /**\n     * Find a stable position for all nodes\n     *\n     * @param {number} [iterations=this.options.stabilization.iterations]\n     */\n\n  }, {\n    key: 'stabilize',\n    value: function stabilize() {\n      var _this3 = this;\n\n      var iterations = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.options.stabilization.iterations;\n\n      if (typeof iterations !== 'number') {\n        iterations = this.options.stabilization.iterations;\n        console.log('The stabilize method needs a numeric amount of iterations. Switching to default: ', iterations);\n      }\n\n      if (this.physicsBody.physicsNodeIndices.length === 0) {\n        this.ready = true;\n        return;\n      }\n\n      // enable adaptive timesteps\n      this.adaptiveTimestep =  true && this.options.adaptiveTimestep;\n\n      // this sets the width of all nodes initially which could be required for the avoidOverlap\n      this.body.emitter.emit('_resizeNodes');\n\n      this.stopSimulation(); // stop the render loop\n      this.stabilized = false;\n\n      // block redraw requests\n      this.body.emitter.emit('_blockRedraw');\n      this.targetIterations = iterations;\n\n      // start the stabilization\n      if (this.options.stabilization.onlyDynamicEdges === true) {\n        this._freezeNodes();\n      }\n      this.stabilizationIterations = 0;\n\n      setTimeout(function () {\n        return _this3._stabilizationBatch();\n      }, 0);\n    }\n\n    /**\n     * If not already stabilizing, start it and emit a start event.\n     *\n     * @returns {boolean} true if stabilization started with this call\n     * @private\n     */\n\n  }, {\n    key: '_startStabilizing',\n    value: function _startStabilizing() {\n      if (this.startedStabilization === true) return false;\n\n      this.body.emitter.emit('startStabilizing');\n      this.startedStabilization = true;\n      return true;\n    }\n\n    /**\n     * One batch of stabilization\n     * @private\n     */\n\n  }, {\n    key: '_stabilizationBatch',\n    value: function _stabilizationBatch() {\n      var _this4 = this;\n\n      var running = function running() {\n        return _this4.stabilized === false && _this4.stabilizationIterations < _this4.targetIterations;\n      };\n\n      var sendProgress = function sendProgress() {\n        _this4.body.emitter.emit('stabilizationProgress', {\n          iterations: _this4.stabilizationIterations,\n          total: _this4.targetIterations\n        });\n      };\n\n      if (this._startStabilizing()) {\n        sendProgress(); // Ensure that there is at least one start event.\n      }\n\n      var count = 0;\n      while (running() && count < this.options.stabilization.updateInterval) {\n        this.physicsTick();\n        count++;\n      }\n\n      sendProgress();\n\n      if (running()) {\n        setTimeout(this._stabilizationBatch.bind(this), 0);\n      } else {\n        this._finalizeStabilization();\n      }\n    }\n\n    /**\n     * Wrap up the stabilization, fit and emit the events.\n     * @private\n     */\n\n  }, {\n    key: '_finalizeStabilization',\n    value: function _finalizeStabilization() {\n      this.body.emitter.emit('_allowRedraw');\n      if (this.options.stabilization.fit === true) {\n        this.body.emitter.emit('fit');\n      }\n\n      if (this.options.stabilization.onlyDynamicEdges === true) {\n        this._restoreFrozenNodes();\n      }\n\n      this.body.emitter.emit('stabilizationIterationsDone');\n      this.body.emitter.emit('_requestRedraw');\n\n      if (this.stabilized === true) {\n        this._emitStabilized();\n      } else {\n        this.startSimulation();\n      }\n\n      this.ready = true;\n    }\n\n    //---------------------------  DEBUGGING BELOW  ---------------------------//\n\n    /**\n     * Debug function that display arrows for the forces currently active in the network.\n     *\n     * Use this when debugging only.\n     *\n     * @param {CanvasRenderingContext2D} ctx\n     * @private\n     */\n\n  }, {\n    key: '_drawForces',\n    value: function _drawForces(ctx) {\n      for (var i = 0; i < this.physicsBody.physicsNodeIndices.length; i++) {\n        var index = this.physicsBody.physicsNodeIndices[i];\n        var node = this.body.nodes[index];\n        var force = this.physicsBody.forces[index];\n        var factor = 20;\n        var colorFactor = 0.03;\n        var forceSize = Math.sqrt(Math.pow(force.x, 2) + Math.pow(force.x, 2));\n\n        var size = Math.min(Math.max(5, forceSize), 15);\n        var arrowSize = 3 * size;\n\n        var color = util.HSVToHex((180 - Math.min(1, Math.max(0, colorFactor * forceSize)) * 180) / 360, 1, 1);\n\n        var point = {\n          x: node.x + factor * force.x,\n          y: node.y + factor * force.y\n        };\n\n        ctx.lineWidth = size;\n        ctx.strokeStyle = color;\n        ctx.beginPath();\n        ctx.moveTo(node.x, node.y);\n        ctx.lineTo(point.x, point.y);\n        ctx.stroke();\n\n        var angle = Math.atan2(force.y, force.x);\n        ctx.fillStyle = color;\n        EndPoints.draw(ctx, {\n          type: 'arrow',\n          point: point,\n          angle: angle,\n          length: arrowSize\n        });\n        ctx.fill();\n      }\n    }\n  }]);\n  return PhysicsEngine;\n}();\n\nexports['default'] = PhysicsEngine;\n\n/***/ }),\n/* 172 */\n/***/ (function(module, exports, __nested_webpack_require_877742__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _classCallCheck2 = __nested_webpack_require_877742__(0);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __nested_webpack_require_877742__(1);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\n/**\n * Repulsion Solver\n */\nvar RepulsionSolver = function () {\n  /**\n   * @param {Object} body\n   * @param {{physicsNodeIndices: Array, physicsEdgeIndices: Array, forces: {}, velocities: {}}} physicsBody\n   * @param {Object} options\n   */\n  function RepulsionSolver(body, physicsBody, options) {\n    (0, _classCallCheck3[\"default\"])(this, RepulsionSolver);\n\n    this.body = body;\n    this.physicsBody = physicsBody;\n    this.setOptions(options);\n  }\n\n  /**\n   *\n   * @param {Object} options\n   */\n\n\n  (0, _createClass3[\"default\"])(RepulsionSolver, [{\n    key: \"setOptions\",\n    value: function setOptions(options) {\n      this.options = options;\n    }\n\n    /**\n     * Calculate the forces the nodes apply on each other based on a repulsion field.\n     * This field is linearly approximated.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"solve\",\n    value: function solve() {\n      var dx, dy, distance, fx, fy, repulsingForce, node1, node2;\n\n      var nodes = this.body.nodes;\n      var nodeIndices = this.physicsBody.physicsNodeIndices;\n      var forces = this.physicsBody.forces;\n\n      // repulsing forces between nodes\n      var nodeDistance = this.options.nodeDistance;\n\n      // approximation constants\n      var a = -2 / 3 / nodeDistance;\n      var b = 4 / 3;\n\n      // we loop from i over all but the last entree in the array\n      // j loops from i+1 to the last. This way we do not double count any of the indices, nor i === j\n      for (var i = 0; i < nodeIndices.length - 1; i++) {\n        node1 = nodes[nodeIndices[i]];\n        for (var j = i + 1; j < nodeIndices.length; j++) {\n          node2 = nodes[nodeIndices[j]];\n\n          dx = node2.x - node1.x;\n          dy = node2.y - node1.y;\n          distance = Math.sqrt(dx * dx + dy * dy);\n\n          // same condition as BarnesHutSolver, making sure nodes are never 100% overlapping.\n          if (distance === 0) {\n            distance = 0.1 * Math.random();\n            dx = distance;\n          }\n\n          if (distance < 2 * nodeDistance) {\n            if (distance < 0.5 * nodeDistance) {\n              repulsingForce = 1.0;\n            } else {\n              repulsingForce = a * distance + b; // linear approx of  1 / (1 + Math.exp((distance / nodeDistance - 1) * steepness))\n            }\n            repulsingForce = repulsingForce / distance;\n\n            fx = dx * repulsingForce;\n            fy = dy * repulsingForce;\n\n            forces[node1.id].x -= fx;\n            forces[node1.id].y -= fy;\n            forces[node2.id].x += fx;\n            forces[node2.id].y += fy;\n          }\n        }\n      }\n    }\n  }]);\n  return RepulsionSolver;\n}();\n\nexports[\"default\"] = RepulsionSolver;\n\n/***/ }),\n/* 173 */\n/***/ (function(module, exports, __nested_webpack_require_880884__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _classCallCheck2 = __nested_webpack_require_880884__(0);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __nested_webpack_require_880884__(1);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\n/**\n * Hierarchical Repulsion Solver\n */\nvar HierarchicalRepulsionSolver = function () {\n  /**\n   * @param {Object} body\n   * @param {{physicsNodeIndices: Array, physicsEdgeIndices: Array, forces: {}, velocities: {}}} physicsBody\n   * @param {Object} options\n   */\n  function HierarchicalRepulsionSolver(body, physicsBody, options) {\n    (0, _classCallCheck3[\"default\"])(this, HierarchicalRepulsionSolver);\n\n    this.body = body;\n    this.physicsBody = physicsBody;\n    this.setOptions(options);\n  }\n\n  /**\n   *\n   * @param {Object} options\n   */\n\n\n  (0, _createClass3[\"default\"])(HierarchicalRepulsionSolver, [{\n    key: \"setOptions\",\n    value: function setOptions(options) {\n      this.options = options;\n    }\n\n    /**\n     * Calculate the forces the nodes apply on each other based on a repulsion field.\n     * This field is linearly approximated.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"solve\",\n    value: function solve() {\n      var dx, dy, distance, fx, fy, repulsingForce, node1, node2, i, j;\n\n      var nodes = this.body.nodes;\n      var nodeIndices = this.physicsBody.physicsNodeIndices;\n      var forces = this.physicsBody.forces;\n\n      // repulsing forces between nodes\n      var nodeDistance = this.options.nodeDistance;\n\n      // we loop from i over all but the last entree in the array\n      // j loops from i+1 to the last. This way we do not double count any of the indices, nor i === j\n      for (i = 0; i < nodeIndices.length - 1; i++) {\n        node1 = nodes[nodeIndices[i]];\n        for (j = i + 1; j < nodeIndices.length; j++) {\n          node2 = nodes[nodeIndices[j]];\n\n          // nodes only affect nodes on their level\n          if (node1.level === node2.level) {\n            dx = node2.x - node1.x;\n            dy = node2.y - node1.y;\n            distance = Math.sqrt(dx * dx + dy * dy);\n\n            var steepness = 0.05;\n            if (distance < nodeDistance) {\n              repulsingForce = -Math.pow(steepness * distance, 2) + Math.pow(steepness * nodeDistance, 2);\n            } else {\n              repulsingForce = 0;\n            }\n            // normalize force with\n            if (distance === 0) {\n              distance = 0.01;\n            } else {\n              repulsingForce = repulsingForce / distance;\n            }\n            fx = dx * repulsingForce;\n            fy = dy * repulsingForce;\n\n            forces[node1.id].x -= fx;\n            forces[node1.id].y -= fy;\n            forces[node2.id].x += fx;\n            forces[node2.id].y += fy;\n          }\n        }\n      }\n    }\n  }]);\n  return HierarchicalRepulsionSolver;\n}();\n\nexports[\"default\"] = HierarchicalRepulsionSolver;\n\n/***/ }),\n/* 174 */\n/***/ (function(module, exports, __nested_webpack_require_884003__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _classCallCheck2 = __nested_webpack_require_884003__(0);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __nested_webpack_require_884003__(1);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\n/**\n * Spring Solver\n */\nvar SpringSolver = function () {\n  /**\n   * @param {Object} body\n   * @param {{physicsNodeIndices: Array, physicsEdgeIndices: Array, forces: {}, velocities: {}}} physicsBody\n   * @param {Object} options\n   */\n  function SpringSolver(body, physicsBody, options) {\n    (0, _classCallCheck3[\"default\"])(this, SpringSolver);\n\n    this.body = body;\n    this.physicsBody = physicsBody;\n    this.setOptions(options);\n  }\n\n  /**\n   *\n   * @param {Object} options\n   */\n\n\n  (0, _createClass3[\"default\"])(SpringSolver, [{\n    key: \"setOptions\",\n    value: function setOptions(options) {\n      this.options = options;\n    }\n\n    /**\n     * This function calculates the springforces on the nodes, accounting for the support nodes.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"solve\",\n    value: function solve() {\n      var edgeLength = void 0,\n          edge = void 0;\n      var edgeIndices = this.physicsBody.physicsEdgeIndices;\n      var edges = this.body.edges;\n      var node1 = void 0,\n          node2 = void 0,\n          node3 = void 0;\n\n      // forces caused by the edges, modelled as springs\n      for (var i = 0; i < edgeIndices.length; i++) {\n        edge = edges[edgeIndices[i]];\n        if (edge.connected === true && edge.toId !== edge.fromId) {\n          // only calculate forces if nodes are in the same sector\n          if (this.body.nodes[edge.toId] !== undefined && this.body.nodes[edge.fromId] !== undefined) {\n            if (edge.edgeType.via !== undefined) {\n              edgeLength = edge.options.length === undefined ? this.options.springLength : edge.options.length;\n              node1 = edge.to;\n              node2 = edge.edgeType.via;\n              node3 = edge.from;\n\n              this._calculateSpringForce(node1, node2, 0.5 * edgeLength);\n              this._calculateSpringForce(node2, node3, 0.5 * edgeLength);\n            } else {\n              // the * 1.5 is here so the edge looks as large as a smooth edge. It does not initially because the smooth edges use\n              // the support nodes which exert a repulsive force on the to and from nodes, making the edge appear larger.\n              edgeLength = edge.options.length === undefined ? this.options.springLength * 1.5 : edge.options.length;\n              this._calculateSpringForce(edge.from, edge.to, edgeLength);\n            }\n          }\n        }\n      }\n    }\n\n    /**\n     * This is the code actually performing the calculation for the function above.\n     *\n     * @param {Node} node1\n     * @param {Node} node2\n     * @param {number} edgeLength\n     * @private\n     */\n\n  }, {\n    key: \"_calculateSpringForce\",\n    value: function _calculateSpringForce(node1, node2, edgeLength) {\n      var dx = node1.x - node2.x;\n      var dy = node1.y - node2.y;\n      var distance = Math.max(Math.sqrt(dx * dx + dy * dy), 0.01);\n\n      // the 1/distance is so the fx and fy can be calculated without sine or cosine.\n      var springForce = this.options.springConstant * (edgeLength - distance) / distance;\n\n      var fx = dx * springForce;\n      var fy = dy * springForce;\n\n      // handle the case where one node is not part of the physcis\n      if (this.physicsBody.forces[node1.id] !== undefined) {\n        this.physicsBody.forces[node1.id].x += fx;\n        this.physicsBody.forces[node1.id].y += fy;\n      }\n\n      if (this.physicsBody.forces[node2.id] !== undefined) {\n        this.physicsBody.forces[node2.id].x -= fx;\n        this.physicsBody.forces[node2.id].y -= fy;\n      }\n    }\n  }]);\n  return SpringSolver;\n}();\n\nexports[\"default\"] = SpringSolver;\n\n/***/ }),\n/* 175 */\n/***/ (function(module, exports, __nested_webpack_require_888054__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _classCallCheck2 = __nested_webpack_require_888054__(0);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __nested_webpack_require_888054__(1);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\n/**\n * Hierarchical Spring Solver\n */\nvar HierarchicalSpringSolver = function () {\n  /**\n   * @param {Object} body\n   * @param {{physicsNodeIndices: Array, physicsEdgeIndices: Array, forces: {}, velocities: {}}} physicsBody\n   * @param {Object} options\n   */\n  function HierarchicalSpringSolver(body, physicsBody, options) {\n    (0, _classCallCheck3[\"default\"])(this, HierarchicalSpringSolver);\n\n    this.body = body;\n    this.physicsBody = physicsBody;\n    this.setOptions(options);\n  }\n\n  /**\n   *\n   * @param {Object} options\n   */\n\n\n  (0, _createClass3[\"default\"])(HierarchicalSpringSolver, [{\n    key: \"setOptions\",\n    value: function setOptions(options) {\n      this.options = options;\n    }\n\n    /**\n     * This function calculates the springforces on the nodes, accounting for the support nodes.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"solve\",\n    value: function solve() {\n      var edgeLength, edge;\n      var dx, dy, fx, fy, springForce, distance;\n      var edges = this.body.edges;\n      var factor = 0.5;\n\n      var edgeIndices = this.physicsBody.physicsEdgeIndices;\n      var nodeIndices = this.physicsBody.physicsNodeIndices;\n      var forces = this.physicsBody.forces;\n\n      // initialize the spring force counters\n      for (var i = 0; i < nodeIndices.length; i++) {\n        var nodeId = nodeIndices[i];\n        forces[nodeId].springFx = 0;\n        forces[nodeId].springFy = 0;\n      }\n\n      // forces caused by the edges, modelled as springs\n      for (var _i = 0; _i < edgeIndices.length; _i++) {\n        edge = edges[edgeIndices[_i]];\n        if (edge.connected === true) {\n          edgeLength = edge.options.length === undefined ? this.options.springLength : edge.options.length;\n\n          dx = edge.from.x - edge.to.x;\n          dy = edge.from.y - edge.to.y;\n          distance = Math.sqrt(dx * dx + dy * dy);\n          distance = distance === 0 ? 0.01 : distance;\n\n          // the 1/distance is so the fx and fy can be calculated without sine or cosine.\n          springForce = this.options.springConstant * (edgeLength - distance) / distance;\n\n          fx = dx * springForce;\n          fy = dy * springForce;\n\n          if (edge.to.level != edge.from.level) {\n            if (forces[edge.toId] !== undefined) {\n              forces[edge.toId].springFx -= fx;\n              forces[edge.toId].springFy -= fy;\n            }\n            if (forces[edge.fromId] !== undefined) {\n              forces[edge.fromId].springFx += fx;\n              forces[edge.fromId].springFy += fy;\n            }\n          } else {\n            if (forces[edge.toId] !== undefined) {\n              forces[edge.toId].x -= factor * fx;\n              forces[edge.toId].y -= factor * fy;\n            }\n            if (forces[edge.fromId] !== undefined) {\n              forces[edge.fromId].x += factor * fx;\n              forces[edge.fromId].y += factor * fy;\n            }\n          }\n        }\n      }\n\n      // normalize spring forces\n      springForce = 1;\n      var springFx, springFy;\n      for (var _i2 = 0; _i2 < nodeIndices.length; _i2++) {\n        var _nodeId = nodeIndices[_i2];\n        springFx = Math.min(springForce, Math.max(-springForce, forces[_nodeId].springFx));\n        springFy = Math.min(springForce, Math.max(-springForce, forces[_nodeId].springFy));\n\n        forces[_nodeId].x += springFx;\n        forces[_nodeId].y += springFy;\n      }\n\n      // retain energy balance\n      var totalFx = 0;\n      var totalFy = 0;\n      for (var _i3 = 0; _i3 < nodeIndices.length; _i3++) {\n        var _nodeId2 = nodeIndices[_i3];\n        totalFx += forces[_nodeId2].x;\n        totalFy += forces[_nodeId2].y;\n      }\n      var correctionFx = totalFx / nodeIndices.length;\n      var correctionFy = totalFy / nodeIndices.length;\n\n      for (var _i4 = 0; _i4 < nodeIndices.length; _i4++) {\n        var _nodeId3 = nodeIndices[_i4];\n        forces[_nodeId3].x -= correctionFx;\n        forces[_nodeId3].y -= correctionFy;\n      }\n    }\n  }]);\n  return HierarchicalSpringSolver;\n}();\n\nexports[\"default\"] = HierarchicalSpringSolver;\n\n/***/ }),\n/* 176 */\n/***/ (function(module, exports, __nested_webpack_require_892574__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _getPrototypeOf = __nested_webpack_require_892574__(3);\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _classCallCheck2 = __nested_webpack_require_892574__(0);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __nested_webpack_require_892574__(1);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = __nested_webpack_require_892574__(4);\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = __nested_webpack_require_892574__(5);\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _BarnesHutSolver2 = __nested_webpack_require_892574__(81);\n\nvar _BarnesHutSolver3 = _interopRequireDefault(_BarnesHutSolver2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\n/**\n * @extends BarnesHutSolver\n */\nvar ForceAtlas2BasedRepulsionSolver = function (_BarnesHutSolver) {\n  (0, _inherits3['default'])(ForceAtlas2BasedRepulsionSolver, _BarnesHutSolver);\n\n  /**\n   * @param {Object} body\n   * @param {{physicsNodeIndices: Array, physicsEdgeIndices: Array, forces: {}, velocities: {}}} physicsBody\n   * @param {Object} options\n   */\n  function ForceAtlas2BasedRepulsionSolver(body, physicsBody, options) {\n    (0, _classCallCheck3['default'])(this, ForceAtlas2BasedRepulsionSolver);\n    return (0, _possibleConstructorReturn3['default'])(this, (ForceAtlas2BasedRepulsionSolver.__proto__ || (0, _getPrototypeOf2['default'])(ForceAtlas2BasedRepulsionSolver)).call(this, body, physicsBody, options));\n  }\n\n  /**\n   * Calculate the forces based on the distance.\n   *\n   * @param {number} distance\n   * @param {number} dx\n   * @param {number} dy\n   * @param {Node} node\n   * @param {Object} parentBranch\n   * @private\n   */\n\n\n  (0, _createClass3['default'])(ForceAtlas2BasedRepulsionSolver, [{\n    key: '_calculateForces',\n    value: function _calculateForces(distance, dx, dy, node, parentBranch) {\n      if (distance === 0) {\n        distance = 0.1 * Math.random();\n        dx = distance;\n      }\n\n      if (this.overlapAvoidanceFactor < 1 && node.shape.radius) {\n        distance = Math.max(0.1 + this.overlapAvoidanceFactor * node.shape.radius, distance - node.shape.radius);\n      }\n\n      var degree = node.edges.length + 1;\n      // the dividing by the distance cubed instead of squared allows us to get the fx and fy components without sines and cosines\n      // it is shorthand for gravityforce with distance squared and fx = dx/distance * gravityForce\n      var gravityForce = this.options.gravitationalConstant * parentBranch.mass * node.options.mass * degree / Math.pow(distance, 2);\n      var fx = dx * gravityForce;\n      var fy = dy * gravityForce;\n\n      this.physicsBody.forces[node.id].x += fx;\n      this.physicsBody.forces[node.id].y += fy;\n    }\n  }]);\n  return ForceAtlas2BasedRepulsionSolver;\n}(_BarnesHutSolver3['default']);\n\nexports['default'] = ForceAtlas2BasedRepulsionSolver;\n\n/***/ }),\n/* 177 */\n/***/ (function(module, exports, __nested_webpack_require_895653__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _getPrototypeOf = __nested_webpack_require_895653__(3);\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _classCallCheck2 = __nested_webpack_require_895653__(0);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __nested_webpack_require_895653__(1);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = __nested_webpack_require_895653__(4);\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = __nested_webpack_require_895653__(5);\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _CentralGravitySolver2 = __nested_webpack_require_895653__(82);\n\nvar _CentralGravitySolver3 = _interopRequireDefault(_CentralGravitySolver2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\n/**\n * @extends CentralGravitySolver\n */\nvar ForceAtlas2BasedCentralGravitySolver = function (_CentralGravitySolver) {\n  (0, _inherits3['default'])(ForceAtlas2BasedCentralGravitySolver, _CentralGravitySolver);\n\n  /**\n   * @param {Object} body\n   * @param {{physicsNodeIndices: Array, physicsEdgeIndices: Array, forces: {}, velocities: {}}} physicsBody\n   * @param {Object} options\n   */\n  function ForceAtlas2BasedCentralGravitySolver(body, physicsBody, options) {\n    (0, _classCallCheck3['default'])(this, ForceAtlas2BasedCentralGravitySolver);\n    return (0, _possibleConstructorReturn3['default'])(this, (ForceAtlas2BasedCentralGravitySolver.__proto__ || (0, _getPrototypeOf2['default'])(ForceAtlas2BasedCentralGravitySolver)).call(this, body, physicsBody, options));\n  }\n\n  /**\n   * Calculate the forces based on the distance.\n   *\n   * @param {number} distance\n   * @param {number} dx\n   * @param {number} dy\n   * @param {Object<Node.id, Node>} forces\n   * @param {Node} node\n   * @private\n   */\n\n\n  (0, _createClass3['default'])(ForceAtlas2BasedCentralGravitySolver, [{\n    key: '_calculateForces',\n    value: function _calculateForces(distance, dx, dy, forces, node) {\n      if (distance > 0) {\n        var degree = node.edges.length + 1;\n        var gravityForce = this.options.centralGravity * degree * node.options.mass;\n        forces[node.id].x = dx * gravityForce;\n        forces[node.id].y = dy * gravityForce;\n      }\n    }\n  }]);\n  return ForceAtlas2BasedCentralGravitySolver;\n}(_CentralGravitySolver3['default']);\n\nexports['default'] = ForceAtlas2BasedCentralGravitySolver;\n\n/***/ }),\n/* 178 */\n/***/ (function(module, exports, __nested_webpack_require_898211__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _keys = __nested_webpack_require_898211__(9);\n\nvar _keys2 = _interopRequireDefault(_keys);\n\nvar _typeof2 = __nested_webpack_require_898211__(7);\n\nvar _typeof3 = _interopRequireDefault(_typeof2);\n\nvar _classCallCheck2 = __nested_webpack_require_898211__(0);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __nested_webpack_require_898211__(1);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\n/* ===========================================================================\n\n# TODO\n\n- `edgeReplacedById` not cleaned up yet on cluster edge removal\n- allowSingleNodeCluster could be a global option as well; currently needs to always\n  be passed to clustering methods\n\n----------------------------------------------\n\n# State Model for Clustering\n\nThe total state for clustering is non-trivial. It is useful to have a model\navailable as to how it works. The following documents the relevant state items.\n\n\n## Network State\n\nThe following `network`-members are relevant to clustering:\n\n- `body.nodes`       - all nodes actively participating in the network\n- `body.edges`       - same for edges\n- `body.nodeIndices` - id's of nodes that are visible at a given moment\n- `body.edgeIndices` - same for edges\n\nThis includes:\n\n- helper nodes for dragging in `manipulation`\n- helper nodes for edge type `dynamic`\n- cluster nodes and edges\n- there may be more than this.\n\nA node/edge may be missing in the `Indices` member if:\n\n- it is a helper node\n- the node or edge state has option `hidden` set\n- It is not visible due to clustering\n\n\n## Clustering State\n\nFor the hashes, the id's of the nodes/edges are used as key.\n\nMember `network.clustering` contains the following items:\n\n- `clusteredNodes` - hash with values: { clusterId: <id of cluster>, node: <node instance>}\n- `clusteredEdges` - hash with values: restore information for given edge\n\n\nDue to nesting of clusters, these members can contain cluster nodes and edges as well.\n\nThe important thing to note here, is that the clustered nodes and edges also\nappear in the members of the cluster nodes. For data update, it is therefore \nimportant to scan these lists as well as the cluster nodes.\n\n\n### Cluster Node\n\nA cluster node has the following extra fields:\n\n- `isCluster : true` - indication that this is a cluster node\n- `containedNodes`   - hash of nodes contained in this cluster\n- `containedEdges`   - same for edges\n- `edges`            - array of cluster edges for this node \n\n\n**NOTE:**\n\n- `containedEdges` can also contain edges which are not clustered; e.g. an edge\n   connecting two nodes in the same cluster.\n\n\n### Cluster Edge\n\nThese are the items in the `edges` member of a clustered node. They have the\nfollowing relevant members:\n\n- 'clusteringEdgeReplacingIds` - array of id's of edges replaced by this edge\n\nNote that it's possible to nest clusters, so that `clusteringEdgeReplacingIds`\ncan contain edge id's of other clusters.\n\n\n### Clustered Edge\n\nThis is any edge contained by a cluster edge. It gets the following additional\nmember:\n\n- `edgeReplacedById` - id of the cluster edge in which current edge is clustered\n\n\n   =========================================================================== */\nvar util = __nested_webpack_require_898211__(2);\nvar NetworkUtil = __nested_webpack_require_898211__(57)['default'];\nvar Cluster = __nested_webpack_require_898211__(179)['default'];\nvar Edge = __nested_webpack_require_898211__(55)['default']; // Only needed for check on type!\nvar Node = __nested_webpack_require_898211__(34)['default']; // Only needed for check on type!\n\n/**\n * The clustering engine\n */\n\nvar ClusterEngine = function () {\n  /**\n   * @param {Object} body\n   */\n  function ClusterEngine(body) {\n    var _this = this;\n\n    (0, _classCallCheck3['default'])(this, ClusterEngine);\n\n    this.body = body;\n    this.clusteredNodes = {}; // key: node id, value: { clusterId: <id of cluster>, node: <node instance>}\n    this.clusteredEdges = {}; // key: edge id, value: restore information for given edge\n\n    this.options = {};\n    this.defaultOptions = {};\n    util.extend(this.options, this.defaultOptions);\n\n    this.body.emitter.on('_resetData', function () {\n      _this.clusteredNodes = {};\n      _this.clusteredEdges = {};\n    });\n  }\n\n  /**\n   *\n   * @param {number} hubsize\n   * @param {Object} options\n   */\n\n\n  (0, _createClass3['default'])(ClusterEngine, [{\n    key: 'clusterByHubsize',\n    value: function clusterByHubsize(hubsize, options) {\n      if (hubsize === undefined) {\n        hubsize = this._getHubSize();\n      } else if ((typeof hubsize === 'undefined' ? 'undefined' : (0, _typeof3['default'])(hubsize)) === 'object') {\n        options = this._checkOptions(hubsize);\n        hubsize = this._getHubSize();\n      }\n\n      var nodesToCluster = [];\n      for (var i = 0; i < this.body.nodeIndices.length; i++) {\n        var node = this.body.nodes[this.body.nodeIndices[i]];\n        if (node.edges.length >= hubsize) {\n          nodesToCluster.push(node.id);\n        }\n      }\n\n      for (var _i = 0; _i < nodesToCluster.length; _i++) {\n        this.clusterByConnection(nodesToCluster[_i], options, true);\n      }\n\n      this.body.emitter.emit('_dataChanged');\n    }\n\n    /**\n     * loop over all nodes, check if they adhere to the condition and cluster if needed.\n     * @param {Object} options\n     * @param {boolean} [refreshData=true]\n     */\n\n  }, {\n    key: 'cluster',\n    value: function cluster() {\n      var _this2 = this;\n\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var refreshData = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n      if (options.joinCondition === undefined) {\n        throw new Error('Cannot call clusterByNodeData without a joinCondition function in the options.');\n      }\n\n      // check if the options object is fine, append if needed\n      options = this._checkOptions(options);\n\n      var childNodesObj = {};\n      var childEdgesObj = {};\n\n      // collect the nodes that will be in the cluster\n      util.forEach(this.body.nodes, function (node, nodeId) {\n        if (node.options && options.joinCondition(node.options) === true) {\n          childNodesObj[nodeId] = node;\n\n          // collect the edges that will be in the cluster\n          util.forEach(node.edges, function (edge) {\n            if (_this2.clusteredEdges[edge.id] === undefined) {\n              childEdgesObj[edge.id] = edge;\n            }\n          });\n        }\n      });\n\n      this._cluster(childNodesObj, childEdgesObj, options, refreshData);\n    }\n\n    /**\n     * Cluster all nodes in the network that have only X edges\n     * @param {number} edgeCount\n     * @param {Object} options\n     * @param {boolean} [refreshData=true]\n     */\n\n  }, {\n    key: 'clusterByEdgeCount',\n    value: function clusterByEdgeCount(edgeCount, options) {\n      var _this3 = this;\n\n      var refreshData = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n\n      options = this._checkOptions(options);\n      var clusters = [];\n      var usedNodes = {};\n      var edge = void 0,\n          edges = void 0,\n          relevantEdgeCount = void 0;\n      // collect the nodes that will be in the cluster\n\n      var _loop = function _loop(i) {\n        var childNodesObj = {};\n        var childEdgesObj = {};\n        var nodeId = _this3.body.nodeIndices[i];\n        var node = _this3.body.nodes[nodeId];\n\n        // if this node is already used in another cluster this session, we do not have to re-evaluate it.\n        if (usedNodes[nodeId] === undefined) {\n          relevantEdgeCount = 0;\n          edges = [];\n          for (var j = 0; j < node.edges.length; j++) {\n            edge = node.edges[j];\n            if (_this3.clusteredEdges[edge.id] === undefined) {\n              if (edge.toId !== edge.fromId) {\n                relevantEdgeCount++;\n              }\n              edges.push(edge);\n            }\n          }\n\n          // this node qualifies, we collect its neighbours to start the clustering process.\n          if (relevantEdgeCount === edgeCount) {\n            checkJoinCondition = function checkJoinCondition(node) {\n              if (options.joinCondition === undefined || options.joinCondition === null) {\n                return true;\n              }\n\n              var clonedOptions = NetworkUtil.cloneOptions(node);\n              return options.joinCondition(clonedOptions);\n            };\n\n            var gatheringSuccessful = true;\n            for (var _j = 0; _j < edges.length; _j++) {\n              edge = edges[_j];\n              var childNodeId = _this3._getConnectedId(edge, nodeId);\n              // add the nodes to the list by the join condition.\n              if (checkJoinCondition(node)) {\n                childEdgesObj[edge.id] = edge;\n                childNodesObj[nodeId] = node;\n                childNodesObj[childNodeId] = _this3.body.nodes[childNodeId];\n                usedNodes[nodeId] = true;\n              } else {\n                // this node does not qualify after all.\n                gatheringSuccessful = false;\n                break;\n              }\n            }\n\n            // add to the cluster queue\n            if ((0, _keys2['default'])(childNodesObj).length > 0 && (0, _keys2['default'])(childEdgesObj).length > 0 && gatheringSuccessful === true) {\n              /**\n               * Search for cluster data that contains any of the node id's\n               * @returns {Boolean} true if no joinCondition, otherwise return value of joinCondition\n               */\n              findClusterData = function findClusterData() {\n                for (var n = 0; n < clusters.length; ++n) {\n                  // Search for a cluster containing any of the node id's\n                  for (var m in childNodesObj) {\n                    if (clusters[n].nodes[m] !== undefined) {\n                      return clusters[n];\n                    }\n                  }\n                }\n\n                return undefined;\n              };\n\n              // If any of the found nodes is part of a cluster found in this method,\n              // add the current values to that cluster\n\n\n              foundCluster = findClusterData();\n\n              if (foundCluster !== undefined) {\n                // Add nodes to found cluster if not present\n                for (var m in childNodesObj) {\n                  if (foundCluster.nodes[m] === undefined) {\n                    foundCluster.nodes[m] = childNodesObj[m];\n                  }\n                }\n\n                // Add edges to found cluster, if not present\n                for (var _m in childEdgesObj) {\n                  if (foundCluster.edges[_m] === undefined) {\n                    foundCluster.edges[_m] = childEdgesObj[_m];\n                  }\n                }\n              } else {\n                // Create a new cluster group\n                clusters.push({ nodes: childNodesObj, edges: childEdgesObj });\n              }\n            }\n          }\n        }\n      };\n\n      for (var i = 0; i < this.body.nodeIndices.length; i++) {\n        var checkJoinCondition;\n        var findClusterData;\n        var foundCluster;\n\n        _loop(i);\n      }\n\n      for (var i = 0; i < clusters.length; i++) {\n        this._cluster(clusters[i].nodes, clusters[i].edges, options, false);\n      }\n\n      if (refreshData === true) {\n        this.body.emitter.emit('_dataChanged');\n      }\n    }\n\n    /**\n     * Cluster all nodes in the network that have only 1 edge\n     * @param {Object} options\n     * @param {boolean} [refreshData=true]\n     */\n\n  }, {\n    key: 'clusterOutliers',\n    value: function clusterOutliers(options) {\n      var refreshData = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n      this.clusterByEdgeCount(1, options, refreshData);\n    }\n\n    /**\n     * Cluster all nodes in the network that have only 2 edge\n     * @param {Object} options\n     * @param {boolean} [refreshData=true]\n     */\n\n  }, {\n    key: 'clusterBridges',\n    value: function clusterBridges(options) {\n      var refreshData = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n      this.clusterByEdgeCount(2, options, refreshData);\n    }\n\n    /**\n     * suck all connected nodes of a node into the node.\n     * @param {Node.id} nodeId\n     * @param {Object} options\n     * @param {boolean} [refreshData=true]\n     */\n\n  }, {\n    key: 'clusterByConnection',\n    value: function clusterByConnection(nodeId, options) {\n      var refreshData = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n\n      // kill conditions\n      if (nodeId === undefined) {\n        throw new Error('No nodeId supplied to clusterByConnection!');\n      }\n      if (this.body.nodes[nodeId] === undefined) {\n        throw new Error('The nodeId given to clusterByConnection does not exist!');\n      }\n\n      var node = this.body.nodes[nodeId];\n      options = this._checkOptions(options, node);\n      if (options.clusterNodeProperties.x === undefined) {\n        options.clusterNodeProperties.x = node.x;\n      }\n      if (options.clusterNodeProperties.y === undefined) {\n        options.clusterNodeProperties.y = node.y;\n      }\n      if (options.clusterNodeProperties.fixed === undefined) {\n        options.clusterNodeProperties.fixed = {};\n        options.clusterNodeProperties.fixed.x = node.options.fixed.x;\n        options.clusterNodeProperties.fixed.y = node.options.fixed.y;\n      }\n\n      var childNodesObj = {};\n      var childEdgesObj = {};\n      var parentNodeId = node.id;\n      var parentClonedOptions = NetworkUtil.cloneOptions(node);\n      childNodesObj[parentNodeId] = node;\n\n      // collect the nodes that will be in the cluster\n      for (var i = 0; i < node.edges.length; i++) {\n        var edge = node.edges[i];\n        if (this.clusteredEdges[edge.id] === undefined) {\n          var childNodeId = this._getConnectedId(edge, parentNodeId);\n\n          // if the child node is not in a cluster\n          if (this.clusteredNodes[childNodeId] === undefined) {\n            if (childNodeId !== parentNodeId) {\n              if (options.joinCondition === undefined) {\n                childEdgesObj[edge.id] = edge;\n                childNodesObj[childNodeId] = this.body.nodes[childNodeId];\n              } else {\n                // clone the options and insert some additional parameters that could be interesting.\n                var childClonedOptions = NetworkUtil.cloneOptions(this.body.nodes[childNodeId]);\n                if (options.joinCondition(parentClonedOptions, childClonedOptions) === true) {\n                  childEdgesObj[edge.id] = edge;\n                  childNodesObj[childNodeId] = this.body.nodes[childNodeId];\n                }\n              }\n            } else {\n              // swallow the edge if it is self-referencing.\n              childEdgesObj[edge.id] = edge;\n            }\n          }\n        }\n      }\n      var childNodeIDs = (0, _keys2['default'])(childNodesObj).map(function (childNode) {\n        return childNodesObj[childNode].id;\n      });\n\n      for (childNode in childNodesObj) {\n        if (!childNodesObj.hasOwnProperty(childNode)) continue;\n\n        var childNode = childNodesObj[childNode];\n        for (var y = 0; y < childNode.edges.length; y++) {\n          var childEdge = childNode.edges[y];\n          if (childNodeIDs.indexOf(this._getConnectedId(childEdge, childNode.id)) > -1) {\n            childEdgesObj[childEdge.id] = childEdge;\n          }\n        }\n      }\n      this._cluster(childNodesObj, childEdgesObj, options, refreshData);\n    }\n\n    /**\n     * This function creates the edges that will be attached to the cluster\n     * It looks for edges that are connected to the nodes from the \"outside' of the cluster.\n     *\n     * @param {{Node.id: vis.Node}} childNodesObj\n     * @param {{vis.Edge.id: vis.Edge}} childEdgesObj\n     * @param {Object} clusterNodeProperties\n     * @param {Object} clusterEdgeProperties\n     * @private\n     */\n\n  }, {\n    key: '_createClusterEdges',\n    value: function _createClusterEdges(childNodesObj, childEdgesObj, clusterNodeProperties, clusterEdgeProperties) {\n      var edge = void 0,\n          childNodeId = void 0,\n          childNode = void 0,\n          toId = void 0,\n          fromId = void 0,\n          otherNodeId = void 0;\n\n      // loop over all child nodes and their edges to find edges going out of the cluster\n      // these edges will be replaced by clusterEdges.\n      var childKeys = (0, _keys2['default'])(childNodesObj);\n      var createEdges = [];\n      for (var i = 0; i < childKeys.length; i++) {\n        childNodeId = childKeys[i];\n        childNode = childNodesObj[childNodeId];\n\n        // construct new edges from the cluster to others\n        for (var j = 0; j < childNode.edges.length; j++) {\n          edge = childNode.edges[j];\n          // we only handle edges that are visible to the system, not the disabled ones from the clustering process.\n          if (this.clusteredEdges[edge.id] === undefined) {\n            // self-referencing edges will be added to the \"hidden\" list\n            if (edge.toId == edge.fromId) {\n              childEdgesObj[edge.id] = edge;\n            } else {\n              // set up the from and to.\n              if (edge.toId == childNodeId) {\n                // this is a double equals because ints and strings can be interchanged here.\n                toId = clusterNodeProperties.id;\n                fromId = edge.fromId;\n                otherNodeId = fromId;\n              } else {\n                toId = edge.toId;\n                fromId = clusterNodeProperties.id;\n                otherNodeId = toId;\n              }\n            }\n\n            // Only edges from the cluster outwards are being replaced.\n            if (childNodesObj[otherNodeId] === undefined) {\n              createEdges.push({ edge: edge, fromId: fromId, toId: toId });\n            }\n          }\n        }\n      }\n\n      //\n      // Here we actually create the replacement edges.\n      //\n      // We could not do this in the loop above as the creation process\n      // would add an edge to the edges array we are iterating over.\n      //\n      // NOTE: a clustered edge can have multiple base edges!\n      //\n      var newEdges = [];\n\n      /**\n       * Find a cluster edge which matches the given created edge.\n       * @param {vis.Edge} createdEdge\n       * @returns {vis.Edge}\n       */\n      var getNewEdge = function getNewEdge(createdEdge) {\n        for (var _j2 = 0; _j2 < newEdges.length; _j2++) {\n          var newEdge = newEdges[_j2];\n\n          // We replace both to and from edges with a single cluster edge\n          var matchToDirection = createdEdge.fromId === newEdge.fromId && createdEdge.toId === newEdge.toId;\n          var matchFromDirection = createdEdge.fromId === newEdge.toId && createdEdge.toId === newEdge.fromId;\n\n          if (matchToDirection || matchFromDirection) {\n            return newEdge;\n          }\n        }\n\n        return null;\n      };\n\n      for (var _j3 = 0; _j3 < createEdges.length; _j3++) {\n        var createdEdge = createEdges[_j3];\n        var _edge = createdEdge.edge;\n        var newEdge = getNewEdge(createdEdge);\n\n        if (newEdge === null) {\n          // Create a clustered edge for this connection\n          newEdge = this._createClusteredEdge(createdEdge.fromId, createdEdge.toId, _edge, clusterEdgeProperties);\n\n          newEdges.push(newEdge);\n        } else {\n          newEdge.clusteringEdgeReplacingIds.push(_edge.id);\n        }\n\n        // also reference the new edge in the old edge\n        this.body.edges[_edge.id].edgeReplacedById = newEdge.id;\n\n        // hide the replaced edge\n        this._backupEdgeOptions(_edge);\n        _edge.setOptions({ physics: false });\n      }\n    }\n\n    /**\n     * This function checks the options that can be supplied to the different cluster functions\n     * for certain fields and inserts defaults if needed\n     * @param {Object} options\n     * @returns {*}\n     * @private\n     */\n\n  }, {\n    key: '_checkOptions',\n    value: function _checkOptions() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      if (options.clusterEdgeProperties === undefined) {\n        options.clusterEdgeProperties = {};\n      }\n      if (options.clusterNodeProperties === undefined) {\n        options.clusterNodeProperties = {};\n      }\n\n      return options;\n    }\n\n    /**\n     *\n     * @param {Object}    childNodesObj         | object with node objects, id as keys, same as childNodes except it also contains a source node\n     * @param {Object}    childEdgesObj         | object with edge objects, id as keys\n     * @param {Array}     options               | object with {clusterNodeProperties, clusterEdgeProperties, processProperties}\n     * @param {boolean}   refreshData | when true, do not wrap up\n     * @private\n     */\n\n  }, {\n    key: '_cluster',\n    value: function _cluster(childNodesObj, childEdgesObj, options) {\n      var refreshData = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n\n      // Remove nodes which are already clustered\n      var tmpNodesToRemove = [];\n      for (var _nodeId in childNodesObj) {\n        if (childNodesObj.hasOwnProperty(_nodeId)) {\n          if (this.clusteredNodes[_nodeId] !== undefined) {\n            tmpNodesToRemove.push(_nodeId);\n          }\n        }\n      }\n\n      for (var n = 0; n < tmpNodesToRemove.length; ++n) {\n        delete childNodesObj[tmpNodesToRemove[n]];\n      }\n\n      // kill condition: no nodes don't bother\n      if ((0, _keys2['default'])(childNodesObj).length == 0) {\n        return;\n      }\n\n      // allow clusters of 1 if options allow\n      if ((0, _keys2['default'])(childNodesObj).length == 1 && options.clusterNodeProperties.allowSingleNodeCluster != true) {\n        return;\n      }\n\n      var clusterNodeProperties = util.deepExtend({}, options.clusterNodeProperties);\n\n      // construct the clusterNodeProperties\n      if (options.processProperties !== undefined) {\n        // get the childNode options\n        var childNodesOptions = [];\n        for (var _nodeId2 in childNodesObj) {\n          if (childNodesObj.hasOwnProperty(_nodeId2)) {\n            var clonedOptions = NetworkUtil.cloneOptions(childNodesObj[_nodeId2]);\n            childNodesOptions.push(clonedOptions);\n          }\n        }\n\n        // get cluster properties based on childNodes\n        var childEdgesOptions = [];\n        for (var edgeId in childEdgesObj) {\n          if (childEdgesObj.hasOwnProperty(edgeId)) {\n            // these cluster edges will be removed on creation of the cluster.\n            if (edgeId.substr(0, 12) !== 'clusterEdge:') {\n              var _clonedOptions = NetworkUtil.cloneOptions(childEdgesObj[edgeId], 'edge');\n              childEdgesOptions.push(_clonedOptions);\n            }\n          }\n        }\n\n        clusterNodeProperties = options.processProperties(clusterNodeProperties, childNodesOptions, childEdgesOptions);\n        if (!clusterNodeProperties) {\n          throw new Error('The processProperties function does not return properties!');\n        }\n      }\n\n      // check if we have an unique id;\n      if (clusterNodeProperties.id === undefined) {\n        clusterNodeProperties.id = 'cluster:' + util.randomUUID();\n      }\n      var clusterId = clusterNodeProperties.id;\n\n      if (clusterNodeProperties.label === undefined) {\n        clusterNodeProperties.label = 'cluster';\n      }\n\n      // give the clusterNode a position if it does not have one.\n      var pos = undefined;\n      if (clusterNodeProperties.x === undefined) {\n        pos = this._getClusterPosition(childNodesObj);\n        clusterNodeProperties.x = pos.x;\n      }\n      if (clusterNodeProperties.y === undefined) {\n        if (pos === undefined) {\n          pos = this._getClusterPosition(childNodesObj);\n        }\n        clusterNodeProperties.y = pos.y;\n      }\n\n      // force the ID to remain the same\n      clusterNodeProperties.id = clusterId;\n\n      // create the cluster Node\n      // Note that allowSingleNodeCluster, if present, is stored in the options as well\n      var clusterNode = this.body.functions.createNode(clusterNodeProperties, Cluster);\n      clusterNode.containedNodes = childNodesObj;\n      clusterNode.containedEdges = childEdgesObj;\n      // cache a copy from the cluster edge properties if we have to reconnect others later on\n      clusterNode.clusterEdgeProperties = options.clusterEdgeProperties;\n\n      // finally put the cluster node into global\n      this.body.nodes[clusterNodeProperties.id] = clusterNode;\n\n      this._clusterEdges(childNodesObj, childEdgesObj, clusterNodeProperties, options.clusterEdgeProperties);\n\n      // set ID to undefined so no duplicates arise\n      clusterNodeProperties.id = undefined;\n\n      // wrap up\n      if (refreshData === true) {\n        this.body.emitter.emit('_dataChanged');\n      }\n    }\n\n    /**\n     *\n     * @param {Edge} edge\n     * @private\n     */\n\n  }, {\n    key: '_backupEdgeOptions',\n    value: function _backupEdgeOptions(edge) {\n      if (this.clusteredEdges[edge.id] === undefined) {\n        this.clusteredEdges[edge.id] = { physics: edge.options.physics };\n      }\n    }\n\n    /**\n     *\n     * @param {Edge} edge\n     * @private\n     */\n\n  }, {\n    key: '_restoreEdge',\n    value: function _restoreEdge(edge) {\n      var originalOptions = this.clusteredEdges[edge.id];\n      if (originalOptions !== undefined) {\n        edge.setOptions({ physics: originalOptions.physics });\n        delete this.clusteredEdges[edge.id];\n      }\n    }\n\n    /**\n     * Check if a node is a cluster.\n     * @param {Node.id} nodeId\n     * @returns {*}\n     */\n\n  }, {\n    key: 'isCluster',\n    value: function isCluster(nodeId) {\n      if (this.body.nodes[nodeId] !== undefined) {\n        return this.body.nodes[nodeId].isCluster === true;\n      } else {\n        console.log('Node does not exist.');\n        return false;\n      }\n    }\n\n    /**\n     * get the position of the cluster node based on what's inside\n     * @param {object} childNodesObj    | object with node objects, id as keys\n     * @returns {{x: number, y: number}}\n     * @private\n     */\n\n  }, {\n    key: '_getClusterPosition',\n    value: function _getClusterPosition(childNodesObj) {\n      var childKeys = (0, _keys2['default'])(childNodesObj);\n      var minX = childNodesObj[childKeys[0]].x;\n      var maxX = childNodesObj[childKeys[0]].x;\n      var minY = childNodesObj[childKeys[0]].y;\n      var maxY = childNodesObj[childKeys[0]].y;\n      var node = void 0;\n      for (var i = 1; i < childKeys.length; i++) {\n        node = childNodesObj[childKeys[i]];\n        minX = node.x < minX ? node.x : minX;\n        maxX = node.x > maxX ? node.x : maxX;\n        minY = node.y < minY ? node.y : minY;\n        maxY = node.y > maxY ? node.y : maxY;\n      }\n\n      return { x: 0.5 * (minX + maxX), y: 0.5 * (minY + maxY) };\n    }\n\n    /**\n     * Open a cluster by calling this function.\n     * @param {vis.Edge.id}  clusterNodeId | the ID of the cluster node\n     * @param {Object} options\n     * @param {boolean} refreshData | wrap up afterwards if not true\n     */\n\n  }, {\n    key: 'openCluster',\n    value: function openCluster(clusterNodeId, options) {\n      var refreshData = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n\n      // kill conditions\n      if (clusterNodeId === undefined) {\n        throw new Error('No clusterNodeId supplied to openCluster.');\n      }\n\n      var clusterNode = this.body.nodes[clusterNodeId];\n\n      if (clusterNode === undefined) {\n        throw new Error('The clusterNodeId supplied to openCluster does not exist.');\n      }\n      if (clusterNode.isCluster !== true || clusterNode.containedNodes === undefined || clusterNode.containedEdges === undefined) {\n        throw new Error('The node:' + clusterNodeId + ' is not a valid cluster.');\n      }\n\n      // Check if current cluster is clustered itself\n      var stack = this.findNode(clusterNodeId);\n      var parentIndex = stack.indexOf(clusterNodeId) - 1;\n      if (parentIndex >= 0) {\n        // Current cluster is clustered; transfer contained nodes and edges to parent\n        var parentClusterNodeId = stack[parentIndex];\n        var parentClusterNode = this.body.nodes[parentClusterNodeId];\n\n        // clustering.clusteredNodes and clustering.clusteredEdges remain unchanged\n        parentClusterNode._openChildCluster(clusterNodeId);\n\n        // All components of child cluster node have been transferred. It can die now.\n        delete this.body.nodes[clusterNodeId];\n        if (refreshData === true) {\n          this.body.emitter.emit('_dataChanged');\n        }\n\n        return;\n      }\n\n      // main body\n      var containedNodes = clusterNode.containedNodes;\n      var containedEdges = clusterNode.containedEdges;\n\n      // allow the user to position the nodes after release.\n      if (options !== undefined && options.releaseFunction !== undefined && typeof options.releaseFunction === 'function') {\n        var positions = {};\n        var clusterPosition = { x: clusterNode.x, y: clusterNode.y };\n        for (var _nodeId3 in containedNodes) {\n          if (containedNodes.hasOwnProperty(_nodeId3)) {\n            var containedNode = this.body.nodes[_nodeId3];\n            positions[_nodeId3] = { x: containedNode.x, y: containedNode.y };\n          }\n        }\n        var newPositions = options.releaseFunction(clusterPosition, positions);\n\n        for (var _nodeId4 in containedNodes) {\n          if (containedNodes.hasOwnProperty(_nodeId4)) {\n            var _containedNode = this.body.nodes[_nodeId4];\n            if (newPositions[_nodeId4] !== undefined) {\n              _containedNode.x = newPositions[_nodeId4].x === undefined ? clusterNode.x : newPositions[_nodeId4].x;\n              _containedNode.y = newPositions[_nodeId4].y === undefined ? clusterNode.y : newPositions[_nodeId4].y;\n            }\n          }\n        }\n      } else {\n        // copy the position from the cluster\n        util.forEach(containedNodes, function (containedNode) {\n          // inherit position\n          if (containedNode.options.fixed.x === false) {\n            containedNode.x = clusterNode.x;\n          }\n          if (containedNode.options.fixed.y === false) {\n            containedNode.y = clusterNode.y;\n          }\n        });\n      }\n\n      // release nodes\n      for (var _nodeId5 in containedNodes) {\n        if (containedNodes.hasOwnProperty(_nodeId5)) {\n          var _containedNode2 = this.body.nodes[_nodeId5];\n\n          // inherit speed\n          _containedNode2.vx = clusterNode.vx;\n          _containedNode2.vy = clusterNode.vy;\n\n          _containedNode2.setOptions({ physics: true });\n\n          delete this.clusteredNodes[_nodeId5];\n        }\n      }\n\n      // copy the clusterNode edges because we cannot iterate over an object that we add or remove from.\n      var edgesToBeDeleted = [];\n      for (var i = 0; i < clusterNode.edges.length; i++) {\n        edgesToBeDeleted.push(clusterNode.edges[i]);\n      }\n\n      // actually handling the deleting.\n      for (var _i2 = 0; _i2 < edgesToBeDeleted.length; _i2++) {\n        var edge = edgesToBeDeleted[_i2];\n        var otherNodeId = this._getConnectedId(edge, clusterNodeId);\n        var otherNode = this.clusteredNodes[otherNodeId];\n\n        for (var j = 0; j < edge.clusteringEdgeReplacingIds.length; j++) {\n          var transferId = edge.clusteringEdgeReplacingIds[j];\n          var transferEdge = this.body.edges[transferId];\n          if (transferEdge === undefined) continue;\n\n          // if the other node is in another cluster, we transfer ownership of this edge to the other cluster\n          if (otherNode !== undefined) {\n            // transfer ownership:\n            var otherCluster = this.body.nodes[otherNode.clusterId];\n            otherCluster.containedEdges[transferEdge.id] = transferEdge;\n\n            // delete local reference\n            delete containedEdges[transferEdge.id];\n\n            // get to and from\n            var fromId = transferEdge.fromId;\n            var toId = transferEdge.toId;\n            if (transferEdge.toId == otherNodeId) {\n              toId = otherNode.clusterId;\n            } else {\n              fromId = otherNode.clusterId;\n            }\n\n            // create new cluster edge from the otherCluster\n            this._createClusteredEdge(fromId, toId, transferEdge, otherCluster.clusterEdgeProperties, { hidden: false, physics: true });\n          } else {\n            this._restoreEdge(transferEdge);\n          }\n        }\n\n        edge.remove();\n      }\n\n      // handle the releasing of the edges\n      for (var edgeId in containedEdges) {\n        if (containedEdges.hasOwnProperty(edgeId)) {\n          this._restoreEdge(containedEdges[edgeId]);\n        }\n      }\n\n      // remove clusterNode\n      delete this.body.nodes[clusterNodeId];\n\n      if (refreshData === true) {\n        this.body.emitter.emit('_dataChanged');\n      }\n    }\n\n    /**\n     *\n     * @param {Cluster.id} clusterId\n     * @returns {Array.<Node.id>}\n     */\n\n  }, {\n    key: 'getNodesInCluster',\n    value: function getNodesInCluster(clusterId) {\n      var nodesArray = [];\n      if (this.isCluster(clusterId) === true) {\n        var containedNodes = this.body.nodes[clusterId].containedNodes;\n        for (var _nodeId6 in containedNodes) {\n          if (containedNodes.hasOwnProperty(_nodeId6)) {\n            nodesArray.push(this.body.nodes[_nodeId6].id);\n          }\n        }\n      }\n\n      return nodesArray;\n    }\n\n    /**\n     * Get the stack clusterId's that a certain node resides in. cluster A -> cluster B -> cluster C -> node\n     *\n     * If a node can't be found in the chain, return an empty array.\n     *\n     * @param {string|number} nodeId\n     * @returns {Array}\n     */\n\n  }, {\n    key: 'findNode',\n    value: function findNode(nodeId) {\n      var stack = [];\n      var max = 100;\n      var counter = 0;\n      var node = void 0;\n\n      while (this.clusteredNodes[nodeId] !== undefined && counter < max) {\n        node = this.body.nodes[nodeId];\n        if (node === undefined) return [];\n        stack.push(node.id);\n\n        nodeId = this.clusteredNodes[nodeId].clusterId;\n        counter++;\n      }\n\n      node = this.body.nodes[nodeId];\n      if (node === undefined) return [];\n      stack.push(node.id);\n\n      stack.reverse();\n      return stack;\n    }\n\n    /**\n     * Using a clustered nodeId, update with the new options\n     * @param {vis.Edge.id} clusteredNodeId\n     * @param {object} newOptions\n     */\n\n  }, {\n    key: 'updateClusteredNode',\n    value: function updateClusteredNode(clusteredNodeId, newOptions) {\n      if (clusteredNodeId === undefined) {\n        throw new Error('No clusteredNodeId supplied to updateClusteredNode.');\n      }\n      if (newOptions === undefined) {\n        throw new Error('No newOptions supplied to updateClusteredNode.');\n      }\n      if (this.body.nodes[clusteredNodeId] === undefined) {\n        throw new Error('The clusteredNodeId supplied to updateClusteredNode does not exist.');\n      }\n\n      this.body.nodes[clusteredNodeId].setOptions(newOptions);\n      this.body.emitter.emit('_dataChanged');\n    }\n\n    /**\n     * Using a base edgeId, update all related clustered edges with the new options\n     * @param {vis.Edge.id} startEdgeId\n     * @param {object} newOptions\n     */\n\n  }, {\n    key: 'updateEdge',\n    value: function updateEdge(startEdgeId, newOptions) {\n      if (startEdgeId === undefined) {\n        throw new Error('No startEdgeId supplied to updateEdge.');\n      }\n      if (newOptions === undefined) {\n        throw new Error('No newOptions supplied to updateEdge.');\n      }\n      if (this.body.edges[startEdgeId] === undefined) {\n        throw new Error('The startEdgeId supplied to updateEdge does not exist.');\n      }\n\n      var allEdgeIds = this.getClusteredEdges(startEdgeId);\n      for (var i = 0; i < allEdgeIds.length; i++) {\n        var edge = this.body.edges[allEdgeIds[i]];\n        edge.setOptions(newOptions);\n      }\n      this.body.emitter.emit('_dataChanged');\n    }\n\n    /**\n     * Get a stack of clusterEdgeId's (+base edgeid) that a base edge is the same as. cluster edge C -> cluster edge B -> cluster edge A -> base edge(edgeId)\n     * @param {vis.Edge.id} edgeId\n     * @returns {Array.<vis.Edge.id>}\n     */\n\n  }, {\n    key: 'getClusteredEdges',\n    value: function getClusteredEdges(edgeId) {\n      var stack = [];\n      var max = 100;\n      var counter = 0;\n\n      while (edgeId !== undefined && this.body.edges[edgeId] !== undefined && counter < max) {\n        stack.push(this.body.edges[edgeId].id);\n        edgeId = this.body.edges[edgeId].edgeReplacedById;\n        counter++;\n      }\n      stack.reverse();\n      return stack;\n    }\n\n    /**\n     * Get the base edge id of clusterEdgeId. cluster edge (clusteredEdgeId) -> cluster edge B -> cluster edge C -> base edge\n     * @param {vis.Edge.id} clusteredEdgeId\n     * @returns {vis.Edge.id} baseEdgeId\n     *\n     * TODO: deprecate in 5.0.0. Method getBaseEdges() is the correct one to use.\n     */\n\n  }, {\n    key: 'getBaseEdge',\n    value: function getBaseEdge(clusteredEdgeId) {\n      // Just kludge this by returning the first base edge id found\n      return this.getBaseEdges(clusteredEdgeId)[0];\n    }\n\n    /**\n     * Get all regular edges for this clustered edge id.\n     *\n     * @param {vis.Edge.id} clusteredEdgeId\n     * @returns {Array.<vis.Edge.id>} all baseEdgeId's under this clustered edge\n     */\n\n  }, {\n    key: 'getBaseEdges',\n    value: function getBaseEdges(clusteredEdgeId) {\n      var IdsToHandle = [clusteredEdgeId];\n      var doneIds = [];\n      var foundIds = [];\n      var max = 100;\n      var counter = 0;\n\n      while (IdsToHandle.length > 0 && counter < max) {\n        var nextId = IdsToHandle.pop();\n        if (nextId === undefined) continue; // Paranoia here and onwards\n        var nextEdge = this.body.edges[nextId];\n        if (nextEdge === undefined) continue;\n        counter++;\n\n        var replacingIds = nextEdge.clusteringEdgeReplacingIds;\n        if (replacingIds === undefined) {\n          // nextId is a base id\n          foundIds.push(nextId);\n        } else {\n          // Another cluster edge, unravel this one as well\n          for (var i = 0; i < replacingIds.length; ++i) {\n            var replacingId = replacingIds[i];\n\n            // Don't add if already handled\n            // TODO: never triggers; find a test-case which does\n            if (IdsToHandle.indexOf(replacingIds) !== -1 || doneIds.indexOf(replacingIds) !== -1) {\n              continue;\n            }\n\n            IdsToHandle.push(replacingId);\n          }\n        }\n\n        doneIds.push(nextId);\n      }\n\n      return foundIds;\n    }\n\n    /**\n     * Get the Id the node is connected to\n     * @param {vis.Edge} edge\n     * @param {Node.id} nodeId\n     * @returns {*}\n     * @private\n     */\n\n  }, {\n    key: '_getConnectedId',\n    value: function _getConnectedId(edge, nodeId) {\n      if (edge.toId != nodeId) {\n        return edge.toId;\n      } else if (edge.fromId != nodeId) {\n        return edge.fromId;\n      } else {\n        return edge.fromId;\n      }\n    }\n\n    /**\n     * We determine how many connections denote an important hub.\n     * We take the mean + 2*std as the important hub size. (Assuming a normal distribution of data, ~2.2%)\n     *\n     * @returns {number}\n     * @private\n     */\n\n  }, {\n    key: '_getHubSize',\n    value: function _getHubSize() {\n      var average = 0;\n      var averageSquared = 0;\n      var hubCounter = 0;\n      var largestHub = 0;\n\n      for (var i = 0; i < this.body.nodeIndices.length; i++) {\n        var _node = this.body.nodes[this.body.nodeIndices[i]];\n        if (_node.edges.length > largestHub) {\n          largestHub = _node.edges.length;\n        }\n        average += _node.edges.length;\n        averageSquared += Math.pow(_node.edges.length, 2);\n        hubCounter += 1;\n      }\n      average = average / hubCounter;\n      averageSquared = averageSquared / hubCounter;\n\n      var variance = averageSquared - Math.pow(average, 2);\n      var standardDeviation = Math.sqrt(variance);\n\n      var hubThreshold = Math.floor(average + 2 * standardDeviation);\n\n      // always have at least one to cluster\n      if (hubThreshold > largestHub) {\n        hubThreshold = largestHub;\n      }\n\n      return hubThreshold;\n    }\n\n    /**\n     * Create an edge for the cluster representation.\n     *\n     * @param {Node.id} fromId\n     * @param {Node.id} toId\n     * @param {vis.Edge} baseEdge\n     * @param {Object} clusterEdgeProperties\n     * @param {Object} extraOptions\n     * @returns {Edge} newly created clustered edge\n     * @private\n     */\n\n  }, {\n    key: '_createClusteredEdge',\n    value: function _createClusteredEdge(fromId, toId, baseEdge, clusterEdgeProperties, extraOptions) {\n      // copy the options of the edge we will replace\n      var clonedOptions = NetworkUtil.cloneOptions(baseEdge, 'edge');\n      // make sure the properties of clusterEdges are superimposed on it\n      util.deepExtend(clonedOptions, clusterEdgeProperties);\n\n      // set up the edge\n      clonedOptions.from = fromId;\n      clonedOptions.to = toId;\n      clonedOptions.id = 'clusterEdge:' + util.randomUUID();\n\n      // apply the edge specific options to it if specified\n      if (extraOptions !== undefined) {\n        util.deepExtend(clonedOptions, extraOptions);\n      }\n\n      var newEdge = this.body.functions.createEdge(clonedOptions);\n      newEdge.clusteringEdgeReplacingIds = [baseEdge.id];\n      newEdge.connect();\n\n      // Register the new edge\n      this.body.edges[newEdge.id] = newEdge;\n\n      return newEdge;\n    }\n\n    /**\n     * Add the passed child nodes and edges to the given cluster node.\n     *\n     * @param {Object|Node} childNodes  hash of nodes or single node to add in cluster\n     * @param {Object|Edge} childEdges  hash of edges or single edge to take into account when clustering\n     * @param {Node} clusterNode  cluster node to add nodes and edges to\n     * @param {Object} [clusterEdgeProperties]\n     * @private\n     */\n\n  }, {\n    key: '_clusterEdges',\n    value: function _clusterEdges(childNodes, childEdges, clusterNode, clusterEdgeProperties) {\n      if (childEdges instanceof Edge) {\n        var edge = childEdges;\n        var obj = {};\n        obj[edge.id] = edge;\n        childEdges = obj;\n      }\n\n      if (childNodes instanceof Node) {\n        var _node2 = childNodes;\n        var _obj = {};\n        _obj[_node2.id] = _node2;\n        childNodes = _obj;\n      }\n\n      if (clusterNode === undefined || clusterNode === null) {\n        throw new Error('_clusterEdges: parameter clusterNode required');\n      }\n\n      if (clusterEdgeProperties === undefined) {\n        // Take the required properties from the cluster node\n        clusterEdgeProperties = clusterNode.clusterEdgeProperties;\n      }\n\n      // create the new edges that will connect to the cluster.\n      // All self-referencing edges will be added to childEdges here.\n      this._createClusterEdges(childNodes, childEdges, clusterNode, clusterEdgeProperties);\n\n      // disable the childEdges\n      for (var edgeId in childEdges) {\n        if (childEdges.hasOwnProperty(edgeId)) {\n          if (this.body.edges[edgeId] !== undefined) {\n            var _edge2 = this.body.edges[edgeId];\n            // cache the options before changing\n            this._backupEdgeOptions(_edge2);\n            // disable physics and hide the edge\n            _edge2.setOptions({ physics: false });\n          }\n        }\n      }\n\n      // disable the childNodes\n      for (var _nodeId7 in childNodes) {\n        if (childNodes.hasOwnProperty(_nodeId7)) {\n          this.clusteredNodes[_nodeId7] = {\n            clusterId: clusterNode.id,\n            node: this.body.nodes[_nodeId7]\n          };\n          this.body.nodes[_nodeId7].setOptions({ physics: false });\n        }\n      }\n    }\n\n    /**\n     * Determine in which cluster given nodeId resides.\n     *\n     * If not in cluster, return undefined.\n     *\n     * NOTE: If you know a cleaner way to do this, please enlighten me (wimrijnders).\n     *\n     * @param {Node.id} nodeId\n     * @returns {Node|undefined} Node instance for cluster, if present\n     * @private\n     */\n\n  }, {\n    key: '_getClusterNodeForNode',\n    value: function _getClusterNodeForNode(nodeId) {\n      if (nodeId === undefined) return undefined;\n      var clusteredNode = this.clusteredNodes[nodeId];\n\n      // NOTE: If no cluster info found, it should actually be an error\n      if (clusteredNode === undefined) return undefined;\n      var clusterId = clusteredNode.clusterId;\n      if (clusterId === undefined) return undefined;\n\n      return this.body.nodes[clusterId];\n    }\n\n    /**\n     * Internal helper function for conditionally removing items in array\n     *\n     * Done like this because Array.filter() is not fully supported by all IE's.\n     *\n     * @param {Array} arr\n     * @param {function} callback\n     * @returns {Array}\n     * @private\n     */\n\n  }, {\n    key: '_filter',\n    value: function _filter(arr, callback) {\n      var ret = [];\n\n      util.forEach(arr, function (item) {\n        if (callback(item)) {\n          ret.push(item);\n        }\n      });\n\n      return ret;\n    }\n\n    /**\n     * Scan all edges for changes in clustering and adjust this if necessary.\n     *\n     * Call this (internally) after there has been a change in node or edge data.\n     *\n     * Pre: States of this.body.nodes and this.body.edges consistent\n     * Pre: this.clusteredNodes and this.clusteredEdge consistent with containedNodes and containedEdges\n     *      of cluster nodes.\n     */\n\n  }, {\n    key: '_updateState',\n    value: function _updateState() {\n      var _this4 = this;\n\n      var nodeId = void 0;\n      var deletedNodeIds = [];\n      var deletedEdgeIds = {};\n\n      /**\n       * Utility function to iterate over clustering nodes only\n       *\n       * @param {Function} callback  function to call for each cluster node\n       */\n      var eachClusterNode = function eachClusterNode(callback) {\n        util.forEach(_this4.body.nodes, function (node) {\n          if (node.isCluster === true) {\n            callback(node);\n          }\n        });\n      };\n\n      //\n      // Remove deleted regular nodes from clustering\n      //\n\n      // Determine the deleted nodes\n      for (nodeId in this.clusteredNodes) {\n        if (!this.clusteredNodes.hasOwnProperty(nodeId)) continue;\n        var _node3 = this.body.nodes[nodeId];\n\n        if (_node3 === undefined) {\n          deletedNodeIds.push(nodeId);\n        }\n      }\n\n      // Remove nodes from cluster nodes\n      eachClusterNode(function (clusterNode) {\n        for (var n = 0; n < deletedNodeIds.length; n++) {\n          delete clusterNode.containedNodes[deletedNodeIds[n]];\n        }\n      });\n\n      // Remove nodes from cluster list\n      for (var n = 0; n < deletedNodeIds.length; n++) {\n        delete this.clusteredNodes[deletedNodeIds[n]];\n      }\n\n      //\n      // Remove deleted edges from clustering\n      //\n\n      // Add the deleted clustered edges to the list\n      util.forEach(this.clusteredEdges, function (edgeId) {\n        var edge = _this4.body.edges[edgeId];\n        if (edge === undefined || !edge.endPointsValid()) {\n          deletedEdgeIds[edgeId] = edgeId;\n        }\n      });\n\n      // Cluster nodes can also contain edges which are not clustered,\n      // i.e. nodes 1-2 within cluster with an edge in between.\n      // So the cluster nodes also need to be scanned for invalid edges\n      eachClusterNode(function (clusterNode) {\n        util.forEach(clusterNode.containedEdges, function (edge, edgeId) {\n          if (!edge.endPointsValid() && !deletedEdgeIds[edgeId]) {\n            deletedEdgeIds[edgeId] = edgeId;\n          }\n        });\n      });\n\n      // Also scan for cluster edges which need to be removed in the active list.\n      // Regular edges have been removed beforehand, so this only picks up the cluster edges.\n      util.forEach(this.body.edges, function (edge, edgeId) {\n        // Explicitly scan the contained edges for validity\n        var isValid = true;\n        var replacedIds = edge.clusteringEdgeReplacingIds;\n        if (replacedIds !== undefined) {\n          var numValid = 0;\n\n          util.forEach(replacedIds, function (containedEdgeId) {\n            var containedEdge = _this4.body.edges[containedEdgeId];\n\n            if (containedEdge !== undefined && containedEdge.endPointsValid()) {\n              numValid += 1;\n            }\n          });\n\n          isValid = numValid > 0;\n        }\n\n        if (!edge.endPointsValid() || !isValid) {\n          deletedEdgeIds[edgeId] = edgeId;\n        }\n      });\n\n      // Remove edges from cluster nodes\n      eachClusterNode(function (clusterNode) {\n        util.forEach(deletedEdgeIds, function (deletedEdgeId) {\n          delete clusterNode.containedEdges[deletedEdgeId];\n\n          util.forEach(clusterNode.edges, function (edge, m) {\n            if (edge.id === deletedEdgeId) {\n              clusterNode.edges[m] = null; // Don't want to directly delete here, because in the loop\n              return;\n            }\n\n            edge.clusteringEdgeReplacingIds = _this4._filter(edge.clusteringEdgeReplacingIds, function (id) {\n              return !deletedEdgeIds[id];\n            });\n          });\n\n          // Clean up the nulls\n          clusterNode.edges = _this4._filter(clusterNode.edges, function (item) {\n            return item !== null;\n          });\n        });\n      });\n\n      // Remove from cluster list\n      util.forEach(deletedEdgeIds, function (edgeId) {\n        delete _this4.clusteredEdges[edgeId];\n      });\n\n      // Remove cluster edges from active list (this.body.edges).\n      // deletedEdgeIds still contains id of regular edges, but these should all\n      // be gone when you reach here.\n      util.forEach(deletedEdgeIds, function (edgeId) {\n        delete _this4.body.edges[edgeId];\n      });\n\n      //\n      // Check changed cluster state of edges\n      //\n\n      // Iterating over keys here, because edges may be removed in the loop\n      var ids = (0, _keys2['default'])(this.body.edges);\n      util.forEach(ids, function (edgeId) {\n        var edge = _this4.body.edges[edgeId];\n\n        var shouldBeClustered = _this4._isClusteredNode(edge.fromId) || _this4._isClusteredNode(edge.toId);\n        if (shouldBeClustered === _this4._isClusteredEdge(edge.id)) {\n          return; // all is well\n        }\n\n        if (shouldBeClustered) {\n          // add edge to clustering\n          var clusterFrom = _this4._getClusterNodeForNode(edge.fromId);\n          if (clusterFrom !== undefined) {\n            _this4._clusterEdges(_this4.body.nodes[edge.fromId], edge, clusterFrom);\n          }\n\n          var clusterTo = _this4._getClusterNodeForNode(edge.toId);\n          if (clusterTo !== undefined) {\n            _this4._clusterEdges(_this4.body.nodes[edge.toId], edge, clusterTo);\n          }\n\n          // TODO: check that it works for both edges clustered\n          //       (This might be paranoia)\n        } else {\n          // This should not be happening, the state should\n          // be properly updated at this point.\n          //\n          // If it *is* reached during normal operation, then we have to implement\n          // undo clustering for this edge here.\n          throw new Error('remove edge from clustering not implemented!');\n        }\n      });\n\n      // Clusters may be nested to any level. Keep on opening until nothing to open\n      var changed = false;\n      var continueLoop = true;\n\n      var _loop2 = function _loop2() {\n        var clustersToOpen = [];\n\n        // Determine the id's of clusters that need opening\n        eachClusterNode(function (clusterNode) {\n          var numNodes = (0, _keys2['default'])(clusterNode.containedNodes).length;\n          var allowSingle = clusterNode.options.allowSingleNodeCluster === true;\n          if (allowSingle && numNodes < 1 || !allowSingle && numNodes < 2) {\n            clustersToOpen.push(clusterNode.id);\n          }\n        });\n\n        // Open them\n        for (var _n = 0; _n < clustersToOpen.length; ++_n) {\n          _this4.openCluster(clustersToOpen[_n], {}, false /* Don't refresh, we're in an refresh/update already */\n          );\n        }\n\n        continueLoop = clustersToOpen.length > 0;\n        changed = changed || continueLoop;\n      };\n\n      while (continueLoop) {\n        _loop2();\n      }\n\n      if (changed) {\n        this._updateState(); // Redo this method (recursion possible! should be safe)\n      }\n    }\n\n    /**\n     * Determine if node with given id is part of a cluster.\n     *\n     * @param {Node.id} nodeId\n     * @return {boolean} true if part of a cluster.\n     */\n\n  }, {\n    key: '_isClusteredNode',\n    value: function _isClusteredNode(nodeId) {\n      return this.clusteredNodes[nodeId] !== undefined;\n    }\n\n    /**\n     * Determine if edge with given id is not visible due to clustering.\n     *\n     * An edge is considered clustered if:\n     * - it is directly replaced by a clustering edge\n     * - any of its connecting nodes is in a cluster\n     *\n     * @param {vis.Edge.id} edgeId\n     * @return {boolean} true if part of a cluster.\n     */\n\n  }, {\n    key: '_isClusteredEdge',\n    value: function _isClusteredEdge(edgeId) {\n      return this.clusteredEdges[edgeId] !== undefined;\n    }\n  }]);\n  return ClusterEngine;\n}();\n\nexports['default'] = ClusterEngine;\n\n/***/ }),\n/* 179 */\n/***/ (function(module, exports, __nested_webpack_require_951802__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _getPrototypeOf = __nested_webpack_require_951802__(3);\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _classCallCheck2 = __nested_webpack_require_951802__(0);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __nested_webpack_require_951802__(1);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = __nested_webpack_require_951802__(4);\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = __nested_webpack_require_951802__(5);\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar util = __nested_webpack_require_951802__(2);\nvar Node = __nested_webpack_require_951802__(34)['default'];\n\n/**\n * A Cluster is a special Node that allows a group of Nodes positioned closely together\n * to be represented by a single Cluster Node.\n *\n * @extends Node\n */\n\nvar Cluster = function (_Node) {\n  (0, _inherits3['default'])(Cluster, _Node);\n\n  /**\n   * @param {Object} options\n   * @param {Object} body\n   * @param {Array.<HTMLImageElement>}imagelist\n   * @param {Array} grouplist\n   * @param {Object} globalOptions\n   * @param {Object} defaultOptions     Global default options for nodes\n   */\n  function Cluster(options, body, imagelist, grouplist, globalOptions, defaultOptions) {\n    (0, _classCallCheck3['default'])(this, Cluster);\n\n    var _this = (0, _possibleConstructorReturn3['default'])(this, (Cluster.__proto__ || (0, _getPrototypeOf2['default'])(Cluster)).call(this, options, body, imagelist, grouplist, globalOptions, defaultOptions));\n\n    _this.isCluster = true;\n    _this.containedNodes = {};\n    _this.containedEdges = {};\n    return _this;\n  }\n\n  /**\n   * Transfer child cluster data to current and disconnect the child cluster.\n   *\n   * Please consult the header comment in 'Clustering.js' for the fields set here.\n   *\n   * @param {string|number} childClusterId  id of child cluster to open\n   */\n\n\n  (0, _createClass3['default'])(Cluster, [{\n    key: '_openChildCluster',\n    value: function _openChildCluster(childClusterId) {\n      var _this2 = this;\n\n      var childCluster = this.body.nodes[childClusterId];\n      if (this.containedNodes[childClusterId] === undefined) {\n        throw new Error('node with id: ' + childClusterId + ' not in current cluster');\n      }\n      if (!childCluster.isCluster) {\n        throw new Error('node with id: ' + childClusterId + ' is not a cluster');\n      }\n\n      // Disconnect child cluster from current cluster\n      delete this.containedNodes[childClusterId];\n      util.forEach(childCluster.edges, function (edge) {\n        delete _this2.containedEdges[edge.id];\n      });\n\n      // Transfer nodes and edges\n      util.forEach(childCluster.containedNodes, function (node, nodeId) {\n        _this2.containedNodes[nodeId] = node;\n      });\n      childCluster.containedNodes = {};\n\n      util.forEach(childCluster.containedEdges, function (edge, edgeId) {\n        _this2.containedEdges[edgeId] = edge;\n      });\n      childCluster.containedEdges = {};\n\n      // Transfer edges within cluster edges which are clustered\n      util.forEach(childCluster.edges, function (clusterEdge) {\n        util.forEach(_this2.edges, function (parentClusterEdge) {\n          // Assumption: a clustered edge can only be present in a single clustering edge\n          // Not tested here\n          var index = parentClusterEdge.clusteringEdgeReplacingIds.indexOf(clusterEdge.id);\n          if (index === -1) return;\n\n          util.forEach(clusterEdge.clusteringEdgeReplacingIds, function (srcId) {\n            parentClusterEdge.clusteringEdgeReplacingIds.push(srcId);\n\n            // Maintain correct bookkeeping for transferred edge\n            _this2.body.edges[srcId].edgeReplacedById = parentClusterEdge.id;\n          });\n\n          // Remove cluster edge from parent cluster edge\n          parentClusterEdge.clusteringEdgeReplacingIds.splice(index, 1);\n        });\n      });\n      childCluster.edges = [];\n    }\n  }]);\n  return Cluster;\n}(Node);\n\nexports['default'] = Cluster;\n\n/***/ }),\n/* 180 */\n/***/ (function(module, exports, __nested_webpack_require_956047__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _classCallCheck2 = __nested_webpack_require_956047__(0);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __nested_webpack_require_956047__(1);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\n/**\n * Initializes window.requestAnimationFrame() to a usable form.\n *\n * Specifically, set up this method for the case of running on node.js with jsdom enabled.\n *\n * NOTES:\n *\n * * On node.js, when calling this directly outside of this class, `window` is not defined.\n *   This happens even if jsdom is used.\n * * For node.js + jsdom, `window` is available at the moment the constructor is called.\n *   For this reason, the called is placed within the constructor.\n * * Even then, `window.requestAnimationFrame()` is not defined, so it still needs to be added.\n * * During unit testing, it happens that the window object is reset during execution, causing\n *   a runtime error due to missing `requestAnimationFrame()`. This needs to be compensated for,\n *   see `_requestNextFrame()`.\n * * Since this is a global object, it may affect other modules besides `Network`. With normal\n *   usage, this does not cause any problems. During unit testing, errors may occur. These have\n *   been compensated for, see comment block in _requestNextFrame().\n *\n * @private\n */\nfunction _initRequestAnimationFrame() {\n  var func;\n\n  if (window !== undefined) {\n    func = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame;\n  }\n\n  if (func === undefined) {\n    // window or method not present, setting mock requestAnimationFrame\n    window.requestAnimationFrame = function (callback) {\n      //console.log(\"Called mock requestAnimationFrame\");\n      callback();\n    };\n  } else {\n    window.requestAnimationFrame = func;\n  }\n}\n\nvar util = __nested_webpack_require_956047__(2);\n\n/**\n * The canvas renderer\n */\n\nvar CanvasRenderer = function () {\n  /**\n   * @param {Object} body\n   * @param {Canvas} canvas\n   */\n  function CanvasRenderer(body, canvas) {\n    (0, _classCallCheck3['default'])(this, CanvasRenderer);\n\n    _initRequestAnimationFrame();\n    this.body = body;\n    this.canvas = canvas;\n\n    this.redrawRequested = false;\n    this.renderTimer = undefined;\n    this.requiresTimeout = true;\n    this.renderingActive = false;\n    this.renderRequests = 0;\n    this.allowRedraw = true;\n\n    this.dragging = false;\n    this.zooming = false;\n    this.options = {};\n    this.defaultOptions = {\n      hideEdgesOnDrag: false,\n      hideEdgesOnZoom: false,\n      hideNodesOnDrag: false\n    };\n    util.extend(this.options, this.defaultOptions);\n\n    this._determineBrowserMethod();\n    this.bindEventListeners();\n  }\n\n  /**\n   * Binds event listeners\n   */\n\n\n  (0, _createClass3['default'])(CanvasRenderer, [{\n    key: 'bindEventListeners',\n    value: function bindEventListeners() {\n      var _this = this;\n\n      this.body.emitter.on('dragStart', function () {\n        _this.dragging = true;\n      });\n      this.body.emitter.on('dragEnd', function () {\n        _this.dragging = false;\n      });\n      this.body.emitter.on('zoom', function () {\n        _this.zooming = true;\n        window.clearTimeout(_this.zoomTimeoutId);\n        _this.zoomTimeoutId = window.setTimeout(function () {\n          _this.zooming = false;\n          _this._requestRedraw.bind(_this)();\n        }, 250);\n      });\n      this.body.emitter.on('_resizeNodes', function () {\n        _this._resizeNodes();\n      });\n      this.body.emitter.on('_redraw', function () {\n        if (_this.renderingActive === false) {\n          _this._redraw();\n        }\n      });\n      this.body.emitter.on('_blockRedraw', function () {\n        _this.allowRedraw = false;\n      });\n      this.body.emitter.on('_allowRedraw', function () {\n        _this.allowRedraw = true;\n        _this.redrawRequested = false;\n      });\n      this.body.emitter.on('_requestRedraw', this._requestRedraw.bind(this));\n      this.body.emitter.on('_startRendering', function () {\n        _this.renderRequests += 1;\n        _this.renderingActive = true;\n        _this._startRendering();\n      });\n      this.body.emitter.on('_stopRendering', function () {\n        _this.renderRequests -= 1;\n        _this.renderingActive = _this.renderRequests > 0;\n        _this.renderTimer = undefined;\n      });\n      this.body.emitter.on('destroy', function () {\n        _this.renderRequests = 0;\n        _this.allowRedraw = false;\n        _this.renderingActive = false;\n        if (_this.requiresTimeout === true) {\n          clearTimeout(_this.renderTimer);\n        } else {\n          window.cancelAnimationFrame(_this.renderTimer);\n        }\n        _this.body.emitter.off();\n      });\n    }\n\n    /**\n     *\n     * @param {Object} options\n     */\n\n  }, {\n    key: 'setOptions',\n    value: function setOptions(options) {\n      if (options !== undefined) {\n        var fields = ['hideEdgesOnDrag', 'hideEdgesOnZoom', 'hideNodesOnDrag'];\n        util.selectiveDeepExtend(fields, this.options, options);\n      }\n    }\n\n    /**\n     * Prepare the drawing of the next frame.\n     *\n     * Calls the callback when the next frame can or will be drawn.\n     *\n     * @param {function} callback\n     * @param {number} delay - timeout case only, wait this number of milliseconds\n     * @returns {function|undefined}\n     * @private\n     */\n\n  }, {\n    key: '_requestNextFrame',\n    value: function _requestNextFrame(callback, delay) {\n      // During unit testing, it happens that the mock window object is reset while\n      // the next frame is still pending. Then, either 'window' is not present, or\n      // 'requestAnimationFrame()' is not present because it is not defined on the\n      // mock window object.\n      //\n      // As a consequence, unrelated unit tests may appear to fail, even if the problem\n      // described happens in the current unit test.\n      //\n      // This is not something that will happen in normal operation, but we still need\n      // to take it into account.\n      //\n      if (typeof window === 'undefined') return; // Doing `if (window === undefined)` does not work here!\n\n      var timer = void 0;\n\n      var myWindow = window; // Grab a reference to reduce the possibility that 'window' is reset\n      // while running this method.\n\n      if (this.requiresTimeout === true) {\n        // wait given number of milliseconds and perform the animation step function\n        timer = myWindow.setTimeout(callback, delay);\n      } else {\n        if (myWindow.requestAnimationFrame) {\n          timer = myWindow.requestAnimationFrame(callback);\n        }\n      }\n\n      return timer;\n    }\n\n    /**\n     *\n     * @private\n     */\n\n  }, {\n    key: '_startRendering',\n    value: function _startRendering() {\n      if (this.renderingActive === true) {\n        if (this.renderTimer === undefined) {\n          this.renderTimer = this._requestNextFrame(this._renderStep.bind(this), this.simulationInterval);\n        }\n      }\n    }\n\n    /**\n     *\n     * @private\n     */\n\n  }, {\n    key: '_renderStep',\n    value: function _renderStep() {\n      if (this.renderingActive === true) {\n        // reset the renderTimer so a new scheduled animation step can be set\n        this.renderTimer = undefined;\n\n        if (this.requiresTimeout === true) {\n          // this schedules a new simulation step\n          this._startRendering();\n        }\n\n        this._redraw();\n\n        if (this.requiresTimeout === false) {\n          // this schedules a new simulation step\n          this._startRendering();\n        }\n      }\n    }\n\n    /**\n     * Redraw the network with the current data\n     * chart will be resized too.\n     */\n\n  }, {\n    key: 'redraw',\n    value: function redraw() {\n      this.body.emitter.emit('setSize');\n      this._redraw();\n    }\n\n    /**\n     * Redraw the network with the current data\n     * @private\n     */\n\n  }, {\n    key: '_requestRedraw',\n    value: function _requestRedraw() {\n      var _this2 = this;\n\n      if (this.redrawRequested !== true && this.renderingActive === false && this.allowRedraw === true) {\n        this.redrawRequested = true;\n        this._requestNextFrame(function () {\n          _this2._redraw(false);\n        }, 0);\n      }\n    }\n\n    /**\n     * Redraw the network with the current data\n     * @param {boolean} [hidden=false] | Used to get the first estimate of the node sizes.\n     *                                   Only the nodes are drawn after which they are quickly drawn over.\n     * @private\n     */\n\n  }, {\n    key: '_redraw',\n    value: function _redraw() {\n      var hidden = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n      if (this.allowRedraw === true) {\n        this.body.emitter.emit('initRedraw');\n\n        this.redrawRequested = false;\n\n        // when the container div was hidden, this fixes it back up!\n        if (this.canvas.frame.canvas.width === 0 || this.canvas.frame.canvas.height === 0) {\n          this.canvas.setSize();\n        }\n\n        this.canvas.setTransform();\n\n        var ctx = this.canvas.getContext();\n\n        // clear the canvas\n        var w = this.canvas.frame.canvas.clientWidth;\n        var h = this.canvas.frame.canvas.clientHeight;\n        ctx.clearRect(0, 0, w, h);\n\n        // if the div is hidden, we stop the redraw here for performance.\n        if (this.canvas.frame.clientWidth === 0) {\n          return;\n        }\n\n        // set scaling and translation\n        ctx.save();\n        ctx.translate(this.body.view.translation.x, this.body.view.translation.y);\n        ctx.scale(this.body.view.scale, this.body.view.scale);\n\n        ctx.beginPath();\n        this.body.emitter.emit('beforeDrawing', ctx);\n        ctx.closePath();\n\n        if (hidden === false) {\n          if ((this.dragging === false || this.dragging === true && this.options.hideEdgesOnDrag === false) && (this.zooming === false || this.zooming === true && this.options.hideEdgesOnZoom === false)) {\n            this._drawEdges(ctx);\n          }\n        }\n\n        if (this.dragging === false || this.dragging === true && this.options.hideNodesOnDrag === false) {\n          this._drawNodes(ctx, hidden);\n        }\n\n        ctx.beginPath();\n        this.body.emitter.emit('afterDrawing', ctx);\n        ctx.closePath();\n\n        // restore original scaling and translation\n        ctx.restore();\n        if (hidden === true) {\n          ctx.clearRect(0, 0, w, h);\n        }\n      }\n    }\n\n    /**\n     * Redraw all nodes\n     *\n     * @param {CanvasRenderingContext2D}   ctx\n     * @param {boolean} [alwaysShow]\n     * @private\n     */\n\n  }, {\n    key: '_resizeNodes',\n    value: function _resizeNodes() {\n      this.canvas.setTransform();\n      var ctx = this.canvas.getContext();\n      ctx.save();\n      ctx.translate(this.body.view.translation.x, this.body.view.translation.y);\n      ctx.scale(this.body.view.scale, this.body.view.scale);\n\n      var nodes = this.body.nodes;\n      var node = void 0;\n\n      // resize all nodes\n      for (var nodeId in nodes) {\n        if (nodes.hasOwnProperty(nodeId)) {\n          node = nodes[nodeId];\n          node.resize(ctx);\n          node.updateBoundingBox(ctx, node.selected);\n        }\n      }\n\n      // restore original scaling and translation\n      ctx.restore();\n    }\n\n    /**\n     * Redraw all nodes\n     *\n     * @param {CanvasRenderingContext2D} ctx  2D context of a HTML canvas\n     * @param {boolean} [alwaysShow]\n     * @private\n     */\n\n  }, {\n    key: '_drawNodes',\n    value: function _drawNodes(ctx) {\n      var alwaysShow = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n      var nodes = this.body.nodes;\n      var nodeIndices = this.body.nodeIndices;\n      var node = void 0;\n      var selected = [];\n      var margin = 20;\n      var topLeft = this.canvas.DOMtoCanvas({ x: -margin, y: -margin });\n      var bottomRight = this.canvas.DOMtoCanvas({\n        x: this.canvas.frame.canvas.clientWidth + margin,\n        y: this.canvas.frame.canvas.clientHeight + margin\n      });\n      var viewableArea = {\n        top: topLeft.y,\n        left: topLeft.x,\n        bottom: bottomRight.y,\n        right: bottomRight.x\n\n        // draw unselected nodes;\n      };for (var i = 0; i < nodeIndices.length; i++) {\n        node = nodes[nodeIndices[i]];\n        // set selected nodes aside\n        if (node.isSelected()) {\n          selected.push(nodeIndices[i]);\n        } else {\n          if (alwaysShow === true) {\n            node.draw(ctx);\n          } else if (node.isBoundingBoxOverlappingWith(viewableArea) === true) {\n            node.draw(ctx);\n          } else {\n            node.updateBoundingBox(ctx, node.selected);\n          }\n        }\n      }\n\n      // draw the selected nodes on top\n      for (var _i = 0; _i < selected.length; _i++) {\n        node = nodes[selected[_i]];\n        node.draw(ctx);\n      }\n    }\n\n    /**\n     * Redraw all edges\n     * @param {CanvasRenderingContext2D} ctx  2D context of a HTML canvas\n     * @private\n     */\n\n  }, {\n    key: '_drawEdges',\n    value: function _drawEdges(ctx) {\n      var edges = this.body.edges;\n      var edgeIndices = this.body.edgeIndices;\n      var edge = void 0;\n\n      for (var i = 0; i < edgeIndices.length; i++) {\n        edge = edges[edgeIndices[i]];\n        if (edge.connected === true) {\n          edge.draw(ctx);\n        }\n      }\n    }\n\n    /**\n     * Determine if the browser requires a setTimeout or a requestAnimationFrame. This was required because\n     * some implementations (safari and IE9) did not support requestAnimationFrame\n     * @private\n     */\n\n  }, {\n    key: '_determineBrowserMethod',\n    value: function _determineBrowserMethod() {\n      if (typeof window !== 'undefined') {\n        var browserType = navigator.userAgent.toLowerCase();\n        this.requiresTimeout = false;\n        if (browserType.indexOf('msie 9.0') != -1) {\n          // IE 9\n          this.requiresTimeout = true;\n        } else if (browserType.indexOf('safari') != -1) {\n          // safari\n          if (browserType.indexOf('chrome') <= -1) {\n            this.requiresTimeout = true;\n          }\n        }\n      } else {\n        this.requiresTimeout = true;\n      }\n    }\n  }]);\n  return CanvasRenderer;\n}();\n\nexports['default'] = CanvasRenderer;\n\n/***/ }),\n/* 181 */\n/***/ (function(module, exports, __nested_webpack_require_970513__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _classCallCheck2 = __nested_webpack_require_970513__(0);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __nested_webpack_require_970513__(1);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar Hammer = __nested_webpack_require_970513__(24);\nvar hammerUtil = __nested_webpack_require_970513__(36);\n\nvar util = __nested_webpack_require_970513__(2);\n\n/**\n * Create the main frame for the Network.\n * This function is executed once when a Network object is created. The frame\n * contains a canvas, and this canvas contains all objects like the axis and\n * nodes.\n */\n\nvar Canvas = function () {\n  /**\n   * @param {Object} body\n   */\n  function Canvas(body) {\n    (0, _classCallCheck3['default'])(this, Canvas);\n\n    this.body = body;\n    this.pixelRatio = 1;\n    this.resizeTimer = undefined;\n    this.resizeFunction = this._onResize.bind(this);\n    this.cameraState = {};\n    this.initialized = false;\n    this.canvasViewCenter = {};\n\n    this.options = {};\n    this.defaultOptions = {\n      autoResize: true,\n      height: '100%',\n      width: '100%'\n    };\n    util.extend(this.options, this.defaultOptions);\n\n    this.bindEventListeners();\n  }\n\n  /**\n   * Binds event listeners\n   */\n\n\n  (0, _createClass3['default'])(Canvas, [{\n    key: 'bindEventListeners',\n    value: function bindEventListeners() {\n      var _this = this;\n\n      // bind the events\n      this.body.emitter.once('resize', function (obj) {\n        if (obj.width !== 0) {\n          _this.body.view.translation.x = obj.width * 0.5;\n        }\n        if (obj.height !== 0) {\n          _this.body.view.translation.y = obj.height * 0.5;\n        }\n      });\n      this.body.emitter.on('setSize', this.setSize.bind(this));\n      this.body.emitter.on('destroy', function () {\n        _this.hammerFrame.destroy();\n        _this.hammer.destroy();\n        _this._cleanUp();\n      });\n    }\n\n    /**\n     * @param {Object} options\n     */\n\n  }, {\n    key: 'setOptions',\n    value: function setOptions(options) {\n      var _this2 = this;\n\n      if (options !== undefined) {\n        var fields = ['width', 'height', 'autoResize'];\n        util.selectiveDeepExtend(fields, this.options, options);\n      }\n\n      if (this.options.autoResize === true) {\n        // automatically adapt to a changing size of the browser.\n        this._cleanUp();\n        this.resizeTimer = setInterval(function () {\n          var changed = _this2.setSize();\n          if (changed === true) {\n            _this2.body.emitter.emit('_requestRedraw');\n          }\n        }, 1000);\n        this.resizeFunction = this._onResize.bind(this);\n        util.addEventListener(window, 'resize', this.resizeFunction);\n      }\n    }\n\n    /**\n     * @private\n     */\n\n  }, {\n    key: '_cleanUp',\n    value: function _cleanUp() {\n      // automatically adapt to a changing size of the browser.\n      if (this.resizeTimer !== undefined) {\n        clearInterval(this.resizeTimer);\n      }\n      util.removeEventListener(window, 'resize', this.resizeFunction);\n      this.resizeFunction = undefined;\n    }\n\n    /**\n     * @private\n     */\n\n  }, {\n    key: '_onResize',\n    value: function _onResize() {\n      this.setSize();\n      this.body.emitter.emit('_redraw');\n    }\n\n    /**\n     * Get and store the cameraState\n     *\n     * @param {number} [pixelRatio=this.pixelRatio]\n     * @private\n     */\n\n  }, {\n    key: '_getCameraState',\n    value: function _getCameraState() {\n      var pixelRatio = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.pixelRatio;\n\n      if (this.initialized === true) {\n        this.cameraState.previousWidth = this.frame.canvas.width / pixelRatio;\n        this.cameraState.previousHeight = this.frame.canvas.height / pixelRatio;\n        this.cameraState.scale = this.body.view.scale;\n        this.cameraState.position = this.DOMtoCanvas({\n          x: 0.5 * this.frame.canvas.width / pixelRatio,\n          y: 0.5 * this.frame.canvas.height / pixelRatio\n        });\n      }\n    }\n\n    /**\n     * Set the cameraState\n     * @private\n     */\n\n  }, {\n    key: '_setCameraState',\n    value: function _setCameraState() {\n      if (this.cameraState.scale !== undefined && this.frame.canvas.clientWidth !== 0 && this.frame.canvas.clientHeight !== 0 && this.pixelRatio !== 0 && this.cameraState.previousWidth > 0) {\n        var widthRatio = this.frame.canvas.width / this.pixelRatio / this.cameraState.previousWidth;\n        var heightRatio = this.frame.canvas.height / this.pixelRatio / this.cameraState.previousHeight;\n        var newScale = this.cameraState.scale;\n\n        if (widthRatio != 1 && heightRatio != 1) {\n          newScale = this.cameraState.scale * 0.5 * (widthRatio + heightRatio);\n        } else if (widthRatio != 1) {\n          newScale = this.cameraState.scale * widthRatio;\n        } else if (heightRatio != 1) {\n          newScale = this.cameraState.scale * heightRatio;\n        }\n\n        this.body.view.scale = newScale;\n        // this comes from the view module.\n        var currentViewCenter = this.DOMtoCanvas({\n          x: 0.5 * this.frame.canvas.clientWidth,\n          y: 0.5 * this.frame.canvas.clientHeight\n        });\n\n        var distanceFromCenter = {\n          // offset from view, distance view has to change by these x and y to center the node\n          x: currentViewCenter.x - this.cameraState.position.x,\n          y: currentViewCenter.y - this.cameraState.position.y\n        };\n        this.body.view.translation.x += distanceFromCenter.x * this.body.view.scale;\n        this.body.view.translation.y += distanceFromCenter.y * this.body.view.scale;\n      }\n    }\n\n    /**\n     *\n     * @param {number|string} value\n     * @returns {string}\n     * @private\n     */\n\n  }, {\n    key: '_prepareValue',\n    value: function _prepareValue(value) {\n      if (typeof value === 'number') {\n        return value + 'px';\n      } else if (typeof value === 'string') {\n        if (value.indexOf('%') !== -1 || value.indexOf('px') !== -1) {\n          return value;\n        } else if (value.indexOf('%') === -1) {\n          return value + 'px';\n        }\n      }\n      throw new Error('Could not use the value supplied for width or height:' + value);\n    }\n\n    /**\n     * Create the HTML\n     */\n\n  }, {\n    key: '_create',\n    value: function _create() {\n      // remove all elements from the container element.\n      while (this.body.container.hasChildNodes()) {\n        this.body.container.removeChild(this.body.container.firstChild);\n      }\n\n      this.frame = document.createElement('div');\n      this.frame.className = 'vis-network';\n      this.frame.style.position = 'relative';\n      this.frame.style.overflow = 'hidden';\n      this.frame.tabIndex = 900; // tab index is required for keycharm to bind keystrokes to the div instead of the window\n\n      //////////////////////////////////////////////////////////////////\n\n      this.frame.canvas = document.createElement('canvas');\n      this.frame.canvas.style.position = 'relative';\n      this.frame.appendChild(this.frame.canvas);\n\n      if (!this.frame.canvas.getContext) {\n        var noCanvas = document.createElement('DIV');\n        noCanvas.style.color = 'red';\n        noCanvas.style.fontWeight = 'bold';\n        noCanvas.style.padding = '10px';\n        noCanvas.innerHTML = 'Error: your browser does not support HTML canvas';\n        this.frame.canvas.appendChild(noCanvas);\n      } else {\n        this._setPixelRatio();\n        this.setTransform();\n      }\n\n      // add the frame to the container element\n      this.body.container.appendChild(this.frame);\n\n      this.body.view.scale = 1;\n      this.body.view.translation = {\n        x: 0.5 * this.frame.canvas.clientWidth,\n        y: 0.5 * this.frame.canvas.clientHeight\n      };\n\n      this._bindHammer();\n    }\n\n    /**\n     * This function binds hammer, it can be repeated over and over due to the uniqueness check.\n     * @private\n     */\n\n  }, {\n    key: '_bindHammer',\n    value: function _bindHammer() {\n      var _this3 = this;\n\n      if (this.hammer !== undefined) {\n        this.hammer.destroy();\n      }\n      this.drag = {};\n      this.pinch = {};\n\n      // init hammer\n      this.hammer = new Hammer(this.frame.canvas);\n      this.hammer.get('pinch').set({ enable: true });\n      // enable to get better response, todo: test on mobile.\n      this.hammer.get('pan').set({ threshold: 5, direction: Hammer.DIRECTION_ALL });\n\n      hammerUtil.onTouch(this.hammer, function (event) {\n        _this3.body.eventListeners.onTouch(event);\n      });\n      this.hammer.on('tap', function (event) {\n        _this3.body.eventListeners.onTap(event);\n      });\n      this.hammer.on('doubletap', function (event) {\n        _this3.body.eventListeners.onDoubleTap(event);\n      });\n      this.hammer.on('press', function (event) {\n        _this3.body.eventListeners.onHold(event);\n      });\n      this.hammer.on('panstart', function (event) {\n        _this3.body.eventListeners.onDragStart(event);\n      });\n      this.hammer.on('panmove', function (event) {\n        _this3.body.eventListeners.onDrag(event);\n      });\n      this.hammer.on('panend', function (event) {\n        _this3.body.eventListeners.onDragEnd(event);\n      });\n      this.hammer.on('pinch', function (event) {\n        _this3.body.eventListeners.onPinch(event);\n      });\n\n      // TODO: neatly cleanup these handlers when re-creating the Canvas, IF these are done with hammer, event.stopPropagation will not work?\n      this.frame.canvas.addEventListener('mousewheel', function (event) {\n        _this3.body.eventListeners.onMouseWheel(event);\n      });\n      this.frame.canvas.addEventListener('DOMMouseScroll', function (event) {\n        _this3.body.eventListeners.onMouseWheel(event);\n      });\n\n      this.frame.canvas.addEventListener('mousemove', function (event) {\n        _this3.body.eventListeners.onMouseMove(event);\n      });\n      this.frame.canvas.addEventListener('contextmenu', function (event) {\n        _this3.body.eventListeners.onContext(event);\n      });\n\n      this.hammerFrame = new Hammer(this.frame);\n      hammerUtil.onRelease(this.hammerFrame, function (event) {\n        _this3.body.eventListeners.onRelease(event);\n      });\n    }\n\n    /**\n     * Set a new size for the network\n     * @param {string} width   Width in pixels or percentage (for example '800px'\n     *                         or '50%')\n     * @param {string} height  Height in pixels or percentage  (for example '400px'\n     *                         or '30%')\n     * @returns {boolean}\n     */\n\n  }, {\n    key: 'setSize',\n    value: function setSize() {\n      var width = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.options.width;\n      var height = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.options.height;\n\n      width = this._prepareValue(width);\n      height = this._prepareValue(height);\n\n      var emitEvent = false;\n      var oldWidth = this.frame.canvas.width;\n      var oldHeight = this.frame.canvas.height;\n\n      // update the pixel ratio\n      //\n      // NOTE: Comment in following is rather inconsistent; this is the ONLY place in the code\n      //       where it is assumed that the pixel ratio could change at runtime.\n      //       The only way I can think of this happening is a rotating screen or tablet; but then\n      //       there should be a mechanism for reloading the data (TODO: check if this is present).\n      //\n      //       If the assumption is true (i.e. pixel ratio can change at runtime), then *all* usage\n      //       of pixel ratio must be overhauled for this.\n      //\n      //       For the time being, I will humor the assumption here, and in the rest of the code assume it is\n      //       constant.\n      var previousRatio = this.pixelRatio; // we cache this because the camera state storage needs the old value\n      this._setPixelRatio();\n\n      if (width != this.options.width || height != this.options.height || this.frame.style.width != width || this.frame.style.height != height) {\n        this._getCameraState(previousRatio);\n\n        this.frame.style.width = width;\n        this.frame.style.height = height;\n\n        this.frame.canvas.style.width = '100%';\n        this.frame.canvas.style.height = '100%';\n\n        this.frame.canvas.width = Math.round(this.frame.canvas.clientWidth * this.pixelRatio);\n        this.frame.canvas.height = Math.round(this.frame.canvas.clientHeight * this.pixelRatio);\n\n        this.options.width = width;\n        this.options.height = height;\n\n        this.canvasViewCenter = {\n          x: 0.5 * this.frame.clientWidth,\n          y: 0.5 * this.frame.clientHeight\n        };\n\n        emitEvent = true;\n      } else {\n        // this would adapt the width of the canvas to the width from 100% if and only if\n        // there is a change.\n\n        var newWidth = Math.round(this.frame.canvas.clientWidth * this.pixelRatio);\n        var newHeight = Math.round(this.frame.canvas.clientHeight * this.pixelRatio);\n\n        // store the camera if there is a change in size.\n        if (this.frame.canvas.width !== newWidth || this.frame.canvas.height !== newHeight) {\n          this._getCameraState(previousRatio);\n        }\n\n        if (this.frame.canvas.width !== newWidth) {\n          this.frame.canvas.width = newWidth;\n          emitEvent = true;\n        }\n        if (this.frame.canvas.height !== newHeight) {\n          this.frame.canvas.height = newHeight;\n          emitEvent = true;\n        }\n      }\n\n      if (emitEvent === true) {\n        this.body.emitter.emit('resize', {\n          width: Math.round(this.frame.canvas.width / this.pixelRatio),\n          height: Math.round(this.frame.canvas.height / this.pixelRatio),\n          oldWidth: Math.round(oldWidth / this.pixelRatio),\n          oldHeight: Math.round(oldHeight / this.pixelRatio)\n        });\n\n        // restore the camera on change.\n        this._setCameraState();\n      }\n\n      // set initialized so the get and set camera will work from now on.\n      this.initialized = true;\n      return emitEvent;\n    }\n\n    /**\n     *\n     * @returns {CanvasRenderingContext2D}\n     */\n\n  }, {\n    key: 'getContext',\n    value: function getContext() {\n      return this.frame.canvas.getContext('2d');\n    }\n\n    /**\n     * Determine the pixel ratio for various browsers.\n     *\n     * @returns {number}\n     * @private\n     */\n\n  }, {\n    key: '_determinePixelRatio',\n    value: function _determinePixelRatio() {\n      var ctx = this.getContext();\n      if (ctx === undefined) {\n        throw new Error('Could not get canvax context');\n      }\n\n      var numerator = 1;\n      if (typeof window !== 'undefined') {\n        // (window !== undefined) doesn't work here!\n        // Protection during unit tests, where 'window' can be missing\n        numerator = window.devicePixelRatio || 1;\n      }\n\n      var denominator = ctx.webkitBackingStorePixelRatio || ctx.mozBackingStorePixelRatio || ctx.msBackingStorePixelRatio || ctx.oBackingStorePixelRatio || ctx.backingStorePixelRatio || 1;\n\n      return numerator / denominator;\n    }\n\n    /**\n     * Lazy determination of pixel ratio.\n     *\n     * @private\n     */\n\n  }, {\n    key: '_setPixelRatio',\n    value: function _setPixelRatio() {\n      this.pixelRatio = this._determinePixelRatio();\n    }\n\n    /**\n     * Set the transform in the contained context, based on its pixelRatio\n     */\n\n  }, {\n    key: 'setTransform',\n    value: function setTransform() {\n      var ctx = this.getContext();\n      if (ctx === undefined) {\n        throw new Error('Could not get canvax context');\n      }\n\n      ctx.setTransform(this.pixelRatio, 0, 0, this.pixelRatio, 0, 0);\n    }\n\n    /**\n     * Convert the X coordinate in DOM-space (coordinate point in browser relative to the container div) to\n     * the X coordinate in canvas-space (the simulation sandbox, which the camera looks upon)\n     * @param {number} x\n     * @returns {number}\n     * @private\n     */\n\n  }, {\n    key: '_XconvertDOMtoCanvas',\n    value: function _XconvertDOMtoCanvas(x) {\n      return (x - this.body.view.translation.x) / this.body.view.scale;\n    }\n\n    /**\n     * Convert the X coordinate in canvas-space (the simulation sandbox, which the camera looks upon) to\n     * the X coordinate in DOM-space (coordinate point in browser relative to the container div)\n     * @param {number} x\n     * @returns {number}\n     * @private\n     */\n\n  }, {\n    key: '_XconvertCanvasToDOM',\n    value: function _XconvertCanvasToDOM(x) {\n      return x * this.body.view.scale + this.body.view.translation.x;\n    }\n\n    /**\n     * Convert the Y coordinate in DOM-space (coordinate point in browser relative to the container div) to\n     * the Y coordinate in canvas-space (the simulation sandbox, which the camera looks upon)\n     * @param {number} y\n     * @returns {number}\n     * @private\n     */\n\n  }, {\n    key: '_YconvertDOMtoCanvas',\n    value: function _YconvertDOMtoCanvas(y) {\n      return (y - this.body.view.translation.y) / this.body.view.scale;\n    }\n\n    /**\n     * Convert the Y coordinate in canvas-space (the simulation sandbox, which the camera looks upon) to\n     * the Y coordinate in DOM-space (coordinate point in browser relative to the container div)\n     * @param {number} y\n     * @returns {number}\n     * @private\n     */\n\n  }, {\n    key: '_YconvertCanvasToDOM',\n    value: function _YconvertCanvasToDOM(y) {\n      return y * this.body.view.scale + this.body.view.translation.y;\n    }\n\n    /**\n     * @param {point} pos\n     * @returns {point}\n     */\n\n  }, {\n    key: 'canvasToDOM',\n    value: function canvasToDOM(pos) {\n      return {\n        x: this._XconvertCanvasToDOM(pos.x),\n        y: this._YconvertCanvasToDOM(pos.y)\n      };\n    }\n\n    /**\n     *\n     * @param {point} pos\n     * @returns {point}\n     */\n\n  }, {\n    key: 'DOMtoCanvas',\n    value: function DOMtoCanvas(pos) {\n      return {\n        x: this._XconvertDOMtoCanvas(pos.x),\n        y: this._YconvertDOMtoCanvas(pos.y)\n      };\n    }\n  }]);\n  return Canvas;\n}();\n\nexports['default'] = Canvas;\n\n/***/ }),\n/* 182 */\n/***/ (function(module, exports, __nested_webpack_require_988723__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _assign = __nested_webpack_require_988723__(78);\n\nvar _assign2 = _interopRequireDefault(_assign);\n\nvar _classCallCheck2 = __nested_webpack_require_988723__(0);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __nested_webpack_require_988723__(1);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar util = __nested_webpack_require_988723__(2);\n\nvar NetworkUtil = __nested_webpack_require_988723__(57)['default'];\n\n/**\n * The view\n */\n\nvar View = function () {\n  /**\n   * @param {Object} body\n   * @param {Canvas} canvas\n   */\n  function View(body, canvas) {\n    var _this = this;\n\n    (0, _classCallCheck3['default'])(this, View);\n\n    this.body = body;\n    this.canvas = canvas;\n\n    this.animationSpeed = 1 / this.renderRefreshRate;\n    this.animationEasingFunction = 'easeInOutQuint';\n    this.easingTime = 0;\n    this.sourceScale = 0;\n    this.targetScale = 0;\n    this.sourceTranslation = 0;\n    this.targetTranslation = 0;\n    this.lockedOnNodeId = undefined;\n    this.lockedOnNodeOffset = undefined;\n    this.touchTime = 0;\n\n    this.viewFunction = undefined;\n\n    this.body.emitter.on('fit', this.fit.bind(this));\n    this.body.emitter.on('animationFinished', function () {\n      _this.body.emitter.emit('_stopRendering');\n    });\n    this.body.emitter.on('unlockNode', this.releaseNode.bind(this));\n  }\n\n  /**\n   *\n   * @param {Object} [options={}]\n   */\n\n\n  (0, _createClass3['default'])(View, [{\n    key: 'setOptions',\n    value: function setOptions() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      this.options = options;\n    }\n\n    /**\n     * This function zooms out to fit all data on screen based on amount of nodes\n     * @param {Object} [options={{nodes=Array}}]\n     * @param {boolean} [initialZoom=false]  | zoom based on fitted formula or range, true = fitted, default = false;\n     */\n\n  }, {\n    key: 'fit',\n    value: function fit() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : { nodes: [] };\n      var initialZoom = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n      var range = void 0;\n      var zoomLevel = void 0;\n      options = (0, _assign2['default'])({}, options);\n      if (options.nodes === undefined || options.nodes.length === 0) {\n        options.nodes = this.body.nodeIndices;\n      }\n\n      if (initialZoom === true) {\n        // check if more than half of the nodes have a predefined position. If so, we use the range, not the approximation.\n        var positionDefined = 0;\n        for (var nodeId in this.body.nodes) {\n          if (this.body.nodes.hasOwnProperty(nodeId)) {\n            var node = this.body.nodes[nodeId];\n            if (node.predefinedPosition === true) {\n              positionDefined += 1;\n            }\n          }\n        }\n        if (positionDefined > 0.5 * this.body.nodeIndices.length) {\n          this.fit(options, false);\n          return;\n        }\n\n        range = NetworkUtil.getRange(this.body.nodes, options.nodes);\n\n        var numberOfNodes = this.body.nodeIndices.length;\n        zoomLevel = 12.662 / (numberOfNodes + 7.4147) + 0.0964822; // this is obtained from fitting a dataset from 5 points with scale levels that looked good.\n\n        // correct for larger canvasses.\n        var factor = Math.min(this.canvas.frame.canvas.clientWidth / 600, this.canvas.frame.canvas.clientHeight / 600);\n        zoomLevel *= factor;\n      } else {\n        this.body.emitter.emit('_resizeNodes');\n        range = NetworkUtil.getRange(this.body.nodes, options.nodes);\n\n        var xDistance = Math.abs(range.maxX - range.minX) * 1.1;\n        var yDistance = Math.abs(range.maxY - range.minY) * 1.1;\n\n        var xZoomLevel = this.canvas.frame.canvas.clientWidth / xDistance;\n        var yZoomLevel = this.canvas.frame.canvas.clientHeight / yDistance;\n\n        zoomLevel = xZoomLevel <= yZoomLevel ? xZoomLevel : yZoomLevel;\n      }\n\n      if (zoomLevel > 1.0) {\n        zoomLevel = 1.0;\n      } else if (zoomLevel === 0) {\n        zoomLevel = 1.0;\n      }\n\n      var center = NetworkUtil.findCenter(range);\n      var animationOptions = {\n        position: center,\n        scale: zoomLevel,\n        animation: options.animation\n      };\n      this.moveTo(animationOptions);\n    }\n\n    // animation\n\n    /**\n     * Center a node in view.\n     *\n     * @param {number} nodeId\n     * @param {number} [options]\n     */\n\n  }, {\n    key: 'focus',\n    value: function focus(nodeId) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      if (this.body.nodes[nodeId] !== undefined) {\n        var nodePosition = {\n          x: this.body.nodes[nodeId].x,\n          y: this.body.nodes[nodeId].y\n        };\n        options.position = nodePosition;\n        options.lockedOnNode = nodeId;\n\n        this.moveTo(options);\n      } else {\n        console.log('Node: ' + nodeId + ' cannot be found.');\n      }\n    }\n\n    /**\n     *\n     * @param {Object} options  |  options.offset   = {x:number, y:number}   // offset from the center in DOM pixels\n     *                          |  options.scale    = number                 // scale to move to\n     *                          |  options.position = {x:number, y:number}   // position to move to\n     *                          |  options.animation = {duration:number, easingFunction:String} || Boolean   // position to move to\n     */\n\n  }, {\n    key: 'moveTo',\n    value: function moveTo(options) {\n      if (options === undefined) {\n        options = {};\n        return;\n      }\n      if (options.offset === undefined) {\n        options.offset = { x: 0, y: 0 };\n      }\n      if (options.offset.x === undefined) {\n        options.offset.x = 0;\n      }\n      if (options.offset.y === undefined) {\n        options.offset.y = 0;\n      }\n      if (options.scale === undefined) {\n        options.scale = this.body.view.scale;\n      }\n      if (options.position === undefined) {\n        options.position = this.getViewPosition();\n      }\n      if (options.animation === undefined) {\n        options.animation = { duration: 0 };\n      }\n      if (options.animation === false) {\n        options.animation = { duration: 0 };\n      }\n      if (options.animation === true) {\n        options.animation = {};\n      }\n      if (options.animation.duration === undefined) {\n        options.animation.duration = 1000;\n      } // default duration\n      if (options.animation.easingFunction === undefined) {\n        options.animation.easingFunction = 'easeInOutQuad';\n      } // default easing function\n\n      this.animateView(options);\n    }\n\n    /**\n     *\n     * @param {Object} options  |  options.offset   = {x:number, y:number}   // offset from the center in DOM pixels\n     *                          |  options.time     = number                 // animation time in milliseconds\n     *                          |  options.scale    = number                 // scale to animate to\n     *                          |  options.position = {x:number, y:number}   // position to animate to\n     *                          |  options.easingFunction = String           // linear, easeInQuad, easeOutQuad, easeInOutQuad,\n     *                                                                       // easeInCubic, easeOutCubic, easeInOutCubic,\n     *                                                                       // easeInQuart, easeOutQuart, easeInOutQuart,\n     *                                                                       // easeInQuint, easeOutQuint, easeInOutQuint\n     */\n\n  }, {\n    key: 'animateView',\n    value: function animateView(options) {\n      if (options === undefined) {\n        return;\n      }\n      this.animationEasingFunction = options.animation.easingFunction;\n      // release if something focussed on the node\n      this.releaseNode();\n      if (options.locked === true) {\n        this.lockedOnNodeId = options.lockedOnNode;\n        this.lockedOnNodeOffset = options.offset;\n      }\n\n      // forcefully complete the old animation if it was still running\n      if (this.easingTime != 0) {\n        this._transitionRedraw(true); // by setting easingtime to 1, we finish the animation.\n      }\n\n      this.sourceScale = this.body.view.scale;\n      this.sourceTranslation = this.body.view.translation;\n      this.targetScale = options.scale;\n\n      // set the scale so the viewCenter is based on the correct zoom level. This is overridden in the transitionRedraw\n      // but at least then we'll have the target transition\n      this.body.view.scale = this.targetScale;\n      var viewCenter = this.canvas.DOMtoCanvas({\n        x: 0.5 * this.canvas.frame.canvas.clientWidth,\n        y: 0.5 * this.canvas.frame.canvas.clientHeight\n      });\n\n      var distanceFromCenter = {\n        // offset from view, distance view has to change by these x and y to center the node\n        x: viewCenter.x - options.position.x,\n        y: viewCenter.y - options.position.y\n      };\n      this.targetTranslation = {\n        x: this.sourceTranslation.x + distanceFromCenter.x * this.targetScale + options.offset.x,\n        y: this.sourceTranslation.y + distanceFromCenter.y * this.targetScale + options.offset.y\n\n        // if the time is set to 0, don't do an animation\n      };if (options.animation.duration === 0) {\n        if (this.lockedOnNodeId != undefined) {\n          this.viewFunction = this._lockedRedraw.bind(this);\n          this.body.emitter.on('initRedraw', this.viewFunction);\n        } else {\n          this.body.view.scale = this.targetScale;\n          this.body.view.translation = this.targetTranslation;\n          this.body.emitter.emit('_requestRedraw');\n        }\n      } else {\n        this.animationSpeed = 1 / (60 * options.animation.duration * 0.001) || 1 / 60; // 60 for 60 seconds, 0.001 for milli's\n        this.animationEasingFunction = options.animation.easingFunction;\n\n        this.viewFunction = this._transitionRedraw.bind(this);\n        this.body.emitter.on('initRedraw', this.viewFunction);\n        this.body.emitter.emit('_startRendering');\n      }\n    }\n\n    /**\n     * used to animate smoothly by hijacking the redraw function.\n     * @private\n     */\n\n  }, {\n    key: '_lockedRedraw',\n    value: function _lockedRedraw() {\n      var nodePosition = {\n        x: this.body.nodes[this.lockedOnNodeId].x,\n        y: this.body.nodes[this.lockedOnNodeId].y\n      };\n      var viewCenter = this.canvas.DOMtoCanvas({\n        x: 0.5 * this.canvas.frame.canvas.clientWidth,\n        y: 0.5 * this.canvas.frame.canvas.clientHeight\n      });\n      var distanceFromCenter = {\n        // offset from view, distance view has to change by these x and y to center the node\n        x: viewCenter.x - nodePosition.x,\n        y: viewCenter.y - nodePosition.y\n      };\n      var sourceTranslation = this.body.view.translation;\n      var targetTranslation = {\n        x: sourceTranslation.x + distanceFromCenter.x * this.body.view.scale + this.lockedOnNodeOffset.x,\n        y: sourceTranslation.y + distanceFromCenter.y * this.body.view.scale + this.lockedOnNodeOffset.y\n      };\n\n      this.body.view.translation = targetTranslation;\n    }\n\n    /**\n     * Resets state of a locked on Node\n     */\n\n  }, {\n    key: 'releaseNode',\n    value: function releaseNode() {\n      if (this.lockedOnNodeId !== undefined && this.viewFunction !== undefined) {\n        this.body.emitter.off('initRedraw', this.viewFunction);\n        this.lockedOnNodeId = undefined;\n        this.lockedOnNodeOffset = undefined;\n      }\n    }\n\n    /**\n     * @param {boolean} [finished=false]\n     * @private\n     */\n\n  }, {\n    key: '_transitionRedraw',\n    value: function _transitionRedraw() {\n      var finished = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n      this.easingTime += this.animationSpeed;\n      this.easingTime = finished === true ? 1.0 : this.easingTime;\n\n      var progress = util.easingFunctions[this.animationEasingFunction](this.easingTime);\n\n      this.body.view.scale = this.sourceScale + (this.targetScale - this.sourceScale) * progress;\n      this.body.view.translation = {\n        x: this.sourceTranslation.x + (this.targetTranslation.x - this.sourceTranslation.x) * progress,\n        y: this.sourceTranslation.y + (this.targetTranslation.y - this.sourceTranslation.y) * progress\n\n        // cleanup\n      };if (this.easingTime >= 1.0) {\n        this.body.emitter.off('initRedraw', this.viewFunction);\n        this.easingTime = 0;\n        if (this.lockedOnNodeId != undefined) {\n          this.viewFunction = this._lockedRedraw.bind(this);\n          this.body.emitter.on('initRedraw', this.viewFunction);\n        }\n        this.body.emitter.emit('animationFinished');\n      }\n    }\n\n    /**\n     *\n     * @returns {number}\n     */\n\n  }, {\n    key: 'getScale',\n    value: function getScale() {\n      return this.body.view.scale;\n    }\n\n    /**\n     *\n     * @returns {{x: number, y: number}}\n     */\n\n  }, {\n    key: 'getViewPosition',\n    value: function getViewPosition() {\n      return this.canvas.DOMtoCanvas({\n        x: 0.5 * this.canvas.frame.canvas.clientWidth,\n        y: 0.5 * this.canvas.frame.canvas.clientHeight\n      });\n    }\n  }]);\n  return View;\n}();\n\nexports['default'] = View;\n\n/***/ }),\n/* 183 */\n/***/ (function(module, exports, __nested_webpack_require_1002183__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _classCallCheck2 = __nested_webpack_require_1002183__(0);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __nested_webpack_require_1002183__(1);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar util = __nested_webpack_require_1002183__(2);\nvar NavigationHandler = __nested_webpack_require_1002183__(184)['default'];\nvar Popup = __nested_webpack_require_1002183__(185)['default'];\n\n/**\n * Handler for interactions\n */\n\nvar InteractionHandler = function () {\n  /**\n   * @param {Object} body\n   * @param {Canvas} canvas\n   * @param {SelectionHandler} selectionHandler\n   */\n  function InteractionHandler(body, canvas, selectionHandler) {\n    (0, _classCallCheck3['default'])(this, InteractionHandler);\n\n    this.body = body;\n    this.canvas = canvas;\n    this.selectionHandler = selectionHandler;\n    this.navigationHandler = new NavigationHandler(body, canvas);\n\n    // bind the events from hammer to functions in this object\n    this.body.eventListeners.onTap = this.onTap.bind(this);\n    this.body.eventListeners.onTouch = this.onTouch.bind(this);\n    this.body.eventListeners.onDoubleTap = this.onDoubleTap.bind(this);\n    this.body.eventListeners.onHold = this.onHold.bind(this);\n    this.body.eventListeners.onDragStart = this.onDragStart.bind(this);\n    this.body.eventListeners.onDrag = this.onDrag.bind(this);\n    this.body.eventListeners.onDragEnd = this.onDragEnd.bind(this);\n    this.body.eventListeners.onMouseWheel = this.onMouseWheel.bind(this);\n    this.body.eventListeners.onPinch = this.onPinch.bind(this);\n    this.body.eventListeners.onMouseMove = this.onMouseMove.bind(this);\n    this.body.eventListeners.onRelease = this.onRelease.bind(this);\n    this.body.eventListeners.onContext = this.onContext.bind(this);\n\n    this.touchTime = 0;\n    this.drag = {};\n    this.pinch = {};\n    this.popup = undefined;\n    this.popupObj = undefined;\n    this.popupTimer = undefined;\n\n    this.body.functions.getPointer = this.getPointer.bind(this);\n\n    this.options = {};\n    this.defaultOptions = {\n      dragNodes: true,\n      dragView: true,\n      hover: false,\n      keyboard: {\n        enabled: false,\n        speed: { x: 10, y: 10, zoom: 0.02 },\n        bindToWindow: true\n      },\n      navigationButtons: false,\n      tooltipDelay: 300,\n      zoomView: true,\n      zoomSpeed: 1\n    };\n    util.extend(this.options, this.defaultOptions);\n\n    this.bindEventListeners();\n  }\n\n  /**\n   * Binds event listeners\n   */\n\n\n  (0, _createClass3['default'])(InteractionHandler, [{\n    key: 'bindEventListeners',\n    value: function bindEventListeners() {\n      var _this = this;\n\n      this.body.emitter.on('destroy', function () {\n        clearTimeout(_this.popupTimer);\n        delete _this.body.functions.getPointer;\n      });\n    }\n\n    /**\n     *\n     * @param {Object} options\n     */\n\n  }, {\n    key: 'setOptions',\n    value: function setOptions(options) {\n      if (options !== undefined) {\n        // extend all but the values in fields\n        var fields = ['hideEdgesOnDrag', 'hideEdgesOnZoom', 'hideNodesOnDrag', 'keyboard', 'multiselect', 'selectable', 'selectConnectedEdges'];\n        util.selectiveNotDeepExtend(fields, this.options, options);\n\n        // merge the keyboard options in.\n        util.mergeOptions(this.options, options, 'keyboard');\n\n        if (options.tooltip) {\n          util.extend(this.options.tooltip, options.tooltip);\n          if (options.tooltip.color) {\n            this.options.tooltip.color = util.parseColor(options.tooltip.color);\n          }\n        }\n      }\n\n      this.navigationHandler.setOptions(this.options);\n    }\n\n    /**\n     * Get the pointer location from a touch location\n     * @param {{x: number, y: number}} touch\n     * @return {{x: number, y: number}} pointer\n     * @private\n     */\n\n  }, {\n    key: 'getPointer',\n    value: function getPointer(touch) {\n      return {\n        x: touch.x - util.getAbsoluteLeft(this.canvas.frame.canvas),\n        y: touch.y - util.getAbsoluteTop(this.canvas.frame.canvas)\n      };\n    }\n\n    /**\n     * On start of a touch gesture, store the pointer\n     * @param {Event}  event   The event\n     * @private\n     */\n\n  }, {\n    key: 'onTouch',\n    value: function onTouch(event) {\n      if (new Date().valueOf() - this.touchTime > 50) {\n        this.drag.pointer = this.getPointer(event.center);\n        this.drag.pinched = false;\n        this.pinch.scale = this.body.view.scale;\n        // to avoid double fireing of this event because we have two hammer instances. (on canvas and on frame)\n        this.touchTime = new Date().valueOf();\n      }\n    }\n\n    /**\n     * handle tap/click event: select/unselect a node\n     * @param {Event} event\n     * @private\n     */\n\n  }, {\n    key: 'onTap',\n    value: function onTap(event) {\n      var pointer = this.getPointer(event.center);\n      var multiselect = this.selectionHandler.options.multiselect && (event.changedPointers[0].ctrlKey || event.changedPointers[0].metaKey);\n\n      this.checkSelectionChanges(pointer, event, multiselect);\n      this.selectionHandler._generateClickEvent('click', event, pointer);\n    }\n\n    /**\n     * handle doubletap event\n     * @param {Event} event\n     * @private\n     */\n\n  }, {\n    key: 'onDoubleTap',\n    value: function onDoubleTap(event) {\n      var pointer = this.getPointer(event.center);\n      this.selectionHandler._generateClickEvent('doubleClick', event, pointer);\n    }\n\n    /**\n     * handle long tap event: multi select nodes\n     * @param {Event} event\n     * @private\n     */\n\n  }, {\n    key: 'onHold',\n    value: function onHold(event) {\n      var pointer = this.getPointer(event.center);\n      var multiselect = this.selectionHandler.options.multiselect;\n\n      this.checkSelectionChanges(pointer, event, multiselect);\n\n      this.selectionHandler._generateClickEvent('click', event, pointer);\n      this.selectionHandler._generateClickEvent('hold', event, pointer);\n    }\n\n    /**\n     * handle the release of the screen\n     *\n     * @param {Event} event\n     * @private\n     */\n\n  }, {\n    key: 'onRelease',\n    value: function onRelease(event) {\n      if (new Date().valueOf() - this.touchTime > 10) {\n        var pointer = this.getPointer(event.center);\n        this.selectionHandler._generateClickEvent('release', event, pointer);\n        // to avoid double fireing of this event because we have two hammer instances. (on canvas and on frame)\n        this.touchTime = new Date().valueOf();\n      }\n    }\n\n    /**\n     *\n     * @param {Event} event\n     */\n\n  }, {\n    key: 'onContext',\n    value: function onContext(event) {\n      var pointer = this.getPointer({ x: event.clientX, y: event.clientY });\n      this.selectionHandler._generateClickEvent('oncontext', event, pointer);\n    }\n\n    /**\n     * Select and deselect nodes depending current selection change.\n     *\n     * For changing nodes, select/deselect events are fired.\n     *\n     * NOTE: For a given edge, if one connecting node is deselected and with the same\n     *       click the other node is selected, no events for the edge will fire.\n     *       It was selected and it will remain selected.\n     *\n     * TODO: This is all SelectionHandler calls; the method should be moved to there.\n     *\n     * @param {{x: number, y: number}} pointer\n     * @param {Event} event\n     * @param {boolean} [add=false]\n     */\n\n  }, {\n    key: 'checkSelectionChanges',\n    value: function checkSelectionChanges(pointer, event) {\n      var add = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n      var previousSelection = this.selectionHandler.getSelection();\n      var selected = false;\n      if (add === true) {\n        selected = this.selectionHandler.selectAdditionalOnPoint(pointer);\n      } else {\n        selected = this.selectionHandler.selectOnPoint(pointer);\n      }\n      var currentSelection = this.selectionHandler.getSelection();\n\n      // See NOTE in method comment for the reason to do it like this\n      var deselectedItems = this._determineDifference(previousSelection, currentSelection);\n      var selectedItems = this._determineDifference(currentSelection, previousSelection);\n\n      if (deselectedItems.edges.length > 0) {\n        this.selectionHandler._generateClickEvent('deselectEdge', event, pointer, previousSelection);\n        selected = true;\n      }\n\n      if (deselectedItems.nodes.length > 0) {\n        this.selectionHandler._generateClickEvent('deselectNode', event, pointer, previousSelection);\n        selected = true;\n      }\n\n      if (selectedItems.nodes.length > 0) {\n        this.selectionHandler._generateClickEvent('selectNode', event, pointer);\n        selected = true;\n      }\n\n      if (selectedItems.edges.length > 0) {\n        this.selectionHandler._generateClickEvent('selectEdge', event, pointer);\n        selected = true;\n      }\n\n      // fire the select event if anything has been selected or deselected\n      if (selected === true) {\n        // select or unselect\n        this.selectionHandler._generateClickEvent('select', event, pointer);\n      }\n    }\n\n    /**\n     * Remove all node and edge id's from the first set that are present in the second one.\n     *\n     * @param {{nodes: Array.<Node>, edges: Array.<vis.Edge>}} firstSet\n     * @param {{nodes: Array.<Node>, edges: Array.<vis.Edge>}} secondSet\n     * @returns {{nodes: Array.<Node>, edges: Array.<vis.Edge>}}\n     * @private\n     */\n\n  }, {\n    key: '_determineDifference',\n    value: function _determineDifference(firstSet, secondSet) {\n      var arrayDiff = function arrayDiff(firstArr, secondArr) {\n        var result = [];\n\n        for (var i = 0; i < firstArr.length; i++) {\n          var value = firstArr[i];\n          if (secondArr.indexOf(value) === -1) {\n            result.push(value);\n          }\n        }\n\n        return result;\n      };\n\n      return {\n        nodes: arrayDiff(firstSet.nodes, secondSet.nodes),\n        edges: arrayDiff(firstSet.edges, secondSet.edges)\n      };\n    }\n\n    /**\n     * This function is called by onDragStart.\n     * It is separated out because we can then overload it for the datamanipulation system.\n     *\n     * @param {Event} event\n     * @private\n     */\n\n  }, {\n    key: 'onDragStart',\n    value: function onDragStart(event) {\n      //in case the touch event was triggered on an external div, do the initial touch now.\n      if (this.drag.pointer === undefined) {\n        this.onTouch(event);\n      }\n\n      // note: drag.pointer is set in onTouch to get the initial touch location\n      var node = this.selectionHandler.getNodeAt(this.drag.pointer);\n\n      this.drag.dragging = true;\n      this.drag.selection = [];\n      this.drag.translation = util.extend({}, this.body.view.translation); // copy the object\n      this.drag.nodeId = undefined;\n\n      if (node !== undefined && this.options.dragNodes === true) {\n        this.drag.nodeId = node.id;\n        // select the clicked node if not yet selected\n        if (node.isSelected() === false) {\n          this.selectionHandler.unselectAll();\n          this.selectionHandler.selectObject(node);\n        }\n\n        // after select to contain the node\n        this.selectionHandler._generateClickEvent('dragStart', event, this.drag.pointer);\n\n        var selection = this.selectionHandler.selectionObj.nodes;\n        // create an array with the selected nodes and their original location and status\n        for (var nodeId in selection) {\n          if (selection.hasOwnProperty(nodeId)) {\n            var object = selection[nodeId];\n            var s = {\n              id: object.id,\n              node: object,\n\n              // store original x, y, xFixed and yFixed, make the node temporarily Fixed\n              x: object.x,\n              y: object.y,\n              xFixed: object.options.fixed.x,\n              yFixed: object.options.fixed.y\n            };\n\n            object.options.fixed.x = true;\n            object.options.fixed.y = true;\n\n            this.drag.selection.push(s);\n          }\n        }\n      } else {\n        // fallback if no node is selected and thus the view is dragged.\n        this.selectionHandler._generateClickEvent('dragStart', event, this.drag.pointer, undefined, true);\n      }\n    }\n\n    /**\n     * handle drag event\n     * @param {Event} event\n     * @private\n     */\n\n  }, {\n    key: 'onDrag',\n    value: function onDrag(event) {\n      var _this2 = this;\n\n      if (this.drag.pinched === true) {\n        return;\n      }\n\n      // remove the focus on node if it is focussed on by the focusOnNode\n      this.body.emitter.emit('unlockNode');\n\n      var pointer = this.getPointer(event.center);\n\n      var selection = this.drag.selection;\n      if (selection && selection.length && this.options.dragNodes === true) {\n        this.selectionHandler._generateClickEvent('dragging', event, pointer);\n\n        // calculate delta's and new location\n        var deltaX = pointer.x - this.drag.pointer.x;\n        var deltaY = pointer.y - this.drag.pointer.y;\n\n        // update position of all selected nodes\n        selection.forEach(function (selection) {\n          var node = selection.node;\n          // only move the node if it was not fixed initially\n          if (selection.xFixed === false) {\n            node.x = _this2.canvas._XconvertDOMtoCanvas(_this2.canvas._XconvertCanvasToDOM(selection.x) + deltaX);\n          }\n          // only move the node if it was not fixed initially\n          if (selection.yFixed === false) {\n            node.y = _this2.canvas._YconvertDOMtoCanvas(_this2.canvas._YconvertCanvasToDOM(selection.y) + deltaY);\n          }\n        });\n\n        // start the simulation of the physics\n        this.body.emitter.emit('startSimulation');\n      } else {\n        // move the network\n        if (this.options.dragView === true) {\n          this.selectionHandler._generateClickEvent('dragging', event, pointer, undefined, true);\n\n          // if the drag was not started properly because the click started outside the network div, start it now.\n          if (this.drag.pointer === undefined) {\n            this.onDragStart(event);\n            return;\n          }\n          var diffX = pointer.x - this.drag.pointer.x;\n          var diffY = pointer.y - this.drag.pointer.y;\n\n          this.body.view.translation = {\n            x: this.drag.translation.x + diffX,\n            y: this.drag.translation.y + diffY\n          };\n          this.body.emitter.emit('_requestRedraw');\n        }\n      }\n    }\n\n    /**\n     * handle drag start event\n     * @param {Event} event\n     * @private\n     */\n\n  }, {\n    key: 'onDragEnd',\n    value: function onDragEnd(event) {\n      this.drag.dragging = false;\n      var selection = this.drag.selection;\n      if (selection && selection.length) {\n        selection.forEach(function (s) {\n          // restore original xFixed and yFixed\n          s.node.options.fixed.x = s.xFixed;\n          s.node.options.fixed.y = s.yFixed;\n        });\n        this.selectionHandler._generateClickEvent('dragEnd', event, this.getPointer(event.center));\n        this.body.emitter.emit('startSimulation');\n      } else {\n        this.selectionHandler._generateClickEvent('dragEnd', event, this.getPointer(event.center), undefined, true);\n        this.body.emitter.emit('_requestRedraw');\n      }\n    }\n\n    /**\n     * Handle pinch event\n     * @param {Event}  event   The event\n     * @private\n     */\n\n  }, {\n    key: 'onPinch',\n    value: function onPinch(event) {\n      var pointer = this.getPointer(event.center);\n\n      this.drag.pinched = true;\n      if (this.pinch['scale'] === undefined) {\n        this.pinch.scale = 1;\n      }\n\n      // TODO: enabled moving while pinching?\n      var scale = this.pinch.scale * event.scale;\n      this.zoom(scale, pointer);\n    }\n\n    /**\n     * Zoom the network in or out\n     * @param {number} scale a number around 1, and between 0.01 and 10\n     * @param {{x: number, y: number}} pointer    Position on screen\n     * @private\n     */\n\n  }, {\n    key: 'zoom',\n    value: function zoom(scale, pointer) {\n      if (this.options.zoomView === true) {\n        var scaleOld = this.body.view.scale;\n        if (scale < 0.00001) {\n          scale = 0.00001;\n        }\n        if (scale > 10) {\n          scale = 10;\n        }\n\n        var preScaleDragPointer = undefined;\n        if (this.drag !== undefined) {\n          if (this.drag.dragging === true) {\n            preScaleDragPointer = this.canvas.DOMtoCanvas(this.drag.pointer);\n          }\n        }\n        // + this.canvas.frame.canvas.clientHeight / 2\n        var translation = this.body.view.translation;\n\n        var scaleFrac = scale / scaleOld;\n        var tx = (1 - scaleFrac) * pointer.x + translation.x * scaleFrac;\n        var ty = (1 - scaleFrac) * pointer.y + translation.y * scaleFrac;\n\n        this.body.view.scale = scale;\n        this.body.view.translation = { x: tx, y: ty };\n\n        if (preScaleDragPointer != undefined) {\n          var postScaleDragPointer = this.canvas.canvasToDOM(preScaleDragPointer);\n          this.drag.pointer.x = postScaleDragPointer.x;\n          this.drag.pointer.y = postScaleDragPointer.y;\n        }\n\n        this.body.emitter.emit('_requestRedraw');\n\n        if (scaleOld < scale) {\n          this.body.emitter.emit('zoom', {\n            direction: '+',\n            scale: this.body.view.scale,\n            pointer: pointer\n          });\n        } else {\n          this.body.emitter.emit('zoom', {\n            direction: '-',\n            scale: this.body.view.scale,\n            pointer: pointer\n          });\n        }\n      }\n    }\n\n    /**\n     * Event handler for mouse wheel event, used to zoom the timeline\n     * See http://adomas.org/javascript-mouse-wheel/\n     *     https://github.com/EightMedia/hammer.js/issues/256\n     * @param {MouseEvent}  event\n     * @private\n     */\n\n  }, {\n    key: 'onMouseWheel',\n    value: function onMouseWheel(event) {\n      if (this.options.zoomView === true) {\n        // retrieve delta\n        var delta = 0;\n        if (event.wheelDelta) {\n          /* IE/Opera. */\n          delta = event.wheelDelta / 120;\n        } else if (event.detail) {\n          /* Mozilla case. */\n          // In Mozilla, sign of delta is different than in IE.\n          // Also, delta is multiple of 3.\n          delta = -event.detail / 3;\n        }\n\n        // If delta is nonzero, handle it.\n        // Basically, delta is now positive if wheel was scrolled up,\n        // and negative, if wheel was scrolled down.\n        if (delta !== 0) {\n          // calculate the new scale\n          var scale = this.body.view.scale;\n          var zoom = delta * (this.options.zoomSpeed / 10);\n          if (delta < 0) {\n            zoom = zoom / (1 - zoom);\n          }\n          scale *= 1 + zoom;\n\n          // calculate the pointer location\n          var pointer = this.getPointer({ x: event.clientX, y: event.clientY });\n\n          // apply the new scale\n          this.zoom(scale, pointer);\n        }\n\n        // Prevent default actions caused by mouse wheel.\n        event.preventDefault();\n      }\n    }\n\n    /**\n     * Mouse move handler for checking whether the title moves over a node with a title.\n     * @param  {Event} event\n     * @private\n     */\n\n  }, {\n    key: 'onMouseMove',\n    value: function onMouseMove(event) {\n      var _this3 = this;\n\n      var pointer = this.getPointer({ x: event.clientX, y: event.clientY });\n      var popupVisible = false;\n\n      // check if the previously selected node is still selected\n      if (this.popup !== undefined) {\n        if (this.popup.hidden === false) {\n          this._checkHidePopup(pointer);\n        }\n\n        // if the popup was not hidden above\n        if (this.popup.hidden === false) {\n          popupVisible = true;\n          this.popup.setPosition(pointer.x + 3, pointer.y - 5);\n          this.popup.show();\n        }\n      }\n\n      // if we bind the keyboard to the div, we have to highlight it to use it. This highlights it on mouse over.\n      if (this.options.keyboard.bindToWindow === false && this.options.keyboard.enabled === true) {\n        this.canvas.frame.focus();\n      }\n\n      // start a timeout that will check if the mouse is positioned above an element\n      if (popupVisible === false) {\n        if (this.popupTimer !== undefined) {\n          clearInterval(this.popupTimer); // stop any running calculationTimer\n          this.popupTimer = undefined;\n        }\n        if (!this.drag.dragging) {\n          this.popupTimer = setTimeout(function () {\n            return _this3._checkShowPopup(pointer);\n          }, this.options.tooltipDelay);\n        }\n      }\n\n      // adding hover highlights\n      if (this.options.hover === true) {\n        this.selectionHandler.hoverObject(event, pointer);\n      }\n    }\n\n    /**\n     * Check if there is an element on the given position in the network\n     * (a node or edge). If so, and if this element has a title,\n     * show a popup window with its title.\n     *\n     * @param {{x:number, y:number}} pointer\n     * @private\n     */\n\n  }, {\n    key: '_checkShowPopup',\n    value: function _checkShowPopup(pointer) {\n      var x = this.canvas._XconvertDOMtoCanvas(pointer.x);\n      var y = this.canvas._YconvertDOMtoCanvas(pointer.y);\n      var pointerObj = {\n        left: x,\n        top: y,\n        right: x,\n        bottom: y\n      };\n\n      var previousPopupObjId = this.popupObj === undefined ? undefined : this.popupObj.id;\n      var nodeUnderCursor = false;\n      var popupType = 'node';\n\n      // check if a node is under the cursor.\n      if (this.popupObj === undefined) {\n        // search the nodes for overlap, select the top one in case of multiple nodes\n        var nodeIndices = this.body.nodeIndices;\n        var nodes = this.body.nodes;\n        var node = void 0;\n        var overlappingNodes = [];\n        for (var i = 0; i < nodeIndices.length; i++) {\n          node = nodes[nodeIndices[i]];\n          if (node.isOverlappingWith(pointerObj) === true) {\n            nodeUnderCursor = true;\n            if (node.getTitle() !== undefined) {\n              overlappingNodes.push(nodeIndices[i]);\n            }\n          }\n        }\n\n        if (overlappingNodes.length > 0) {\n          // if there are overlapping nodes, select the last one, this is the one which is drawn on top of the others\n          this.popupObj = nodes[overlappingNodes[overlappingNodes.length - 1]];\n          // if you hover over a node, the title of the edge is not supposed to be shown.\n          nodeUnderCursor = true;\n        }\n      }\n\n      if (this.popupObj === undefined && nodeUnderCursor === false) {\n        // search the edges for overlap\n        var edgeIndices = this.body.edgeIndices;\n        var edges = this.body.edges;\n        var edge = void 0;\n        var overlappingEdges = [];\n        for (var _i = 0; _i < edgeIndices.length; _i++) {\n          edge = edges[edgeIndices[_i]];\n          if (edge.isOverlappingWith(pointerObj) === true) {\n            if (edge.connected === true && edge.getTitle() !== undefined) {\n              overlappingEdges.push(edgeIndices[_i]);\n            }\n          }\n        }\n\n        if (overlappingEdges.length > 0) {\n          this.popupObj = edges[overlappingEdges[overlappingEdges.length - 1]];\n          popupType = 'edge';\n        }\n      }\n\n      if (this.popupObj !== undefined) {\n        // show popup message window\n        if (this.popupObj.id !== previousPopupObjId) {\n          if (this.popup === undefined) {\n            this.popup = new Popup(this.canvas.frame);\n          }\n\n          this.popup.popupTargetType = popupType;\n          this.popup.popupTargetId = this.popupObj.id;\n\n          // adjust a small offset such that the mouse cursor is located in the\n          // bottom left location of the popup, and you can easily move over the\n          // popup area\n          this.popup.setPosition(pointer.x + 3, pointer.y - 5);\n          this.popup.setText(this.popupObj.getTitle());\n          this.popup.show();\n          this.body.emitter.emit('showPopup', this.popupObj.id);\n        }\n      } else {\n        if (this.popup !== undefined) {\n          this.popup.hide();\n          this.body.emitter.emit('hidePopup');\n        }\n      }\n    }\n\n    /**\n     * Check if the popup must be hidden, which is the case when the mouse is no\n     * longer hovering on the object\n     * @param {{x:number, y:number}} pointer\n     * @private\n     */\n\n  }, {\n    key: '_checkHidePopup',\n    value: function _checkHidePopup(pointer) {\n      var pointerObj = this.selectionHandler._pointerToPositionObject(pointer);\n\n      var stillOnObj = false;\n      if (this.popup.popupTargetType === 'node') {\n        if (this.body.nodes[this.popup.popupTargetId] !== undefined) {\n          stillOnObj = this.body.nodes[this.popup.popupTargetId].isOverlappingWith(pointerObj);\n\n          // if the mouse is still one the node, we have to check if it is not also on one that is drawn on top of it.\n          // we initially only check stillOnObj because this is much faster.\n          if (stillOnObj === true) {\n            var overNode = this.selectionHandler.getNodeAt(pointer);\n            stillOnObj = overNode === undefined ? false : overNode.id === this.popup.popupTargetId;\n          }\n        }\n      } else {\n        if (this.selectionHandler.getNodeAt(pointer) === undefined) {\n          if (this.body.edges[this.popup.popupTargetId] !== undefined) {\n            stillOnObj = this.body.edges[this.popup.popupTargetId].isOverlappingWith(pointerObj);\n          }\n        }\n      }\n\n      if (stillOnObj === false) {\n        this.popupObj = undefined;\n        this.popup.hide();\n        this.body.emitter.emit('hidePopup');\n      }\n    }\n  }]);\n  return InteractionHandler;\n}();\n\nexports['default'] = InteractionHandler;\n\n/***/ }),\n/* 184 */\n/***/ (function(module, exports, __nested_webpack_require_1028063__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _classCallCheck2 = __nested_webpack_require_1028063__(0);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __nested_webpack_require_1028063__(1);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar Hammer = __nested_webpack_require_1028063__(24);\nvar hammerUtil = __nested_webpack_require_1028063__(36);\nvar keycharm = __nested_webpack_require_1028063__(52);\n\n/**\n * Navigation Handler\n */\n\nvar NavigationHandler = function () {\n  /**\n   * @param {Object} body\n   * @param {Canvas} canvas\n   */\n  function NavigationHandler(body, canvas) {\n    var _this = this;\n\n    (0, _classCallCheck3['default'])(this, NavigationHandler);\n\n    this.body = body;\n    this.canvas = canvas;\n\n    this.iconsCreated = false;\n    this.navigationHammers = [];\n    this.boundFunctions = {};\n    this.touchTime = 0;\n    this.activated = false;\n\n    this.body.emitter.on('activate', function () {\n      _this.activated = true;\n      _this.configureKeyboardBindings();\n    });\n    this.body.emitter.on('deactivate', function () {\n      _this.activated = false;\n      _this.configureKeyboardBindings();\n    });\n    this.body.emitter.on('destroy', function () {\n      if (_this.keycharm !== undefined) {\n        _this.keycharm.destroy();\n      }\n    });\n\n    this.options = {};\n  }\n\n  /**\n   *\n   * @param {Object} options\n   */\n\n\n  (0, _createClass3['default'])(NavigationHandler, [{\n    key: 'setOptions',\n    value: function setOptions(options) {\n      if (options !== undefined) {\n        this.options = options;\n        this.create();\n      }\n    }\n\n    /**\n     * Creates or refreshes navigation and sets key bindings\n     */\n\n  }, {\n    key: 'create',\n    value: function create() {\n      if (this.options.navigationButtons === true) {\n        if (this.iconsCreated === false) {\n          this.loadNavigationElements();\n        }\n      } else if (this.iconsCreated === true) {\n        this.cleanNavigation();\n      }\n\n      this.configureKeyboardBindings();\n    }\n\n    /**\n     * Cleans up previous navigation items\n     */\n\n  }, {\n    key: 'cleanNavigation',\n    value: function cleanNavigation() {\n      // clean hammer bindings\n      if (this.navigationHammers.length != 0) {\n        for (var i = 0; i < this.navigationHammers.length; i++) {\n          this.navigationHammers[i].destroy();\n        }\n        this.navigationHammers = [];\n      }\n\n      // clean up previous navigation items\n      if (this.navigationDOM && this.navigationDOM['wrapper'] && this.navigationDOM['wrapper'].parentNode) {\n        this.navigationDOM['wrapper'].parentNode.removeChild(this.navigationDOM['wrapper']);\n      }\n\n      this.iconsCreated = false;\n    }\n\n    /**\n     * Creation of the navigation controls nodes. They are drawn over the rest of the nodes and are not affected by scale and translation\n     * they have a triggerFunction which is called on click. If the position of the navigation controls is dependent\n     * on this.frame.canvas.clientWidth or this.frame.canvas.clientHeight, we flag horizontalAlignLeft and verticalAlignTop false.\n     * This means that the location will be corrected by the _relocateNavigation function on a size change of the canvas.\n     *\n     * @private\n     */\n\n  }, {\n    key: 'loadNavigationElements',\n    value: function loadNavigationElements() {\n      var _this2 = this;\n\n      this.cleanNavigation();\n\n      this.navigationDOM = {};\n      var navigationDivs = ['up', 'down', 'left', 'right', 'zoomIn', 'zoomOut', 'zoomExtends'];\n      var navigationDivActions = ['_moveUp', '_moveDown', '_moveLeft', '_moveRight', '_zoomIn', '_zoomOut', '_fit'];\n\n      this.navigationDOM['wrapper'] = document.createElement('div');\n      this.navigationDOM['wrapper'].className = 'vis-navigation';\n      this.canvas.frame.appendChild(this.navigationDOM['wrapper']);\n\n      for (var i = 0; i < navigationDivs.length; i++) {\n        this.navigationDOM[navigationDivs[i]] = document.createElement('div');\n        this.navigationDOM[navigationDivs[i]].className = 'vis-button vis-' + navigationDivs[i];\n        this.navigationDOM['wrapper'].appendChild(this.navigationDOM[navigationDivs[i]]);\n\n        var hammer = new Hammer(this.navigationDOM[navigationDivs[i]]);\n        if (navigationDivActions[i] === '_fit') {\n          hammerUtil.onTouch(hammer, this._fit.bind(this));\n        } else {\n          hammerUtil.onTouch(hammer, this.bindToRedraw.bind(this, navigationDivActions[i]));\n        }\n\n        this.navigationHammers.push(hammer);\n      }\n\n      // use a hammer for the release so we do not require the one used in the rest of the network\n      // the one the rest uses can be overloaded by the manipulation system.\n      var hammerFrame = new Hammer(this.canvas.frame);\n      hammerUtil.onRelease(hammerFrame, function () {\n        _this2._stopMovement();\n      });\n      this.navigationHammers.push(hammerFrame);\n\n      this.iconsCreated = true;\n    }\n\n    /**\n     *\n     * @param {string} action\n     */\n\n  }, {\n    key: 'bindToRedraw',\n    value: function bindToRedraw(action) {\n      if (this.boundFunctions[action] === undefined) {\n        this.boundFunctions[action] = this[action].bind(this);\n        this.body.emitter.on('initRedraw', this.boundFunctions[action]);\n        this.body.emitter.emit('_startRendering');\n      }\n    }\n\n    /**\n     *\n     * @param {string} action\n     */\n\n  }, {\n    key: 'unbindFromRedraw',\n    value: function unbindFromRedraw(action) {\n      if (this.boundFunctions[action] !== undefined) {\n        this.body.emitter.off('initRedraw', this.boundFunctions[action]);\n        this.body.emitter.emit('_stopRendering');\n        delete this.boundFunctions[action];\n      }\n    }\n\n    /**\n     * this stops all movement induced by the navigation buttons\n     *\n     * @private\n     */\n\n  }, {\n    key: '_fit',\n    value: function _fit() {\n      if (new Date().valueOf() - this.touchTime > 700) {\n        // TODO: fix ugly hack to avoid hammer's double fireing of event (because we use release?)\n        this.body.emitter.emit('fit', { duration: 700 });\n        this.touchTime = new Date().valueOf();\n      }\n    }\n\n    /**\n     * this stops all movement induced by the navigation buttons\n     *\n     * @private\n     */\n\n  }, {\n    key: '_stopMovement',\n    value: function _stopMovement() {\n      for (var boundAction in this.boundFunctions) {\n        if (this.boundFunctions.hasOwnProperty(boundAction)) {\n          this.body.emitter.off('initRedraw', this.boundFunctions[boundAction]);\n          this.body.emitter.emit('_stopRendering');\n        }\n      }\n      this.boundFunctions = {};\n    }\n    /**\n     *\n     * @private\n     */\n\n  }, {\n    key: '_moveUp',\n    value: function _moveUp() {\n      this.body.view.translation.y += this.options.keyboard.speed.y;\n    }\n    /**\n     *\n     * @private\n     */\n\n  }, {\n    key: '_moveDown',\n    value: function _moveDown() {\n      this.body.view.translation.y -= this.options.keyboard.speed.y;\n    }\n    /**\n     *\n     * @private\n     */\n\n  }, {\n    key: '_moveLeft',\n    value: function _moveLeft() {\n      this.body.view.translation.x += this.options.keyboard.speed.x;\n    }\n    /**\n     *\n     * @private\n     */\n\n  }, {\n    key: '_moveRight',\n    value: function _moveRight() {\n      this.body.view.translation.x -= this.options.keyboard.speed.x;\n    }\n    /**\n     *\n     * @private\n     */\n\n  }, {\n    key: '_zoomIn',\n    value: function _zoomIn() {\n      var scaleOld = this.body.view.scale;\n      var scale = this.body.view.scale * (1 + this.options.keyboard.speed.zoom);\n      var translation = this.body.view.translation;\n      var scaleFrac = scale / scaleOld;\n      var tx = (1 - scaleFrac) * this.canvas.canvasViewCenter.x + translation.x * scaleFrac;\n      var ty = (1 - scaleFrac) * this.canvas.canvasViewCenter.y + translation.y * scaleFrac;\n\n      this.body.view.scale = scale;\n      this.body.view.translation = { x: tx, y: ty };\n      this.body.emitter.emit('zoom', {\n        direction: '+',\n        scale: this.body.view.scale,\n        pointer: null\n      });\n    }\n\n    /**\n     *\n     * @private\n     */\n\n  }, {\n    key: '_zoomOut',\n    value: function _zoomOut() {\n      var scaleOld = this.body.view.scale;\n      var scale = this.body.view.scale / (1 + this.options.keyboard.speed.zoom);\n      var translation = this.body.view.translation;\n      var scaleFrac = scale / scaleOld;\n      var tx = (1 - scaleFrac) * this.canvas.canvasViewCenter.x + translation.x * scaleFrac;\n      var ty = (1 - scaleFrac) * this.canvas.canvasViewCenter.y + translation.y * scaleFrac;\n\n      this.body.view.scale = scale;\n      this.body.view.translation = { x: tx, y: ty };\n      this.body.emitter.emit('zoom', {\n        direction: '-',\n        scale: this.body.view.scale,\n        pointer: null\n      });\n    }\n\n    /**\n     * bind all keys using keycharm.\n     */\n\n  }, {\n    key: 'configureKeyboardBindings',\n    value: function configureKeyboardBindings() {\n      var _this3 = this;\n\n      if (this.keycharm !== undefined) {\n        this.keycharm.destroy();\n      }\n\n      if (this.options.keyboard.enabled === true) {\n        if (this.options.keyboard.bindToWindow === true) {\n          this.keycharm = keycharm({ container: window, preventDefault: true });\n        } else {\n          this.keycharm = keycharm({\n            container: this.canvas.frame,\n            preventDefault: true\n          });\n        }\n\n        this.keycharm.reset();\n\n        if (this.activated === true) {\n          this.keycharm.bind('up', function () {\n            _this3.bindToRedraw('_moveUp');\n          }, 'keydown');\n          this.keycharm.bind('down', function () {\n            _this3.bindToRedraw('_moveDown');\n          }, 'keydown');\n          this.keycharm.bind('left', function () {\n            _this3.bindToRedraw('_moveLeft');\n          }, 'keydown');\n          this.keycharm.bind('right', function () {\n            _this3.bindToRedraw('_moveRight');\n          }, 'keydown');\n          this.keycharm.bind('=', function () {\n            _this3.bindToRedraw('_zoomIn');\n          }, 'keydown');\n          this.keycharm.bind('num+', function () {\n            _this3.bindToRedraw('_zoomIn');\n          }, 'keydown');\n          this.keycharm.bind('num-', function () {\n            _this3.bindToRedraw('_zoomOut');\n          }, 'keydown');\n          this.keycharm.bind('-', function () {\n            _this3.bindToRedraw('_zoomOut');\n          }, 'keydown');\n          this.keycharm.bind('[', function () {\n            _this3.bindToRedraw('_zoomOut');\n          }, 'keydown');\n          this.keycharm.bind(']', function () {\n            _this3.bindToRedraw('_zoomIn');\n          }, 'keydown');\n          this.keycharm.bind('pageup', function () {\n            _this3.bindToRedraw('_zoomIn');\n          }, 'keydown');\n          this.keycharm.bind('pagedown', function () {\n            _this3.bindToRedraw('_zoomOut');\n          }, 'keydown');\n\n          this.keycharm.bind('up', function () {\n            _this3.unbindFromRedraw('_moveUp');\n          }, 'keyup');\n          this.keycharm.bind('down', function () {\n            _this3.unbindFromRedraw('_moveDown');\n          }, 'keyup');\n          this.keycharm.bind('left', function () {\n            _this3.unbindFromRedraw('_moveLeft');\n          }, 'keyup');\n          this.keycharm.bind('right', function () {\n            _this3.unbindFromRedraw('_moveRight');\n          }, 'keyup');\n          this.keycharm.bind('=', function () {\n            _this3.unbindFromRedraw('_zoomIn');\n          }, 'keyup');\n          this.keycharm.bind('num+', function () {\n            _this3.unbindFromRedraw('_zoomIn');\n          }, 'keyup');\n          this.keycharm.bind('num-', function () {\n            _this3.unbindFromRedraw('_zoomOut');\n          }, 'keyup');\n          this.keycharm.bind('-', function () {\n            _this3.unbindFromRedraw('_zoomOut');\n          }, 'keyup');\n          this.keycharm.bind('[', function () {\n            _this3.unbindFromRedraw('_zoomOut');\n          }, 'keyup');\n          this.keycharm.bind(']', function () {\n            _this3.unbindFromRedraw('_zoomIn');\n          }, 'keyup');\n          this.keycharm.bind('pageup', function () {\n            _this3.unbindFromRedraw('_zoomIn');\n          }, 'keyup');\n          this.keycharm.bind('pagedown', function () {\n            _this3.unbindFromRedraw('_zoomOut');\n          }, 'keyup');\n        }\n      }\n    }\n  }]);\n  return NavigationHandler;\n}();\n\nexports['default'] = NavigationHandler;\n\n/***/ }),\n/* 185 */\n/***/ (function(module, exports, __nested_webpack_require_1040705__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _classCallCheck2 = __nested_webpack_require_1040705__(0);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __nested_webpack_require_1040705__(1);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\n/**\n * Popup is a class to create a popup window with some text\n */\nvar Popup = function () {\n  /**\n   * @param {Element} container       The container object.\n   * @param {string}  overflowMethod  How the popup should act to overflowing ('flip' or 'cap')\n   */\n  function Popup(container, overflowMethod) {\n    (0, _classCallCheck3['default'])(this, Popup);\n\n    this.container = container;\n    this.overflowMethod = overflowMethod || 'cap';\n\n    this.x = 0;\n    this.y = 0;\n    this.padding = 5;\n    this.hidden = false;\n\n    // create the frame\n    this.frame = document.createElement('div');\n    this.frame.className = 'vis-tooltip';\n    this.container.appendChild(this.frame);\n  }\n\n  /**\n   * @param {number} x   Horizontal position of the popup window\n   * @param {number} y   Vertical position of the popup window\n   */\n\n\n  (0, _createClass3['default'])(Popup, [{\n    key: 'setPosition',\n    value: function setPosition(x, y) {\n      this.x = parseInt(x);\n      this.y = parseInt(y);\n    }\n\n    /**\n     * Set the content for the popup window. This can be HTML code or text.\n     * @param {string | Element} content\n     */\n\n  }, {\n    key: 'setText',\n    value: function setText(content) {\n      if (content instanceof Element) {\n        this.frame.innerHTML = '';\n        this.frame.appendChild(content);\n      } else {\n        this.frame.innerHTML = content; // string containing text or HTML\n      }\n    }\n\n    /**\n     * Show the popup window\n     * @param {boolean} [doShow]    Show or hide the window\n     */\n\n  }, {\n    key: 'show',\n    value: function show(doShow) {\n      if (doShow === undefined) {\n        doShow = true;\n      }\n\n      if (doShow === true) {\n        var height = this.frame.clientHeight;\n        var width = this.frame.clientWidth;\n        var maxHeight = this.frame.parentNode.clientHeight;\n        var maxWidth = this.frame.parentNode.clientWidth;\n\n        var left = 0,\n            top = 0;\n\n        if (this.overflowMethod == 'flip') {\n          var isLeft = false,\n              isTop = true; // Where around the position it's located\n\n          if (this.y - height < this.padding) {\n            isTop = false;\n          }\n\n          if (this.x + width > maxWidth - this.padding) {\n            isLeft = true;\n          }\n\n          if (isLeft) {\n            left = this.x - width;\n          } else {\n            left = this.x;\n          }\n\n          if (isTop) {\n            top = this.y - height;\n          } else {\n            top = this.y;\n          }\n        } else {\n          top = this.y - height;\n          if (top + height + this.padding > maxHeight) {\n            top = maxHeight - height - this.padding;\n          }\n          if (top < this.padding) {\n            top = this.padding;\n          }\n\n          left = this.x;\n          if (left + width + this.padding > maxWidth) {\n            left = maxWidth - width - this.padding;\n          }\n          if (left < this.padding) {\n            left = this.padding;\n          }\n        }\n\n        this.frame.style.left = left + 'px';\n        this.frame.style.top = top + 'px';\n        this.frame.style.visibility = 'visible';\n        this.hidden = false;\n      } else {\n        this.hide();\n      }\n    }\n\n    /**\n     * Hide the popup window\n     */\n\n  }, {\n    key: 'hide',\n    value: function hide() {\n      this.hidden = true;\n      this.frame.style.left = '0';\n      this.frame.style.top = '0';\n      this.frame.style.visibility = 'hidden';\n    }\n\n    /**\n     * Remove the popup window\n     */\n\n  }, {\n    key: 'destroy',\n    value: function destroy() {\n      this.frame.parentNode.removeChild(this.frame); // Remove element from DOM\n    }\n  }]);\n  return Popup;\n}();\n\nexports['default'] = Popup;\n\n/***/ }),\n/* 186 */\n/***/ (function(module, exports, __nested_webpack_require_1044884__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _keys = __nested_webpack_require_1044884__(9);\n\nvar _keys2 = _interopRequireDefault(_keys);\n\nvar _classCallCheck2 = __nested_webpack_require_1044884__(0);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __nested_webpack_require_1044884__(1);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar Node = __nested_webpack_require_1044884__(34)['default'];\nvar Edge = __nested_webpack_require_1044884__(55)['default'];\n\nvar util = __nested_webpack_require_1044884__(2);\n\n/**\n * The handler for selections\n */\n\nvar SelectionHandler = function () {\n  /**\n   * @param {Object} body\n   * @param {Canvas} canvas\n   */\n  function SelectionHandler(body, canvas) {\n    var _this = this;\n\n    (0, _classCallCheck3['default'])(this, SelectionHandler);\n\n    this.body = body;\n    this.canvas = canvas;\n    this.selectionObj = { nodes: [], edges: [] };\n    this.hoverObj = { nodes: {}, edges: {} };\n\n    this.options = {};\n    this.defaultOptions = {\n      multiselect: false,\n      selectable: true,\n      selectConnectedEdges: true,\n      hoverConnectedEdges: true\n    };\n    util.extend(this.options, this.defaultOptions);\n\n    this.body.emitter.on('_dataChanged', function () {\n      _this.updateSelection();\n    });\n  }\n\n  /**\n   *\n   * @param {Object} [options]\n   */\n\n\n  (0, _createClass3['default'])(SelectionHandler, [{\n    key: 'setOptions',\n    value: function setOptions(options) {\n      if (options !== undefined) {\n        var fields = ['multiselect', 'hoverConnectedEdges', 'selectable', 'selectConnectedEdges'];\n        util.selectiveDeepExtend(fields, this.options, options);\n      }\n    }\n\n    /**\n     * handles the selection part of the tap;\n     *\n     * @param {{x: number, y: number}} pointer\n     * @returns {boolean}\n     */\n\n  }, {\n    key: 'selectOnPoint',\n    value: function selectOnPoint(pointer) {\n      var selected = false;\n      if (this.options.selectable === true) {\n        var obj = this.getNodeAt(pointer) || this.getEdgeAt(pointer);\n\n        // unselect after getting the objects in order to restore width and height.\n        this.unselectAll();\n\n        if (obj !== undefined) {\n          selected = this.selectObject(obj);\n        }\n        this.body.emitter.emit('_requestRedraw');\n      }\n      return selected;\n    }\n\n    /**\n     *\n     * @param {{x: number, y: number}} pointer\n     * @returns {boolean}\n     */\n\n  }, {\n    key: 'selectAdditionalOnPoint',\n    value: function selectAdditionalOnPoint(pointer) {\n      var selectionChanged = false;\n      if (this.options.selectable === true) {\n        var obj = this.getNodeAt(pointer) || this.getEdgeAt(pointer);\n\n        if (obj !== undefined) {\n          selectionChanged = true;\n          if (obj.isSelected() === true) {\n            this.deselectObject(obj);\n          } else {\n            this.selectObject(obj);\n          }\n\n          this.body.emitter.emit('_requestRedraw');\n        }\n      }\n      return selectionChanged;\n    }\n\n    /**\n     * Create an object containing the standard fields for an event.\n     *\n     * @param {Event} event\n     * @param {{x: number, y: number}} pointer Object with the x and y screen coordinates of the mouse\n     * @returns {{}}\n     * @private\n     */\n\n  }, {\n    key: '_initBaseEvent',\n    value: function _initBaseEvent(event, pointer) {\n      var properties = {};\n\n      properties['pointer'] = {\n        DOM: { x: pointer.x, y: pointer.y },\n        canvas: this.canvas.DOMtoCanvas(pointer)\n      };\n      properties['event'] = event;\n\n      return properties;\n    }\n\n    /**\n     * Generate an event which the user can catch.\n     *\n     * This adds some extra data to the event with respect to cursor position and\n     * selected nodes and edges.\n     *\n     * @param {string} eventType                          Name of event to send\n     * @param {Event}  event\n     * @param {{x: number, y: number}} pointer            Object with the x and y screen coordinates of the mouse\n     * @param {Object|undefined} oldSelection             If present, selection state before event occured\n     * @param {boolean|undefined} [emptySelection=false]  Indicate if selection data should be passed\n     */\n\n  }, {\n    key: '_generateClickEvent',\n    value: function _generateClickEvent(eventType, event, pointer, oldSelection) {\n      var emptySelection = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n\n      var properties = this._initBaseEvent(event, pointer);\n\n      if (emptySelection === true) {\n        properties.nodes = [];\n        properties.edges = [];\n      } else {\n        var tmp = this.getSelection();\n        properties.nodes = tmp.nodes;\n        properties.edges = tmp.edges;\n      }\n\n      if (oldSelection !== undefined) {\n        properties['previousSelection'] = oldSelection;\n      }\n\n      if (eventType == 'click') {\n        // For the time being, restrict this functionality to\n        // just the click event.\n        properties.items = this.getClickedItems(pointer);\n      }\n\n      if (event.controlEdge !== undefined) {\n        properties.controlEdge = event.controlEdge;\n      }\n\n      this.body.emitter.emit(eventType, properties);\n    }\n\n    /**\n     *\n     * @param {Object} obj\n     * @param {boolean} [highlightEdges=this.options.selectConnectedEdges]\n     * @returns {boolean}\n     */\n\n  }, {\n    key: 'selectObject',\n    value: function selectObject(obj) {\n      var highlightEdges = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.options.selectConnectedEdges;\n\n      if (obj !== undefined) {\n        if (obj instanceof Node) {\n          if (highlightEdges === true) {\n            this._selectConnectedEdges(obj);\n          }\n        }\n        obj.select();\n        this._addToSelection(obj);\n        return true;\n      }\n      return false;\n    }\n\n    /**\n     *\n     * @param {Object} obj\n     */\n\n  }, {\n    key: 'deselectObject',\n    value: function deselectObject(obj) {\n      if (obj.isSelected() === true) {\n        obj.selected = false;\n        this._removeFromSelection(obj);\n      }\n    }\n\n    /**\n     * retrieve all nodes overlapping with given object\n     * @param {Object} object  An object with parameters left, top, right, bottom\n     * @return {number[]}   An array with id's of the overlapping nodes\n     * @private\n     */\n\n  }, {\n    key: '_getAllNodesOverlappingWith',\n    value: function _getAllNodesOverlappingWith(object) {\n      var overlappingNodes = [];\n      var nodes = this.body.nodes;\n      for (var i = 0; i < this.body.nodeIndices.length; i++) {\n        var nodeId = this.body.nodeIndices[i];\n        if (nodes[nodeId].isOverlappingWith(object)) {\n          overlappingNodes.push(nodeId);\n        }\n      }\n      return overlappingNodes;\n    }\n\n    /**\n     * Return a position object in canvasspace from a single point in screenspace\n     *\n     * @param {{x: number, y: number}} pointer\n     * @returns {{left: number, top: number, right: number, bottom: number}}\n     * @private\n     */\n\n  }, {\n    key: '_pointerToPositionObject',\n    value: function _pointerToPositionObject(pointer) {\n      var canvasPos = this.canvas.DOMtoCanvas(pointer);\n      return {\n        left: canvasPos.x - 1,\n        top: canvasPos.y + 1,\n        right: canvasPos.x + 1,\n        bottom: canvasPos.y - 1\n      };\n    }\n\n    /**\n     * Get the top node at the passed point (like a click)\n     *\n     * @param {{x: number, y: number}} pointer\n     * @param {boolean} [returnNode=true]\n     * @return {Node | undefined} node\n     */\n\n  }, {\n    key: 'getNodeAt',\n    value: function getNodeAt(pointer) {\n      var returnNode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n      // we first check if this is an navigation controls element\n      var positionObject = this._pointerToPositionObject(pointer);\n      var overlappingNodes = this._getAllNodesOverlappingWith(positionObject);\n      // if there are overlapping nodes, select the last one, this is the\n      // one which is drawn on top of the others\n      if (overlappingNodes.length > 0) {\n        if (returnNode === true) {\n          return this.body.nodes[overlappingNodes[overlappingNodes.length - 1]];\n        } else {\n          return overlappingNodes[overlappingNodes.length - 1];\n        }\n      } else {\n        return undefined;\n      }\n    }\n\n    /**\n     * retrieve all edges overlapping with given object, selector is around center\n     * @param {Object} object  An object with parameters left, top, right, bottom\n     * @param {number[]} overlappingEdges An array with id's of the overlapping nodes\n     * @private\n     */\n\n  }, {\n    key: '_getEdgesOverlappingWith',\n    value: function _getEdgesOverlappingWith(object, overlappingEdges) {\n      var edges = this.body.edges;\n      for (var i = 0; i < this.body.edgeIndices.length; i++) {\n        var edgeId = this.body.edgeIndices[i];\n        if (edges[edgeId].isOverlappingWith(object)) {\n          overlappingEdges.push(edgeId);\n        }\n      }\n    }\n\n    /**\n     * retrieve all nodes overlapping with given object\n     * @param {Object} object  An object with parameters left, top, right, bottom\n     * @return {number[]}   An array with id's of the overlapping nodes\n     * @private\n     */\n\n  }, {\n    key: '_getAllEdgesOverlappingWith',\n    value: function _getAllEdgesOverlappingWith(object) {\n      var overlappingEdges = [];\n      this._getEdgesOverlappingWith(object, overlappingEdges);\n      return overlappingEdges;\n    }\n\n    /**\n     * Get the edges nearest to the passed point (like a click)\n     *\n     * @param {{x: number, y: number}} pointer\n     * @param {boolean} [returnEdge=true]\n     * @return {Edge | undefined} node\n     */\n\n  }, {\n    key: 'getEdgeAt',\n    value: function getEdgeAt(pointer) {\n      var returnEdge = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n      // Iterate over edges, pick closest within 10\n      var canvasPos = this.canvas.DOMtoCanvas(pointer);\n      var mindist = 10;\n      var overlappingEdge = null;\n      var edges = this.body.edges;\n      for (var i = 0; i < this.body.edgeIndices.length; i++) {\n        var edgeId = this.body.edgeIndices[i];\n        var edge = edges[edgeId];\n        if (edge.connected) {\n          var xFrom = edge.from.x;\n          var yFrom = edge.from.y;\n          var xTo = edge.to.x;\n          var yTo = edge.to.y;\n          var dist = edge.edgeType.getDistanceToEdge(xFrom, yFrom, xTo, yTo, canvasPos.x, canvasPos.y);\n          if (dist < mindist) {\n            overlappingEdge = edgeId;\n            mindist = dist;\n          }\n        }\n      }\n      if (overlappingEdge !== null) {\n        if (returnEdge === true) {\n          return this.body.edges[overlappingEdge];\n        } else {\n          return overlappingEdge;\n        }\n      } else {\n        return undefined;\n      }\n    }\n\n    /**\n     * Add object to the selection array.\n     *\n     * @param {Object} obj\n     * @private\n     */\n\n  }, {\n    key: '_addToSelection',\n    value: function _addToSelection(obj) {\n      if (obj instanceof Node) {\n        this.selectionObj.nodes[obj.id] = obj;\n      } else {\n        this.selectionObj.edges[obj.id] = obj;\n      }\n    }\n\n    /**\n     * Add object to the selection array.\n     *\n     * @param {Object} obj\n     * @private\n     */\n\n  }, {\n    key: '_addToHover',\n    value: function _addToHover(obj) {\n      if (obj instanceof Node) {\n        this.hoverObj.nodes[obj.id] = obj;\n      } else {\n        this.hoverObj.edges[obj.id] = obj;\n      }\n    }\n\n    /**\n     * Remove a single option from selection.\n     *\n     * @param {Object} obj\n     * @private\n     */\n\n  }, {\n    key: '_removeFromSelection',\n    value: function _removeFromSelection(obj) {\n      if (obj instanceof Node) {\n        delete this.selectionObj.nodes[obj.id];\n        this._unselectConnectedEdges(obj);\n      } else {\n        delete this.selectionObj.edges[obj.id];\n      }\n    }\n\n    /**\n     * Unselect all. The selectionObj is useful for this.\n     */\n\n  }, {\n    key: 'unselectAll',\n    value: function unselectAll() {\n      for (var nodeId in this.selectionObj.nodes) {\n        if (this.selectionObj.nodes.hasOwnProperty(nodeId)) {\n          this.selectionObj.nodes[nodeId].unselect();\n        }\n      }\n      for (var edgeId in this.selectionObj.edges) {\n        if (this.selectionObj.edges.hasOwnProperty(edgeId)) {\n          this.selectionObj.edges[edgeId].unselect();\n        }\n      }\n\n      this.selectionObj = { nodes: {}, edges: {} };\n    }\n\n    /**\n     * return the number of selected nodes\n     *\n     * @returns {number}\n     * @private\n     */\n\n  }, {\n    key: '_getSelectedNodeCount',\n    value: function _getSelectedNodeCount() {\n      var count = 0;\n      for (var nodeId in this.selectionObj.nodes) {\n        if (this.selectionObj.nodes.hasOwnProperty(nodeId)) {\n          count += 1;\n        }\n      }\n      return count;\n    }\n\n    /**\n     * return the selected node\n     *\n     * @returns {number}\n     * @private\n     */\n\n  }, {\n    key: '_getSelectedNode',\n    value: function _getSelectedNode() {\n      for (var nodeId in this.selectionObj.nodes) {\n        if (this.selectionObj.nodes.hasOwnProperty(nodeId)) {\n          return this.selectionObj.nodes[nodeId];\n        }\n      }\n      return undefined;\n    }\n\n    /**\n     * return the selected edge\n     *\n     * @returns {number}\n     * @private\n     */\n\n  }, {\n    key: '_getSelectedEdge',\n    value: function _getSelectedEdge() {\n      for (var edgeId in this.selectionObj.edges) {\n        if (this.selectionObj.edges.hasOwnProperty(edgeId)) {\n          return this.selectionObj.edges[edgeId];\n        }\n      }\n      return undefined;\n    }\n\n    /**\n     * return the number of selected edges\n     *\n     * @returns {number}\n     * @private\n     */\n\n  }, {\n    key: '_getSelectedEdgeCount',\n    value: function _getSelectedEdgeCount() {\n      var count = 0;\n      for (var edgeId in this.selectionObj.edges) {\n        if (this.selectionObj.edges.hasOwnProperty(edgeId)) {\n          count += 1;\n        }\n      }\n      return count;\n    }\n\n    /**\n     * return the number of selected objects.\n     *\n     * @returns {number}\n     * @private\n     */\n\n  }, {\n    key: '_getSelectedObjectCount',\n    value: function _getSelectedObjectCount() {\n      var count = 0;\n      for (var nodeId in this.selectionObj.nodes) {\n        if (this.selectionObj.nodes.hasOwnProperty(nodeId)) {\n          count += 1;\n        }\n      }\n      for (var edgeId in this.selectionObj.edges) {\n        if (this.selectionObj.edges.hasOwnProperty(edgeId)) {\n          count += 1;\n        }\n      }\n      return count;\n    }\n\n    /**\n     * Check if anything is selected\n     *\n     * @returns {boolean}\n     * @private\n     */\n\n  }, {\n    key: '_selectionIsEmpty',\n    value: function _selectionIsEmpty() {\n      for (var nodeId in this.selectionObj.nodes) {\n        if (this.selectionObj.nodes.hasOwnProperty(nodeId)) {\n          return false;\n        }\n      }\n      for (var edgeId in this.selectionObj.edges) {\n        if (this.selectionObj.edges.hasOwnProperty(edgeId)) {\n          return false;\n        }\n      }\n      return true;\n    }\n\n    /**\n     * check if one of the selected nodes is a cluster.\n     *\n     * @returns {boolean}\n     * @private\n     */\n\n  }, {\n    key: '_clusterInSelection',\n    value: function _clusterInSelection() {\n      for (var nodeId in this.selectionObj.nodes) {\n        if (this.selectionObj.nodes.hasOwnProperty(nodeId)) {\n          if (this.selectionObj.nodes[nodeId].clusterSize > 1) {\n            return true;\n          }\n        }\n      }\n      return false;\n    }\n\n    /**\n     * select the edges connected to the node that is being selected\n     *\n     * @param {Node} node\n     * @private\n     */\n\n  }, {\n    key: '_selectConnectedEdges',\n    value: function _selectConnectedEdges(node) {\n      for (var i = 0; i < node.edges.length; i++) {\n        var edge = node.edges[i];\n        edge.select();\n        this._addToSelection(edge);\n      }\n    }\n\n    /**\n     * select the edges connected to the node that is being selected\n     *\n     * @param {Node} node\n     * @private\n     */\n\n  }, {\n    key: '_hoverConnectedEdges',\n    value: function _hoverConnectedEdges(node) {\n      for (var i = 0; i < node.edges.length; i++) {\n        var edge = node.edges[i];\n        edge.hover = true;\n        this._addToHover(edge);\n      }\n    }\n\n    /**\n     * unselect the edges connected to the node that is being selected\n     *\n     * @param {Node} node\n     * @private\n     */\n\n  }, {\n    key: '_unselectConnectedEdges',\n    value: function _unselectConnectedEdges(node) {\n      for (var i = 0; i < node.edges.length; i++) {\n        var edge = node.edges[i];\n        edge.unselect();\n        this._removeFromSelection(edge);\n      }\n    }\n\n    /**\n     * Remove the highlight from a node or edge, in response to mouse movement\n     *\n     * @param {Event}  event\n     * @param {{x: number, y: number}} pointer object with the x and y screen coordinates of the mouse\n     * @param {Node|vis.Edge} object\n     * @private\n     */\n\n  }, {\n    key: 'emitBlurEvent',\n    value: function emitBlurEvent(event, pointer, object) {\n      var properties = this._initBaseEvent(event, pointer);\n\n      if (object.hover === true) {\n        object.hover = false;\n        if (object instanceof Node) {\n          properties.node = object.id;\n          this.body.emitter.emit('blurNode', properties);\n        } else {\n          properties.edge = object.id;\n          this.body.emitter.emit('blurEdge', properties);\n        }\n      }\n    }\n\n    /**\n     * Create the highlight for a node or edge, in response to mouse movement\n     *\n     * @param {Event}  event\n     * @param {{x: number, y: number}} pointer object with the x and y screen coordinates of the mouse\n     * @param {Node|vis.Edge} object\n     * @returns {boolean} hoverChanged\n     * @private\n     */\n\n  }, {\n    key: 'emitHoverEvent',\n    value: function emitHoverEvent(event, pointer, object) {\n      var properties = this._initBaseEvent(event, pointer);\n      var hoverChanged = false;\n\n      if (object.hover === false) {\n        object.hover = true;\n        this._addToHover(object);\n        hoverChanged = true;\n        if (object instanceof Node) {\n          properties.node = object.id;\n          this.body.emitter.emit('hoverNode', properties);\n        } else {\n          properties.edge = object.id;\n          this.body.emitter.emit('hoverEdge', properties);\n        }\n      }\n\n      return hoverChanged;\n    }\n\n    /**\n     * Perform actions in response to a mouse movement.\n     *\n     * @param {Event}  event\n     * @param {{x: number, y: number}} pointer | object with the x and y screen coordinates of the mouse\n     */\n\n  }, {\n    key: 'hoverObject',\n    value: function hoverObject(event, pointer) {\n      var object = this.getNodeAt(pointer);\n      if (object === undefined) {\n        object = this.getEdgeAt(pointer);\n      }\n\n      var hoverChanged = false;\n      // remove all node hover highlights\n      for (var nodeId in this.hoverObj.nodes) {\n        if (this.hoverObj.nodes.hasOwnProperty(nodeId)) {\n          if (object === undefined || object instanceof Node && object.id != nodeId || object instanceof Edge) {\n            this.emitBlurEvent(event, pointer, this.hoverObj.nodes[nodeId]);\n            delete this.hoverObj.nodes[nodeId];\n            hoverChanged = true;\n          }\n        }\n      }\n\n      // removing all edge hover highlights\n      for (var edgeId in this.hoverObj.edges) {\n        if (this.hoverObj.edges.hasOwnProperty(edgeId)) {\n          // if the hover has been changed here it means that the node has been hovered over or off\n          // we then do not use the emitBlurEvent method here.\n          if (hoverChanged === true) {\n            this.hoverObj.edges[edgeId].hover = false;\n            delete this.hoverObj.edges[edgeId];\n          }\n          // if the blur remains the same and the object is undefined (mouse off) or another\n          // edge has been hovered, or another node has been hovered we blur the edge.\n          else if (object === undefined || object instanceof Edge && object.id != edgeId || object instanceof Node && !object.hover) {\n              this.emitBlurEvent(event, pointer, this.hoverObj.edges[edgeId]);\n              delete this.hoverObj.edges[edgeId];\n              hoverChanged = true;\n            }\n        }\n      }\n\n      if (object !== undefined) {\n        var hoveredEdgesCount = (0, _keys2['default'])(this.hoverObj.edges).length;\n        var hoveredNodesCount = (0, _keys2['default'])(this.hoverObj.nodes).length;\n        var newOnlyHoveredEdge = object instanceof Edge && hoveredEdgesCount === 0 && hoveredNodesCount === 0;\n\n        if (hoverChanged || newOnlyHoveredEdge) {\n          hoverChanged = this.emitHoverEvent(event, pointer, object);\n        }\n\n        if (object instanceof Node && this.options.hoverConnectedEdges === true) {\n          this._hoverConnectedEdges(object);\n        }\n      }\n\n      if (hoverChanged === true) {\n        this.body.emitter.emit('_requestRedraw');\n      }\n    }\n\n    /**\n     *\n     * retrieve the currently selected objects\n     * @return {{nodes: Array.<string>, edges: Array.<string>}} selection\n     */\n\n  }, {\n    key: 'getSelection',\n    value: function getSelection() {\n      var nodeIds = this.getSelectedNodes();\n      var edgeIds = this.getSelectedEdges();\n      return { nodes: nodeIds, edges: edgeIds };\n    }\n\n    /**\n     *\n     * retrieve the currently selected nodes\n     * @return {string[]} selection    An array with the ids of the\n     *                                            selected nodes.\n     */\n\n  }, {\n    key: 'getSelectedNodes',\n    value: function getSelectedNodes() {\n      var idArray = [];\n      if (this.options.selectable === true) {\n        for (var nodeId in this.selectionObj.nodes) {\n          if (this.selectionObj.nodes.hasOwnProperty(nodeId)) {\n            idArray.push(this.selectionObj.nodes[nodeId].id);\n          }\n        }\n      }\n      return idArray;\n    }\n\n    /**\n     *\n     * retrieve the currently selected edges\n     * @return {Array} selection    An array with the ids of the\n     *                                            selected nodes.\n     */\n\n  }, {\n    key: 'getSelectedEdges',\n    value: function getSelectedEdges() {\n      var idArray = [];\n      if (this.options.selectable === true) {\n        for (var edgeId in this.selectionObj.edges) {\n          if (this.selectionObj.edges.hasOwnProperty(edgeId)) {\n            idArray.push(this.selectionObj.edges[edgeId].id);\n          }\n        }\n      }\n      return idArray;\n    }\n\n    /**\n     * Updates the current selection\n     * @param {{nodes: Array.<string>, edges: Array.<string>}} selection\n     * @param {Object} options                                 Options\n     */\n\n  }, {\n    key: 'setSelection',\n    value: function setSelection(selection) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      var i = void 0,\n          id = void 0;\n\n      if (!selection || !selection.nodes && !selection.edges) throw 'Selection must be an object with nodes and/or edges properties';\n      // first unselect any selected node, if option is true or undefined\n      if (options.unselectAll || options.unselectAll === undefined) {\n        this.unselectAll();\n      }\n      if (selection.nodes) {\n        for (i = 0; i < selection.nodes.length; i++) {\n          id = selection.nodes[i];\n\n          var node = this.body.nodes[id];\n          if (!node) {\n            throw new RangeError('Node with id \"' + id + '\" not found');\n          }\n          // don't select edges with it\n          this.selectObject(node, options.highlightEdges);\n        }\n      }\n\n      if (selection.edges) {\n        for (i = 0; i < selection.edges.length; i++) {\n          id = selection.edges[i];\n\n          var edge = this.body.edges[id];\n          if (!edge) {\n            throw new RangeError('Edge with id \"' + id + '\" not found');\n          }\n          this.selectObject(edge);\n        }\n      }\n      this.body.emitter.emit('_requestRedraw');\n    }\n\n    /**\n     * select zero or more nodes with the option to highlight edges\n     * @param {number[] | string[]} selection     An array with the ids of the\n     *                                            selected nodes.\n     * @param {boolean} [highlightEdges]\n     */\n\n  }, {\n    key: 'selectNodes',\n    value: function selectNodes(selection) {\n      var highlightEdges = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n      if (!selection || selection.length === undefined) throw 'Selection must be an array with ids';\n\n      this.setSelection({ nodes: selection }, { highlightEdges: highlightEdges });\n    }\n\n    /**\n     * select zero or more edges\n     * @param {number[] | string[]} selection     An array with the ids of the\n     *                                            selected nodes.\n     */\n\n  }, {\n    key: 'selectEdges',\n    value: function selectEdges(selection) {\n      if (!selection || selection.length === undefined) throw 'Selection must be an array with ids';\n\n      this.setSelection({ edges: selection });\n    }\n\n    /**\n     * Validate the selection: remove ids of nodes which no longer exist\n     * @private\n     */\n\n  }, {\n    key: 'updateSelection',\n    value: function updateSelection() {\n      for (var nodeId in this.selectionObj.nodes) {\n        if (this.selectionObj.nodes.hasOwnProperty(nodeId)) {\n          if (!this.body.nodes.hasOwnProperty(nodeId)) {\n            delete this.selectionObj.nodes[nodeId];\n          }\n        }\n      }\n      for (var edgeId in this.selectionObj.edges) {\n        if (this.selectionObj.edges.hasOwnProperty(edgeId)) {\n          if (!this.body.edges.hasOwnProperty(edgeId)) {\n            delete this.selectionObj.edges[edgeId];\n          }\n        }\n      }\n    }\n\n    /**\n     * Determine all the visual elements clicked which are on the given point.\n     *\n     * All elements are returned; this includes nodes, edges and their labels.\n     * The order returned is from highest to lowest, i.e. element 0 of the return\n     * value is the topmost item clicked on.\n     *\n     * The return value consists of an array of the following possible elements:\n     *\n     * - `{nodeId:number}`             - node with given id clicked on\n     * - `{nodeId:number, labelId:0}`  - label of node with given id clicked on\n     * - `{edgeId:number}`             - edge with given id clicked on\n     * - `{edge:number, labelId:0}`    - label of edge with given id clicked on\n     *\n     * ## NOTES\n     *\n     * - Currently, there is only one label associated with a node or an edge,\n     *   but this is expected to change somewhere in the future.\n     * - Since there is no z-indexing yet, it is not really possible to set the nodes and\n     *   edges in the correct order. For the time being, nodes come first.\n     *\n     * @param {point} pointer  mouse position in screen coordinates\n     * @returns {Array.<nodeClickItem|nodeLabelClickItem|edgeClickItem|edgeLabelClickItem>}\n     * @private\n     */\n\n  }, {\n    key: 'getClickedItems',\n    value: function getClickedItems(pointer) {\n      var point = this.canvas.DOMtoCanvas(pointer);\n      var items = [];\n\n      // Note reverse order; we want the topmost clicked items to be first in the array\n      // Also note that selected nodes are disregarded here; these normally display on top\n      var nodeIndices = this.body.nodeIndices;\n      var nodes = this.body.nodes;\n      for (var i = nodeIndices.length - 1; i >= 0; i--) {\n        var node = nodes[nodeIndices[i]];\n        var ret = node.getItemsOnPoint(point);\n        items.push.apply(items, ret); // Append the return value to the running list.\n      }\n\n      var edgeIndices = this.body.edgeIndices;\n      var edges = this.body.edges;\n      for (var _i = edgeIndices.length - 1; _i >= 0; _i--) {\n        var edge = edges[edgeIndices[_i]];\n        var _ret = edge.getItemsOnPoint(point);\n        items.push.apply(items, _ret); // Append the return value to the running list.\n      }\n\n      return items;\n    }\n  }]);\n  return SelectionHandler;\n}();\n\nexports['default'] = SelectionHandler;\n\n/***/ }),\n/* 187 */\n/***/ (function(module, exports, __nested_webpack_require_1073236__) {\n\n\"use strict\";\n/**\n * There's a mix-up with terms in the code. Following are the formal definitions:\n *\n *   tree   - a strict hierarchical network, i.e. every node has at most one parent\n *   forest - a collection of trees. These distinct trees are thus not connected.\n *\n * So:\n * - in a network that is not a tree, there exist nodes with multiple parents.\n * - a network consisting of unconnected sub-networks, of which at least one\n *   is not a tree, is not a forest.\n *\n * In the code, the definitions are:\n *\n *   tree   - any disconnected sub-network, strict hierarchical or not.\n *   forest - a bunch of these sub-networks\n *\n * The difference between tree and not-tree is important in the code, notably within\n * to the block-shifting algorithm. The algorithm assumes formal trees and fails\n * for not-trees, often in a spectacular manner (search for 'exploding network' in the issues).\n *\n * In order to distinguish the definitions in the following code, the adjective 'formal' is\n * used. If 'formal' is absent, you must assume the non-formal definition.\n *\n * ----------------------------------------------------------------------------------\n * NOTES\n * =====\n *\n * A hierarchical layout is a different thing from a hierarchical network.\n * The layout is a way to arrange the nodes in the view; this can be done\n * on non-hierarchical networks as well. The converse is also possible.\n */\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _slicedToArray2 = __nested_webpack_require_1073236__(15);\n\nvar _slicedToArray3 = _interopRequireDefault(_slicedToArray2);\n\nvar _typeof2 = __nested_webpack_require_1073236__(7);\n\nvar _typeof3 = _interopRequireDefault(_typeof2);\n\nvar _keys = __nested_webpack_require_1073236__(9);\n\nvar _keys2 = _interopRequireDefault(_keys);\n\nvar _classCallCheck2 = __nested_webpack_require_1073236__(0);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __nested_webpack_require_1073236__(1);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar TimSort = __nested_webpack_require_1073236__(83);\nvar util = __nested_webpack_require_1073236__(2);\nvar NetworkUtil = __nested_webpack_require_1073236__(57)['default'];\n\nvar _require = __nested_webpack_require_1073236__(189),\n    HorizontalStrategy = _require.HorizontalStrategy,\n    VerticalStrategy = _require.VerticalStrategy;\n\n/**\n * Container for derived data on current network, relating to hierarchy.\n *\n * @private\n */\n\n\nvar HierarchicalStatus = function () {\n  /**\n   * @ignore\n   */\n  function HierarchicalStatus() {\n    (0, _classCallCheck3['default'])(this, HierarchicalStatus);\n\n    this.childrenReference = {}; // child id's per node id\n    this.parentReference = {}; // parent id's per node id\n    this.trees = {}; // tree id per node id; i.e. to which tree does given node id belong\n\n    this.distributionOrdering = {}; // The nodes per level, in the display order\n    this.levels = {}; // hierarchy level per node id\n    this.distributionIndex = {}; // The position of the node in the level sorting order, per node id.\n\n    this.isTree = false; // True if current network is a formal tree\n    this.treeIndex = -1; // Highest tree id in current network.\n  }\n\n  /**\n   * Add the relation between given nodes to the current state.\n   *\n   * @param {Node.id} parentNodeId\n   * @param {Node.id} childNodeId\n   */\n\n\n  (0, _createClass3['default'])(HierarchicalStatus, [{\n    key: 'addRelation',\n    value: function addRelation(parentNodeId, childNodeId) {\n      if (this.childrenReference[parentNodeId] === undefined) {\n        this.childrenReference[parentNodeId] = [];\n      }\n      this.childrenReference[parentNodeId].push(childNodeId);\n\n      if (this.parentReference[childNodeId] === undefined) {\n        this.parentReference[childNodeId] = [];\n      }\n      this.parentReference[childNodeId].push(parentNodeId);\n    }\n\n    /**\n     * Check if the current state is for a formal tree or formal forest.\n     *\n     * This is the case if every node has at most one parent.\n     *\n     * Pre: parentReference init'ed properly for current network\n     */\n\n  }, {\n    key: 'checkIfTree',\n    value: function checkIfTree() {\n      for (var i in this.parentReference) {\n        if (this.parentReference[i].length > 1) {\n          this.isTree = false;\n          return;\n        }\n      }\n\n      this.isTree = true;\n    }\n\n    /**\n     * Return the number of separate trees in the current network.\n     * @returns {number}\n     */\n\n  }, {\n    key: 'numTrees',\n    value: function numTrees() {\n      return this.treeIndex + 1; // This assumes the indexes are assigned consecitively\n    }\n\n    /**\n     * Assign a tree id to a node\n     * @param {Node} node\n     * @param {string|number} treeId\n     */\n\n  }, {\n    key: 'setTreeIndex',\n    value: function setTreeIndex(node, treeId) {\n      if (treeId === undefined) return; // Don't bother\n\n      if (this.trees[node.id] === undefined) {\n        this.trees[node.id] = treeId;\n        this.treeIndex = Math.max(treeId, this.treeIndex);\n      }\n    }\n\n    /**\n     * Ensure level for given id is defined.\n     *\n     * Sets level to zero for given node id if not already present\n     *\n     * @param {Node.id} nodeId\n     */\n\n  }, {\n    key: 'ensureLevel',\n    value: function ensureLevel(nodeId) {\n      if (this.levels[nodeId] === undefined) {\n        this.levels[nodeId] = 0;\n      }\n    }\n\n    /**\n     * get the maximum level of a branch.\n     *\n     * TODO: Never entered; find a test case to test this!\n     * @param {Node.id} nodeId\n     * @returns {number}\n     */\n\n  }, {\n    key: 'getMaxLevel',\n    value: function getMaxLevel(nodeId) {\n      var _this = this;\n\n      var accumulator = {};\n\n      var _getMaxLevel = function _getMaxLevel(nodeId) {\n        if (accumulator[nodeId] !== undefined) {\n          return accumulator[nodeId];\n        }\n        var level = _this.levels[nodeId];\n        if (_this.childrenReference[nodeId]) {\n          var children = _this.childrenReference[nodeId];\n          if (children.length > 0) {\n            for (var i = 0; i < children.length; i++) {\n              level = Math.max(level, _getMaxLevel(children[i]));\n            }\n          }\n        }\n        accumulator[nodeId] = level;\n        return level;\n      };\n\n      return _getMaxLevel(nodeId);\n    }\n\n    /**\n     *\n     * @param {Node} nodeA\n     * @param {Node} nodeB\n     */\n\n  }, {\n    key: 'levelDownstream',\n    value: function levelDownstream(nodeA, nodeB) {\n      if (this.levels[nodeB.id] === undefined) {\n        // set initial level\n        if (this.levels[nodeA.id] === undefined) {\n          this.levels[nodeA.id] = 0;\n        }\n        // set level\n        this.levels[nodeB.id] = this.levels[nodeA.id] + 1;\n      }\n    }\n\n    /**\n     * Small util method to set the minimum levels of the nodes to zero.\n     *\n     * @param {Array.<Node>} nodes\n     */\n\n  }, {\n    key: 'setMinLevelToZero',\n    value: function setMinLevelToZero(nodes) {\n      var minLevel = 1e9;\n      // get the minimum level\n      for (var nodeId in nodes) {\n        if (nodes.hasOwnProperty(nodeId)) {\n          if (this.levels[nodeId] !== undefined) {\n            minLevel = Math.min(this.levels[nodeId], minLevel);\n          }\n        }\n      }\n\n      // subtract the minimum from the set so we have a range starting from 0\n      for (var _nodeId in nodes) {\n        if (nodes.hasOwnProperty(_nodeId)) {\n          if (this.levels[_nodeId] !== undefined) {\n            this.levels[_nodeId] -= minLevel;\n          }\n        }\n      }\n    }\n\n    /**\n     * Get the min and max xy-coordinates of a given tree\n     *\n     * @param {Array.<Node>} nodes\n     * @param {number} index\n     * @returns {{min_x: number, max_x: number, min_y: number, max_y: number}}\n     */\n\n  }, {\n    key: 'getTreeSize',\n    value: function getTreeSize(nodes, index) {\n      var min_x = 1e9;\n      var max_x = -1e9;\n      var min_y = 1e9;\n      var max_y = -1e9;\n\n      for (var nodeId in this.trees) {\n        if (this.trees.hasOwnProperty(nodeId)) {\n          if (this.trees[nodeId] === index) {\n            var node = nodes[nodeId];\n            min_x = Math.min(node.x, min_x);\n            max_x = Math.max(node.x, max_x);\n            min_y = Math.min(node.y, min_y);\n            max_y = Math.max(node.y, max_y);\n          }\n        }\n      }\n\n      return {\n        min_x: min_x,\n        max_x: max_x,\n        min_y: min_y,\n        max_y: max_y\n      };\n    }\n\n    /**\n     * Check if two nodes have the same parent(s)\n     *\n     * @param {Node} node1\n     * @param {Node} node2\n     * @return {boolean} true if the two nodes have a same ancestor node, false otherwise\n     */\n\n  }, {\n    key: 'hasSameParent',\n    value: function hasSameParent(node1, node2) {\n      var parents1 = this.parentReference[node1.id];\n      var parents2 = this.parentReference[node2.id];\n      if (parents1 === undefined || parents2 === undefined) {\n        return false;\n      }\n\n      for (var i = 0; i < parents1.length; i++) {\n        for (var j = 0; j < parents2.length; j++) {\n          if (parents1[i] == parents2[j]) {\n            return true;\n          }\n        }\n      }\n      return false;\n    }\n\n    /**\n     * Check if two nodes are in the same tree.\n     *\n     * @param {Node} node1\n     * @param {Node} node2\n     * @return {Boolean} true if this is so, false otherwise\n     */\n\n  }, {\n    key: 'inSameSubNetwork',\n    value: function inSameSubNetwork(node1, node2) {\n      return this.trees[node1.id] === this.trees[node2.id];\n    }\n\n    /**\n     * Get a list of the distinct levels in the current network\n     *\n     * @returns {Array}\n     */\n\n  }, {\n    key: 'getLevels',\n    value: function getLevels() {\n      return (0, _keys2['default'])(this.distributionOrdering);\n    }\n\n    /**\n     * Add a node to the ordering per level\n     *\n     * @param {Node} node\n     * @param {number} level\n     */\n\n  }, {\n    key: 'addToOrdering',\n    value: function addToOrdering(node, level) {\n      if (this.distributionOrdering[level] === undefined) {\n        this.distributionOrdering[level] = [];\n      }\n\n      var isPresent = false;\n      var curLevel = this.distributionOrdering[level];\n      for (var n in curLevel) {\n        //if (curLevel[n].id === node.id) {\n        if (curLevel[n] === node) {\n          isPresent = true;\n          break;\n        }\n      }\n\n      if (!isPresent) {\n        this.distributionOrdering[level].push(node);\n        this.distributionIndex[node.id] = this.distributionOrdering[level].length - 1;\n      }\n    }\n  }]);\n  return HierarchicalStatus;\n}();\n\n/**\n * The Layout Engine\n */\n\n\nvar LayoutEngine = function () {\n  /**\n   * @param {Object} body\n   */\n  function LayoutEngine(body) {\n    (0, _classCallCheck3['default'])(this, LayoutEngine);\n\n    this.body = body;\n\n    this.initialRandomSeed = Math.round(Math.random() * 1000000);\n    this.randomSeed = this.initialRandomSeed;\n    this.setPhysics = false;\n    this.options = {};\n    this.optionsBackup = { physics: {} };\n\n    this.defaultOptions = {\n      randomSeed: undefined,\n      improvedLayout: true,\n      hierarchical: {\n        enabled: false,\n        levelSeparation: 150,\n        nodeSpacing: 100,\n        treeSpacing: 200,\n        blockShifting: true,\n        edgeMinimization: true,\n        parentCentralization: true,\n        direction: 'UD', // UD, DU, LR, RL\n        sortMethod: 'hubsize' // hubsize, directed\n      }\n    };\n    util.extend(this.options, this.defaultOptions);\n    this.bindEventListeners();\n  }\n\n  /**\n   * Binds event listeners\n   */\n\n\n  (0, _createClass3['default'])(LayoutEngine, [{\n    key: 'bindEventListeners',\n    value: function bindEventListeners() {\n      var _this2 = this;\n\n      this.body.emitter.on('_dataChanged', function () {\n        _this2.setupHierarchicalLayout();\n      });\n      this.body.emitter.on('_dataLoaded', function () {\n        _this2.layoutNetwork();\n      });\n      this.body.emitter.on('_resetHierarchicalLayout', function () {\n        _this2.setupHierarchicalLayout();\n      });\n      this.body.emitter.on('_adjustEdgesForHierarchicalLayout', function () {\n        if (_this2.options.hierarchical.enabled !== true) {\n          return;\n        }\n        // get the type of static smooth curve in case it is required\n        var type = _this2.direction.curveType();\n\n        // force all edges into static smooth curves.\n        _this2.body.emitter.emit('_forceDisableDynamicCurves', type, false);\n      });\n    }\n\n    /**\n     *\n     * @param {Object} options\n     * @param {Object} allOptions\n     * @returns {Object}\n     */\n\n  }, {\n    key: 'setOptions',\n    value: function setOptions(options, allOptions) {\n      if (options !== undefined) {\n        var hierarchical = this.options.hierarchical;\n        var prevHierarchicalState = hierarchical.enabled;\n        util.selectiveDeepExtend(['randomSeed', 'improvedLayout'], this.options, options);\n        util.mergeOptions(this.options, options, 'hierarchical');\n        if (options.randomSeed !== undefined) {\n          this.initialRandomSeed = options.randomSeed;\n        }\n\n        if (hierarchical.enabled === true) {\n          if (prevHierarchicalState === true) {\n            // refresh the overridden options for nodes and edges.\n            this.body.emitter.emit('refresh', true);\n          }\n\n          // make sure the level separation is the right way up\n          if (hierarchical.direction === 'RL' || hierarchical.direction === 'DU') {\n            if (hierarchical.levelSeparation > 0) {\n              hierarchical.levelSeparation *= -1;\n            }\n          } else {\n            if (hierarchical.levelSeparation < 0) {\n              hierarchical.levelSeparation *= -1;\n            }\n          }\n\n          this.setDirectionStrategy();\n\n          this.body.emitter.emit('_resetHierarchicalLayout');\n          // because the hierarchical system needs it's own physics and smooth curve settings,\n          // we adapt the other options if needed.\n          return this.adaptAllOptionsForHierarchicalLayout(allOptions);\n        } else {\n          if (prevHierarchicalState === true) {\n            // refresh the overridden options for nodes and edges.\n            this.body.emitter.emit('refresh');\n            return util.deepExtend(allOptions, this.optionsBackup);\n          }\n        }\n      }\n      return allOptions;\n    }\n\n    /**\n     *\n     * @param {Object} allOptions\n     * @returns {Object}\n     */\n\n  }, {\n    key: 'adaptAllOptionsForHierarchicalLayout',\n    value: function adaptAllOptionsForHierarchicalLayout(allOptions) {\n      if (this.options.hierarchical.enabled === true) {\n        var backupPhysics = this.optionsBackup.physics;\n\n        // set the physics\n        if (allOptions.physics === undefined || allOptions.physics === true) {\n          allOptions.physics = {\n            enabled: backupPhysics.enabled === undefined ? true : backupPhysics.enabled,\n            solver: 'hierarchicalRepulsion'\n          };\n          backupPhysics.enabled = backupPhysics.enabled === undefined ? true : backupPhysics.enabled;\n          backupPhysics.solver = backupPhysics.solver || 'barnesHut';\n        } else if ((0, _typeof3['default'])(allOptions.physics) === 'object') {\n          backupPhysics.enabled = allOptions.physics.enabled === undefined ? true : allOptions.physics.enabled;\n          backupPhysics.solver = allOptions.physics.solver || 'barnesHut';\n          allOptions.physics.solver = 'hierarchicalRepulsion';\n        } else if (allOptions.physics !== false) {\n          backupPhysics.solver = 'barnesHut';\n          allOptions.physics = { solver: 'hierarchicalRepulsion' };\n        }\n\n        // get the type of static smooth curve in case it is required\n        var type = this.direction.curveType();\n\n        // disable smooth curves if nothing is defined. If smooth curves have been turned on,\n        // turn them into static smooth curves.\n        if (allOptions.edges === undefined) {\n          this.optionsBackup.edges = {\n            smooth: { enabled: true, type: 'dynamic' }\n          };\n          allOptions.edges = { smooth: false };\n        } else if (allOptions.edges.smooth === undefined) {\n          this.optionsBackup.edges = {\n            smooth: { enabled: true, type: 'dynamic' }\n          };\n          allOptions.edges.smooth = false;\n        } else {\n          if (typeof allOptions.edges.smooth === 'boolean') {\n            this.optionsBackup.edges = { smooth: allOptions.edges.smooth };\n            allOptions.edges.smooth = {\n              enabled: allOptions.edges.smooth,\n              type: type\n            };\n          } else {\n            var smooth = allOptions.edges.smooth;\n\n            // allow custom types except for dynamic\n            if (smooth.type !== undefined && smooth.type !== 'dynamic') {\n              type = smooth.type;\n            }\n\n            // TODO: this is options merging; see if the standard routines can be used here.\n            this.optionsBackup.edges = {\n              smooth: smooth.enabled === undefined ? true : smooth.enabled,\n              type: smooth.type === undefined ? 'dynamic' : smooth.type,\n              roundness: smooth.roundness === undefined ? 0.5 : smooth.roundness,\n              forceDirection: smooth.forceDirection === undefined ? false : smooth.forceDirection\n\n              // NOTE: Copying an object to self; this is basically setting defaults for undefined variables\n            };allOptions.edges.smooth = {\n              enabled: smooth.enabled === undefined ? true : smooth.enabled,\n              type: type,\n              roundness: smooth.roundness === undefined ? 0.5 : smooth.roundness,\n              forceDirection: smooth.forceDirection === undefined ? false : smooth.forceDirection\n            };\n          }\n        }\n\n        // Force all edges into static smooth curves.\n        // Only applies to edges that do not use the global options for smooth.\n        this.body.emitter.emit('_forceDisableDynamicCurves', type);\n      }\n\n      return allOptions;\n    }\n\n    /**\n     *\n     * @returns {number}\n     */\n\n  }, {\n    key: 'seededRandom',\n    value: function seededRandom() {\n      var x = Math.sin(this.randomSeed++) * 10000;\n      return x - Math.floor(x);\n    }\n\n    /**\n     *\n     * @param {Array.<Node>} nodesArray\n     */\n\n  }, {\n    key: 'positionInitially',\n    value: function positionInitially(nodesArray) {\n      if (this.options.hierarchical.enabled !== true) {\n        this.randomSeed = this.initialRandomSeed;\n        var radius = nodesArray.length + 50;\n        for (var i = 0; i < nodesArray.length; i++) {\n          var node = nodesArray[i];\n          var angle = 2 * Math.PI * this.seededRandom();\n          if (node.x === undefined) {\n            node.x = radius * Math.cos(angle);\n          }\n          if (node.y === undefined) {\n            node.y = radius * Math.sin(angle);\n          }\n        }\n      }\n    }\n\n    /**\n     * Use Kamada Kawai to position nodes. This is quite a heavy algorithm so if there are a lot of nodes we\n     * cluster them first to reduce the amount.\n     */\n\n  }, {\n    key: 'layoutNetwork',\n    value: function layoutNetwork() {\n      if (this.options.hierarchical.enabled !== true && this.options.improvedLayout === true) {\n        var indices = this.body.nodeIndices;\n\n        // first check if we should Kamada Kawai to layout. The threshold is if less than half of the visible\n        // nodes have predefined positions we use this.\n        var positionDefined = 0;\n        for (var i = 0; i < indices.length; i++) {\n          var node = this.body.nodes[indices[i]];\n          if (node.predefinedPosition === true) {\n            positionDefined += 1;\n          }\n        }\n\n        // if less than half of the nodes have a predefined position we continue\n        if (positionDefined < 0.5 * indices.length) {\n          var MAX_LEVELS = 10;\n          var level = 0;\n          var clusterThreshold = 150; // TODO add this to options\n\n          //\n          // Define the options for the hidden cluster nodes\n          // These options don't propagate outside the clustering phase.\n          //\n          // Some options are explicitly disabled, because they may be set in group or default node options.\n          // The clusters are never displayed, so most explicit settings here serve as performance optimizations.\n          //\n          // The explicit setting of 'shape' is to avoid `shape: 'image'`; images are not passed to the hidden\n          // cluster nodes, leading to an exception on creation.\n          //\n          // All settings here are performance related, except when noted otherwise.\n          //\n          var clusterOptions = {\n            clusterNodeProperties: {\n              shape: 'ellipse', // Bugfix: avoid type 'image', no images supplied\n              label: '', // avoid label handling\n              group: '', // avoid group handling\n              font: { multi: false // avoid font propagation\n              } },\n            clusterEdgeProperties: {\n              label: '', // avoid label handling\n              font: { multi: false }, // avoid font propagation\n              smooth: {\n                enabled: false // avoid drawing penalty for complex edges\n              }\n            }\n\n            // if there are a lot of nodes, we cluster before we run the algorithm.\n            // NOTE: this part fails to find clusters for large scale-free networks, which should\n            //       be easily clusterable.\n            // TODO: examine why this is so\n          };if (indices.length > clusterThreshold) {\n            var startLength = indices.length;\n            while (indices.length > clusterThreshold && level <= MAX_LEVELS) {\n              //console.time(\"clustering\")\n              level += 1;\n              var before = indices.length;\n              // if there are many nodes we do a hubsize cluster\n              if (level % 3 === 0) {\n                this.body.modules.clustering.clusterBridges(clusterOptions);\n              } else {\n                this.body.modules.clustering.clusterOutliers(clusterOptions);\n              }\n              var after = indices.length;\n              if (before == after && level % 3 !== 0) {\n                this._declusterAll();\n                this.body.emitter.emit('_layoutFailed');\n                console.info('This network could not be positioned by this version of the improved layout algorithm.' + ' Please disable improvedLayout for better performance.');\n                return;\n              }\n              //console.timeEnd(\"clustering\")\n              //console.log(before,level,after);\n            }\n            // increase the size of the edges\n            this.body.modules.kamadaKawai.setOptions({\n              springLength: Math.max(150, 2 * startLength)\n            });\n          }\n          if (level > MAX_LEVELS) {\n            console.info(\"The clustering didn't succeed within the amount of interations allowed,\" + ' progressing with partial result.');\n          }\n\n          // position the system for these nodes and edges\n          this.body.modules.kamadaKawai.solve(indices, this.body.edgeIndices, true);\n\n          // shift to center point\n          this._shiftToCenter();\n\n          // perturb the nodes a little bit to force the physics to kick in\n          var offset = 70;\n          for (var _i = 0; _i < indices.length; _i++) {\n            // Only perturb the nodes that aren't fixed\n            var _node = this.body.nodes[indices[_i]];\n            if (_node.predefinedPosition === false) {\n              _node.x += (0.5 - this.seededRandom()) * offset;\n              _node.y += (0.5 - this.seededRandom()) * offset;\n            }\n          }\n\n          // uncluster all clusters\n          this._declusterAll();\n\n          // reposition all bezier nodes.\n          this.body.emitter.emit('_repositionBezierNodes');\n        }\n      }\n    }\n\n    /**\n     * Move all the nodes towards to the center so gravitational pull wil not move the nodes away from view\n     * @private\n     */\n\n  }, {\n    key: '_shiftToCenter',\n    value: function _shiftToCenter() {\n      var range = NetworkUtil.getRangeCore(this.body.nodes, this.body.nodeIndices);\n      var center = NetworkUtil.findCenter(range);\n      for (var i = 0; i < this.body.nodeIndices.length; i++) {\n        var node = this.body.nodes[this.body.nodeIndices[i]];\n        node.x -= center.x;\n        node.y -= center.y;\n      }\n    }\n\n    /**\n     * Expands all clusters\n     * @private\n     */\n\n  }, {\n    key: '_declusterAll',\n    value: function _declusterAll() {\n      var clustersPresent = true;\n      while (clustersPresent === true) {\n        clustersPresent = false;\n        for (var i = 0; i < this.body.nodeIndices.length; i++) {\n          if (this.body.nodes[this.body.nodeIndices[i]].isCluster === true) {\n            clustersPresent = true;\n            this.body.modules.clustering.openCluster(this.body.nodeIndices[i], {}, false);\n          }\n        }\n        if (clustersPresent === true) {\n          this.body.emitter.emit('_dataChanged');\n        }\n      }\n    }\n\n    /**\n     *\n     * @returns {number|*}\n     */\n\n  }, {\n    key: 'getSeed',\n    value: function getSeed() {\n      return this.initialRandomSeed;\n    }\n\n    /**\n     * This is the main function to layout the nodes in a hierarchical way.\n     * It checks if the node details are supplied correctly\n     *\n     * @private\n     */\n\n  }, {\n    key: 'setupHierarchicalLayout',\n    value: function setupHierarchicalLayout() {\n      if (this.options.hierarchical.enabled === true && this.body.nodeIndices.length > 0) {\n        // get the size of the largest hubs and check if the user has defined a level for a node.\n        var node = void 0,\n            nodeId = void 0;\n        var definedLevel = false;\n        var undefinedLevel = false;\n        this.lastNodeOnLevel = {};\n        this.hierarchical = new HierarchicalStatus();\n\n        for (nodeId in this.body.nodes) {\n          if (this.body.nodes.hasOwnProperty(nodeId)) {\n            node = this.body.nodes[nodeId];\n            if (node.options.level !== undefined) {\n              definedLevel = true;\n              this.hierarchical.levels[nodeId] = node.options.level;\n            } else {\n              undefinedLevel = true;\n            }\n          }\n        }\n\n        // if the user defined some levels but not all, alert and run without hierarchical layout\n        if (undefinedLevel === true && definedLevel === true) {\n          throw new Error('To use the hierarchical layout, nodes require either no predefined levels' + ' or levels have to be defined for all nodes.');\n        } else {\n          // define levels if undefined by the users. Based on hubsize.\n          if (undefinedLevel === true) {\n            var sortMethod = this.options.hierarchical.sortMethod;\n            if (sortMethod === 'hubsize') {\n              this._determineLevelsByHubsize();\n            } else if (sortMethod === 'directed') {\n              this._determineLevelsDirected();\n            } else if (sortMethod === 'custom') {\n              this._determineLevelsCustomCallback();\n            }\n          }\n\n          // fallback for cases where there are nodes but no edges\n          for (var _nodeId2 in this.body.nodes) {\n            if (this.body.nodes.hasOwnProperty(_nodeId2)) {\n              this.hierarchical.ensureLevel(_nodeId2);\n            }\n          }\n          // check the distribution of the nodes per level.\n          var distribution = this._getDistribution();\n\n          // get the parent children relations.\n          this._generateMap();\n\n          // place the nodes on the canvas.\n          this._placeNodesByHierarchy(distribution);\n\n          // condense the whitespace.\n          this._condenseHierarchy();\n\n          // shift to center so gravity does not have to do much\n          this._shiftToCenter();\n        }\n      }\n    }\n\n    /**\n     * @private\n     */\n\n  }, {\n    key: '_condenseHierarchy',\n    value: function _condenseHierarchy() {\n      var _this3 = this;\n\n      // Global var in this scope to define when the movement has stopped.\n      var stillShifting = false;\n      var branches = {};\n      // first we have some methods to help shifting trees around.\n      // the main method to shift the trees\n      var shiftTrees = function shiftTrees() {\n        var treeSizes = getTreeSizes();\n        var shiftBy = 0;\n        for (var i = 0; i < treeSizes.length - 1; i++) {\n          var diff = treeSizes[i].max - treeSizes[i + 1].min;\n          shiftBy += diff + _this3.options.hierarchical.treeSpacing;\n          shiftTree(i + 1, shiftBy);\n        }\n      };\n\n      // shift a single tree by an offset\n      var shiftTree = function shiftTree(index, offset) {\n        var trees = _this3.hierarchical.trees;\n\n        for (var nodeId in trees) {\n          if (trees.hasOwnProperty(nodeId)) {\n            if (trees[nodeId] === index) {\n              _this3.direction.shift(nodeId, offset);\n            }\n          }\n        }\n      };\n\n      // get the width of all trees\n      var getTreeSizes = function getTreeSizes() {\n        var treeWidths = [];\n        for (var i = 0; i < _this3.hierarchical.numTrees(); i++) {\n          treeWidths.push(_this3.direction.getTreeSize(i));\n        }\n        return treeWidths;\n      };\n\n      // get a map of all nodes in this branch\n      var getBranchNodes = function getBranchNodes(source, map) {\n        if (map[source.id]) {\n          return;\n        }\n        map[source.id] = true;\n        if (_this3.hierarchical.childrenReference[source.id]) {\n          var children = _this3.hierarchical.childrenReference[source.id];\n          if (children.length > 0) {\n            for (var i = 0; i < children.length; i++) {\n              getBranchNodes(_this3.body.nodes[children[i]], map);\n            }\n          }\n        }\n      };\n\n      // get a min max width as well as the maximum movement space it has on either sides\n      // we use min max terminology because width and height can interchange depending on the direction of the layout\n      var getBranchBoundary = function getBranchBoundary(branchMap) {\n        var maxLevel = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1e9;\n\n        var minSpace = 1e9;\n        var maxSpace = 1e9;\n        var min = 1e9;\n        var max = -1e9;\n        for (var branchNode in branchMap) {\n          if (branchMap.hasOwnProperty(branchNode)) {\n            var node = _this3.body.nodes[branchNode];\n            var level = _this3.hierarchical.levels[node.id];\n            var position = _this3.direction.getPosition(node);\n\n            // get the space around the node.\n\n            var _getSpaceAroundNode2 = _this3._getSpaceAroundNode(node, branchMap),\n                _getSpaceAroundNode3 = (0, _slicedToArray3['default'])(_getSpaceAroundNode2, 2),\n                minSpaceNode = _getSpaceAroundNode3[0],\n                maxSpaceNode = _getSpaceAroundNode3[1];\n\n            minSpace = Math.min(minSpaceNode, minSpace);\n            maxSpace = Math.min(maxSpaceNode, maxSpace);\n\n            // the width is only relevant for the levels two nodes have in common. This is why we filter on this.\n            if (level <= maxLevel) {\n              min = Math.min(position, min);\n              max = Math.max(position, max);\n            }\n          }\n        }\n\n        return [min, max, minSpace, maxSpace];\n      };\n\n      // check what the maximum level is these nodes have in common.\n      var getCollisionLevel = function getCollisionLevel(node1, node2) {\n        var maxLevel1 = _this3.hierarchical.getMaxLevel(node1.id);\n        var maxLevel2 = _this3.hierarchical.getMaxLevel(node2.id);\n        return Math.min(maxLevel1, maxLevel2);\n      };\n\n      /**\n       * Condense elements. These can be nodes or branches depending on the callback.\n       *\n       * @param {function} callback\n       * @param {Array.<number>} levels\n       * @param {*} centerParents\n       */\n      var shiftElementsCloser = function shiftElementsCloser(callback, levels, centerParents) {\n        var hier = _this3.hierarchical;\n\n        for (var i = 0; i < levels.length; i++) {\n          var level = levels[i];\n          var levelNodes = hier.distributionOrdering[level];\n          if (levelNodes.length > 1) {\n            for (var j = 0; j < levelNodes.length - 1; j++) {\n              var node1 = levelNodes[j];\n              var node2 = levelNodes[j + 1];\n\n              // NOTE: logic maintained as it was; if nodes have same ancestor,\n              //       then of course they are in the same sub-network.\n              if (hier.hasSameParent(node1, node2) && hier.inSameSubNetwork(node1, node2)) {\n                callback(node1, node2, centerParents);\n              }\n            }\n          }\n        }\n      };\n\n      // callback for shifting branches\n      var branchShiftCallback = function branchShiftCallback(node1, node2) {\n        var centerParent = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n        //window.CALLBACKS.push(() => {\n        var pos1 = _this3.direction.getPosition(node1);\n        var pos2 = _this3.direction.getPosition(node2);\n        var diffAbs = Math.abs(pos2 - pos1);\n        var nodeSpacing = _this3.options.hierarchical.nodeSpacing;\n        //console.log(\"NOW CHECKING:\", node1.id, node2.id, diffAbs);\n        if (diffAbs > nodeSpacing) {\n          var branchNodes1 = {};\n          var branchNodes2 = {};\n\n          getBranchNodes(node1, branchNodes1);\n          getBranchNodes(node2, branchNodes2);\n\n          // check the largest distance between the branches\n          var maxLevel = getCollisionLevel(node1, node2);\n          var branchNodeBoundary1 = getBranchBoundary(branchNodes1, maxLevel);\n          var branchNodeBoundary2 = getBranchBoundary(branchNodes2, maxLevel);\n          var max1 = branchNodeBoundary1[1];\n          var min2 = branchNodeBoundary2[0];\n          var minSpace2 = branchNodeBoundary2[2];\n\n          //console.log(node1.id, getBranchBoundary(branchNodes1, maxLevel), node2.id,\n          //            getBranchBoundary(branchNodes2, maxLevel), maxLevel);\n          var diffBranch = Math.abs(max1 - min2);\n          if (diffBranch > nodeSpacing) {\n            var offset = max1 - min2 + nodeSpacing;\n            if (offset < -minSpace2 + nodeSpacing) {\n              offset = -minSpace2 + nodeSpacing;\n              //console.log(\"RESETTING OFFSET\", max1 - min2 + this.options.hierarchical.nodeSpacing, -minSpace2, offset);\n            }\n            if (offset < 0) {\n              //console.log(\"SHIFTING\", node2.id, offset);\n              _this3._shiftBlock(node2.id, offset);\n              stillShifting = true;\n\n              if (centerParent === true) _this3._centerParent(node2);\n            }\n          }\n        }\n        //this.body.emitter.emit(\"_redraw\");})\n      };\n\n      var minimizeEdgeLength = function minimizeEdgeLength(iterations, node) {\n        //window.CALLBACKS.push(() => {\n        //  console.log(\"ts\",node.id);\n        var nodeId = node.id;\n        var allEdges = node.edges;\n        var nodeLevel = _this3.hierarchical.levels[node.id];\n\n        // gather constants\n        var C2 = _this3.options.hierarchical.levelSeparation * _this3.options.hierarchical.levelSeparation;\n        var referenceNodes = {};\n        var aboveEdges = [];\n        for (var i = 0; i < allEdges.length; i++) {\n          var edge = allEdges[i];\n          if (edge.toId != edge.fromId) {\n            var otherNode = edge.toId == nodeId ? edge.from : edge.to;\n            referenceNodes[allEdges[i].id] = otherNode;\n            if (_this3.hierarchical.levels[otherNode.id] < nodeLevel) {\n              aboveEdges.push(edge);\n            }\n          }\n        }\n\n        // differentiated sum of lengths based on only moving one node over one axis\n        var getFx = function getFx(point, edges) {\n          var sum = 0;\n          for (var _i2 = 0; _i2 < edges.length; _i2++) {\n            if (referenceNodes[edges[_i2].id] !== undefined) {\n              var a = _this3.direction.getPosition(referenceNodes[edges[_i2].id]) - point;\n              sum += a / Math.sqrt(a * a + C2);\n            }\n          }\n          return sum;\n        };\n\n        // doubly differentiated sum of lengths based on only moving one node over one axis\n        var getDFx = function getDFx(point, edges) {\n          var sum = 0;\n          for (var _i3 = 0; _i3 < edges.length; _i3++) {\n            if (referenceNodes[edges[_i3].id] !== undefined) {\n              var a = _this3.direction.getPosition(referenceNodes[edges[_i3].id]) - point;\n              sum -= C2 * Math.pow(a * a + C2, -1.5);\n            }\n          }\n          return sum;\n        };\n\n        var getGuess = function getGuess(iterations, edges) {\n          var guess = _this3.direction.getPosition(node);\n          // Newton's method for optimization\n          var guessMap = {};\n          for (var _i4 = 0; _i4 < iterations; _i4++) {\n            var fx = getFx(guess, edges);\n            var dfx = getDFx(guess, edges);\n\n            // we limit the movement to avoid instability.\n            var limit = 40;\n            var ratio = Math.max(-limit, Math.min(limit, Math.round(fx / dfx)));\n            guess = guess - ratio;\n            // reduce duplicates\n            if (guessMap[guess] !== undefined) {\n              break;\n            }\n            guessMap[guess] = _i4;\n          }\n          return guess;\n        };\n\n        var moveBranch = function moveBranch(guess) {\n          // position node if there is space\n          var nodePosition = _this3.direction.getPosition(node);\n\n          // check movable area of the branch\n          if (branches[node.id] === undefined) {\n            var branchNodes = {};\n            getBranchNodes(node, branchNodes);\n            branches[node.id] = branchNodes;\n          }\n          var branchBoundary = getBranchBoundary(branches[node.id]);\n          var minSpaceBranch = branchBoundary[2];\n          var maxSpaceBranch = branchBoundary[3];\n\n          var diff = guess - nodePosition;\n\n          // check if we are allowed to move the node:\n          var branchOffset = 0;\n          if (diff > 0) {\n            branchOffset = Math.min(diff, maxSpaceBranch - _this3.options.hierarchical.nodeSpacing);\n          } else if (diff < 0) {\n            branchOffset = -Math.min(-diff, minSpaceBranch - _this3.options.hierarchical.nodeSpacing);\n          }\n\n          if (branchOffset != 0) {\n            //console.log(\"moving branch:\",branchOffset, maxSpaceBranch, minSpaceBranch)\n            _this3._shiftBlock(node.id, branchOffset);\n            //this.body.emitter.emit(\"_redraw\");\n            stillShifting = true;\n          }\n        };\n\n        var moveNode = function moveNode(guess) {\n          var nodePosition = _this3.direction.getPosition(node);\n\n          // position node if there is space\n\n          var _getSpaceAroundNode4 = _this3._getSpaceAroundNode(node),\n              _getSpaceAroundNode5 = (0, _slicedToArray3['default'])(_getSpaceAroundNode4, 2),\n              minSpace = _getSpaceAroundNode5[0],\n              maxSpace = _getSpaceAroundNode5[1];\n\n          var diff = guess - nodePosition;\n          // check if we are allowed to move the node:\n          var newPosition = nodePosition;\n          if (diff > 0) {\n            newPosition = Math.min(nodePosition + (maxSpace - _this3.options.hierarchical.nodeSpacing), guess);\n          } else if (diff < 0) {\n            newPosition = Math.max(nodePosition - (minSpace - _this3.options.hierarchical.nodeSpacing), guess);\n          }\n\n          if (newPosition !== nodePosition) {\n            //console.log(\"moving Node:\",diff, minSpace, maxSpace);\n            _this3.direction.setPosition(node, newPosition);\n            //this.body.emitter.emit(\"_redraw\");\n            stillShifting = true;\n          }\n        };\n\n        var guess = getGuess(iterations, aboveEdges);\n        moveBranch(guess);\n        guess = getGuess(iterations, allEdges);\n        moveNode(guess);\n        //})\n      };\n\n      // method to remove whitespace between branches. Because we do bottom up, we can center the parents.\n      var minimizeEdgeLengthBottomUp = function minimizeEdgeLengthBottomUp(iterations) {\n        var levels = _this3.hierarchical.getLevels();\n        levels = levels.reverse();\n        for (var i = 0; i < iterations; i++) {\n          stillShifting = false;\n          for (var j = 0; j < levels.length; j++) {\n            var level = levels[j];\n            var levelNodes = _this3.hierarchical.distributionOrdering[level];\n            for (var k = 0; k < levelNodes.length; k++) {\n              minimizeEdgeLength(1000, levelNodes[k]);\n            }\n          }\n          if (stillShifting !== true) {\n            //console.log(\"FINISHED minimizeEdgeLengthBottomUp IN \" + i);\n            break;\n          }\n        }\n      };\n\n      // method to remove whitespace between branches. Because we do bottom up, we can center the parents.\n      var shiftBranchesCloserBottomUp = function shiftBranchesCloserBottomUp(iterations) {\n        var levels = _this3.hierarchical.getLevels();\n        levels = levels.reverse();\n        for (var i = 0; i < iterations; i++) {\n          stillShifting = false;\n          shiftElementsCloser(branchShiftCallback, levels, true);\n          if (stillShifting !== true) {\n            //console.log(\"FINISHED shiftBranchesCloserBottomUp IN \" + (i+1));\n            break;\n          }\n        }\n      };\n\n      // center all parents\n      var centerAllParents = function centerAllParents() {\n        for (var nodeId in _this3.body.nodes) {\n          if (_this3.body.nodes.hasOwnProperty(nodeId)) _this3._centerParent(_this3.body.nodes[nodeId]);\n        }\n      };\n\n      // center all parents\n      var centerAllParentsBottomUp = function centerAllParentsBottomUp() {\n        var levels = _this3.hierarchical.getLevels();\n        levels = levels.reverse();\n        for (var i = 0; i < levels.length; i++) {\n          var level = levels[i];\n          var levelNodes = _this3.hierarchical.distributionOrdering[level];\n          for (var j = 0; j < levelNodes.length; j++) {\n            _this3._centerParent(levelNodes[j]);\n          }\n        }\n      };\n\n      // the actual work is done here.\n      if (this.options.hierarchical.blockShifting === true) {\n        shiftBranchesCloserBottomUp(5);\n        centerAllParents();\n      }\n\n      // minimize edge length\n      if (this.options.hierarchical.edgeMinimization === true) {\n        minimizeEdgeLengthBottomUp(20);\n      }\n\n      if (this.options.hierarchical.parentCentralization === true) {\n        centerAllParentsBottomUp();\n      }\n\n      shiftTrees();\n    }\n\n    /**\n     * This gives the space around the node. IF a map is supplied, it will only check against nodes NOT in the map.\n     * This is used to only get the distances to nodes outside of a branch.\n     * @param {Node} node\n     * @param {{Node.id: vis.Node}} map\n     * @returns {number[]}\n     * @private\n     */\n\n  }, {\n    key: '_getSpaceAroundNode',\n    value: function _getSpaceAroundNode(node, map) {\n      var useMap = true;\n      if (map === undefined) {\n        useMap = false;\n      }\n      var level = this.hierarchical.levels[node.id];\n      if (level !== undefined) {\n        var index = this.hierarchical.distributionIndex[node.id];\n        var position = this.direction.getPosition(node);\n        var ordering = this.hierarchical.distributionOrdering[level];\n        var minSpace = 1e9;\n        var maxSpace = 1e9;\n        if (index !== 0) {\n          var prevNode = ordering[index - 1];\n          if (useMap === true && map[prevNode.id] === undefined || useMap === false) {\n            var prevPos = this.direction.getPosition(prevNode);\n            minSpace = position - prevPos;\n          }\n        }\n\n        if (index != ordering.length - 1) {\n          var nextNode = ordering[index + 1];\n          if (useMap === true && map[nextNode.id] === undefined || useMap === false) {\n            var nextPos = this.direction.getPosition(nextNode);\n            maxSpace = Math.min(maxSpace, nextPos - position);\n          }\n        }\n\n        return [minSpace, maxSpace];\n      } else {\n        return [0, 0];\n      }\n    }\n\n    /**\n     * We use this method to center a parent node and check if it does not cross other nodes when it does.\n     * @param {Node} node\n     * @private\n     */\n\n  }, {\n    key: '_centerParent',\n    value: function _centerParent(node) {\n      if (this.hierarchical.parentReference[node.id]) {\n        var parents = this.hierarchical.parentReference[node.id];\n        for (var i = 0; i < parents.length; i++) {\n          var parentId = parents[i];\n          var parentNode = this.body.nodes[parentId];\n          var children = this.hierarchical.childrenReference[parentId];\n\n          if (children !== undefined) {\n            // get the range of the children\n            var newPosition = this._getCenterPosition(children);\n\n            var position = this.direction.getPosition(parentNode);\n\n            var _getSpaceAroundNode6 = this._getSpaceAroundNode(parentNode),\n                _getSpaceAroundNode7 = (0, _slicedToArray3['default'])(_getSpaceAroundNode6, 2),\n                minSpace = _getSpaceAroundNode7[0],\n                maxSpace = _getSpaceAroundNode7[1];\n\n            var diff = position - newPosition;\n            if (diff < 0 && Math.abs(diff) < maxSpace - this.options.hierarchical.nodeSpacing || diff > 0 && Math.abs(diff) < minSpace - this.options.hierarchical.nodeSpacing) {\n              this.direction.setPosition(parentNode, newPosition);\n            }\n          }\n        }\n      }\n    }\n\n    /**\n     * This function places the nodes on the canvas based on the hierarchial distribution.\n     *\n     * @param {Object} distribution | obtained by the function this._getDistribution()\n     * @private\n     */\n\n  }, {\n    key: '_placeNodesByHierarchy',\n    value: function _placeNodesByHierarchy(distribution) {\n      this.positionedNodes = {};\n      // start placing all the level 0 nodes first. Then recursively position their branches.\n      for (var level in distribution) {\n        if (distribution.hasOwnProperty(level)) {\n          // sort nodes in level by position:\n          var nodeArray = (0, _keys2['default'])(distribution[level]);\n          nodeArray = this._indexArrayToNodes(nodeArray);\n          this.direction.sort(nodeArray);\n          var handledNodeCount = 0;\n\n          for (var i = 0; i < nodeArray.length; i++) {\n            var node = nodeArray[i];\n            if (this.positionedNodes[node.id] === undefined) {\n              var spacing = this.options.hierarchical.nodeSpacing;\n              var pos = spacing * handledNodeCount;\n              // We get the X or Y values we need and store them in pos and previousPos.\n              // The get and set make sure we get X or Y\n              if (handledNodeCount > 0) {\n                pos = this.direction.getPosition(nodeArray[i - 1]) + spacing;\n              }\n              this.direction.setPosition(node, pos, level);\n              this._validatePositionAndContinue(node, level, pos);\n\n              handledNodeCount++;\n            }\n          }\n        }\n      }\n    }\n\n    /**\n     * This is a recursively called function to enumerate the branches from the largest hubs and place the nodes\n     * on a X position that ensures there will be no overlap.\n     *\n     * @param {Node.id} parentId\n     * @param {number} parentLevel\n     * @private\n     */\n\n  }, {\n    key: '_placeBranchNodes',\n    value: function _placeBranchNodes(parentId, parentLevel) {\n      var childRef = this.hierarchical.childrenReference[parentId];\n\n      // if this is not a parent, cancel the placing. This can happen with multiple parents to one child.\n      if (childRef === undefined) {\n        return;\n      }\n\n      // get a list of childNodes\n      var childNodes = [];\n      for (var i = 0; i < childRef.length; i++) {\n        childNodes.push(this.body.nodes[childRef[i]]);\n      }\n\n      // use the positions to order the nodes.\n      this.direction.sort(childNodes);\n\n      // position the childNodes\n      for (var _i5 = 0; _i5 < childNodes.length; _i5++) {\n        var childNode = childNodes[_i5];\n        var childNodeLevel = this.hierarchical.levels[childNode.id];\n        // check if the child node is below the parent node and if it has already been positioned.\n        if (childNodeLevel > parentLevel && this.positionedNodes[childNode.id] === undefined) {\n          // get the amount of space required for this node. If parent the width is based on the amount of children.\n          var spacing = this.options.hierarchical.nodeSpacing;\n          var pos = void 0;\n\n          // we get the X or Y values we need and store them in pos and previousPos.\n          // The get and set make sure we get X or Y\n          if (_i5 === 0) {\n            pos = this.direction.getPosition(this.body.nodes[parentId]);\n          } else {\n            pos = this.direction.getPosition(childNodes[_i5 - 1]) + spacing;\n          }\n          this.direction.setPosition(childNode, pos, childNodeLevel);\n          this._validatePositionAndContinue(childNode, childNodeLevel, pos);\n        } else {\n          return;\n        }\n      }\n\n      // center the parent nodes.\n      var center = this._getCenterPosition(childNodes);\n      this.direction.setPosition(this.body.nodes[parentId], center, parentLevel);\n    }\n\n    /**\n     * This method checks for overlap and if required shifts the branch. It also keeps records of positioned nodes.\n     * Finally it will call _placeBranchNodes to place the branch nodes.\n     * @param {Node} node\n     * @param {number} level\n     * @param {number} pos\n     * @private\n     */\n\n  }, {\n    key: '_validatePositionAndContinue',\n    value: function _validatePositionAndContinue(node, level, pos) {\n      // This method only works for formal trees and formal forests\n      // Early exit if this is not the case\n      if (!this.hierarchical.isTree) return;\n\n      // if overlap has been detected, we shift the branch\n      if (this.lastNodeOnLevel[level] !== undefined) {\n        var previousPos = this.direction.getPosition(this.body.nodes[this.lastNodeOnLevel[level]]);\n        if (pos - previousPos < this.options.hierarchical.nodeSpacing) {\n          var diff = previousPos + this.options.hierarchical.nodeSpacing - pos;\n          var sharedParent = this._findCommonParent(this.lastNodeOnLevel[level], node.id);\n          this._shiftBlock(sharedParent.withChild, diff);\n        }\n      }\n\n      this.lastNodeOnLevel[level] = node.id; // store change in position.\n      this.positionedNodes[node.id] = true;\n      this._placeBranchNodes(node.id, level);\n    }\n\n    /**\n     * Receives an array with node indices and returns an array with the actual node references.\n     * Used for sorting based on node properties.\n     * @param {Array.<Node.id>} idArray\n     * @returns {Array.<Node>}\n     */\n\n  }, {\n    key: '_indexArrayToNodes',\n    value: function _indexArrayToNodes(idArray) {\n      var array = [];\n      for (var i = 0; i < idArray.length; i++) {\n        array.push(this.body.nodes[idArray[i]]);\n      }\n      return array;\n    }\n\n    /**\n     * This function get the distribution of levels based on hubsize\n     *\n     * @returns {Object}\n     * @private\n     */\n\n  }, {\n    key: '_getDistribution',\n    value: function _getDistribution() {\n      var distribution = {};\n      var nodeId = void 0,\n          node = void 0;\n\n      // we fix Y because the hierarchy is vertical,\n      // we fix X so we do not give a node an x position for a second time.\n      // the fix of X is removed after the x value has been set.\n      for (nodeId in this.body.nodes) {\n        if (this.body.nodes.hasOwnProperty(nodeId)) {\n          node = this.body.nodes[nodeId];\n          var level = this.hierarchical.levels[nodeId] === undefined ? 0 : this.hierarchical.levels[nodeId];\n          this.direction.fix(node, level);\n          if (distribution[level] === undefined) {\n            distribution[level] = {};\n          }\n          distribution[level][nodeId] = node;\n        }\n      }\n      return distribution;\n    }\n\n    /**\n     * Return the active (i.e. visible) edges for this node\n     *\n     * @param {Node} node\n     * @returns {Array.<vis.Edge>} Array of edge instances\n     * @private\n     */\n\n  }, {\n    key: '_getActiveEdges',\n    value: function _getActiveEdges(node) {\n      var _this4 = this;\n\n      var result = [];\n\n      util.forEach(node.edges, function (edge) {\n        if (_this4.body.edgeIndices.indexOf(edge.id) !== -1) {\n          result.push(edge);\n        }\n      });\n\n      return result;\n    }\n\n    /**\n     * Get the hubsizes for all active nodes.\n     *\n     * @returns {number}\n     * @private\n     */\n\n  }, {\n    key: '_getHubSizes',\n    value: function _getHubSizes() {\n      var _this5 = this;\n\n      var hubSizes = {};\n      var nodeIds = this.body.nodeIndices;\n\n      util.forEach(nodeIds, function (nodeId) {\n        var node = _this5.body.nodes[nodeId];\n        var hubSize = _this5._getActiveEdges(node).length;\n        hubSizes[hubSize] = true;\n      });\n\n      // Make an array of the size sorted descending\n      var result = [];\n      util.forEach(hubSizes, function (size) {\n        result.push(Number(size));\n      });\n\n      TimSort.sort(result, function (a, b) {\n        return b - a;\n      });\n\n      return result;\n    }\n\n    /**\n     * this function allocates nodes in levels based on the recursive branching from the largest hubs.\n     *\n     * @private\n     */\n\n  }, {\n    key: '_determineLevelsByHubsize',\n    value: function _determineLevelsByHubsize() {\n      var _this6 = this;\n\n      var levelDownstream = function levelDownstream(nodeA, nodeB) {\n        _this6.hierarchical.levelDownstream(nodeA, nodeB);\n      };\n\n      var hubSizes = this._getHubSizes();\n\n      var _loop = function _loop(i) {\n        var hubSize = hubSizes[i];\n        if (hubSize === 0) return 'break';\n\n        util.forEach(_this6.body.nodeIndices, function (nodeId) {\n          var node = _this6.body.nodes[nodeId];\n\n          if (hubSize === _this6._getActiveEdges(node).length) {\n            _this6._crawlNetwork(levelDownstream, nodeId);\n          }\n        });\n      };\n\n      for (var i = 0; i < hubSizes.length; ++i) {\n        var _ret = _loop(i);\n\n        if (_ret === 'break') break;\n      }\n    }\n\n    /**\n     * TODO: release feature\n     * TODO: Determine if this feature is needed at all\n     *\n     * @private\n     */\n\n  }, {\n    key: '_determineLevelsCustomCallback',\n    value: function _determineLevelsCustomCallback() {\n      var _this7 = this;\n\n      var minLevel = 100000;\n\n      // TODO: this should come from options.\n      // eslint-disable-next-line no-unused-vars\n      var customCallback = function customCallback(nodeA, nodeB, edge) {};\n\n      // TODO: perhaps move to HierarchicalStatus.\n      //       But I currently don't see the point, this method is not used.\n      var levelByDirection = function levelByDirection(nodeA, nodeB, edge) {\n        var levelA = _this7.hierarchical.levels[nodeA.id];\n        // set initial level\n        if (levelA === undefined) {\n          levelA = _this7.hierarchical.levels[nodeA.id] = minLevel;\n        }\n\n        var diff = customCallback(NetworkUtil.cloneOptions(nodeA, 'node'), NetworkUtil.cloneOptions(nodeB, 'node'), NetworkUtil.cloneOptions(edge, 'edge'));\n\n        _this7.hierarchical.levels[nodeB.id] = levelA + diff;\n      };\n\n      this._crawlNetwork(levelByDirection);\n      this.hierarchical.setMinLevelToZero(this.body.nodes);\n    }\n\n    /**\n     * Allocate nodes in levels based on the direction of the edges.\n     *\n     * @private\n     */\n\n  }, {\n    key: '_determineLevelsDirected',\n    value: function _determineLevelsDirected() {\n      var _this8 = this;\n\n      var minLevel = 10000;\n\n      /**\n       * Check if there is an edge going the opposite direction for given edge\n       *\n       * @param {Edge} edge  edge to check\n       * @returns {boolean} true if there's another edge going into the opposite direction\n       */\n      var isBidirectional = function isBidirectional(edge) {\n        util.forEach(_this8.body.edges, function (otherEdge) {\n          if (otherEdge.toId === edge.fromId && otherEdge.fromId === edge.toId) {\n            return true;\n          }\n        });\n\n        return false;\n      };\n\n      var levelByDirection = function levelByDirection(nodeA, nodeB, edge) {\n        var levelA = _this8.hierarchical.levels[nodeA.id];\n        var levelB = _this8.hierarchical.levels[nodeB.id];\n\n        if (isBidirectional(edge) && levelA !== undefined && levelB !== undefined) {\n          // Don't redo the level determination if already done in this case.\n          return;\n        }\n\n        // set initial level\n        if (levelA === undefined) {\n          levelA = _this8.hierarchical.levels[nodeA.id] = minLevel;\n        }\n        if (edge.toId == nodeB.id) {\n          _this8.hierarchical.levels[nodeB.id] = levelA + 1;\n        } else {\n          _this8.hierarchical.levels[nodeB.id] = levelA - 1;\n        }\n      };\n\n      this._crawlNetwork(levelByDirection);\n      this.hierarchical.setMinLevelToZero(this.body.nodes);\n    }\n\n    /**\n     * Update the bookkeeping of parent and child.\n     * @private\n     */\n\n  }, {\n    key: '_generateMap',\n    value: function _generateMap() {\n      var _this9 = this;\n\n      var fillInRelations = function fillInRelations(parentNode, childNode) {\n        if (_this9.hierarchical.levels[childNode.id] > _this9.hierarchical.levels[parentNode.id]) {\n          _this9.hierarchical.addRelation(parentNode.id, childNode.id);\n        }\n      };\n\n      this._crawlNetwork(fillInRelations);\n      this.hierarchical.checkIfTree();\n    }\n\n    /**\n     * Crawl over the entire network and use a callback on each node couple that is connected to each other.\n     * @param {function} [callback=function(){}]          | will receive nodeA, nodeB and the connecting edge. A and B are distinct.\n     * @param {Node.id} startingNodeId\n     * @private\n     */\n\n  }, {\n    key: '_crawlNetwork',\n    value: function _crawlNetwork() {\n      var _this10 = this;\n\n      var callback = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : function () {};\n      var startingNodeId = arguments[1];\n\n      var progress = {};\n\n      var crawler = function crawler(node, tree) {\n        if (progress[node.id] === undefined) {\n          _this10.hierarchical.setTreeIndex(node, tree);\n\n          progress[node.id] = true;\n          var childNode = void 0;\n          var edges = _this10._getActiveEdges(node);\n          for (var i = 0; i < edges.length; i++) {\n            var edge = edges[i];\n            if (edge.connected === true) {\n              if (edge.toId == node.id) {\n                // Not '===' because id's can be string and numeric\n                childNode = edge.from;\n              } else {\n                childNode = edge.to;\n              }\n\n              if (node.id != childNode.id) {\n                // Not '!==' because id's can be string and numeric\n                callback(node, childNode, edge);\n                crawler(childNode, tree);\n              }\n            }\n          }\n        }\n      };\n\n      if (startingNodeId === undefined) {\n        // Crawl over all nodes\n        var treeIndex = 0; // Serves to pass a unique id for the current distinct tree\n\n        for (var i = 0; i < this.body.nodeIndices.length; i++) {\n          var nodeId = this.body.nodeIndices[i];\n\n          if (progress[nodeId] === undefined) {\n            var node = this.body.nodes[nodeId];\n            crawler(node, treeIndex);\n            treeIndex += 1;\n          }\n        }\n      } else {\n        // Crawl from the given starting node\n        var _node2 = this.body.nodes[startingNodeId];\n        if (_node2 === undefined) {\n          console.error('Node not found:', startingNodeId);\n          return;\n        }\n        crawler(_node2);\n      }\n    }\n\n    /**\n     * Shift a branch a certain distance\n     * @param {Node.id} parentId\n     * @param {number} diff\n     * @private\n     */\n\n  }, {\n    key: '_shiftBlock',\n    value: function _shiftBlock(parentId, diff) {\n      var _this11 = this;\n\n      var progress = {};\n      var shifter = function shifter(parentId) {\n        if (progress[parentId]) {\n          return;\n        }\n        progress[parentId] = true;\n        _this11.direction.shift(parentId, diff);\n\n        var childRef = _this11.hierarchical.childrenReference[parentId];\n        if (childRef !== undefined) {\n          for (var i = 0; i < childRef.length; i++) {\n            shifter(childRef[i]);\n          }\n        }\n      };\n      shifter(parentId);\n    }\n\n    /**\n     * Find a common parent between branches.\n     * @param {Node.id} childA\n     * @param {Node.id} childB\n     * @returns {{foundParent, withChild}}\n     * @private\n     */\n\n  }, {\n    key: '_findCommonParent',\n    value: function _findCommonParent(childA, childB) {\n      var _this12 = this;\n\n      var parents = {};\n      var iterateParents = function iterateParents(parents, child) {\n        var parentRef = _this12.hierarchical.parentReference[child];\n        if (parentRef !== undefined) {\n          for (var i = 0; i < parentRef.length; i++) {\n            var parent = parentRef[i];\n            parents[parent] = true;\n            iterateParents(parents, parent);\n          }\n        }\n      };\n      var findParent = function findParent(parents, child) {\n        var parentRef = _this12.hierarchical.parentReference[child];\n        if (parentRef !== undefined) {\n          for (var i = 0; i < parentRef.length; i++) {\n            var parent = parentRef[i];\n            if (parents[parent] !== undefined) {\n              return { foundParent: parent, withChild: child };\n            }\n            var branch = findParent(parents, parent);\n            if (branch.foundParent !== null) {\n              return branch;\n            }\n          }\n        }\n        return { foundParent: null, withChild: child };\n      };\n\n      iterateParents(parents, childA);\n      return findParent(parents, childB);\n    }\n\n    /**\n     * Set the strategy pattern for handling the coordinates given the current direction.\n     *\n     * The individual instances contain all the operations and data specific to a layout direction.\n     *\n     * @param {Node} node\n     * @param {{x: number, y: number}} position\n     * @param {number} level\n     * @param {boolean} [doNotUpdate=false]\n     * @private\n     */\n\n  }, {\n    key: 'setDirectionStrategy',\n    value: function setDirectionStrategy() {\n      var isVertical = this.options.hierarchical.direction === 'UD' || this.options.hierarchical.direction === 'DU';\n\n      if (isVertical) {\n        this.direction = new VerticalStrategy(this);\n      } else {\n        this.direction = new HorizontalStrategy(this);\n      }\n    }\n\n    /**\n     * Determine the center position of a branch from the passed list of child nodes\n     *\n     * This takes into account the positions of all the child nodes.\n     * @param {Array.<Node|vis.Node.id>} childNodes  Array of either child nodes or node id's\n     * @return {number}\n     * @private\n     */\n\n  }, {\n    key: '_getCenterPosition',\n    value: function _getCenterPosition(childNodes) {\n      var minPos = 1e9;\n      var maxPos = -1e9;\n\n      for (var i = 0; i < childNodes.length; i++) {\n        var childNode = void 0;\n        if (childNodes[i].id !== undefined) {\n          childNode = childNodes[i];\n        } else {\n          var childNodeId = childNodes[i];\n          childNode = this.body.nodes[childNodeId];\n        }\n\n        var position = this.direction.getPosition(childNode);\n        minPos = Math.min(minPos, position);\n        maxPos = Math.max(maxPos, position);\n      }\n\n      return 0.5 * (minPos + maxPos);\n    }\n  }]);\n  return LayoutEngine;\n}();\n\nexports['default'] = LayoutEngine;\n\n/***/ }),\n/* 188 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/****\n * The MIT License\n *\n * Copyright (c) 2015 Marco Ziccardi\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n *\n ****/\n(function (global, factory) {\n  if (true) {\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else { var mod; }\n})(this, function (exports) {\n  'use strict';\n\n  exports.__esModule = true;\n  exports.sort = sort;\n\n  function _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n      throw new TypeError('Cannot call a class as a function');\n    }\n  }\n\n  var DEFAULT_MIN_MERGE = 32;\n\n  var DEFAULT_MIN_GALLOPING = 7;\n\n  var DEFAULT_TMP_STORAGE_LENGTH = 256;\n\n  var POWERS_OF_TEN = [1e0, 1e1, 1e2, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9];\n\n  function log10(x) {\n    if (x < 1e5) {\n      if (x < 1e2) {\n        return x < 1e1 ? 0 : 1;\n      }\n\n      if (x < 1e4) {\n        return x < 1e3 ? 2 : 3;\n      }\n\n      return 4;\n    }\n\n    if (x < 1e7) {\n      return x < 1e6 ? 5 : 6;\n    }\n\n    if (x < 1e9) {\n      return x < 1e8 ? 7 : 8;\n    }\n\n    return 9;\n  }\n\n  function alphabeticalCompare(a, b) {\n    if (a === b) {\n      return 0;\n    }\n\n    if (~ ~a === a && ~ ~b === b) {\n      if (a === 0 || b === 0) {\n        return a < b ? -1 : 1;\n      }\n\n      if (a < 0 || b < 0) {\n        if (b >= 0) {\n          return -1;\n        }\n\n        if (a >= 0) {\n          return 1;\n        }\n\n        a = -a;\n        b = -b;\n      }\n\n      var al = log10(a);\n      var bl = log10(b);\n\n      var t = 0;\n\n      if (al < bl) {\n        a *= POWERS_OF_TEN[bl - al - 1];\n        b /= 10;\n        t = -1;\n      } else if (al > bl) {\n        b *= POWERS_OF_TEN[al - bl - 1];\n        a /= 10;\n        t = 1;\n      }\n\n      if (a === b) {\n        return t;\n      }\n\n      return a < b ? -1 : 1;\n    }\n\n    var aStr = String(a);\n    var bStr = String(b);\n\n    if (aStr === bStr) {\n      return 0;\n    }\n\n    return aStr < bStr ? -1 : 1;\n  }\n\n  function minRunLength(n) {\n    var r = 0;\n\n    while (n >= DEFAULT_MIN_MERGE) {\n      r |= n & 1;\n      n >>= 1;\n    }\n\n    return n + r;\n  }\n\n  function makeAscendingRun(array, lo, hi, compare) {\n    var runHi = lo + 1;\n\n    if (runHi === hi) {\n      return 1;\n    }\n\n    if (compare(array[runHi++], array[lo]) < 0) {\n      while (runHi < hi && compare(array[runHi], array[runHi - 1]) < 0) {\n        runHi++;\n      }\n\n      reverseRun(array, lo, runHi);\n    } else {\n      while (runHi < hi && compare(array[runHi], array[runHi - 1]) >= 0) {\n        runHi++;\n      }\n    }\n\n    return runHi - lo;\n  }\n\n  function reverseRun(array, lo, hi) {\n    hi--;\n\n    while (lo < hi) {\n      var t = array[lo];\n      array[lo++] = array[hi];\n      array[hi--] = t;\n    }\n  }\n\n  function binaryInsertionSort(array, lo, hi, start, compare) {\n    if (start === lo) {\n      start++;\n    }\n\n    for (; start < hi; start++) {\n      var pivot = array[start];\n\n      var left = lo;\n      var right = start;\n\n      while (left < right) {\n        var mid = left + right >>> 1;\n\n        if (compare(pivot, array[mid]) < 0) {\n          right = mid;\n        } else {\n          left = mid + 1;\n        }\n      }\n\n      var n = start - left;\n\n      switch (n) {\n        case 3:\n          array[left + 3] = array[left + 2];\n\n        case 2:\n          array[left + 2] = array[left + 1];\n\n        case 1:\n          array[left + 1] = array[left];\n          break;\n        default:\n          while (n > 0) {\n            array[left + n] = array[left + n - 1];\n            n--;\n          }\n      }\n\n      array[left] = pivot;\n    }\n  }\n\n  function gallopLeft(value, array, start, length, hint, compare) {\n    var lastOffset = 0;\n    var maxOffset = 0;\n    var offset = 1;\n\n    if (compare(value, array[start + hint]) > 0) {\n      maxOffset = length - hint;\n\n      while (offset < maxOffset && compare(value, array[start + hint + offset]) > 0) {\n        lastOffset = offset;\n        offset = (offset << 1) + 1;\n\n        if (offset <= 0) {\n          offset = maxOffset;\n        }\n      }\n\n      if (offset > maxOffset) {\n        offset = maxOffset;\n      }\n\n      lastOffset += hint;\n      offset += hint;\n    } else {\n      maxOffset = hint + 1;\n      while (offset < maxOffset && compare(value, array[start + hint - offset]) <= 0) {\n        lastOffset = offset;\n        offset = (offset << 1) + 1;\n\n        if (offset <= 0) {\n          offset = maxOffset;\n        }\n      }\n      if (offset > maxOffset) {\n        offset = maxOffset;\n      }\n\n      var tmp = lastOffset;\n      lastOffset = hint - offset;\n      offset = hint - tmp;\n    }\n\n    lastOffset++;\n    while (lastOffset < offset) {\n      var m = lastOffset + (offset - lastOffset >>> 1);\n\n      if (compare(value, array[start + m]) > 0) {\n        lastOffset = m + 1;\n      } else {\n        offset = m;\n      }\n    }\n    return offset;\n  }\n\n  function gallopRight(value, array, start, length, hint, compare) {\n    var lastOffset = 0;\n    var maxOffset = 0;\n    var offset = 1;\n\n    if (compare(value, array[start + hint]) < 0) {\n      maxOffset = hint + 1;\n\n      while (offset < maxOffset && compare(value, array[start + hint - offset]) < 0) {\n        lastOffset = offset;\n        offset = (offset << 1) + 1;\n\n        if (offset <= 0) {\n          offset = maxOffset;\n        }\n      }\n\n      if (offset > maxOffset) {\n        offset = maxOffset;\n      }\n\n      var tmp = lastOffset;\n      lastOffset = hint - offset;\n      offset = hint - tmp;\n    } else {\n      maxOffset = length - hint;\n\n      while (offset < maxOffset && compare(value, array[start + hint + offset]) >= 0) {\n        lastOffset = offset;\n        offset = (offset << 1) + 1;\n\n        if (offset <= 0) {\n          offset = maxOffset;\n        }\n      }\n\n      if (offset > maxOffset) {\n        offset = maxOffset;\n      }\n\n      lastOffset += hint;\n      offset += hint;\n    }\n\n    lastOffset++;\n\n    while (lastOffset < offset) {\n      var m = lastOffset + (offset - lastOffset >>> 1);\n\n      if (compare(value, array[start + m]) < 0) {\n        offset = m;\n      } else {\n        lastOffset = m + 1;\n      }\n    }\n\n    return offset;\n  }\n\n  var TimSort = (function () {\n    function TimSort(array, compare) {\n      _classCallCheck(this, TimSort);\n\n      this.array = null;\n      this.compare = null;\n      this.minGallop = DEFAULT_MIN_GALLOPING;\n      this.length = 0;\n      this.tmpStorageLength = DEFAULT_TMP_STORAGE_LENGTH;\n      this.stackLength = 0;\n      this.runStart = null;\n      this.runLength = null;\n      this.stackSize = 0;\n\n      this.array = array;\n      this.compare = compare;\n\n      this.length = array.length;\n\n      if (this.length < 2 * DEFAULT_TMP_STORAGE_LENGTH) {\n        this.tmpStorageLength = this.length >>> 1;\n      }\n\n      this.tmp = new Array(this.tmpStorageLength);\n\n      this.stackLength = this.length < 120 ? 5 : this.length < 1542 ? 10 : this.length < 119151 ? 19 : 40;\n\n      this.runStart = new Array(this.stackLength);\n      this.runLength = new Array(this.stackLength);\n    }\n\n    TimSort.prototype.pushRun = function pushRun(runStart, runLength) {\n      this.runStart[this.stackSize] = runStart;\n      this.runLength[this.stackSize] = runLength;\n      this.stackSize += 1;\n    };\n\n    TimSort.prototype.mergeRuns = function mergeRuns() {\n      while (this.stackSize > 1) {\n        var n = this.stackSize - 2;\n\n        if (n >= 1 && this.runLength[n - 1] <= this.runLength[n] + this.runLength[n + 1] || n >= 2 && this.runLength[n - 2] <= this.runLength[n] + this.runLength[n - 1]) {\n\n          if (this.runLength[n - 1] < this.runLength[n + 1]) {\n            n--;\n          }\n        } else if (this.runLength[n] > this.runLength[n + 1]) {\n          break;\n        }\n        this.mergeAt(n);\n      }\n    };\n\n    TimSort.prototype.forceMergeRuns = function forceMergeRuns() {\n      while (this.stackSize > 1) {\n        var n = this.stackSize - 2;\n\n        if (n > 0 && this.runLength[n - 1] < this.runLength[n + 1]) {\n          n--;\n        }\n\n        this.mergeAt(n);\n      }\n    };\n\n    TimSort.prototype.mergeAt = function mergeAt(i) {\n      var compare = this.compare;\n      var array = this.array;\n\n      var start1 = this.runStart[i];\n      var length1 = this.runLength[i];\n      var start2 = this.runStart[i + 1];\n      var length2 = this.runLength[i + 1];\n\n      this.runLength[i] = length1 + length2;\n\n      if (i === this.stackSize - 3) {\n        this.runStart[i + 1] = this.runStart[i + 2];\n        this.runLength[i + 1] = this.runLength[i + 2];\n      }\n\n      this.stackSize--;\n\n      var k = gallopRight(array[start2], array, start1, length1, 0, compare);\n      start1 += k;\n      length1 -= k;\n\n      if (length1 === 0) {\n        return;\n      }\n\n      length2 = gallopLeft(array[start1 + length1 - 1], array, start2, length2, length2 - 1, compare);\n\n      if (length2 === 0) {\n        return;\n      }\n\n      if (length1 <= length2) {\n        this.mergeLow(start1, length1, start2, length2);\n      } else {\n        this.mergeHigh(start1, length1, start2, length2);\n      }\n    };\n\n    TimSort.prototype.mergeLow = function mergeLow(start1, length1, start2, length2) {\n\n      var compare = this.compare;\n      var array = this.array;\n      var tmp = this.tmp;\n      var i = 0;\n\n      for (i = 0; i < length1; i++) {\n        tmp[i] = array[start1 + i];\n      }\n\n      var cursor1 = 0;\n      var cursor2 = start2;\n      var dest = start1;\n\n      array[dest++] = array[cursor2++];\n\n      if (--length2 === 0) {\n        for (i = 0; i < length1; i++) {\n          array[dest + i] = tmp[cursor1 + i];\n        }\n        return;\n      }\n\n      if (length1 === 1) {\n        for (i = 0; i < length2; i++) {\n          array[dest + i] = array[cursor2 + i];\n        }\n        array[dest + length2] = tmp[cursor1];\n        return;\n      }\n\n      var minGallop = this.minGallop;\n\n      while (true) {\n        var count1 = 0;\n        var count2 = 0;\n        var exit = false;\n\n        do {\n          if (compare(array[cursor2], tmp[cursor1]) < 0) {\n            array[dest++] = array[cursor2++];\n            count2++;\n            count1 = 0;\n\n            if (--length2 === 0) {\n              exit = true;\n              break;\n            }\n          } else {\n            array[dest++] = tmp[cursor1++];\n            count1++;\n            count2 = 0;\n            if (--length1 === 1) {\n              exit = true;\n              break;\n            }\n          }\n        } while ((count1 | count2) < minGallop);\n\n        if (exit) {\n          break;\n        }\n\n        do {\n          count1 = gallopRight(array[cursor2], tmp, cursor1, length1, 0, compare);\n\n          if (count1 !== 0) {\n            for (i = 0; i < count1; i++) {\n              array[dest + i] = tmp[cursor1 + i];\n            }\n\n            dest += count1;\n            cursor1 += count1;\n            length1 -= count1;\n            if (length1 <= 1) {\n              exit = true;\n              break;\n            }\n          }\n\n          array[dest++] = array[cursor2++];\n\n          if (--length2 === 0) {\n            exit = true;\n            break;\n          }\n\n          count2 = gallopLeft(tmp[cursor1], array, cursor2, length2, 0, compare);\n\n          if (count2 !== 0) {\n            for (i = 0; i < count2; i++) {\n              array[dest + i] = array[cursor2 + i];\n            }\n\n            dest += count2;\n            cursor2 += count2;\n            length2 -= count2;\n\n            if (length2 === 0) {\n              exit = true;\n              break;\n            }\n          }\n          array[dest++] = tmp[cursor1++];\n\n          if (--length1 === 1) {\n            exit = true;\n            break;\n          }\n\n          minGallop--;\n        } while (count1 >= DEFAULT_MIN_GALLOPING || count2 >= DEFAULT_MIN_GALLOPING);\n\n        if (exit) {\n          break;\n        }\n\n        if (minGallop < 0) {\n          minGallop = 0;\n        }\n\n        minGallop += 2;\n      }\n\n      this.minGallop = minGallop;\n\n      if (minGallop < 1) {\n        this.minGallop = 1;\n      }\n\n      if (length1 === 1) {\n        for (i = 0; i < length2; i++) {\n          array[dest + i] = array[cursor2 + i];\n        }\n        array[dest + length2] = tmp[cursor1];\n      } else if (length1 === 0) {\n        throw new Error('mergeLow preconditions were not respected');\n      } else {\n        for (i = 0; i < length1; i++) {\n          array[dest + i] = tmp[cursor1 + i];\n        }\n      }\n    };\n\n    TimSort.prototype.mergeHigh = function mergeHigh(start1, length1, start2, length2) {\n      var compare = this.compare;\n      var array = this.array;\n      var tmp = this.tmp;\n      var i = 0;\n\n      for (i = 0; i < length2; i++) {\n        tmp[i] = array[start2 + i];\n      }\n\n      var cursor1 = start1 + length1 - 1;\n      var cursor2 = length2 - 1;\n      var dest = start2 + length2 - 1;\n      var customCursor = 0;\n      var customDest = 0;\n\n      array[dest--] = array[cursor1--];\n\n      if (--length1 === 0) {\n        customCursor = dest - (length2 - 1);\n\n        for (i = 0; i < length2; i++) {\n          array[customCursor + i] = tmp[i];\n        }\n\n        return;\n      }\n\n      if (length2 === 1) {\n        dest -= length1;\n        cursor1 -= length1;\n        customDest = dest + 1;\n        customCursor = cursor1 + 1;\n\n        for (i = length1 - 1; i >= 0; i--) {\n          array[customDest + i] = array[customCursor + i];\n        }\n\n        array[dest] = tmp[cursor2];\n        return;\n      }\n\n      var minGallop = this.minGallop;\n\n      while (true) {\n        var count1 = 0;\n        var count2 = 0;\n        var exit = false;\n\n        do {\n          if (compare(tmp[cursor2], array[cursor1]) < 0) {\n            array[dest--] = array[cursor1--];\n            count1++;\n            count2 = 0;\n            if (--length1 === 0) {\n              exit = true;\n              break;\n            }\n          } else {\n            array[dest--] = tmp[cursor2--];\n            count2++;\n            count1 = 0;\n            if (--length2 === 1) {\n              exit = true;\n              break;\n            }\n          }\n        } while ((count1 | count2) < minGallop);\n\n        if (exit) {\n          break;\n        }\n\n        do {\n          count1 = length1 - gallopRight(tmp[cursor2], array, start1, length1, length1 - 1, compare);\n\n          if (count1 !== 0) {\n            dest -= count1;\n            cursor1 -= count1;\n            length1 -= count1;\n            customDest = dest + 1;\n            customCursor = cursor1 + 1;\n\n            for (i = count1 - 1; i >= 0; i--) {\n              array[customDest + i] = array[customCursor + i];\n            }\n\n            if (length1 === 0) {\n              exit = true;\n              break;\n            }\n          }\n\n          array[dest--] = tmp[cursor2--];\n\n          if (--length2 === 1) {\n            exit = true;\n            break;\n          }\n\n          count2 = length2 - gallopLeft(array[cursor1], tmp, 0, length2, length2 - 1, compare);\n\n          if (count2 !== 0) {\n            dest -= count2;\n            cursor2 -= count2;\n            length2 -= count2;\n            customDest = dest + 1;\n            customCursor = cursor2 + 1;\n\n            for (i = 0; i < count2; i++) {\n              array[customDest + i] = tmp[customCursor + i];\n            }\n\n            if (length2 <= 1) {\n              exit = true;\n              break;\n            }\n          }\n\n          array[dest--] = array[cursor1--];\n\n          if (--length1 === 0) {\n            exit = true;\n            break;\n          }\n\n          minGallop--;\n        } while (count1 >= DEFAULT_MIN_GALLOPING || count2 >= DEFAULT_MIN_GALLOPING);\n\n        if (exit) {\n          break;\n        }\n\n        if (minGallop < 0) {\n          minGallop = 0;\n        }\n\n        minGallop += 2;\n      }\n\n      this.minGallop = minGallop;\n\n      if (minGallop < 1) {\n        this.minGallop = 1;\n      }\n\n      if (length2 === 1) {\n        dest -= length1;\n        cursor1 -= length1;\n        customDest = dest + 1;\n        customCursor = cursor1 + 1;\n\n        for (i = length1 - 1; i >= 0; i--) {\n          array[customDest + i] = array[customCursor + i];\n        }\n\n        array[dest] = tmp[cursor2];\n      } else if (length2 === 0) {\n        throw new Error('mergeHigh preconditions were not respected');\n      } else {\n        customCursor = dest - (length2 - 1);\n        for (i = 0; i < length2; i++) {\n          array[customCursor + i] = tmp[i];\n        }\n      }\n    };\n\n    return TimSort;\n  })();\n\n  function sort(array, compare, lo, hi) {\n    if (!Array.isArray(array)) {\n      throw new TypeError('Can only sort arrays');\n    }\n\n    if (!compare) {\n      compare = alphabeticalCompare;\n    } else if (typeof compare !== 'function') {\n      hi = lo;\n      lo = compare;\n      compare = alphabeticalCompare;\n    }\n\n    if (!lo) {\n      lo = 0;\n    }\n    if (!hi) {\n      hi = array.length;\n    }\n\n    var remaining = hi - lo;\n\n    if (remaining < 2) {\n      return;\n    }\n\n    var runLength = 0;\n\n    if (remaining < DEFAULT_MIN_MERGE) {\n      runLength = makeAscendingRun(array, lo, hi, compare);\n      binaryInsertionSort(array, lo, hi, lo + runLength, compare);\n      return;\n    }\n\n    var ts = new TimSort(array, compare);\n\n    var minRun = minRunLength(remaining);\n\n    do {\n      runLength = makeAscendingRun(array, lo, hi, compare);\n      if (runLength < minRun) {\n        var force = remaining;\n        if (force > minRun) {\n          force = minRun;\n        }\n\n        binaryInsertionSort(array, lo, lo + force, lo + runLength, compare);\n        runLength = force;\n      }\n\n      ts.pushRun(lo, runLength);\n      ts.mergeRuns();\n\n      remaining -= runLength;\n      lo += runLength;\n    } while (remaining !== 0);\n\n    ts.forceMergeRuns();\n  }\n});\n\n\n/***/ }),\n/* 189 */\n/***/ (function(module, exports, __nested_webpack_require_1156316__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.VerticalStrategy = exports.HorizontalStrategy = undefined;\n\nvar _getPrototypeOf = __nested_webpack_require_1156316__(3);\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _possibleConstructorReturn2 = __nested_webpack_require_1156316__(4);\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = __nested_webpack_require_1156316__(5);\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _classCallCheck2 = __nested_webpack_require_1156316__(0);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __nested_webpack_require_1156316__(1);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\n/**\n * Helper classes for LayoutEngine.\n *\n * Strategy pattern for usage of direction methods for hierarchical layouts.\n */\nvar TimSort = __nested_webpack_require_1156316__(83);\n\n/**\n * Interface definition for direction strategy classes.\n *\n * This class describes the interface for the Strategy\n * pattern classes used to differentiate horizontal and vertical\n * direction of hierarchical results.\n *\n * For a given direction, one coordinate will be 'fixed', meaning that it is\n * determined by level.\n * The other coordinate is 'unfixed', meaning that the nodes on a given level\n * can still move along that coordinate. So:\n *\n * - `vertical` layout: `x` unfixed, `y` fixed per level\n * - `horizontal` layout: `x` fixed per level, `y` unfixed\n *\n * The local methods are stubs and should be regarded as abstract.\n * Derived classes **must** implement all the methods themselves.\n *\n * @private\n */\n\nvar DirectionInterface = function () {\n  function DirectionInterface() {\n    (0, _classCallCheck3['default'])(this, DirectionInterface);\n  }\n\n  (0, _createClass3['default'])(DirectionInterface, [{\n    key: 'abstract',\n\n    /** @ignore **/\n    value: function abstract() {\n      throw new Error(\"Can't instantiate abstract class!\");\n    }\n\n    /**\n     * This is a dummy call which is used to suppress the jsdoc errors of type:\n     *\n     *   \"'param' is assigned a value but never used\"\n     *\n     * @ignore\n     **/\n\n  }, {\n    key: 'fake_use',\n    value: function fake_use() {}\n    // Do nothing special\n\n\n    /**\n     * Type to use to translate dynamic curves to, in the case of hierarchical layout.\n     * Dynamic curves do not work for these.\n     *\n     * The value should be perpendicular to the actual direction of the layout.\n     *\n     * @return {string} Direction, either 'vertical' or 'horizontal'\n     */\n\n  }, {\n    key: 'curveType',\n    value: function curveType() {\n      return this.abstract();\n    }\n\n    /**\n     * Return the value of the coordinate that is not fixed for this direction.\n     *\n     * @param {Node} node The node to read\n     * @return {number} Value of the unfixed coordinate\n     */\n\n  }, {\n    key: 'getPosition',\n    value: function getPosition(node) {\n      this.fake_use(node);\n      return this.abstract();\n    }\n\n    /**\n     * Set the value of the coordinate that is not fixed for this direction.\n     *\n     * @param {Node} node The node to adjust\n     * @param {number} position\n     * @param {number} [level] if specified, the hierarchy level that this node should be fixed to\n     */\n\n  }, {\n    key: 'setPosition',\n    value: function setPosition(node, position) {\n      var level = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;\n\n      this.fake_use(node, position, level);\n      this.abstract();\n    }\n\n    /**\n     * Get the width of a tree.\n     *\n     * A `tree` here is a subset of nodes within the network which are not connected to other nodes,\n     * only among themselves. In essence, it is a sub-network.\n     *\n     * @param {number} index The index number of a tree\n     * @return {number} the width of a tree in the view coordinates\n     */\n\n  }, {\n    key: 'getTreeSize',\n    value: function getTreeSize(index) {\n      this.fake_use(index);\n      return this.abstract();\n    }\n\n    /**\n     * Sort array of nodes on the unfixed coordinates.\n     *\n     * **Note:** chrome has non-stable sorting implementation, which\n     * has a tendency to change the order of the array items,\n     * even if the custom sort function returns 0.\n     *\n     * For this reason, an external sort implementation is used,\n     * which has the added benefit of being faster than the standard\n     * platforms implementation. This has been verified on `node.js`,\n     * `firefox` and `chrome` (all linux).\n     *\n     * @param {Array.<Node>} nodeArray array of nodes to sort\n     */\n\n  }, {\n    key: 'sort',\n    value: function sort(nodeArray) {\n      this.fake_use(nodeArray);\n      this.abstract();\n    }\n\n    /**\n     * Assign the fixed coordinate of the node to the given level\n     *\n     * @param {Node} node The node to adjust\n     * @param {number} level The level to fix to\n     */\n\n  }, {\n    key: 'fix',\n    value: function fix(node, level) {\n      this.fake_use(node, level);\n      this.abstract();\n    }\n\n    /**\n     * Add an offset to the unfixed coordinate of the given node.\n     *\n     * @param {NodeId} nodeId Id of the node to adjust\n     * @param {number} diff Offset to add to the unfixed coordinate\n     */\n\n  }, {\n    key: 'shift',\n    value: function shift(nodeId, diff) {\n      this.fake_use(nodeId, diff);\n      this.abstract();\n    }\n  }]);\n  return DirectionInterface;\n}();\n\n/**\n * Vertical Strategy\n *\n * Coordinate `y` is fixed on levels, coordinate `x` is unfixed.\n *\n * @extends DirectionInterface\n * @private\n */\n\n\nvar VerticalStrategy = function (_DirectionInterface) {\n  (0, _inherits3['default'])(VerticalStrategy, _DirectionInterface);\n\n  /**\n   * Constructor\n   *\n   * @param {Object} layout reference to the parent LayoutEngine instance.\n   */\n  function VerticalStrategy(layout) {\n    (0, _classCallCheck3['default'])(this, VerticalStrategy);\n\n    var _this = (0, _possibleConstructorReturn3['default'])(this, (VerticalStrategy.__proto__ || (0, _getPrototypeOf2['default'])(VerticalStrategy)).call(this));\n\n    _this.layout = layout;\n    return _this;\n  }\n\n  /** @inheritdoc */\n\n\n  (0, _createClass3['default'])(VerticalStrategy, [{\n    key: 'curveType',\n    value: function curveType() {\n      return 'horizontal';\n    }\n\n    /** @inheritdoc */\n\n  }, {\n    key: 'getPosition',\n    value: function getPosition(node) {\n      return node.x;\n    }\n\n    /** @inheritdoc */\n\n  }, {\n    key: 'setPosition',\n    value: function setPosition(node, position) {\n      var level = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;\n\n      if (level !== undefined) {\n        this.layout.hierarchical.addToOrdering(node, level);\n      }\n      node.x = position;\n    }\n\n    /** @inheritdoc */\n\n  }, {\n    key: 'getTreeSize',\n    value: function getTreeSize(index) {\n      var res = this.layout.hierarchical.getTreeSize(this.layout.body.nodes, index);\n      return { min: res.min_x, max: res.max_x };\n    }\n\n    /** @inheritdoc */\n\n  }, {\n    key: 'sort',\n    value: function sort(nodeArray) {\n      TimSort.sort(nodeArray, function (a, b) {\n        return a.x - b.x;\n      });\n    }\n\n    /** @inheritdoc */\n\n  }, {\n    key: 'fix',\n    value: function fix(node, level) {\n      node.y = this.layout.options.hierarchical.levelSeparation * level;\n      node.options.fixed.y = true;\n    }\n\n    /** @inheritdoc */\n\n  }, {\n    key: 'shift',\n    value: function shift(nodeId, diff) {\n      this.layout.body.nodes[nodeId].x += diff;\n    }\n  }]);\n  return VerticalStrategy;\n}(DirectionInterface);\n\n/**\n * Horizontal Strategy\n *\n * Coordinate `x` is fixed on levels, coordinate `y` is unfixed.\n *\n * @extends DirectionInterface\n * @private\n */\n\n\nvar HorizontalStrategy = function (_DirectionInterface2) {\n  (0, _inherits3['default'])(HorizontalStrategy, _DirectionInterface2);\n\n  /**\n   * Constructor\n   *\n   * @param {Object} layout reference to the parent LayoutEngine instance.\n   */\n  function HorizontalStrategy(layout) {\n    (0, _classCallCheck3['default'])(this, HorizontalStrategy);\n\n    var _this2 = (0, _possibleConstructorReturn3['default'])(this, (HorizontalStrategy.__proto__ || (0, _getPrototypeOf2['default'])(HorizontalStrategy)).call(this));\n\n    _this2.layout = layout;\n    return _this2;\n  }\n\n  /** @inheritdoc */\n\n\n  (0, _createClass3['default'])(HorizontalStrategy, [{\n    key: 'curveType',\n    value: function curveType() {\n      return 'vertical';\n    }\n\n    /** @inheritdoc */\n\n  }, {\n    key: 'getPosition',\n    value: function getPosition(node) {\n      return node.y;\n    }\n\n    /** @inheritdoc */\n\n  }, {\n    key: 'setPosition',\n    value: function setPosition(node, position) {\n      var level = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;\n\n      if (level !== undefined) {\n        this.layout.hierarchical.addToOrdering(node, level);\n      }\n      node.y = position;\n    }\n\n    /** @inheritdoc */\n\n  }, {\n    key: 'getTreeSize',\n    value: function getTreeSize(index) {\n      var res = this.layout.hierarchical.getTreeSize(this.layout.body.nodes, index);\n      return { min: res.min_y, max: res.max_y };\n    }\n\n    /** @inheritdoc */\n\n  }, {\n    key: 'sort',\n    value: function sort(nodeArray) {\n      TimSort.sort(nodeArray, function (a, b) {\n        return a.y - b.y;\n      });\n    }\n\n    /** @inheritdoc */\n\n  }, {\n    key: 'fix',\n    value: function fix(node, level) {\n      node.x = this.layout.options.hierarchical.levelSeparation * level;\n      node.options.fixed.x = true;\n    }\n\n    /** @inheritdoc */\n\n  }, {\n    key: 'shift',\n    value: function shift(nodeId, diff) {\n      this.layout.body.nodes[nodeId].y += diff;\n    }\n  }]);\n  return HorizontalStrategy;\n}(DirectionInterface);\n\nexports.HorizontalStrategy = HorizontalStrategy;\nexports.VerticalStrategy = VerticalStrategy;\n\n/***/ }),\n/* 190 */\n/***/ (function(module, exports, __nested_webpack_require_1166276__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _keys = __nested_webpack_require_1166276__(9);\n\nvar _keys2 = _interopRequireDefault(_keys);\n\nvar _stringify = __nested_webpack_require_1166276__(23);\n\nvar _stringify2 = _interopRequireDefault(_stringify);\n\nvar _typeof2 = __nested_webpack_require_1166276__(7);\n\nvar _typeof3 = _interopRequireDefault(_typeof2);\n\nvar _classCallCheck2 = __nested_webpack_require_1166276__(0);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __nested_webpack_require_1166276__(1);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar util = __nested_webpack_require_1166276__(2);\nvar Hammer = __nested_webpack_require_1166276__(24);\nvar hammerUtil = __nested_webpack_require_1166276__(36);\n\n/**\n * Clears the toolbar div element of children\n *\n * @private\n */\n\nvar ManipulationSystem = function () {\n  /**\n   * @param {Object} body\n   * @param {Canvas} canvas\n   * @param {SelectionHandler} selectionHandler\n   */\n  function ManipulationSystem(body, canvas, selectionHandler) {\n    var _this = this;\n\n    (0, _classCallCheck3['default'])(this, ManipulationSystem);\n\n    this.body = body;\n    this.canvas = canvas;\n    this.selectionHandler = selectionHandler;\n\n    this.editMode = false;\n    this.manipulationDiv = undefined;\n    this.editModeDiv = undefined;\n    this.closeDiv = undefined;\n\n    this.manipulationHammers = [];\n    this.temporaryUIFunctions = {};\n    this.temporaryEventFunctions = [];\n\n    this.touchTime = 0;\n    this.temporaryIds = { nodes: [], edges: [] };\n    this.guiEnabled = false;\n    this.inMode = false;\n    this.selectedControlNode = undefined;\n\n    this.options = {};\n    this.defaultOptions = {\n      enabled: false,\n      initiallyActive: false,\n      addNode: true,\n      addEdge: true,\n      editNode: undefined,\n      editEdge: true,\n      deleteNode: true,\n      deleteEdge: true,\n      controlNodeStyle: {\n        shape: 'dot',\n        size: 6,\n        color: {\n          background: '#ff0000',\n          border: '#3c3c3c',\n          highlight: { background: '#07f968', border: '#3c3c3c' }\n        },\n        borderWidth: 2,\n        borderWidthSelected: 2\n      }\n    };\n    util.extend(this.options, this.defaultOptions);\n\n    this.body.emitter.on('destroy', function () {\n      _this._clean();\n    });\n    this.body.emitter.on('_dataChanged', this._restore.bind(this));\n    this.body.emitter.on('_resetData', this._restore.bind(this));\n  }\n\n  /**\n   * If something changes in the data during editing, switch back to the initial datamanipulation state and close all edit modes.\n   * @private\n   */\n\n\n  (0, _createClass3['default'])(ManipulationSystem, [{\n    key: '_restore',\n    value: function _restore() {\n      if (this.inMode !== false) {\n        if (this.options.initiallyActive === true) {\n          this.enableEditMode();\n        } else {\n          this.disableEditMode();\n        }\n      }\n    }\n\n    /**\n     * Set the Options\n     *\n     * @param {Object} options\n     * @param {Object} allOptions\n     * @param {Object} globalOptions\n     */\n\n  }, {\n    key: 'setOptions',\n    value: function setOptions(options, allOptions, globalOptions) {\n      if (allOptions !== undefined) {\n        if (allOptions.locale !== undefined) {\n          this.options.locale = allOptions.locale;\n        } else {\n          this.options.locale = globalOptions.locale;\n        }\n        if (allOptions.locales !== undefined) {\n          this.options.locales = allOptions.locales;\n        } else {\n          this.options.locales = globalOptions.locales;\n        }\n      }\n\n      if (options !== undefined) {\n        if (typeof options === 'boolean') {\n          this.options.enabled = options;\n        } else {\n          this.options.enabled = true;\n          util.deepExtend(this.options, options);\n        }\n        if (this.options.initiallyActive === true) {\n          this.editMode = true;\n        }\n        this._setup();\n      }\n    }\n\n    /**\n     * Enable or disable edit-mode. Draws the DOM required and cleans up after itself.\n     *\n     * @private\n     */\n\n  }, {\n    key: 'toggleEditMode',\n    value: function toggleEditMode() {\n      if (this.editMode === true) {\n        this.disableEditMode();\n      } else {\n        this.enableEditMode();\n      }\n    }\n\n    /**\n     * Enables Edit Mode\n     */\n\n  }, {\n    key: 'enableEditMode',\n    value: function enableEditMode() {\n      this.editMode = true;\n\n      this._clean();\n      if (this.guiEnabled === true) {\n        this.manipulationDiv.style.display = 'block';\n        this.closeDiv.style.display = 'block';\n        this.editModeDiv.style.display = 'none';\n        this.showManipulatorToolbar();\n      }\n    }\n\n    /**\n     * Disables Edit Mode\n     */\n\n  }, {\n    key: 'disableEditMode',\n    value: function disableEditMode() {\n      this.editMode = false;\n\n      this._clean();\n      if (this.guiEnabled === true) {\n        this.manipulationDiv.style.display = 'none';\n        this.closeDiv.style.display = 'none';\n        this.editModeDiv.style.display = 'block';\n        this._createEditButton();\n      }\n    }\n\n    /**\n     * Creates the main toolbar. Removes functions bound to the select event. Binds all the buttons of the toolbar.\n     *\n     * @private\n     */\n\n  }, {\n    key: 'showManipulatorToolbar',\n    value: function showManipulatorToolbar() {\n      // restore the state of any bound functions or events, remove control nodes, restore physics\n      this._clean();\n\n      // reset global variables\n      this.manipulationDOM = {};\n\n      // if the gui is enabled, draw all elements.\n      if (this.guiEnabled === true) {\n        // a _restore will hide these menus\n        this.editMode = true;\n        this.manipulationDiv.style.display = 'block';\n        this.closeDiv.style.display = 'block';\n\n        var selectedNodeCount = this.selectionHandler._getSelectedNodeCount();\n        var selectedEdgeCount = this.selectionHandler._getSelectedEdgeCount();\n        var selectedTotalCount = selectedNodeCount + selectedEdgeCount;\n        var locale = this.options.locales[this.options.locale];\n        var needSeperator = false;\n\n        if (this.options.addNode !== false) {\n          this._createAddNodeButton(locale);\n          needSeperator = true;\n        }\n        if (this.options.addEdge !== false) {\n          if (needSeperator === true) {\n            this._createSeperator(1);\n          } else {\n            needSeperator = true;\n          }\n          this._createAddEdgeButton(locale);\n        }\n\n        if (selectedNodeCount === 1 && typeof this.options.editNode === 'function') {\n          if (needSeperator === true) {\n            this._createSeperator(2);\n          } else {\n            needSeperator = true;\n          }\n          this._createEditNodeButton(locale);\n        } else if (selectedEdgeCount === 1 && selectedNodeCount === 0 && this.options.editEdge !== false) {\n          if (needSeperator === true) {\n            this._createSeperator(3);\n          } else {\n            needSeperator = true;\n          }\n          this._createEditEdgeButton(locale);\n        }\n\n        // remove buttons\n        if (selectedTotalCount !== 0) {\n          if (selectedNodeCount > 0 && this.options.deleteNode !== false) {\n            if (needSeperator === true) {\n              this._createSeperator(4);\n            }\n            this._createDeleteButton(locale);\n          } else if (selectedNodeCount === 0 && this.options.deleteEdge !== false) {\n            if (needSeperator === true) {\n              this._createSeperator(4);\n            }\n            this._createDeleteButton(locale);\n          }\n        }\n\n        // bind the close button\n        this._bindHammerToDiv(this.closeDiv, this.toggleEditMode.bind(this));\n\n        // refresh this bar based on what has been selected\n        this._temporaryBindEvent('select', this.showManipulatorToolbar.bind(this));\n      }\n\n      // redraw to show any possible changes\n      this.body.emitter.emit('_redraw');\n    }\n\n    /**\n     * Create the toolbar for adding Nodes\n     */\n\n  }, {\n    key: 'addNodeMode',\n    value: function addNodeMode() {\n      // when using the gui, enable edit mode if it wasnt already.\n      if (this.editMode !== true) {\n        this.enableEditMode();\n      }\n\n      // restore the state of any bound functions or events, remove control nodes, restore physics\n      this._clean();\n\n      this.inMode = 'addNode';\n      if (this.guiEnabled === true) {\n        var locale = this.options.locales[this.options.locale];\n        this.manipulationDOM = {};\n        this._createBackButton(locale);\n        this._createSeperator();\n        this._createDescription(locale['addDescription'] || this.options.locales['en']['addDescription']);\n\n        // bind the close button\n        this._bindHammerToDiv(this.closeDiv, this.toggleEditMode.bind(this));\n      }\n\n      this._temporaryBindEvent('click', this._performAddNode.bind(this));\n    }\n\n    /**\n     * call the bound function to handle the editing of the node. The node has to be selected.\n     */\n\n  }, {\n    key: 'editNode',\n    value: function editNode() {\n      var _this2 = this;\n\n      // when using the gui, enable edit mode if it wasnt already.\n      if (this.editMode !== true) {\n        this.enableEditMode();\n      }\n\n      // restore the state of any bound functions or events, remove control nodes, restore physics\n      this._clean();\n      var node = this.selectionHandler._getSelectedNode();\n      if (node !== undefined) {\n        this.inMode = 'editNode';\n        if (typeof this.options.editNode === 'function') {\n          if (node.isCluster !== true) {\n            var data = util.deepExtend({}, node.options, false);\n            data.x = node.x;\n            data.y = node.y;\n\n            if (this.options.editNode.length === 2) {\n              this.options.editNode(data, function (finalizedData) {\n                if (finalizedData !== null && finalizedData !== undefined && _this2.inMode === 'editNode') {\n                  // if for whatever reason the mode has changes (due to dataset change) disregard the callback) {\n                  _this2.body.data.nodes.getDataSet().update(finalizedData);\n                }\n                _this2.showManipulatorToolbar();\n              });\n            } else {\n              throw new Error('The function for edit does not support two arguments (data, callback)');\n            }\n          } else {\n            alert(this.options.locales[this.options.locale]['editClusterError'] || this.options.locales['en']['editClusterError']);\n          }\n        } else {\n          throw new Error('No function has been configured to handle the editing of nodes.');\n        }\n      } else {\n        this.showManipulatorToolbar();\n      }\n    }\n\n    /**\n     * create the toolbar to connect nodes\n     */\n\n  }, {\n    key: 'addEdgeMode',\n    value: function addEdgeMode() {\n      // when using the gui, enable edit mode if it wasnt already.\n      if (this.editMode !== true) {\n        this.enableEditMode();\n      }\n\n      // restore the state of any bound functions or events, remove control nodes, restore physics\n      this._clean();\n\n      this.inMode = 'addEdge';\n      if (this.guiEnabled === true) {\n        var locale = this.options.locales[this.options.locale];\n        this.manipulationDOM = {};\n        this._createBackButton(locale);\n        this._createSeperator();\n        this._createDescription(locale['edgeDescription'] || this.options.locales['en']['edgeDescription']);\n\n        // bind the close button\n        this._bindHammerToDiv(this.closeDiv, this.toggleEditMode.bind(this));\n      }\n\n      // temporarily overload functions\n      this._temporaryBindUI('onTouch', this._handleConnect.bind(this));\n      this._temporaryBindUI('onDragEnd', this._finishConnect.bind(this));\n      this._temporaryBindUI('onDrag', this._dragControlNode.bind(this));\n      this._temporaryBindUI('onRelease', this._finishConnect.bind(this));\n      this._temporaryBindUI('onDragStart', this._dragStartEdge.bind(this));\n      this._temporaryBindUI('onHold', function () {});\n    }\n\n    /**\n     * create the toolbar to edit edges\n     */\n\n  }, {\n    key: 'editEdgeMode',\n    value: function editEdgeMode() {\n      // when using the gui, enable edit mode if it wasn't already.\n      if (this.editMode !== true) {\n        this.enableEditMode();\n      }\n\n      // restore the state of any bound functions or events, remove control nodes, restore physics\n      this._clean();\n\n      this.inMode = 'editEdge';\n      if ((0, _typeof3['default'])(this.options.editEdge) === 'object' && typeof this.options.editEdge.editWithoutDrag === 'function') {\n        this.edgeBeingEditedId = this.selectionHandler.getSelectedEdges()[0];\n        if (this.edgeBeingEditedId !== undefined) {\n          var edge = this.body.edges[this.edgeBeingEditedId];\n          this._performEditEdge(edge.from, edge.to);\n          return;\n        }\n      }\n      if (this.guiEnabled === true) {\n        var locale = this.options.locales[this.options.locale];\n        this.manipulationDOM = {};\n        this._createBackButton(locale);\n        this._createSeperator();\n        this._createDescription(locale['editEdgeDescription'] || this.options.locales['en']['editEdgeDescription']);\n\n        // bind the close button\n        this._bindHammerToDiv(this.closeDiv, this.toggleEditMode.bind(this));\n      }\n\n      this.edgeBeingEditedId = this.selectionHandler.getSelectedEdges()[0];\n      if (this.edgeBeingEditedId !== undefined) {\n        var _edge = this.body.edges[this.edgeBeingEditedId];\n\n        // create control nodes\n        var controlNodeFrom = this._getNewTargetNode(_edge.from.x, _edge.from.y);\n        var controlNodeTo = this._getNewTargetNode(_edge.to.x, _edge.to.y);\n\n        this.temporaryIds.nodes.push(controlNodeFrom.id);\n        this.temporaryIds.nodes.push(controlNodeTo.id);\n\n        this.body.nodes[controlNodeFrom.id] = controlNodeFrom;\n        this.body.nodeIndices.push(controlNodeFrom.id);\n        this.body.nodes[controlNodeTo.id] = controlNodeTo;\n        this.body.nodeIndices.push(controlNodeTo.id);\n\n        // temporarily overload UI functions, cleaned up automatically because of _temporaryBindUI\n        this._temporaryBindUI('onTouch', this._controlNodeTouch.bind(this)); // used to get the position\n        this._temporaryBindUI('onTap', function () {}); // disabled\n        this._temporaryBindUI('onHold', function () {}); // disabled\n        this._temporaryBindUI('onDragStart', this._controlNodeDragStart.bind(this)); // used to select control node\n        this._temporaryBindUI('onDrag', this._controlNodeDrag.bind(this)); // used to drag control node\n        this._temporaryBindUI('onDragEnd', this._controlNodeDragEnd.bind(this)); // used to connect or revert control nodes\n        this._temporaryBindUI('onMouseMove', function () {}); // disabled\n\n        // create function to position control nodes correctly on movement\n        // automatically cleaned up because we use the temporary bind\n        this._temporaryBindEvent('beforeDrawing', function (ctx) {\n          var positions = _edge.edgeType.findBorderPositions(ctx);\n          if (controlNodeFrom.selected === false) {\n            controlNodeFrom.x = positions.from.x;\n            controlNodeFrom.y = positions.from.y;\n          }\n          if (controlNodeTo.selected === false) {\n            controlNodeTo.x = positions.to.x;\n            controlNodeTo.y = positions.to.y;\n          }\n        });\n\n        this.body.emitter.emit('_redraw');\n      } else {\n        this.showManipulatorToolbar();\n      }\n    }\n\n    /**\n     * delete everything in the selection\n     */\n\n  }, {\n    key: 'deleteSelected',\n    value: function deleteSelected() {\n      var _this3 = this;\n\n      // when using the gui, enable edit mode if it wasnt already.\n      if (this.editMode !== true) {\n        this.enableEditMode();\n      }\n\n      // restore the state of any bound functions or events, remove control nodes, restore physics\n      this._clean();\n\n      this.inMode = 'delete';\n      var selectedNodes = this.selectionHandler.getSelectedNodes();\n      var selectedEdges = this.selectionHandler.getSelectedEdges();\n      var deleteFunction = undefined;\n      if (selectedNodes.length > 0) {\n        for (var i = 0; i < selectedNodes.length; i++) {\n          if (this.body.nodes[selectedNodes[i]].isCluster === true) {\n            alert(this.options.locales[this.options.locale]['deleteClusterError'] || this.options.locales['en']['deleteClusterError']);\n            return;\n          }\n        }\n\n        if (typeof this.options.deleteNode === 'function') {\n          deleteFunction = this.options.deleteNode;\n        }\n      } else if (selectedEdges.length > 0) {\n        if (typeof this.options.deleteEdge === 'function') {\n          deleteFunction = this.options.deleteEdge;\n        }\n      }\n\n      if (typeof deleteFunction === 'function') {\n        var data = { nodes: selectedNodes, edges: selectedEdges };\n        if (deleteFunction.length === 2) {\n          deleteFunction(data, function (finalizedData) {\n            if (finalizedData !== null && finalizedData !== undefined && _this3.inMode === 'delete') {\n              // if for whatever reason the mode has changes (due to dataset change) disregard the callback) {\n              _this3.body.data.edges.getDataSet().remove(finalizedData.edges);\n              _this3.body.data.nodes.getDataSet().remove(finalizedData.nodes);\n              _this3.body.emitter.emit('startSimulation');\n              _this3.showManipulatorToolbar();\n            } else {\n              _this3.body.emitter.emit('startSimulation');\n              _this3.showManipulatorToolbar();\n            }\n          });\n        } else {\n          throw new Error('The function for delete does not support two arguments (data, callback)');\n        }\n      } else {\n        this.body.data.edges.getDataSet().remove(selectedEdges);\n        this.body.data.nodes.getDataSet().remove(selectedNodes);\n        this.body.emitter.emit('startSimulation');\n        this.showManipulatorToolbar();\n      }\n    }\n\n    //********************************************** PRIVATE ***************************************//\n\n    /**\n     * draw or remove the DOM\n     * @private\n     */\n\n  }, {\n    key: '_setup',\n    value: function _setup() {\n      if (this.options.enabled === true) {\n        // Enable the GUI\n        this.guiEnabled = true;\n\n        this._createWrappers();\n        if (this.editMode === false) {\n          this._createEditButton();\n        } else {\n          this.showManipulatorToolbar();\n        }\n      } else {\n        this._removeManipulationDOM();\n\n        // disable the gui\n        this.guiEnabled = false;\n      }\n    }\n\n    /**\n     * create the div overlays that contain the DOM\n     * @private\n     */\n\n  }, {\n    key: '_createWrappers',\n    value: function _createWrappers() {\n      // load the manipulator HTML elements. All styling done in css.\n      if (this.manipulationDiv === undefined) {\n        this.manipulationDiv = document.createElement('div');\n        this.manipulationDiv.className = 'vis-manipulation';\n        if (this.editMode === true) {\n          this.manipulationDiv.style.display = 'block';\n        } else {\n          this.manipulationDiv.style.display = 'none';\n        }\n        this.canvas.frame.appendChild(this.manipulationDiv);\n      }\n\n      // container for the edit button.\n      if (this.editModeDiv === undefined) {\n        this.editModeDiv = document.createElement('div');\n        this.editModeDiv.className = 'vis-edit-mode';\n        if (this.editMode === true) {\n          this.editModeDiv.style.display = 'none';\n        } else {\n          this.editModeDiv.style.display = 'block';\n        }\n        this.canvas.frame.appendChild(this.editModeDiv);\n      }\n\n      // container for the close div button\n      if (this.closeDiv === undefined) {\n        this.closeDiv = document.createElement('div');\n        this.closeDiv.className = 'vis-close';\n        this.closeDiv.style.display = this.manipulationDiv.style.display;\n        this.canvas.frame.appendChild(this.closeDiv);\n      }\n    }\n\n    /**\n     * generate a new target node. Used for creating new edges and editing edges\n     *\n     * @param {number} x\n     * @param {number} y\n     * @returns {Node}\n     * @private\n     */\n\n  }, {\n    key: '_getNewTargetNode',\n    value: function _getNewTargetNode(x, y) {\n      var controlNodeStyle = util.deepExtend({}, this.options.controlNodeStyle);\n\n      controlNodeStyle.id = 'targetNode' + util.randomUUID();\n      controlNodeStyle.hidden = false;\n      controlNodeStyle.physics = false;\n      controlNodeStyle.x = x;\n      controlNodeStyle.y = y;\n\n      // we have to define the bounding box in order for the nodes to be drawn immediately\n      var node = this.body.functions.createNode(controlNodeStyle);\n      node.shape.boundingBox = { left: x, right: x, top: y, bottom: y };\n\n      return node;\n    }\n\n    /**\n     * Create the edit button\n     */\n\n  }, {\n    key: '_createEditButton',\n    value: function _createEditButton() {\n      // restore everything to it's original state (if applicable)\n      this._clean();\n\n      // reset the manipulationDOM\n      this.manipulationDOM = {};\n\n      // empty the editModeDiv\n      util.recursiveDOMDelete(this.editModeDiv);\n\n      // create the contents for the editMode button\n      var locale = this.options.locales[this.options.locale];\n      var button = this._createButton('editMode', 'vis-button vis-edit vis-edit-mode', locale['edit'] || this.options.locales['en']['edit']);\n      this.editModeDiv.appendChild(button);\n\n      // bind a hammer listener to the button, calling the function toggleEditMode.\n      this._bindHammerToDiv(button, this.toggleEditMode.bind(this));\n    }\n\n    /**\n     * this function cleans up after everything this module does. Temporary elements, functions and events are removed, physics restored, hammers removed.\n     * @private\n     */\n\n  }, {\n    key: '_clean',\n    value: function _clean() {\n      // not in mode\n      this.inMode = false;\n\n      // _clean the divs\n      if (this.guiEnabled === true) {\n        util.recursiveDOMDelete(this.editModeDiv);\n        util.recursiveDOMDelete(this.manipulationDiv);\n\n        // removes all the bindings and overloads\n        this._cleanManipulatorHammers();\n      }\n\n      // remove temporary nodes and edges\n      this._cleanupTemporaryNodesAndEdges();\n\n      // restore overloaded UI functions\n      this._unbindTemporaryUIs();\n\n      // remove the temporaryEventFunctions\n      this._unbindTemporaryEvents();\n\n      // restore the physics if required\n      this.body.emitter.emit('restorePhysics');\n    }\n\n    /**\n     * Each dom element has it's own hammer. They are stored in this.manipulationHammers. This cleans them up.\n     * @private\n     */\n\n  }, {\n    key: '_cleanManipulatorHammers',\n    value: function _cleanManipulatorHammers() {\n      // _clean hammer bindings\n      if (this.manipulationHammers.length != 0) {\n        for (var i = 0; i < this.manipulationHammers.length; i++) {\n          this.manipulationHammers[i].destroy();\n        }\n        this.manipulationHammers = [];\n      }\n    }\n\n    /**\n     * Remove all DOM elements created by this module.\n     * @private\n     */\n\n  }, {\n    key: '_removeManipulationDOM',\n    value: function _removeManipulationDOM() {\n      // removes all the bindings and overloads\n      this._clean();\n\n      // empty the manipulation divs\n      util.recursiveDOMDelete(this.manipulationDiv);\n      util.recursiveDOMDelete(this.editModeDiv);\n      util.recursiveDOMDelete(this.closeDiv);\n\n      // remove the manipulation divs\n      if (this.manipulationDiv) {\n        this.canvas.frame.removeChild(this.manipulationDiv);\n      }\n      if (this.editModeDiv) {\n        this.canvas.frame.removeChild(this.editModeDiv);\n      }\n      if (this.closeDiv) {\n        this.canvas.frame.removeChild(this.closeDiv);\n      }\n\n      // set the references to undefined\n      this.manipulationDiv = undefined;\n      this.editModeDiv = undefined;\n      this.closeDiv = undefined;\n    }\n\n    /**\n     * create a seperator line. the index is to differentiate in the manipulation dom\n     * @param {number} [index=1]\n     * @private\n     */\n\n  }, {\n    key: '_createSeperator',\n    value: function _createSeperator() {\n      var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n\n      this.manipulationDOM['seperatorLineDiv' + index] = document.createElement('div');\n      this.manipulationDOM['seperatorLineDiv' + index].className = 'vis-separator-line';\n      this.manipulationDiv.appendChild(this.manipulationDOM['seperatorLineDiv' + index]);\n    }\n\n    // ----------------------    DOM functions for buttons    --------------------------//\n\n    /**\n     *\n     * @param {Locale} locale\n     * @private\n     */\n\n  }, {\n    key: '_createAddNodeButton',\n    value: function _createAddNodeButton(locale) {\n      var button = this._createButton('addNode', 'vis-button vis-add', locale['addNode'] || this.options.locales['en']['addNode']);\n      this.manipulationDiv.appendChild(button);\n      this._bindHammerToDiv(button, this.addNodeMode.bind(this));\n    }\n\n    /**\n     *\n     * @param {Locale} locale\n     * @private\n     */\n\n  }, {\n    key: '_createAddEdgeButton',\n    value: function _createAddEdgeButton(locale) {\n      var button = this._createButton('addEdge', 'vis-button vis-connect', locale['addEdge'] || this.options.locales['en']['addEdge']);\n      this.manipulationDiv.appendChild(button);\n      this._bindHammerToDiv(button, this.addEdgeMode.bind(this));\n    }\n\n    /**\n     *\n     * @param {Locale} locale\n     * @private\n     */\n\n  }, {\n    key: '_createEditNodeButton',\n    value: function _createEditNodeButton(locale) {\n      var button = this._createButton('editNode', 'vis-button vis-edit', locale['editNode'] || this.options.locales['en']['editNode']);\n      this.manipulationDiv.appendChild(button);\n      this._bindHammerToDiv(button, this.editNode.bind(this));\n    }\n\n    /**\n     *\n     * @param {Locale} locale\n     * @private\n     */\n\n  }, {\n    key: '_createEditEdgeButton',\n    value: function _createEditEdgeButton(locale) {\n      var button = this._createButton('editEdge', 'vis-button vis-edit', locale['editEdge'] || this.options.locales['en']['editEdge']);\n      this.manipulationDiv.appendChild(button);\n      this._bindHammerToDiv(button, this.editEdgeMode.bind(this));\n    }\n\n    /**\n     *\n     * @param {Locale} locale\n     * @private\n     */\n\n  }, {\n    key: '_createDeleteButton',\n    value: function _createDeleteButton(locale) {\n      var deleteBtnClass;\n      if (this.options.rtl) {\n        deleteBtnClass = 'vis-button vis-delete-rtl';\n      } else {\n        deleteBtnClass = 'vis-button vis-delete';\n      }\n      var button = this._createButton('delete', deleteBtnClass, locale['del'] || this.options.locales['en']['del']);\n      this.manipulationDiv.appendChild(button);\n      this._bindHammerToDiv(button, this.deleteSelected.bind(this));\n    }\n\n    /**\n     *\n     * @param {Locale} locale\n     * @private\n     */\n\n  }, {\n    key: '_createBackButton',\n    value: function _createBackButton(locale) {\n      var button = this._createButton('back', 'vis-button vis-back', locale['back'] || this.options.locales['en']['back']);\n      this.manipulationDiv.appendChild(button);\n      this._bindHammerToDiv(button, this.showManipulatorToolbar.bind(this));\n    }\n\n    /**\n     *\n     * @param {number|string} id\n     * @param {string} className\n     * @param {label} label\n     * @param {string} labelClassName\n     * @returns {HTMLElement}\n     * @private\n     */\n\n  }, {\n    key: '_createButton',\n    value: function _createButton(id, className, label) {\n      var labelClassName = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'vis-label';\n\n      this.manipulationDOM[id + 'Div'] = document.createElement('div');\n      this.manipulationDOM[id + 'Div'].className = className;\n      this.manipulationDOM[id + 'Label'] = document.createElement('div');\n      this.manipulationDOM[id + 'Label'].className = labelClassName;\n      this.manipulationDOM[id + 'Label'].innerHTML = label;\n      this.manipulationDOM[id + 'Div'].appendChild(this.manipulationDOM[id + 'Label']);\n      return this.manipulationDOM[id + 'Div'];\n    }\n\n    /**\n     *\n     * @param {Label} label\n     * @private\n     */\n\n  }, {\n    key: '_createDescription',\n    value: function _createDescription(label) {\n      this.manipulationDiv.appendChild(this._createButton('description', 'vis-button vis-none', label));\n    }\n\n    // -------------------------- End of DOM functions for buttons ------------------------------//\n\n    /**\n     * this binds an event until cleanup by the clean functions.\n     * @param {Event}  event   The event\n     * @param {function} newFunction\n     * @private\n     */\n\n  }, {\n    key: '_temporaryBindEvent',\n    value: function _temporaryBindEvent(event, newFunction) {\n      this.temporaryEventFunctions.push({\n        event: event,\n        boundFunction: newFunction\n      });\n      this.body.emitter.on(event, newFunction);\n    }\n\n    /**\n     * this overrides an UI function until cleanup by the clean function\n     * @param {string} UIfunctionName\n     * @param {function} newFunction\n     * @private\n     */\n\n  }, {\n    key: '_temporaryBindUI',\n    value: function _temporaryBindUI(UIfunctionName, newFunction) {\n      if (this.body.eventListeners[UIfunctionName] !== undefined) {\n        this.temporaryUIFunctions[UIfunctionName] = this.body.eventListeners[UIfunctionName];\n        this.body.eventListeners[UIfunctionName] = newFunction;\n      } else {\n        throw new Error('This UI function does not exist. Typo? You tried: ' + UIfunctionName + ' possible are: ' + (0, _stringify2['default'])((0, _keys2['default'])(this.body.eventListeners)));\n      }\n    }\n\n    /**\n     * Restore the overridden UI functions to their original state.\n     *\n     * @private\n     */\n\n  }, {\n    key: '_unbindTemporaryUIs',\n    value: function _unbindTemporaryUIs() {\n      for (var functionName in this.temporaryUIFunctions) {\n        if (this.temporaryUIFunctions.hasOwnProperty(functionName)) {\n          this.body.eventListeners[functionName] = this.temporaryUIFunctions[functionName];\n          delete this.temporaryUIFunctions[functionName];\n        }\n      }\n      this.temporaryUIFunctions = {};\n    }\n\n    /**\n     * Unbind the events created by _temporaryBindEvent\n     * @private\n     */\n\n  }, {\n    key: '_unbindTemporaryEvents',\n    value: function _unbindTemporaryEvents() {\n      for (var i = 0; i < this.temporaryEventFunctions.length; i++) {\n        var eventName = this.temporaryEventFunctions[i].event;\n        var boundFunction = this.temporaryEventFunctions[i].boundFunction;\n        this.body.emitter.off(eventName, boundFunction);\n      }\n      this.temporaryEventFunctions = [];\n    }\n\n    /**\n     * Bind an hammer instance to a DOM element.\n     *\n     * @param {Element} domElement\n     * @param {function} boundFunction\n     */\n\n  }, {\n    key: '_bindHammerToDiv',\n    value: function _bindHammerToDiv(domElement, boundFunction) {\n      var hammer = new Hammer(domElement, {});\n      hammerUtil.onTouch(hammer, boundFunction);\n      this.manipulationHammers.push(hammer);\n    }\n\n    /**\n     * Neatly clean up temporary edges and nodes\n     * @private\n     */\n\n  }, {\n    key: '_cleanupTemporaryNodesAndEdges',\n    value: function _cleanupTemporaryNodesAndEdges() {\n      // _clean temporary edges\n      for (var i = 0; i < this.temporaryIds.edges.length; i++) {\n        this.body.edges[this.temporaryIds.edges[i]].disconnect();\n        delete this.body.edges[this.temporaryIds.edges[i]];\n        var indexTempEdge = this.body.edgeIndices.indexOf(this.temporaryIds.edges[i]);\n        if (indexTempEdge !== -1) {\n          this.body.edgeIndices.splice(indexTempEdge, 1);\n        }\n      }\n\n      // _clean temporary nodes\n      for (var _i = 0; _i < this.temporaryIds.nodes.length; _i++) {\n        delete this.body.nodes[this.temporaryIds.nodes[_i]];\n        var indexTempNode = this.body.nodeIndices.indexOf(this.temporaryIds.nodes[_i]);\n        if (indexTempNode !== -1) {\n          this.body.nodeIndices.splice(indexTempNode, 1);\n        }\n      }\n\n      this.temporaryIds = { nodes: [], edges: [] };\n    }\n\n    // ------------------------------------------ EDIT EDGE FUNCTIONS -----------------------------------------//\n\n    /**\n     * the touch is used to get the position of the initial click\n     * @param {Event}  event   The event\n     * @private\n     */\n\n  }, {\n    key: '_controlNodeTouch',\n    value: function _controlNodeTouch(event) {\n      this.selectionHandler.unselectAll();\n      this.lastTouch = this.body.functions.getPointer(event.center);\n      this.lastTouch.translation = util.extend({}, this.body.view.translation); // copy the object\n    }\n\n    /**\n     * the drag start is used to mark one of the control nodes as selected.\n     * @param {Event}  event   The event\n     * @private\n     */\n\n  }, {\n    key: '_controlNodeDragStart',\n    value: function _controlNodeDragStart() /* event */{\n      // eslint-disable-line no-unused-vars\n      var pointer = this.lastTouch;\n      var pointerObj = this.selectionHandler._pointerToPositionObject(pointer);\n      var from = this.body.nodes[this.temporaryIds.nodes[0]];\n      var to = this.body.nodes[this.temporaryIds.nodes[1]];\n      var edge = this.body.edges[this.edgeBeingEditedId];\n      this.selectedControlNode = undefined;\n\n      var fromSelect = from.isOverlappingWith(pointerObj);\n      var toSelect = to.isOverlappingWith(pointerObj);\n\n      if (fromSelect === true) {\n        this.selectedControlNode = from;\n        edge.edgeType.from = from;\n      } else if (toSelect === true) {\n        this.selectedControlNode = to;\n        edge.edgeType.to = to;\n      }\n\n      // we use the selection to find the node that is being dragged. We explicitly select it here.\n      if (this.selectedControlNode !== undefined) {\n        this.selectionHandler.selectObject(this.selectedControlNode);\n      }\n\n      this.body.emitter.emit('_redraw');\n    }\n\n    /**\n     * dragging the control nodes or the canvas\n     * @param {Event}  event   The event\n     * @private\n     */\n\n  }, {\n    key: '_controlNodeDrag',\n    value: function _controlNodeDrag(event) {\n      this.body.emitter.emit('disablePhysics');\n      var pointer = this.body.functions.getPointer(event.center);\n      var pos = this.canvas.DOMtoCanvas(pointer);\n      if (this.selectedControlNode !== undefined) {\n        this.selectedControlNode.x = pos.x;\n        this.selectedControlNode.y = pos.y;\n      } else {\n        // if the drag was not started properly because the click started outside the network div, start it now.\n        var diffX = pointer.x - this.lastTouch.x;\n        var diffY = pointer.y - this.lastTouch.y;\n        this.body.view.translation = {\n          x: this.lastTouch.translation.x + diffX,\n          y: this.lastTouch.translation.y + diffY\n        };\n      }\n      this.body.emitter.emit('_redraw');\n    }\n\n    /**\n     * connecting or restoring the control nodes.\n     * @param {Event}  event   The event\n     * @private\n     */\n\n  }, {\n    key: '_controlNodeDragEnd',\n    value: function _controlNodeDragEnd(event) {\n      var pointer = this.body.functions.getPointer(event.center);\n      var pointerObj = this.selectionHandler._pointerToPositionObject(pointer);\n      var edge = this.body.edges[this.edgeBeingEditedId];\n      // if the node that was dragged is not a control node, return\n      if (this.selectedControlNode === undefined) {\n        return;\n      }\n\n      // we use the selection to find the node that is being dragged. We explicitly DEselect the control node here.\n      this.selectionHandler.unselectAll();\n      var overlappingNodeIds = this.selectionHandler._getAllNodesOverlappingWith(pointerObj);\n      var node = undefined;\n      for (var i = overlappingNodeIds.length - 1; i >= 0; i--) {\n        if (overlappingNodeIds[i] !== this.selectedControlNode.id) {\n          node = this.body.nodes[overlappingNodeIds[i]];\n          break;\n        }\n      }\n      // perform the connection\n      if (node !== undefined && this.selectedControlNode !== undefined) {\n        if (node.isCluster === true) {\n          alert(this.options.locales[this.options.locale]['createEdgeError'] || this.options.locales['en']['createEdgeError']);\n        } else {\n          var from = this.body.nodes[this.temporaryIds.nodes[0]];\n          if (this.selectedControlNode.id === from.id) {\n            this._performEditEdge(node.id, edge.to.id);\n          } else {\n            this._performEditEdge(edge.from.id, node.id);\n          }\n        }\n      } else {\n        edge.updateEdgeType();\n        this.body.emitter.emit('restorePhysics');\n      }\n\n      this.body.emitter.emit('_redraw');\n    }\n\n    // ------------------------------------ END OF EDIT EDGE FUNCTIONS -----------------------------------------//\n\n    // ------------------------------------------- ADD EDGE FUNCTIONS -----------------------------------------//\n    /**\n     * the function bound to the selection event. It checks if you want to connect a cluster and changes the description\n     * to walk the user through the process.\n     *\n     * @param {Event} event\n     * @private\n     */\n\n  }, {\n    key: '_handleConnect',\n    value: function _handleConnect(event) {\n      // check to avoid double fireing of this function.\n      if (new Date().valueOf() - this.touchTime > 100) {\n        this.lastTouch = this.body.functions.getPointer(event.center);\n        this.lastTouch.translation = util.extend({}, this.body.view.translation); // copy the object\n\n        var pointer = this.lastTouch;\n        var node = this.selectionHandler.getNodeAt(pointer);\n\n        if (node !== undefined) {\n          if (node.isCluster === true) {\n            alert(this.options.locales[this.options.locale]['createEdgeError'] || this.options.locales['en']['createEdgeError']);\n          } else {\n            // create a node the temporary line can look at\n            var targetNode = this._getNewTargetNode(node.x, node.y);\n            this.body.nodes[targetNode.id] = targetNode;\n            this.body.nodeIndices.push(targetNode.id);\n\n            // create a temporary edge\n            var connectionEdge = this.body.functions.createEdge({\n              id: 'connectionEdge' + util.randomUUID(),\n              from: node.id,\n              to: targetNode.id,\n              physics: false,\n              smooth: {\n                enabled: true,\n                type: 'continuous',\n                roundness: 0.5\n              }\n            });\n            this.body.edges[connectionEdge.id] = connectionEdge;\n            this.body.edgeIndices.push(connectionEdge.id);\n\n            this.temporaryIds.nodes.push(targetNode.id);\n            this.temporaryIds.edges.push(connectionEdge.id);\n          }\n        }\n        this.touchTime = new Date().valueOf();\n      }\n    }\n\n    /**\n     *\n     * @param {Event} event\n     * @private\n     */\n\n  }, {\n    key: '_dragControlNode',\n    value: function _dragControlNode(event) {\n      var pointer = this.body.functions.getPointer(event.center);\n\n      var pointerObj = this.selectionHandler._pointerToPositionObject(pointer);\n      // remember the edge id\n      var connectFromId = undefined;\n      if (this.temporaryIds.edges[0] !== undefined) {\n        connectFromId = this.body.edges[this.temporaryIds.edges[0]].fromId;\n      }\n      // get the overlapping node but NOT the temporary node;\n      var overlappingNodeIds = this.selectionHandler._getAllNodesOverlappingWith(pointerObj);\n      var node = undefined;\n      for (var i = overlappingNodeIds.length - 1; i >= 0; i--) {\n        // if the node id is NOT a temporary node, accept the node.\n        if (this.temporaryIds.nodes.indexOf(overlappingNodeIds[i]) === -1) {\n          node = this.body.nodes[overlappingNodeIds[i]];\n          break;\n        }\n      }\n\n      event.controlEdge = { from: connectFromId, to: node ? node.id : undefined };\n      this.selectionHandler._generateClickEvent('controlNodeDragging', event, pointer);\n\n      if (this.temporaryIds.nodes[0] !== undefined) {\n        var targetNode = this.body.nodes[this.temporaryIds.nodes[0]]; // there is only one temp node in the add edge mode.\n        targetNode.x = this.canvas._XconvertDOMtoCanvas(pointer.x);\n        targetNode.y = this.canvas._YconvertDOMtoCanvas(pointer.y);\n        this.body.emitter.emit('_redraw');\n      } else {\n        var diffX = pointer.x - this.lastTouch.x;\n        var diffY = pointer.y - this.lastTouch.y;\n        this.body.view.translation = {\n          x: this.lastTouch.translation.x + diffX,\n          y: this.lastTouch.translation.y + diffY\n        };\n      }\n    }\n\n    /**\n     * Connect the new edge to the target if one exists, otherwise remove temp line\n     * @param {Event}  event   The event\n     * @private\n     */\n\n  }, {\n    key: '_finishConnect',\n    value: function _finishConnect(event) {\n      var pointer = this.body.functions.getPointer(event.center);\n      var pointerObj = this.selectionHandler._pointerToPositionObject(pointer);\n\n      // remember the edge id\n      var connectFromId = undefined;\n      if (this.temporaryIds.edges[0] !== undefined) {\n        connectFromId = this.body.edges[this.temporaryIds.edges[0]].fromId;\n      }\n\n      // get the overlapping node but NOT the temporary node;\n      var overlappingNodeIds = this.selectionHandler._getAllNodesOverlappingWith(pointerObj);\n      var node = undefined;\n      for (var i = overlappingNodeIds.length - 1; i >= 0; i--) {\n        // if the node id is NOT a temporary node, accept the node.\n        if (this.temporaryIds.nodes.indexOf(overlappingNodeIds[i]) === -1) {\n          node = this.body.nodes[overlappingNodeIds[i]];\n          break;\n        }\n      }\n\n      // clean temporary nodes and edges.\n      this._cleanupTemporaryNodesAndEdges();\n\n      // perform the connection\n      if (node !== undefined) {\n        if (node.isCluster === true) {\n          alert(this.options.locales[this.options.locale]['createEdgeError'] || this.options.locales['en']['createEdgeError']);\n        } else {\n          if (this.body.nodes[connectFromId] !== undefined && this.body.nodes[node.id] !== undefined) {\n            this._performAddEdge(connectFromId, node.id);\n          }\n        }\n      }\n\n      event.controlEdge = { from: connectFromId, to: node ? node.id : undefined };\n      this.selectionHandler._generateClickEvent('controlNodeDragEnd', event, pointer);\n\n      // No need to do _generateclickevent('dragEnd') here, the regular dragEnd event fires.\n      this.body.emitter.emit('_redraw');\n    }\n\n    /**\n     *\n     * @param {Event} event\n     * @private\n     */\n\n  }, {\n    key: '_dragStartEdge',\n    value: function _dragStartEdge(event) {\n      var pointer = this.lastTouch;\n      this.selectionHandler._generateClickEvent('dragStart', event, pointer, undefined, true);\n    }\n\n    // --------------------------------------- END OF ADD EDGE FUNCTIONS -------------------------------------//\n\n    // ------------------------------ Performing all the actual data manipulation ------------------------//\n\n    /**\n     * Adds a node on the specified location\n     *\n     * @param {Object} clickData\n     * @private\n     */\n\n  }, {\n    key: '_performAddNode',\n    value: function _performAddNode(clickData) {\n      var _this4 = this;\n\n      var defaultData = {\n        id: util.randomUUID(),\n        x: clickData.pointer.canvas.x,\n        y: clickData.pointer.canvas.y,\n        label: 'new'\n      };\n\n      if (typeof this.options.addNode === 'function') {\n        if (this.options.addNode.length === 2) {\n          this.options.addNode(defaultData, function (finalizedData) {\n            if (finalizedData !== null && finalizedData !== undefined && _this4.inMode === 'addNode') {\n              // if for whatever reason the mode has changes (due to dataset change) disregard the callback\n              _this4.body.data.nodes.getDataSet().add(finalizedData);\n            }\n            _this4.showManipulatorToolbar();\n          });\n        } else {\n          this.showManipulatorToolbar();\n          throw new Error('The function for add does not support two arguments (data,callback)');\n        }\n      } else {\n        this.body.data.nodes.getDataSet().add(defaultData);\n        this.showManipulatorToolbar();\n      }\n    }\n\n    /**\n     * connect two nodes with a new edge.\n     *\n     * @param {Node.id} sourceNodeId\n     * @param {Node.id} targetNodeId\n     * @private\n     */\n\n  }, {\n    key: '_performAddEdge',\n    value: function _performAddEdge(sourceNodeId, targetNodeId) {\n      var _this5 = this;\n\n      var defaultData = { from: sourceNodeId, to: targetNodeId };\n      if (typeof this.options.addEdge === 'function') {\n        if (this.options.addEdge.length === 2) {\n          this.options.addEdge(defaultData, function (finalizedData) {\n            if (finalizedData !== null && finalizedData !== undefined && _this5.inMode === 'addEdge') {\n              // if for whatever reason the mode has changes (due to dataset change) disregard the callback\n              _this5.body.data.edges.getDataSet().add(finalizedData);\n              _this5.selectionHandler.unselectAll();\n              _this5.showManipulatorToolbar();\n            }\n          });\n        } else {\n          throw new Error('The function for connect does not support two arguments (data,callback)');\n        }\n      } else {\n        this.body.data.edges.getDataSet().add(defaultData);\n        this.selectionHandler.unselectAll();\n        this.showManipulatorToolbar();\n      }\n    }\n\n    /**\n     * connect two nodes with a new edge.\n     *\n     * @param {Node.id} sourceNodeId\n     * @param {Node.id} targetNodeId\n     * @private\n     */\n\n  }, {\n    key: '_performEditEdge',\n    value: function _performEditEdge(sourceNodeId, targetNodeId) {\n      var _this6 = this;\n\n      var defaultData = {\n        id: this.edgeBeingEditedId,\n        from: sourceNodeId,\n        to: targetNodeId,\n        label: this.body.data.edges._data[this.edgeBeingEditedId].label\n      };\n      var eeFunct = this.options.editEdge;\n      if ((typeof eeFunct === 'undefined' ? 'undefined' : (0, _typeof3['default'])(eeFunct)) === 'object') {\n        eeFunct = eeFunct.editWithoutDrag;\n      }\n      if (typeof eeFunct === 'function') {\n        if (eeFunct.length === 2) {\n          eeFunct(defaultData, function (finalizedData) {\n            if (finalizedData === null || finalizedData === undefined || _this6.inMode !== 'editEdge') {\n              // if for whatever reason the mode has changes (due to dataset change) disregard the callback) {\n              _this6.body.edges[defaultData.id].updateEdgeType();\n              _this6.body.emitter.emit('_redraw');\n              _this6.showManipulatorToolbar();\n            } else {\n              _this6.body.data.edges.getDataSet().update(finalizedData);\n              _this6.selectionHandler.unselectAll();\n              _this6.showManipulatorToolbar();\n            }\n          });\n        } else {\n          throw new Error('The function for edit does not support two arguments (data, callback)');\n        }\n      } else {\n        this.body.data.edges.getDataSet().update(defaultData);\n        this.selectionHandler.unselectAll();\n        this.showManipulatorToolbar();\n      }\n    }\n  }]);\n  return ManipulationSystem;\n}();\n\nexports['default'] = ManipulationSystem;\n\n/***/ }),\n/* 191 */\n/***/ (function(module, exports, __nested_webpack_require_1213829__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _stringify = __nested_webpack_require_1213829__(23);\n\nvar _stringify2 = _interopRequireDefault(_stringify);\n\nvar _typeof2 = __nested_webpack_require_1213829__(7);\n\nvar _typeof3 = _interopRequireDefault(_typeof2);\n\nvar _classCallCheck2 = __nested_webpack_require_1213829__(0);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __nested_webpack_require_1213829__(1);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar util = __nested_webpack_require_1213829__(2);\n\nvar ColorPicker = __nested_webpack_require_1213829__(192)['default'];\n\n/**\n * The way this works is for all properties of this.possible options, you can supply the property name in any form to list the options.\n * Boolean options are recognised as Boolean\n * Number options should be written as array: [default value, min value, max value, stepsize]\n * Colors should be written as array: ['color', '#ffffff']\n * Strings with should be written as array: [option1, option2, option3, ..]\n *\n * The options are matched with their counterparts in each of the modules and the values used in the configuration are\n */\n\nvar Configurator = function () {\n  /**\n   * @param {Object} parentModule        | the location where parentModule.setOptions() can be called\n   * @param {Object} defaultContainer    | the default container of the module\n   * @param {Object} configureOptions    | the fully configured and predefined options set found in allOptions.js\n   * @param {number} pixelRatio          | canvas pixel ratio\n   */\n  function Configurator(parentModule, defaultContainer, configureOptions) {\n    var pixelRatio = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n    (0, _classCallCheck3['default'])(this, Configurator);\n\n    this.parent = parentModule;\n    this.changedOptions = [];\n    this.container = defaultContainer;\n    this.allowCreation = false;\n\n    this.options = {};\n    this.initialized = false;\n    this.popupCounter = 0;\n    this.defaultOptions = {\n      enabled: false,\n      filter: true,\n      container: undefined,\n      showButton: true\n    };\n    util.extend(this.options, this.defaultOptions);\n\n    this.configureOptions = configureOptions;\n    this.moduleOptions = {};\n    this.domElements = [];\n    this.popupDiv = {};\n    this.popupLimit = 5;\n    this.popupHistory = {};\n    this.colorPicker = new ColorPicker(pixelRatio);\n    this.wrapper = undefined;\n  }\n\n  /**\n   * refresh all options.\n   * Because all modules parse their options by themselves, we just use their options. We copy them here.\n   *\n   * @param {Object} options\n   */\n\n\n  (0, _createClass3['default'])(Configurator, [{\n    key: 'setOptions',\n    value: function setOptions(options) {\n      if (options !== undefined) {\n        // reset the popup history because the indices may have been changed.\n        this.popupHistory = {};\n        this._removePopup();\n\n        var enabled = true;\n        if (typeof options === 'string') {\n          this.options.filter = options;\n        } else if (options instanceof Array) {\n          this.options.filter = options.join();\n        } else if ((typeof options === 'undefined' ? 'undefined' : (0, _typeof3['default'])(options)) === 'object') {\n          if (options == null) {\n            throw new TypeError('options cannot be null');\n          }\n          if (options.container !== undefined) {\n            this.options.container = options.container;\n          }\n          if (options.filter !== undefined) {\n            this.options.filter = options.filter;\n          }\n          if (options.showButton !== undefined) {\n            this.options.showButton = options.showButton;\n          }\n          if (options.enabled !== undefined) {\n            enabled = options.enabled;\n          }\n        } else if (typeof options === 'boolean') {\n          this.options.filter = true;\n          enabled = options;\n        } else if (typeof options === 'function') {\n          this.options.filter = options;\n          enabled = true;\n        }\n        if (this.options.filter === false) {\n          enabled = false;\n        }\n\n        this.options.enabled = enabled;\n      }\n      this._clean();\n    }\n\n    /**\n     *\n     * @param {Object} moduleOptions\n     */\n\n  }, {\n    key: 'setModuleOptions',\n    value: function setModuleOptions(moduleOptions) {\n      this.moduleOptions = moduleOptions;\n      if (this.options.enabled === true) {\n        this._clean();\n        if (this.options.container !== undefined) {\n          this.container = this.options.container;\n        }\n        this._create();\n      }\n    }\n\n    /**\n     * Create all DOM elements\n     * @private\n     */\n\n  }, {\n    key: '_create',\n    value: function _create() {\n      this._clean();\n      this.changedOptions = [];\n\n      var filter = this.options.filter;\n      var counter = 0;\n      var show = false;\n      for (var option in this.configureOptions) {\n        if (this.configureOptions.hasOwnProperty(option)) {\n          this.allowCreation = false;\n          show = false;\n          if (typeof filter === 'function') {\n            show = filter(option, []);\n            show = show || this._handleObject(this.configureOptions[option], [option], true);\n          } else if (filter === true || filter.indexOf(option) !== -1) {\n            show = true;\n          }\n\n          if (show !== false) {\n            this.allowCreation = true;\n\n            // linebreak between categories\n            if (counter > 0) {\n              this._makeItem([]);\n            }\n            // a header for the category\n            this._makeHeader(option);\n\n            // get the sub options\n            this._handleObject(this.configureOptions[option], [option]);\n          }\n          counter++;\n        }\n      }\n      this._makeButton();\n      this._push();\n      //~ this.colorPicker.insertTo(this.container);\n    }\n\n    /**\n     * draw all DOM elements on the screen\n     * @private\n     */\n\n  }, {\n    key: '_push',\n    value: function _push() {\n      this.wrapper = document.createElement('div');\n      this.wrapper.className = 'vis-configuration-wrapper';\n      this.container.appendChild(this.wrapper);\n      for (var i = 0; i < this.domElements.length; i++) {\n        this.wrapper.appendChild(this.domElements[i]);\n      }\n\n      this._showPopupIfNeeded();\n    }\n\n    /**\n     * delete all DOM elements\n     * @private\n     */\n\n  }, {\n    key: '_clean',\n    value: function _clean() {\n      for (var i = 0; i < this.domElements.length; i++) {\n        this.wrapper.removeChild(this.domElements[i]);\n      }\n\n      if (this.wrapper !== undefined) {\n        this.container.removeChild(this.wrapper);\n        this.wrapper = undefined;\n      }\n      this.domElements = [];\n\n      this._removePopup();\n    }\n\n    /**\n     * get the value from the actualOptions if it exists\n     * @param {array} path    | where to look for the actual option\n     * @returns {*}\n     * @private\n     */\n\n  }, {\n    key: '_getValue',\n    value: function _getValue(path) {\n      var base = this.moduleOptions;\n      for (var i = 0; i < path.length; i++) {\n        if (base[path[i]] !== undefined) {\n          base = base[path[i]];\n        } else {\n          base = undefined;\n          break;\n        }\n      }\n      return base;\n    }\n\n    /**\n     * all option elements are wrapped in an item\n     * @param {Array} path    | where to look for the actual option\n     * @param {Array.<Element>} domElements\n     * @returns {number}\n     * @private\n     */\n\n  }, {\n    key: '_makeItem',\n    value: function _makeItem(path) {\n      if (this.allowCreation === true) {\n        var item = document.createElement('div');\n        item.className = 'vis-configuration vis-config-item vis-config-s' + path.length;\n\n        for (var _len = arguments.length, domElements = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n          domElements[_key - 1] = arguments[_key];\n        }\n\n        domElements.forEach(function (element) {\n          item.appendChild(element);\n        });\n        this.domElements.push(item);\n        return this.domElements.length;\n      }\n      return 0;\n    }\n\n    /**\n     * header for major subjects\n     * @param {string} name\n     * @private\n     */\n\n  }, {\n    key: '_makeHeader',\n    value: function _makeHeader(name) {\n      var div = document.createElement('div');\n      div.className = 'vis-configuration vis-config-header';\n      div.innerHTML = name;\n      this._makeItem([], div);\n    }\n\n    /**\n     * make a label, if it is an object label, it gets different styling.\n     * @param {string} name\n     * @param {array} path    | where to look for the actual option\n     * @param {string} objectLabel\n     * @returns {HTMLElement}\n     * @private\n     */\n\n  }, {\n    key: '_makeLabel',\n    value: function _makeLabel(name, path) {\n      var objectLabel = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n      var div = document.createElement('div');\n      div.className = 'vis-configuration vis-config-label vis-config-s' + path.length;\n      if (objectLabel === true) {\n        div.innerHTML = '<i><b>' + name + ':</b></i>';\n      } else {\n        div.innerHTML = name + ':';\n      }\n      return div;\n    }\n\n    /**\n     * make a dropdown list for multiple possible string optoins\n     * @param {Array.<number>} arr\n     * @param {number} value\n     * @param {array} path    | where to look for the actual option\n     * @private\n     */\n\n  }, {\n    key: '_makeDropdown',\n    value: function _makeDropdown(arr, value, path) {\n      var select = document.createElement('select');\n      select.className = 'vis-configuration vis-config-select';\n      var selectedValue = 0;\n      if (value !== undefined) {\n        if (arr.indexOf(value) !== -1) {\n          selectedValue = arr.indexOf(value);\n        }\n      }\n\n      for (var i = 0; i < arr.length; i++) {\n        var option = document.createElement('option');\n        option.value = arr[i];\n        if (i === selectedValue) {\n          option.selected = 'selected';\n        }\n        option.innerHTML = arr[i];\n        select.appendChild(option);\n      }\n\n      var me = this;\n      select.onchange = function () {\n        me._update(this.value, path);\n      };\n\n      var label = this._makeLabel(path[path.length - 1], path);\n      this._makeItem(path, label, select);\n    }\n\n    /**\n     * make a range object for numeric options\n     * @param {Array.<number>} arr\n     * @param {number} value\n     * @param {array} path    | where to look for the actual option\n     * @private\n     */\n\n  }, {\n    key: '_makeRange',\n    value: function _makeRange(arr, value, path) {\n      var defaultValue = arr[0];\n      var min = arr[1];\n      var max = arr[2];\n      var step = arr[3];\n      var range = document.createElement('input');\n      range.className = 'vis-configuration vis-config-range';\n      try {\n        range.type = 'range'; // not supported on IE9\n        range.min = min;\n        range.max = max;\n      } catch (err) {}\n      // TODO: Add some error handling and remove this lint exception\n      // eslint-disable-line no-empty\n      range.step = step;\n\n      // set up the popup settings in case they are needed.\n      var popupString = '';\n      var popupValue = 0;\n\n      if (value !== undefined) {\n        var factor = 1.2;\n        if (value < 0 && value * factor < min) {\n          range.min = Math.ceil(value * factor);\n          popupValue = range.min;\n          popupString = 'range increased';\n        } else if (value / factor < min) {\n          range.min = Math.ceil(value / factor);\n          popupValue = range.min;\n          popupString = 'range increased';\n        }\n        if (value * factor > max && max !== 1) {\n          range.max = Math.ceil(value * factor);\n          popupValue = range.max;\n          popupString = 'range increased';\n        }\n        range.value = value;\n      } else {\n        range.value = defaultValue;\n      }\n\n      var input = document.createElement('input');\n      input.className = 'vis-configuration vis-config-rangeinput';\n      input.value = range.value;\n\n      var me = this;\n      range.onchange = function () {\n        input.value = this.value;\n        me._update(Number(this.value), path);\n      };\n      range.oninput = function () {\n        input.value = this.value;\n      };\n\n      var label = this._makeLabel(path[path.length - 1], path);\n      var itemIndex = this._makeItem(path, label, range, input);\n\n      // if a popup is needed AND it has not been shown for this value, show it.\n      if (popupString !== '' && this.popupHistory[itemIndex] !== popupValue) {\n        this.popupHistory[itemIndex] = popupValue;\n        this._setupPopup(popupString, itemIndex);\n      }\n    }\n\n    /**\n     * make a button object\n     * @private\n     */\n\n  }, {\n    key: '_makeButton',\n    value: function _makeButton() {\n      var _this = this;\n\n      if (this.options.showButton === true) {\n        var generateButton = document.createElement('div');\n        generateButton.className = 'vis-configuration vis-config-button';\n        generateButton.innerHTML = 'generate options';\n        generateButton.onclick = function () {\n          _this._printOptions();\n        };\n        generateButton.onmouseover = function () {\n          generateButton.className = 'vis-configuration vis-config-button hover';\n        };\n        generateButton.onmouseout = function () {\n          generateButton.className = 'vis-configuration vis-config-button';\n        };\n\n        this.optionsContainer = document.createElement('div');\n        this.optionsContainer.className = 'vis-configuration vis-config-option-container';\n\n        this.domElements.push(this.optionsContainer);\n        this.domElements.push(generateButton);\n      }\n    }\n\n    /**\n     * prepare the popup\n     * @param {string} string\n     * @param {number} index\n     * @private\n     */\n\n  }, {\n    key: '_setupPopup',\n    value: function _setupPopup(string, index) {\n      var _this2 = this;\n\n      if (this.initialized === true && this.allowCreation === true && this.popupCounter < this.popupLimit) {\n        var div = document.createElement('div');\n        div.id = 'vis-configuration-popup';\n        div.className = 'vis-configuration-popup';\n        div.innerHTML = string;\n        div.onclick = function () {\n          _this2._removePopup();\n        };\n        this.popupCounter += 1;\n        this.popupDiv = { html: div, index: index };\n      }\n    }\n\n    /**\n     * remove the popup from the dom\n     * @private\n     */\n\n  }, {\n    key: '_removePopup',\n    value: function _removePopup() {\n      if (this.popupDiv.html !== undefined) {\n        this.popupDiv.html.parentNode.removeChild(this.popupDiv.html);\n        clearTimeout(this.popupDiv.hideTimeout);\n        clearTimeout(this.popupDiv.deleteTimeout);\n        this.popupDiv = {};\n      }\n    }\n\n    /**\n     * Show the popup if it is needed.\n     * @private\n     */\n\n  }, {\n    key: '_showPopupIfNeeded',\n    value: function _showPopupIfNeeded() {\n      var _this3 = this;\n\n      if (this.popupDiv.html !== undefined) {\n        var correspondingElement = this.domElements[this.popupDiv.index];\n        var rect = correspondingElement.getBoundingClientRect();\n        this.popupDiv.html.style.left = rect.left + 'px';\n        this.popupDiv.html.style.top = rect.top - 30 + 'px'; // 30 is the height;\n        document.body.appendChild(this.popupDiv.html);\n        this.popupDiv.hideTimeout = setTimeout(function () {\n          _this3.popupDiv.html.style.opacity = 0;\n        }, 1500);\n        this.popupDiv.deleteTimeout = setTimeout(function () {\n          _this3._removePopup();\n        }, 1800);\n      }\n    }\n\n    /**\n     * make a checkbox for boolean options.\n     * @param {number} defaultValue\n     * @param {number} value\n     * @param {array} path    | where to look for the actual option\n     * @private\n     */\n\n  }, {\n    key: '_makeCheckbox',\n    value: function _makeCheckbox(defaultValue, value, path) {\n      var checkbox = document.createElement('input');\n      checkbox.type = 'checkbox';\n      checkbox.className = 'vis-configuration vis-config-checkbox';\n      checkbox.checked = defaultValue;\n      if (value !== undefined) {\n        checkbox.checked = value;\n        if (value !== defaultValue) {\n          if ((typeof defaultValue === 'undefined' ? 'undefined' : (0, _typeof3['default'])(defaultValue)) === 'object') {\n            if (value !== defaultValue.enabled) {\n              this.changedOptions.push({ path: path, value: value });\n            }\n          } else {\n            this.changedOptions.push({ path: path, value: value });\n          }\n        }\n      }\n\n      var me = this;\n      checkbox.onchange = function () {\n        me._update(this.checked, path);\n      };\n\n      var label = this._makeLabel(path[path.length - 1], path);\n      this._makeItem(path, label, checkbox);\n    }\n\n    /**\n     * make a text input field for string options.\n     * @param {number} defaultValue\n     * @param {number} value\n     * @param {array} path    | where to look for the actual option\n     * @private\n     */\n\n  }, {\n    key: '_makeTextInput',\n    value: function _makeTextInput(defaultValue, value, path) {\n      var checkbox = document.createElement('input');\n      checkbox.type = 'text';\n      checkbox.className = 'vis-configuration vis-config-text';\n      checkbox.value = value;\n      if (value !== defaultValue) {\n        this.changedOptions.push({ path: path, value: value });\n      }\n\n      var me = this;\n      checkbox.onchange = function () {\n        me._update(this.value, path);\n      };\n\n      var label = this._makeLabel(path[path.length - 1], path);\n      this._makeItem(path, label, checkbox);\n    }\n\n    /**\n     * make a color field with a color picker for color fields\n     * @param {Array.<number>} arr\n     * @param {number} value\n     * @param {array} path    | where to look for the actual option\n     * @private\n     */\n\n  }, {\n    key: '_makeColorField',\n    value: function _makeColorField(arr, value, path) {\n      var _this4 = this;\n\n      var defaultColor = arr[1];\n      var div = document.createElement('div');\n      value = value === undefined ? defaultColor : value;\n\n      if (value !== 'none') {\n        div.className = 'vis-configuration vis-config-colorBlock';\n        div.style.backgroundColor = value;\n      } else {\n        div.className = 'vis-configuration vis-config-colorBlock none';\n      }\n\n      value = value === undefined ? defaultColor : value;\n      div.onclick = function () {\n        _this4._showColorPicker(value, div, path);\n      };\n\n      var label = this._makeLabel(path[path.length - 1], path);\n      this._makeItem(path, label, div);\n    }\n\n    /**\n     * used by the color buttons to call the color picker.\n     * @param {number} value\n     * @param {HTMLElement} div\n     * @param {array} path    | where to look for the actual option\n     * @private\n     */\n\n  }, {\n    key: '_showColorPicker',\n    value: function _showColorPicker(value, div, path) {\n      var _this5 = this;\n\n      // clear the callback from this div\n      div.onclick = function () {};\n\n      this.colorPicker.insertTo(div);\n      this.colorPicker.show();\n\n      this.colorPicker.setColor(value);\n      this.colorPicker.setUpdateCallback(function (color) {\n        var colorString = 'rgba(' + color.r + ',' + color.g + ',' + color.b + ',' + color.a + ')';\n        div.style.backgroundColor = colorString;\n        _this5._update(colorString, path);\n      });\n\n      // on close of the colorpicker, restore the callback.\n      this.colorPicker.setCloseCallback(function () {\n        div.onclick = function () {\n          _this5._showColorPicker(value, div, path);\n        };\n      });\n    }\n\n    /**\n     * parse an object and draw the correct items\n     * @param {Object} obj\n     * @param {array} [path=[]]    | where to look for the actual option\n     * @param {boolean} [checkOnly=false]\n     * @returns {boolean}\n     * @private\n     */\n\n  }, {\n    key: '_handleObject',\n    value: function _handleObject(obj) {\n      var path = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n      var checkOnly = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n      var show = false;\n      var filter = this.options.filter;\n      var visibleInSet = false;\n      for (var subObj in obj) {\n        if (obj.hasOwnProperty(subObj)) {\n          show = true;\n          var item = obj[subObj];\n          var newPath = util.copyAndExtendArray(path, subObj);\n          if (typeof filter === 'function') {\n            show = filter(subObj, path);\n\n            // if needed we must go deeper into the object.\n            if (show === false) {\n              if (!(item instanceof Array) && typeof item !== 'string' && typeof item !== 'boolean' && item instanceof Object) {\n                this.allowCreation = false;\n                show = this._handleObject(item, newPath, true);\n                this.allowCreation = checkOnly === false;\n              }\n            }\n          }\n\n          if (show !== false) {\n            visibleInSet = true;\n            var value = this._getValue(newPath);\n\n            if (item instanceof Array) {\n              this._handleArray(item, value, newPath);\n            } else if (typeof item === 'string') {\n              this._makeTextInput(item, value, newPath);\n            } else if (typeof item === 'boolean') {\n              this._makeCheckbox(item, value, newPath);\n            } else if (item instanceof Object) {\n              // collapse the physics options that are not enabled\n              var draw = true;\n              if (path.indexOf('physics') !== -1) {\n                if (this.moduleOptions.physics.solver !== subObj) {\n                  draw = false;\n                }\n              }\n\n              if (draw === true) {\n                // initially collapse options with an disabled enabled option.\n                if (item.enabled !== undefined) {\n                  var enabledPath = util.copyAndExtendArray(newPath, 'enabled');\n                  var enabledValue = this._getValue(enabledPath);\n                  if (enabledValue === true) {\n                    var label = this._makeLabel(subObj, newPath, true);\n                    this._makeItem(newPath, label);\n                    visibleInSet = this._handleObject(item, newPath) || visibleInSet;\n                  } else {\n                    this._makeCheckbox(item, enabledValue, newPath);\n                  }\n                } else {\n                  var _label = this._makeLabel(subObj, newPath, true);\n                  this._makeItem(newPath, _label);\n                  visibleInSet = this._handleObject(item, newPath) || visibleInSet;\n                }\n              }\n            } else {\n              console.error('dont know how to handle', item, subObj, newPath);\n            }\n          }\n        }\n      }\n      return visibleInSet;\n    }\n\n    /**\n     * handle the array type of option\n     * @param {Array.<number>} arr\n     * @param {number} value\n     * @param {array} path    | where to look for the actual option\n     * @private\n     */\n\n  }, {\n    key: '_handleArray',\n    value: function _handleArray(arr, value, path) {\n      if (typeof arr[0] === 'string' && arr[0] === 'color') {\n        this._makeColorField(arr, value, path);\n        if (arr[1] !== value) {\n          this.changedOptions.push({ path: path, value: value });\n        }\n      } else if (typeof arr[0] === 'string') {\n        this._makeDropdown(arr, value, path);\n        if (arr[0] !== value) {\n          this.changedOptions.push({ path: path, value: value });\n        }\n      } else if (typeof arr[0] === 'number') {\n        this._makeRange(arr, value, path);\n        if (arr[0] !== value) {\n          this.changedOptions.push({ path: path, value: Number(value) });\n        }\n      }\n    }\n\n    /**\n     * called to update the network with the new settings.\n     * @param {number} value\n     * @param {array} path    | where to look for the actual option\n     * @private\n     */\n\n  }, {\n    key: '_update',\n    value: function _update(value, path) {\n      var options = this._constructOptions(value, path);\n\n      if (this.parent.body && this.parent.body.emitter && this.parent.body.emitter.emit) {\n        this.parent.body.emitter.emit('configChange', options);\n      }\n      this.initialized = true;\n      this.parent.setOptions(options);\n    }\n\n    /**\n     *\n     * @param {string|Boolean} value\n     * @param {Array.<string>} path\n     * @param {{}} optionsObj\n     * @returns {{}}\n     * @private\n     */\n\n  }, {\n    key: '_constructOptions',\n    value: function _constructOptions(value, path) {\n      var optionsObj = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      var pointer = optionsObj;\n\n      // when dropdown boxes can be string or boolean, we typecast it into correct types\n      value = value === 'true' ? true : value;\n      value = value === 'false' ? false : value;\n\n      for (var i = 0; i < path.length; i++) {\n        if (path[i] !== 'global') {\n          if (pointer[path[i]] === undefined) {\n            pointer[path[i]] = {};\n          }\n          if (i !== path.length - 1) {\n            pointer = pointer[path[i]];\n          } else {\n            pointer[path[i]] = value;\n          }\n        }\n      }\n      return optionsObj;\n    }\n\n    /**\n     * @private\n     */\n\n  }, {\n    key: '_printOptions',\n    value: function _printOptions() {\n      var options = this.getOptions();\n      this.optionsContainer.innerHTML = '<pre>var options = ' + (0, _stringify2['default'])(options, null, 2) + '</pre>';\n    }\n\n    /**\n     *\n     * @returns {{}} options\n     */\n\n  }, {\n    key: 'getOptions',\n    value: function getOptions() {\n      var options = {};\n      for (var i = 0; i < this.changedOptions.length; i++) {\n        this._constructOptions(this.changedOptions[i].value, this.changedOptions[i].path, options);\n      }\n      return options;\n    }\n  }]);\n  return Configurator;\n}();\n\nexports['default'] = Configurator;\n\n/***/ }),\n/* 192 */\n/***/ (function(module, exports, __nested_webpack_require_1239979__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _stringify = __nested_webpack_require_1239979__(23);\n\nvar _stringify2 = _interopRequireDefault(_stringify);\n\nvar _classCallCheck2 = __nested_webpack_require_1239979__(0);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __nested_webpack_require_1239979__(1);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar Hammer = __nested_webpack_require_1239979__(24);\nvar hammerUtil = __nested_webpack_require_1239979__(36);\nvar util = __nested_webpack_require_1239979__(2);\n\nvar htmlColors = {\n  black: '#000000',\n  navy: '#000080',\n  darkblue: '#00008B',\n  mediumblue: '#0000CD',\n  blue: '#0000FF',\n  darkgreen: '#006400',\n  green: '#008000',\n  teal: '#008080',\n  darkcyan: '#008B8B',\n  deepskyblue: '#00BFFF',\n  darkturquoise: '#00CED1',\n  mediumspringgreen: '#00FA9A',\n  lime: '#00FF00',\n  springgreen: '#00FF7F',\n  aqua: '#00FFFF',\n  cyan: '#00FFFF',\n  midnightblue: '#191970',\n  dodgerblue: '#1E90FF',\n  lightseagreen: '#20B2AA',\n  forestgreen: '#228B22',\n  seagreen: '#2E8B57',\n  darkslategray: '#2F4F4F',\n  limegreen: '#32CD32',\n  mediumseagreen: '#3CB371',\n  turquoise: '#40E0D0',\n  royalblue: '#4169E1',\n  steelblue: '#4682B4',\n  darkslateblue: '#483D8B',\n  mediumturquoise: '#48D1CC',\n  indigo: '#4B0082',\n  darkolivegreen: '#556B2F',\n  cadetblue: '#5F9EA0',\n  cornflowerblue: '#6495ED',\n  mediumaquamarine: '#66CDAA',\n  dimgray: '#696969',\n  slateblue: '#6A5ACD',\n  olivedrab: '#6B8E23',\n  slategray: '#708090',\n  lightslategray: '#778899',\n  mediumslateblue: '#7B68EE',\n  lawngreen: '#7CFC00',\n  chartreuse: '#7FFF00',\n  aquamarine: '#7FFFD4',\n  maroon: '#800000',\n  purple: '#800080',\n  olive: '#808000',\n  gray: '#808080',\n  skyblue: '#87CEEB',\n  lightskyblue: '#87CEFA',\n  blueviolet: '#8A2BE2',\n  darkred: '#8B0000',\n  darkmagenta: '#8B008B',\n  saddlebrown: '#8B4513',\n  darkseagreen: '#8FBC8F',\n  lightgreen: '#90EE90',\n  mediumpurple: '#9370D8',\n  darkviolet: '#9400D3',\n  palegreen: '#98FB98',\n  darkorchid: '#9932CC',\n  yellowgreen: '#9ACD32',\n  sienna: '#A0522D',\n  brown: '#A52A2A',\n  darkgray: '#A9A9A9',\n  lightblue: '#ADD8E6',\n  greenyellow: '#ADFF2F',\n  paleturquoise: '#AFEEEE',\n  lightsteelblue: '#B0C4DE',\n  powderblue: '#B0E0E6',\n  firebrick: '#B22222',\n  darkgoldenrod: '#B8860B',\n  mediumorchid: '#BA55D3',\n  rosybrown: '#BC8F8F',\n  darkkhaki: '#BDB76B',\n  silver: '#C0C0C0',\n  mediumvioletred: '#C71585',\n  indianred: '#CD5C5C',\n  peru: '#CD853F',\n  chocolate: '#D2691E',\n  tan: '#D2B48C',\n  lightgrey: '#D3D3D3',\n  palevioletred: '#D87093',\n  thistle: '#D8BFD8',\n  orchid: '#DA70D6',\n  goldenrod: '#DAA520',\n  crimson: '#DC143C',\n  gainsboro: '#DCDCDC',\n  plum: '#DDA0DD',\n  burlywood: '#DEB887',\n  lightcyan: '#E0FFFF',\n  lavender: '#E6E6FA',\n  darksalmon: '#E9967A',\n  violet: '#EE82EE',\n  palegoldenrod: '#EEE8AA',\n  lightcoral: '#F08080',\n  khaki: '#F0E68C',\n  aliceblue: '#F0F8FF',\n  honeydew: '#F0FFF0',\n  azure: '#F0FFFF',\n  sandybrown: '#F4A460',\n  wheat: '#F5DEB3',\n  beige: '#F5F5DC',\n  whitesmoke: '#F5F5F5',\n  mintcream: '#F5FFFA',\n  ghostwhite: '#F8F8FF',\n  salmon: '#FA8072',\n  antiquewhite: '#FAEBD7',\n  linen: '#FAF0E6',\n  lightgoldenrodyellow: '#FAFAD2',\n  oldlace: '#FDF5E6',\n  red: '#FF0000',\n  fuchsia: '#FF00FF',\n  magenta: '#FF00FF',\n  deeppink: '#FF1493',\n  orangered: '#FF4500',\n  tomato: '#FF6347',\n  hotpink: '#FF69B4',\n  coral: '#FF7F50',\n  darkorange: '#FF8C00',\n  lightsalmon: '#FFA07A',\n  orange: '#FFA500',\n  lightpink: '#FFB6C1',\n  pink: '#FFC0CB',\n  gold: '#FFD700',\n  peachpuff: '#FFDAB9',\n  navajowhite: '#FFDEAD',\n  moccasin: '#FFE4B5',\n  bisque: '#FFE4C4',\n  mistyrose: '#FFE4E1',\n  blanchedalmond: '#FFEBCD',\n  papayawhip: '#FFEFD5',\n  lavenderblush: '#FFF0F5',\n  seashell: '#FFF5EE',\n  cornsilk: '#FFF8DC',\n  lemonchiffon: '#FFFACD',\n  floralwhite: '#FFFAF0',\n  snow: '#FFFAFA',\n  yellow: '#FFFF00',\n  lightyellow: '#FFFFE0',\n  ivory: '#FFFFF0',\n  white: '#FFFFFF'\n\n  /**\n   * @param {number} [pixelRatio=1]\n   */\n};\nvar ColorPicker = function () {\n  /**\n   * @param {number} [pixelRatio=1]\n   */\n  function ColorPicker() {\n    var pixelRatio = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    (0, _classCallCheck3['default'])(this, ColorPicker);\n\n    this.pixelRatio = pixelRatio;\n    this.generated = false;\n    this.centerCoordinates = { x: 289 / 2, y: 289 / 2 };\n    this.r = 289 * 0.49;\n    this.color = { r: 255, g: 255, b: 255, a: 1.0 };\n    this.hueCircle = undefined;\n    this.initialColor = { r: 255, g: 255, b: 255, a: 1.0 };\n    this.previousColor = undefined;\n    this.applied = false;\n\n    // bound by\n    this.updateCallback = function () {};\n    this.closeCallback = function () {};\n\n    // create all DOM elements\n    this._create();\n  }\n\n  /**\n   * this inserts the colorPicker into a div from the DOM\n   * @param {Element} container\n   */\n\n\n  (0, _createClass3['default'])(ColorPicker, [{\n    key: 'insertTo',\n    value: function insertTo(container) {\n      if (this.hammer !== undefined) {\n        this.hammer.destroy();\n        this.hammer = undefined;\n      }\n      this.container = container;\n      this.container.appendChild(this.frame);\n      this._bindHammer();\n\n      this._setSize();\n    }\n\n    /**\n     * the callback is executed on apply and save. Bind it to the application\n     * @param {function} callback\n     */\n\n  }, {\n    key: 'setUpdateCallback',\n    value: function setUpdateCallback(callback) {\n      if (typeof callback === 'function') {\n        this.updateCallback = callback;\n      } else {\n        throw new Error('Function attempted to set as colorPicker update callback is not a function.');\n      }\n    }\n\n    /**\n     * the callback is executed on apply and save. Bind it to the application\n     * @param {function} callback\n     */\n\n  }, {\n    key: 'setCloseCallback',\n    value: function setCloseCallback(callback) {\n      if (typeof callback === 'function') {\n        this.closeCallback = callback;\n      } else {\n        throw new Error('Function attempted to set as colorPicker closing callback is not a function.');\n      }\n    }\n\n    /**\n     *\n     * @param {string} color\n     * @returns {String}\n     * @private\n     */\n\n  }, {\n    key: '_isColorString',\n    value: function _isColorString(color) {\n      if (typeof color === 'string') {\n        return htmlColors[color];\n      }\n    }\n\n    /**\n     * Set the color of the colorPicker\n     * Supported formats:\n     * 'red'                   --> HTML color string\n     * '#ffffff'               --> hex string\n     * 'rgb(255,255,255)'      --> rgb string\n     * 'rgba(255,255,255,1.0)' --> rgba string\n     * {r:255,g:255,b:255}     --> rgb object\n     * {r:255,g:255,b:255,a:1.0} --> rgba object\n     * @param {string|Object} color\n     * @param {boolean} [setInitial=true]\n     */\n\n  }, {\n    key: 'setColor',\n    value: function setColor(color) {\n      var setInitial = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n      if (color === 'none') {\n        return;\n      }\n\n      var rgba = void 0;\n\n      // if a html color shorthand is used, convert to hex\n      var htmlColor = this._isColorString(color);\n      if (htmlColor !== undefined) {\n        color = htmlColor;\n      }\n\n      // check format\n      if (util.isString(color) === true) {\n        if (util.isValidRGB(color) === true) {\n          var rgbaArray = color.substr(4).substr(0, color.length - 5).split(',');\n          rgba = { r: rgbaArray[0], g: rgbaArray[1], b: rgbaArray[2], a: 1.0 };\n        } else if (util.isValidRGBA(color) === true) {\n          var _rgbaArray = color.substr(5).substr(0, color.length - 6).split(',');\n          rgba = {\n            r: _rgbaArray[0],\n            g: _rgbaArray[1],\n            b: _rgbaArray[2],\n            a: _rgbaArray[3]\n          };\n        } else if (util.isValidHex(color) === true) {\n          var rgbObj = util.hexToRGB(color);\n          rgba = { r: rgbObj.r, g: rgbObj.g, b: rgbObj.b, a: 1.0 };\n        }\n      } else {\n        if (color instanceof Object) {\n          if (color.r !== undefined && color.g !== undefined && color.b !== undefined) {\n            var alpha = color.a !== undefined ? color.a : '1.0';\n            rgba = { r: color.r, g: color.g, b: color.b, a: alpha };\n          }\n        }\n      }\n\n      // set color\n      if (rgba === undefined) {\n        throw new Error('Unknown color passed to the colorPicker. Supported are strings: rgb, hex, rgba. Object: rgb ({r:r,g:g,b:b,[a:a]}). Supplied: ' + (0, _stringify2['default'])(color));\n      } else {\n        this._setColor(rgba, setInitial);\n      }\n    }\n\n    /**\n     * this shows the color picker.\n     * The hue circle is constructed once and stored.\n     */\n\n  }, {\n    key: 'show',\n    value: function show() {\n      if (this.closeCallback !== undefined) {\n        this.closeCallback();\n        this.closeCallback = undefined;\n      }\n\n      this.applied = false;\n      this.frame.style.display = 'block';\n      this._generateHueCircle();\n    }\n\n    // ------------------------------------------ PRIVATE ----------------------------- //\n\n    /**\n     * Hide the picker. Is called by the cancel button.\n     * Optional boolean to store the previous color for easy access later on.\n     * @param {boolean} [storePrevious=true]\n     * @private\n     */\n\n  }, {\n    key: '_hide',\n    value: function _hide() {\n      var _this = this;\n\n      var storePrevious = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n\n      // store the previous color for next time;\n      if (storePrevious === true) {\n        this.previousColor = util.extend({}, this.color);\n      }\n\n      if (this.applied === true) {\n        this.updateCallback(this.initialColor);\n      }\n\n      this.frame.style.display = 'none';\n\n      // call the closing callback, restoring the onclick method.\n      // this is in a setTimeout because it will trigger the show again before the click is done.\n      setTimeout(function () {\n        if (_this.closeCallback !== undefined) {\n          _this.closeCallback();\n          _this.closeCallback = undefined;\n        }\n      }, 0);\n    }\n\n    /**\n     * bound to the save button. Saves and hides.\n     * @private\n     */\n\n  }, {\n    key: '_save',\n    value: function _save() {\n      this.updateCallback(this.color);\n      this.applied = false;\n      this._hide();\n    }\n\n    /**\n     * Bound to apply button. Saves but does not close. Is undone by the cancel button.\n     * @private\n     */\n\n  }, {\n    key: '_apply',\n    value: function _apply() {\n      this.applied = true;\n      this.updateCallback(this.color);\n      this._updatePicker(this.color);\n    }\n\n    /**\n     * load the color from the previous session.\n     * @private\n     */\n\n  }, {\n    key: '_loadLast',\n    value: function _loadLast() {\n      if (this.previousColor !== undefined) {\n        this.setColor(this.previousColor, false);\n      } else {\n        alert('There is no last color to load...');\n      }\n    }\n\n    /**\n     * set the color, place the picker\n     * @param {Object} rgba\n     * @param {boolean} [setInitial=true]\n     * @private\n     */\n\n  }, {\n    key: '_setColor',\n    value: function _setColor(rgba) {\n      var setInitial = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n      // store the initial color\n      if (setInitial === true) {\n        this.initialColor = util.extend({}, rgba);\n      }\n\n      this.color = rgba;\n      var hsv = util.RGBToHSV(rgba.r, rgba.g, rgba.b);\n\n      var angleConvert = 2 * Math.PI;\n      var radius = this.r * hsv.s;\n      var x = this.centerCoordinates.x + radius * Math.sin(angleConvert * hsv.h);\n      var y = this.centerCoordinates.y + radius * Math.cos(angleConvert * hsv.h);\n\n      this.colorPickerSelector.style.left = x - 0.5 * this.colorPickerSelector.clientWidth + 'px';\n      this.colorPickerSelector.style.top = y - 0.5 * this.colorPickerSelector.clientHeight + 'px';\n\n      this._updatePicker(rgba);\n    }\n\n    /**\n     * bound to opacity control\n     * @param {number} value\n     * @private\n     */\n\n  }, {\n    key: '_setOpacity',\n    value: function _setOpacity(value) {\n      this.color.a = value / 100;\n      this._updatePicker(this.color);\n    }\n\n    /**\n     * bound to brightness control\n     * @param {number} value\n     * @private\n     */\n\n  }, {\n    key: '_setBrightness',\n    value: function _setBrightness(value) {\n      var hsv = util.RGBToHSV(this.color.r, this.color.g, this.color.b);\n      hsv.v = value / 100;\n      var rgba = util.HSVToRGB(hsv.h, hsv.s, hsv.v);\n      rgba['a'] = this.color.a;\n      this.color = rgba;\n      this._updatePicker();\n    }\n\n    /**\n     * update the color picker. A black circle overlays the hue circle to mimic the brightness decreasing.\n     * @param {Object} rgba\n     * @private\n     */\n\n  }, {\n    key: '_updatePicker',\n    value: function _updatePicker() {\n      var rgba = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.color;\n\n      var hsv = util.RGBToHSV(rgba.r, rgba.g, rgba.b);\n      var ctx = this.colorPickerCanvas.getContext('2d');\n      if (this.pixelRation === undefined) {\n        this.pixelRatio = (window.devicePixelRatio || 1) / (ctx.webkitBackingStorePixelRatio || ctx.mozBackingStorePixelRatio || ctx.msBackingStorePixelRatio || ctx.oBackingStorePixelRatio || ctx.backingStorePixelRatio || 1);\n      }\n      ctx.setTransform(this.pixelRatio, 0, 0, this.pixelRatio, 0, 0);\n\n      // clear the canvas\n      var w = this.colorPickerCanvas.clientWidth;\n      var h = this.colorPickerCanvas.clientHeight;\n      ctx.clearRect(0, 0, w, h);\n\n      ctx.putImageData(this.hueCircle, 0, 0);\n      ctx.fillStyle = 'rgba(0,0,0,' + (1 - hsv.v) + ')';\n      ctx.circle(this.centerCoordinates.x, this.centerCoordinates.y, this.r);\n      ctx.fill();\n\n      this.brightnessRange.value = 100 * hsv.v;\n      this.opacityRange.value = 100 * rgba.a;\n\n      this.initialColorDiv.style.backgroundColor = 'rgba(' + this.initialColor.r + ',' + this.initialColor.g + ',' + this.initialColor.b + ',' + this.initialColor.a + ')';\n      this.newColorDiv.style.backgroundColor = 'rgba(' + this.color.r + ',' + this.color.g + ',' + this.color.b + ',' + this.color.a + ')';\n    }\n\n    /**\n     * used by create to set the size of the canvas.\n     * @private\n     */\n\n  }, {\n    key: '_setSize',\n    value: function _setSize() {\n      this.colorPickerCanvas.style.width = '100%';\n      this.colorPickerCanvas.style.height = '100%';\n\n      this.colorPickerCanvas.width = 289 * this.pixelRatio;\n      this.colorPickerCanvas.height = 289 * this.pixelRatio;\n    }\n\n    /**\n     * create all dom elements\n     * TODO: cleanup, lots of similar dom elements\n     * @private\n     */\n\n  }, {\n    key: '_create',\n    value: function _create() {\n      this.frame = document.createElement('div');\n      this.frame.className = 'vis-color-picker';\n\n      this.colorPickerDiv = document.createElement('div');\n      this.colorPickerSelector = document.createElement('div');\n      this.colorPickerSelector.className = 'vis-selector';\n      this.colorPickerDiv.appendChild(this.colorPickerSelector);\n\n      this.colorPickerCanvas = document.createElement('canvas');\n      this.colorPickerDiv.appendChild(this.colorPickerCanvas);\n\n      if (!this.colorPickerCanvas.getContext) {\n        var noCanvas = document.createElement('DIV');\n        noCanvas.style.color = 'red';\n        noCanvas.style.fontWeight = 'bold';\n        noCanvas.style.padding = '10px';\n        noCanvas.innerHTML = 'Error: your browser does not support HTML canvas';\n        this.colorPickerCanvas.appendChild(noCanvas);\n      } else {\n        var ctx = this.colorPickerCanvas.getContext('2d');\n        this.pixelRatio = (window.devicePixelRatio || 1) / (ctx.webkitBackingStorePixelRatio || ctx.mozBackingStorePixelRatio || ctx.msBackingStorePixelRatio || ctx.oBackingStorePixelRatio || ctx.backingStorePixelRatio || 1);\n        this.colorPickerCanvas.getContext('2d').setTransform(this.pixelRatio, 0, 0, this.pixelRatio, 0, 0);\n      }\n\n      this.colorPickerDiv.className = 'vis-color';\n\n      this.opacityDiv = document.createElement('div');\n      this.opacityDiv.className = 'vis-opacity';\n\n      this.brightnessDiv = document.createElement('div');\n      this.brightnessDiv.className = 'vis-brightness';\n\n      this.arrowDiv = document.createElement('div');\n      this.arrowDiv.className = 'vis-arrow';\n\n      this.opacityRange = document.createElement('input');\n      try {\n        this.opacityRange.type = 'range'; // Not supported on IE9\n        this.opacityRange.min = '0';\n        this.opacityRange.max = '100';\n      } catch (err) {}\n      // TODO: Add some error handling and remove this lint exception\n      // eslint-disable-line no-empty\n      this.opacityRange.value = '100';\n      this.opacityRange.className = 'vis-range';\n\n      this.brightnessRange = document.createElement('input');\n      try {\n        this.brightnessRange.type = 'range'; // Not supported on IE9\n        this.brightnessRange.min = '0';\n        this.brightnessRange.max = '100';\n      } catch (err) {}\n      // TODO: Add some error handling and remove this lint exception\n      // eslint-disable-line no-empty\n      this.brightnessRange.value = '100';\n      this.brightnessRange.className = 'vis-range';\n\n      this.opacityDiv.appendChild(this.opacityRange);\n      this.brightnessDiv.appendChild(this.brightnessRange);\n\n      var me = this;\n      this.opacityRange.onchange = function () {\n        me._setOpacity(this.value);\n      };\n      this.opacityRange.oninput = function () {\n        me._setOpacity(this.value);\n      };\n      this.brightnessRange.onchange = function () {\n        me._setBrightness(this.value);\n      };\n      this.brightnessRange.oninput = function () {\n        me._setBrightness(this.value);\n      };\n\n      this.brightnessLabel = document.createElement('div');\n      this.brightnessLabel.className = 'vis-label vis-brightness';\n      this.brightnessLabel.innerHTML = 'brightness:';\n\n      this.opacityLabel = document.createElement('div');\n      this.opacityLabel.className = 'vis-label vis-opacity';\n      this.opacityLabel.innerHTML = 'opacity:';\n\n      this.newColorDiv = document.createElement('div');\n      this.newColorDiv.className = 'vis-new-color';\n      this.newColorDiv.innerHTML = 'new';\n\n      this.initialColorDiv = document.createElement('div');\n      this.initialColorDiv.className = 'vis-initial-color';\n      this.initialColorDiv.innerHTML = 'initial';\n\n      this.cancelButton = document.createElement('div');\n      this.cancelButton.className = 'vis-button vis-cancel';\n      this.cancelButton.innerHTML = 'cancel';\n      this.cancelButton.onclick = this._hide.bind(this, false);\n\n      this.applyButton = document.createElement('div');\n      this.applyButton.className = 'vis-button vis-apply';\n      this.applyButton.innerHTML = 'apply';\n      this.applyButton.onclick = this._apply.bind(this);\n\n      this.saveButton = document.createElement('div');\n      this.saveButton.className = 'vis-button vis-save';\n      this.saveButton.innerHTML = 'save';\n      this.saveButton.onclick = this._save.bind(this);\n\n      this.loadButton = document.createElement('div');\n      this.loadButton.className = 'vis-button vis-load';\n      this.loadButton.innerHTML = 'load last';\n      this.loadButton.onclick = this._loadLast.bind(this);\n\n      this.frame.appendChild(this.colorPickerDiv);\n      this.frame.appendChild(this.arrowDiv);\n      this.frame.appendChild(this.brightnessLabel);\n      this.frame.appendChild(this.brightnessDiv);\n      this.frame.appendChild(this.opacityLabel);\n      this.frame.appendChild(this.opacityDiv);\n      this.frame.appendChild(this.newColorDiv);\n      this.frame.appendChild(this.initialColorDiv);\n\n      this.frame.appendChild(this.cancelButton);\n      this.frame.appendChild(this.applyButton);\n      this.frame.appendChild(this.saveButton);\n      this.frame.appendChild(this.loadButton);\n    }\n\n    /**\n     * bind hammer to the color picker\n     * @private\n     */\n\n  }, {\n    key: '_bindHammer',\n    value: function _bindHammer() {\n      var _this2 = this;\n\n      this.drag = {};\n      this.pinch = {};\n      this.hammer = new Hammer(this.colorPickerCanvas);\n      this.hammer.get('pinch').set({ enable: true });\n\n      hammerUtil.onTouch(this.hammer, function (event) {\n        _this2._moveSelector(event);\n      });\n      this.hammer.on('tap', function (event) {\n        _this2._moveSelector(event);\n      });\n      this.hammer.on('panstart', function (event) {\n        _this2._moveSelector(event);\n      });\n      this.hammer.on('panmove', function (event) {\n        _this2._moveSelector(event);\n      });\n      this.hammer.on('panend', function (event) {\n        _this2._moveSelector(event);\n      });\n    }\n\n    /**\n     * generate the hue circle. This is relatively heavy (200ms) and is done only once on the first time it is shown.\n     * @private\n     */\n\n  }, {\n    key: '_generateHueCircle',\n    value: function _generateHueCircle() {\n      if (this.generated === false) {\n        var ctx = this.colorPickerCanvas.getContext('2d');\n        if (this.pixelRation === undefined) {\n          this.pixelRatio = (window.devicePixelRatio || 1) / (ctx.webkitBackingStorePixelRatio || ctx.mozBackingStorePixelRatio || ctx.msBackingStorePixelRatio || ctx.oBackingStorePixelRatio || ctx.backingStorePixelRatio || 1);\n        }\n        ctx.setTransform(this.pixelRatio, 0, 0, this.pixelRatio, 0, 0);\n\n        // clear the canvas\n        var w = this.colorPickerCanvas.clientWidth;\n        var h = this.colorPickerCanvas.clientHeight;\n        ctx.clearRect(0, 0, w, h);\n\n        // draw hue circle\n        var x = void 0,\n            y = void 0,\n            hue = void 0,\n            sat = void 0;\n        this.centerCoordinates = { x: w * 0.5, y: h * 0.5 };\n        this.r = 0.49 * w;\n        var angleConvert = 2 * Math.PI / 360;\n        var hfac = 1 / 360;\n        var sfac = 1 / this.r;\n        var rgb = void 0;\n        for (hue = 0; hue < 360; hue++) {\n          for (sat = 0; sat < this.r; sat++) {\n            x = this.centerCoordinates.x + sat * Math.sin(angleConvert * hue);\n            y = this.centerCoordinates.y + sat * Math.cos(angleConvert * hue);\n            rgb = util.HSVToRGB(hue * hfac, sat * sfac, 1);\n            ctx.fillStyle = 'rgb(' + rgb.r + ',' + rgb.g + ',' + rgb.b + ')';\n            ctx.fillRect(x - 0.5, y - 0.5, 2, 2);\n          }\n        }\n        ctx.strokeStyle = 'rgba(0,0,0,1)';\n        ctx.circle(this.centerCoordinates.x, this.centerCoordinates.y, this.r);\n        ctx.stroke();\n\n        this.hueCircle = ctx.getImageData(0, 0, w, h);\n      }\n      this.generated = true;\n    }\n\n    /**\n     * move the selector. This is called by hammer functions.\n     *\n     * @param {Event}  event   The event\n     * @private\n     */\n\n  }, {\n    key: '_moveSelector',\n    value: function _moveSelector(event) {\n      var rect = this.colorPickerDiv.getBoundingClientRect();\n      var left = event.center.x - rect.left;\n      var top = event.center.y - rect.top;\n\n      var centerY = 0.5 * this.colorPickerDiv.clientHeight;\n      var centerX = 0.5 * this.colorPickerDiv.clientWidth;\n\n      var x = left - centerX;\n      var y = top - centerY;\n\n      var angle = Math.atan2(x, y);\n      var radius = 0.98 * Math.min(Math.sqrt(x * x + y * y), centerX);\n\n      var newTop = Math.cos(angle) * radius + centerY;\n      var newLeft = Math.sin(angle) * radius + centerX;\n\n      this.colorPickerSelector.style.top = newTop - 0.5 * this.colorPickerSelector.clientHeight + 'px';\n      this.colorPickerSelector.style.left = newLeft - 0.5 * this.colorPickerSelector.clientWidth + 'px';\n\n      // set color\n      var h = angle / (2 * Math.PI);\n      h = h < 0 ? h + 1 : h;\n      var s = radius / this.r;\n      var hsv = util.RGBToHSV(this.color.r, this.color.g, this.color.b);\n      hsv.h = h;\n      hsv.s = s;\n      var rgba = util.HSVToRGB(hsv.h, hsv.s, hsv.v);\n      rgba['a'] = this.color.a;\n      this.color = rgba;\n\n      // update previews\n      this.initialColorDiv.style.backgroundColor = 'rgba(' + this.initialColor.r + ',' + this.initialColor.g + ',' + this.initialColor.b + ',' + this.initialColor.a + ')';\n      this.newColorDiv.style.backgroundColor = 'rgba(' + this.color.r + ',' + this.color.g + ',' + this.color.b + ',' + this.color.a + ')';\n    }\n  }]);\n  return ColorPicker;\n}();\n\nexports['default'] = ColorPicker;\n\n/***/ }),\n/* 193 */\n/***/ (function(module, exports, __nested_webpack_require_1264437__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _slicedToArray2 = __nested_webpack_require_1264437__(15);\n\nvar _slicedToArray3 = _interopRequireDefault(_slicedToArray2);\n\nvar _classCallCheck2 = __nested_webpack_require_1264437__(0);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __nested_webpack_require_1264437__(1);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _FloydWarshall = __nested_webpack_require_1264437__(194);\n\nvar _FloydWarshall2 = _interopRequireDefault(_FloydWarshall);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\n/**\n * KamadaKawai positions the nodes initially based on\n *\n * \"AN ALGORITHM FOR DRAWING GENERAL UNDIRECTED GRAPHS\"\n * -- Tomihisa KAMADA and Satoru KAWAI in 1989\n *\n * Possible optimizations in the distance calculation can be implemented.\n */\nvar KamadaKawai = function () {\n  /**\n   * @param {Object} body\n   * @param {number} edgeLength\n   * @param {number} edgeStrength\n   */\n  function KamadaKawai(body, edgeLength, edgeStrength) {\n    (0, _classCallCheck3['default'])(this, KamadaKawai);\n\n    this.body = body;\n    this.springLength = edgeLength;\n    this.springConstant = edgeStrength;\n    this.distanceSolver = new _FloydWarshall2['default']();\n  }\n\n  /**\n   * Not sure if needed but can be used to update the spring length and spring constant\n   * @param {Object} options\n   */\n\n\n  (0, _createClass3['default'])(KamadaKawai, [{\n    key: 'setOptions',\n    value: function setOptions(options) {\n      if (options) {\n        if (options.springLength) {\n          this.springLength = options.springLength;\n        }\n        if (options.springConstant) {\n          this.springConstant = options.springConstant;\n        }\n      }\n    }\n\n    /**\n     * Position the system\n     * @param {Array.<Node>} nodesArray\n     * @param {Array.<vis.Edge>} edgesArray\n     * @param {boolean} [ignoreClusters=false]\n     */\n\n  }, {\n    key: 'solve',\n    value: function solve(nodesArray, edgesArray) {\n      var ignoreClusters = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n      // get distance matrix\n      var D_matrix = this.distanceSolver.getDistances(this.body, nodesArray, edgesArray); // distance matrix\n\n      // get the L Matrix\n      this._createL_matrix(D_matrix);\n\n      // get the K Matrix\n      this._createK_matrix(D_matrix);\n\n      // initial E Matrix\n      this._createE_matrix();\n\n      // calculate positions\n      var threshold = 0.01;\n      var innerThreshold = 1;\n      var iterations = 0;\n      var maxIterations = Math.max(1000, Math.min(10 * this.body.nodeIndices.length, 6000));\n      var maxInnerIterations = 5;\n\n      var maxEnergy = 1e9;\n      var highE_nodeId = 0,\n          dE_dx = 0,\n          dE_dy = 0,\n          delta_m = 0,\n          subIterations = 0;\n\n      while (maxEnergy > threshold && iterations < maxIterations) {\n        iterations += 1;\n        var _getHighestEnergyNode2 = this._getHighestEnergyNode(ignoreClusters);\n\n        var _getHighestEnergyNode3 = (0, _slicedToArray3['default'])(_getHighestEnergyNode2, 4);\n\n        highE_nodeId = _getHighestEnergyNode3[0];\n        maxEnergy = _getHighestEnergyNode3[1];\n        dE_dx = _getHighestEnergyNode3[2];\n        dE_dy = _getHighestEnergyNode3[3];\n\n        delta_m = maxEnergy;\n        subIterations = 0;\n        while (delta_m > innerThreshold && subIterations < maxInnerIterations) {\n          subIterations += 1;\n          this._moveNode(highE_nodeId, dE_dx, dE_dy);\n          var _getEnergy2 = this._getEnergy(highE_nodeId);\n\n          var _getEnergy3 = (0, _slicedToArray3['default'])(_getEnergy2, 3);\n\n          delta_m = _getEnergy3[0];\n          dE_dx = _getEnergy3[1];\n          dE_dy = _getEnergy3[2];\n        }\n      }\n    }\n\n    /**\n     * get the node with the highest energy\n     * @param {boolean} ignoreClusters\n     * @returns {number[]}\n     * @private\n     */\n\n  }, {\n    key: '_getHighestEnergyNode',\n    value: function _getHighestEnergyNode(ignoreClusters) {\n      var nodesArray = this.body.nodeIndices;\n      var nodes = this.body.nodes;\n      var maxEnergy = 0;\n      var maxEnergyNodeId = nodesArray[0];\n      var dE_dx_max = 0,\n          dE_dy_max = 0;\n\n      for (var nodeIdx = 0; nodeIdx < nodesArray.length; nodeIdx++) {\n        var m = nodesArray[nodeIdx];\n        // by not evaluating nodes with predefined positions we should only move nodes that have no positions.\n        if (nodes[m].predefinedPosition === false || nodes[m].isCluster === true && ignoreClusters === true || nodes[m].options.fixed.x === true || nodes[m].options.fixed.y === true) {\n          var _getEnergy4 = this._getEnergy(m),\n              _getEnergy5 = (0, _slicedToArray3['default'])(_getEnergy4, 3),\n              delta_m = _getEnergy5[0],\n              dE_dx = _getEnergy5[1],\n              dE_dy = _getEnergy5[2];\n\n          if (maxEnergy < delta_m) {\n            maxEnergy = delta_m;\n            maxEnergyNodeId = m;\n            dE_dx_max = dE_dx;\n            dE_dy_max = dE_dy;\n          }\n        }\n      }\n\n      return [maxEnergyNodeId, maxEnergy, dE_dx_max, dE_dy_max];\n    }\n\n    /**\n     * calculate the energy of a single node\n     * @param {Node.id} m\n     * @returns {number[]}\n     * @private\n     */\n\n  }, {\n    key: '_getEnergy',\n    value: function _getEnergy(m) {\n      var _E_sums$m = (0, _slicedToArray3['default'])(this.E_sums[m], 2),\n          dE_dx = _E_sums$m[0],\n          dE_dy = _E_sums$m[1];\n\n      var delta_m = Math.sqrt(Math.pow(dE_dx, 2) + Math.pow(dE_dy, 2));\n      return [delta_m, dE_dx, dE_dy];\n    }\n\n    /**\n     * move the node based on it's energy\n     * the dx and dy are calculated from the linear system proposed by Kamada and Kawai\n     * @param {number} m\n     * @param {number} dE_dx\n     * @param {number} dE_dy\n     * @private\n     */\n\n  }, {\n    key: '_moveNode',\n    value: function _moveNode(m, dE_dx, dE_dy) {\n      var nodesArray = this.body.nodeIndices;\n      var nodes = this.body.nodes;\n      var d2E_dx2 = 0;\n      var d2E_dxdy = 0;\n      var d2E_dy2 = 0;\n\n      var x_m = nodes[m].x;\n      var y_m = nodes[m].y;\n      var km = this.K_matrix[m];\n      var lm = this.L_matrix[m];\n\n      for (var iIdx = 0; iIdx < nodesArray.length; iIdx++) {\n        var i = nodesArray[iIdx];\n        if (i !== m) {\n          var x_i = nodes[i].x;\n          var y_i = nodes[i].y;\n          var kmat = km[i];\n          var lmat = lm[i];\n          var denominator = 1.0 / Math.pow(Math.pow(x_m - x_i, 2) + Math.pow(y_m - y_i, 2), 1.5);\n          d2E_dx2 += kmat * (1 - lmat * Math.pow(y_m - y_i, 2) * denominator);\n          d2E_dxdy += kmat * (lmat * (x_m - x_i) * (y_m - y_i) * denominator);\n          d2E_dy2 += kmat * (1 - lmat * Math.pow(x_m - x_i, 2) * denominator);\n        }\n      }\n      // make the variable names easier to make the solving of the linear system easier to read\n      var A = d2E_dx2,\n          B = d2E_dxdy,\n          C = dE_dx,\n          D = d2E_dy2,\n          E = dE_dy;\n\n      // solve the linear system for dx and dy\n      var dy = (C / A + E / B) / (B / A - D / B);\n      var dx = -(B * dy + C) / A;\n\n      // move the node\n      nodes[m].x += dx;\n      nodes[m].y += dy;\n\n      // Recalculate E_matrix (should be incremental)\n      this._updateE_matrix(m);\n    }\n\n    /**\n     * Create the L matrix: edge length times shortest path\n     * @param {Object} D_matrix\n     * @private\n     */\n\n  }, {\n    key: '_createL_matrix',\n    value: function _createL_matrix(D_matrix) {\n      var nodesArray = this.body.nodeIndices;\n      var edgeLength = this.springLength;\n\n      this.L_matrix = [];\n      for (var i = 0; i < nodesArray.length; i++) {\n        this.L_matrix[nodesArray[i]] = {};\n        for (var j = 0; j < nodesArray.length; j++) {\n          this.L_matrix[nodesArray[i]][nodesArray[j]] = edgeLength * D_matrix[nodesArray[i]][nodesArray[j]];\n        }\n      }\n    }\n\n    /**\n     * Create the K matrix: spring constants times shortest path\n     * @param {Object} D_matrix\n     * @private\n     */\n\n  }, {\n    key: '_createK_matrix',\n    value: function _createK_matrix(D_matrix) {\n      var nodesArray = this.body.nodeIndices;\n      var edgeStrength = this.springConstant;\n\n      this.K_matrix = [];\n      for (var i = 0; i < nodesArray.length; i++) {\n        this.K_matrix[nodesArray[i]] = {};\n        for (var j = 0; j < nodesArray.length; j++) {\n          this.K_matrix[nodesArray[i]][nodesArray[j]] = edgeStrength * Math.pow(D_matrix[nodesArray[i]][nodesArray[j]], -2);\n        }\n      }\n    }\n\n    /**\n     *  Create matrix with all energies between nodes\n     *  @private\n     */\n\n  }, {\n    key: '_createE_matrix',\n    value: function _createE_matrix() {\n      var nodesArray = this.body.nodeIndices;\n      var nodes = this.body.nodes;\n      this.E_matrix = {};\n      this.E_sums = {};\n      for (var mIdx = 0; mIdx < nodesArray.length; mIdx++) {\n        this.E_matrix[nodesArray[mIdx]] = [];\n      }\n      for (var _mIdx = 0; _mIdx < nodesArray.length; _mIdx++) {\n        var m = nodesArray[_mIdx];\n        var x_m = nodes[m].x;\n        var y_m = nodes[m].y;\n        var dE_dx = 0;\n        var dE_dy = 0;\n        for (var iIdx = _mIdx; iIdx < nodesArray.length; iIdx++) {\n          var i = nodesArray[iIdx];\n          if (i !== m) {\n            var x_i = nodes[i].x;\n            var y_i = nodes[i].y;\n            var denominator = 1.0 / Math.sqrt(Math.pow(x_m - x_i, 2) + Math.pow(y_m - y_i, 2));\n            this.E_matrix[m][iIdx] = [this.K_matrix[m][i] * (x_m - x_i - this.L_matrix[m][i] * (x_m - x_i) * denominator), this.K_matrix[m][i] * (y_m - y_i - this.L_matrix[m][i] * (y_m - y_i) * denominator)];\n            this.E_matrix[i][_mIdx] = this.E_matrix[m][iIdx];\n            dE_dx += this.E_matrix[m][iIdx][0];\n            dE_dy += this.E_matrix[m][iIdx][1];\n          }\n        }\n        //Store sum\n        this.E_sums[m] = [dE_dx, dE_dy];\n      }\n    }\n\n    /**\n     * Update method, just doing single column (rows are auto-updated) (update all sums)\n     *\n     * @param {number} m\n     * @private\n     */\n\n  }, {\n    key: '_updateE_matrix',\n    value: function _updateE_matrix(m) {\n      var nodesArray = this.body.nodeIndices;\n      var nodes = this.body.nodes;\n      var colm = this.E_matrix[m];\n      var kcolm = this.K_matrix[m];\n      var lcolm = this.L_matrix[m];\n      var x_m = nodes[m].x;\n      var y_m = nodes[m].y;\n      var dE_dx = 0;\n      var dE_dy = 0;\n      for (var iIdx = 0; iIdx < nodesArray.length; iIdx++) {\n        var i = nodesArray[iIdx];\n        if (i !== m) {\n          //Keep old energy value for sum modification below\n          var cell = colm[iIdx];\n          var oldDx = cell[0];\n          var oldDy = cell[1];\n\n          //Calc new energy:\n          var x_i = nodes[i].x;\n          var y_i = nodes[i].y;\n          var denominator = 1.0 / Math.sqrt(Math.pow(x_m - x_i, 2) + Math.pow(y_m - y_i, 2));\n          var dx = kcolm[i] * (x_m - x_i - lcolm[i] * (x_m - x_i) * denominator);\n          var dy = kcolm[i] * (y_m - y_i - lcolm[i] * (y_m - y_i) * denominator);\n          colm[iIdx] = [dx, dy];\n          dE_dx += dx;\n          dE_dy += dy;\n\n          //add new energy to sum of each column\n          var sum = this.E_sums[i];\n          sum[0] += dx - oldDx;\n          sum[1] += dy - oldDy;\n        }\n      }\n      //Store sum at -1 index\n      this.E_sums[m] = [dE_dx, dE_dy];\n    }\n  }]);\n  return KamadaKawai;\n}(); // distance finding algorithm\n\n\nexports['default'] = KamadaKawai;\n\n/***/ }),\n/* 194 */\n/***/ (function(module, exports, __nested_webpack_require_1275973__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _classCallCheck2 = __nested_webpack_require_1275973__(0);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __nested_webpack_require_1275973__(1);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\n/**\n *  The Floyd–Warshall algorithm is an algorithm for finding shortest paths in\n *  a weighted graph with positive or negative edge weights (but with no negative\n *  cycles). - https://en.wikipedia.org/wiki/Floyd–Warshall_algorithm\n */\nvar FloydWarshall = function () {\n  /**\n   * @ignore\n   */\n  function FloydWarshall() {\n    (0, _classCallCheck3[\"default\"])(this, FloydWarshall);\n  }\n\n  /**\n   *\n   * @param {Object} body\n   * @param {Array.<Node>} nodesArray\n   * @param {Array.<Edge>} edgesArray\n   * @returns {{}}\n   */\n\n\n  (0, _createClass3[\"default\"])(FloydWarshall, [{\n    key: \"getDistances\",\n    value: function getDistances(body, nodesArray, edgesArray) {\n      var D_matrix = {};\n      var edges = body.edges;\n\n      // prepare matrix with large numbers\n      for (var i = 0; i < nodesArray.length; i++) {\n        var node = nodesArray[i];\n        var cell = {};\n        D_matrix[node] = cell;\n        for (var j = 0; j < nodesArray.length; j++) {\n          cell[nodesArray[j]] = i == j ? 0 : 1e9;\n        }\n      }\n\n      // put the weights for the edges in. This assumes unidirectionality.\n      for (var _i = 0; _i < edgesArray.length; _i++) {\n        var edge = edges[edgesArray[_i]];\n        // edge has to be connected if it counts to the distances. If it is connected to inner clusters it will crash so we also check if it is in the D_matrix\n        if (edge.connected === true && D_matrix[edge.fromId] !== undefined && D_matrix[edge.toId] !== undefined) {\n          D_matrix[edge.fromId][edge.toId] = 1;\n          D_matrix[edge.toId][edge.fromId] = 1;\n        }\n      }\n\n      var nodeCount = nodesArray.length;\n\n      // Adapted FloydWarshall based on unidirectionality to greatly reduce complexity.\n      for (var k = 0; k < nodeCount; k++) {\n        var knode = nodesArray[k];\n        var kcolm = D_matrix[knode];\n        for (var _i2 = 0; _i2 < nodeCount - 1; _i2++) {\n          var inode = nodesArray[_i2];\n          var icolm = D_matrix[inode];\n          for (var _j = _i2 + 1; _j < nodeCount; _j++) {\n            var jnode = nodesArray[_j];\n            var jcolm = D_matrix[jnode];\n\n            var val = Math.min(icolm[jnode], icolm[knode] + kcolm[jnode]);\n            icolm[jnode] = val;\n            jcolm[inode] = val;\n          }\n        }\n      }\n\n      return D_matrix;\n    }\n  }]);\n  return FloydWarshall;\n}();\n\nexports[\"default\"] = FloydWarshall;\n\n/***/ })\n/******/ ]);\n});\n//# sourceMappingURL=vis.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./.yarn/cache/visjs-network-npm-4.25.0-2e90efaeed-40bfcbbf2b.zip/node_modules/visjs-network/dist/vis.js\n");

/***/ })

}]);